namespace StockSharp.Samples.Strategies;

using System;
using System.Collections.Generic;

using StockSharp.Algo.Candles;
using StockSharp.Algo.Strategies;
using StockSharp.BusinessEntities;
using StockSharp.Messages;

/// <summary>
/// Builds a Renko candle stream from trade or bid ticks and mirrors the custom symbol generator from the original MQL expert.
/// The strategy does not trade â€“ it focuses on creating a Renko series that can be visualized and monitored in real time.
/// </summary>
public class RenkoChartStrategy : Strategy
{
	private readonly StrategyParam<DateTimeOffset> _startTime;
	private readonly StrategyParam<int> _brickSizeSteps;
	private readonly StrategyParam<bool> _useBidTicks;
	private readonly StrategyParam<string> _renkoPrefix;

	private DataType _renkoType;
	private decimal _boxSize;
	private decimal _lastBrickClose;
	private bool _hasBrick;
	private decimal _lastSourcePrice;
	private DateTimeOffset _lastSourceUpdate;

	/// <summary>
	/// Initializes a new instance of the <see cref="RenkoChartStrategy"/> class.
	/// </summary>
	public RenkoChartStrategy()
	{
		_startTime = Param(nameof(StartTime), new DateTimeOffset(2018, 8, 1, 9, 0, 0, TimeSpan.Zero))
			.SetDisplay("Start Time", "Initial time used to seed the Renko history", "General");

		_brickSizeSteps = Param(nameof(BrickSizeSteps), 5)
			.SetGreaterThanZero()
			.SetDisplay("Brick Size (steps)", "Renko brick size expressed in price steps", "Renko")
			.SetCanOptimize(true)
			.SetOptimize(1, 20, 1);

		_useBidTicks = Param(nameof(UseBidTicks), false)
			.SetDisplay("Use Bid Ticks", "Build Renko bricks from bid prices instead of last trades", "Renko");

		_renkoPrefix = Param(nameof(RenkoPrefix), "Renko-")
			.SetDisplay("Renko Prefix", "Prefix used when naming the generated Renko stream", "Visualization");
	}

	/// <summary>
	/// Gets or sets the initial time used to start building the Renko history.
	/// </summary>
	public DateTimeOffset StartTime
	{
		get => _startTime.Value;
		set => _startTime.Value = value;
	}

	/// <summary>
	/// Gets or sets the Renko brick size expressed in price steps of the underlying security.
	/// </summary>
	public int BrickSizeSteps
	{
		get => _brickSizeSteps.Value;
		set => _brickSizeSteps.Value = value;
	}

	/// <summary>
	/// Gets or sets a value indicating whether bid ticks should be used instead of trade ticks.
	/// </summary>
	public bool UseBidTicks
	{
		get => _useBidTicks.Value;
		set => _useBidTicks.Value = value;
	}

	/// <summary>
	/// Gets or sets the prefix for the virtual Renko symbol name.
	/// </summary>
	public string RenkoPrefix
	{
		get => _renkoPrefix.Value;
		set => _renkoPrefix.Value = value;
	}

	/// <summary>
	/// Gets the current Renko brick size in absolute price units.
	/// </summary>
	public decimal BrickSize => _boxSize;

	/// <inheritdoc />
	public override IEnumerable<(Security sec, DataType dt)> GetWorkingSecurities()
	{
		var step = Security.PriceStep ?? 1m;
		var boxSize = BrickSizeSteps * step;

		if (_renkoType == null || _boxSize != boxSize)
		{
			_boxSize = boxSize;
			_renkoType = DataType.Create(typeof(RenkoCandleMessage), new RenkoCandleArg
			{
				BuildFrom = RenkoBuildFrom.Points,
				BoxSize = _boxSize
			});
		}

		return [(Security, _renkoType)];
	}

	/// <inheritdoc />
	protected override void OnReseted()
	{
		base.OnReseted();

		_lastBrickClose = 0m;
		_hasBrick = false;
		_lastSourcePrice = 0m;
		_lastSourceUpdate = default;
	}

	/// <inheritdoc />
	protected override void OnStarted(DateTimeOffset time)
	{
		base.OnStarted(time);

		// Subscribe to Renko candles generated by StockSharp.
		var renkoSubscription = SubscribeCandles(_renkoType);
		renkoSubscription
			.Bind(ProcessCandle)
			.Start();

		// Subscribe to the chosen tick stream to monitor live price updates.
		if (UseBidTicks)
		{
			SubscribeLevel1()
				.Bind(ProcessLevel1)
				.Start();
		}
		else
		{
			SubscribeTrades()
				.Bind(ProcessTrade)
				.Start();
		}

		// Visualize the Renko stream if the chart is available.
		var area = CreateChartArea();
		if (area != null)
		{
			DrawCandles(area, renkoSubscription);
		}

		StartProtection();

		LogInfo($"{RenkoPrefix}{Security.Id} initialized with brick size {_boxSize} and start time {StartTime:O}.");
	}

	private void ProcessTrade(ExecutionMessage trade)
	{
		if (trade.TradePrice is not decimal price)
		return;

		_lastSourcePrice = price;
		_lastSourceUpdate = trade.ServerTime;
	}

	private void ProcessLevel1(Level1ChangeMessage level1)
	{
		if (level1.Changes.TryGetValue(Level1Fields.BestBidPrice, out var bid) && bid is decimal price)
		{
			_lastSourcePrice = price;
			_lastSourceUpdate = level1.ServerTime;
		}
	}

	private void ProcessCandle(ICandleMessage candle)
	{
		if (candle.State != CandleStates.Finished)
		{
			// Skip unfinished bricks to avoid duplicating the MQL logic that only updates the completed Renko series.
			return;
		}

		if (candle.OpenTime < StartTime)
		return;

		var previousClose = _hasBrick ? _lastBrickClose : candle.OpenPrice;
		
		var direction = candle.ClosePrice >= candle.OpenPrice ? "up" : "down";
		var priceSource = UseBidTicks ? "bid" : "trade";
		var tickInfo = _lastSourcePrice > 0m
		? $", latest {priceSource} tick {_lastSourcePrice} at {_lastSourceUpdate:O}"
		: string.Empty;
		
		// Log every completed brick so the operator can compare it with the original Renko custom symbol.
		LogInfo($"Renko brick formed {direction}: previous close {previousClose}, new close {candle.ClosePrice}, time {candle.CloseTime:O}{tickInfo}.");
		
		_lastBrickClose = candle.ClosePrice;
		_hasBrick = true;
	}
}
