namespace StockSharp.Samples.Strategies;

using System;
using System.Linq;
using System.Collections.Generic;

using Ecng.Common;
using Ecng.Collections;
using Ecng.Serialization;

using StockSharp.Algo.Indicators;
using StockSharp.Algo.Strategies;
using StockSharp.BusinessEntities;
using StockSharp.Messages;

/// <summary>
/// Strategy that mirrors the ChartPlusChart MQL helper by publishing account statistics alongside price data.
/// </summary>
public class ChartPlusChartStrategy : Strategy
{
	private readonly StrategyParam<DataType> _candleType;
	private readonly StrategyParam<bool> _logOnEveryUpdate;

	private decimal _lastClosePrice;
	private int _openOrdersCount;
	private decimal _accountValue;
	private decimal _lastTradeProfit;
	private decimal _lastKnownPnl;
	private DateTimeOffset? _lastSnapshotTime;

	/// <summary>
	/// Initializes a new instance of the strategy.
	/// </summary>
	public ChartPlusChartStrategy()
	{
		_candleType = Param(nameof(CandleType), TimeSpan.FromMinutes(1).TimeFrame())
			.SetDisplay("Candle Type", "Candles used to refresh statistics.", "General");

		_logOnEveryUpdate = Param(nameof(LogOnEveryUpdate), false)
			.SetDisplay("Log Snapshots", "Write diagnostics every time the snapshot updates.", "Diagnostics");
	}

	/// <summary>
	/// Candle type used to trigger statistic refresh.
	/// </summary>
	public DataType CandleType
	{
		get => _candleType.Value;
		set => _candleType.Value = value;
	}

	/// <summary>
	/// Enable verbose logging of each snapshot refresh.
	/// </summary>
	public bool LogOnEveryUpdate
	{
		get => _logOnEveryUpdate.Value;
		set => _logOnEveryUpdate.Value = value;
	}

	/// <summary>
	/// Latest closing price captured by the strategy.
	/// </summary>
	public decimal LastClosePrice => _lastClosePrice;

	/// <summary>
	/// Number of currently active orders.
	/// </summary>
	public int OpenOrdersCount => _openOrdersCount;

	/// <summary>
	/// Estimated account value taken from the connected portfolio.
	/// </summary>
	public decimal AccountValue => _accountValue;

	/// <summary>
	/// Profit generated by the most recent trade execution.
	/// </summary>
	public decimal LastTradeProfit => _lastTradeProfit;

	/// <summary>
	/// Timestamp of the last snapshot update.
	/// </summary>
	public DateTimeOffset? LastSnapshotTime => _lastSnapshotTime;

	/// <inheritdoc />
	public override IEnumerable<(Security sec, DataType dt)> GetWorkingSecurities()
	{
		yield return (Security, CandleType);
	}

	/// <inheritdoc />
	protected override void OnReseted()
	{
		base.OnReseted();

		_lastClosePrice = 0m;
		_openOrdersCount = 0;
		_accountValue = 0m;
		_lastTradeProfit = 0m;
		_lastKnownPnl = 0m;
		_lastSnapshotTime = null;
	}

	/// <inheritdoc />
	protected override void OnStarted(DateTimeOffset time)
	{
		base.OnStarted(time);

		_lastKnownPnl = PnL;

		var subscription = SubscribeCandles(CandleType);
		subscription
			.Bind(ProcessCandle)
			.Start();

		RefreshSnapshot(time, null);
	}

	private void ProcessCandle(ICandleMessage candle)
	{
		if (candle.State != CandleStates.Finished)
			return;

		RefreshSnapshot(candle.CloseTime, candle.ClosePrice);
	}

	/// <inheritdoc />
	protected override void OnOrderChanged(Order order)
	{
		base.OnOrderChanged(order);

		RefreshSnapshot(CurrentTime, null);
	}

	/// <inheritdoc />
	protected override void OnOwnTradeReceived(MyTrade trade)
	{
		base.OnOwnTradeReceived(trade);

		var currentPnl = PnL;
		_lastTradeProfit = currentPnl - _lastKnownPnl;
		_lastKnownPnl = currentPnl;

		RefreshSnapshot(trade.Trade.ServerTime, null);
	}

	private void RefreshSnapshot(DateTimeOffset time, decimal? closePrice)
	{
		if (closePrice.HasValue)
			_lastClosePrice = closePrice.Value;

		_openOrdersCount = ActiveOrders.Count;

		var portfolio = Portfolio;
		if (portfolio != null)
		{
			var currentValue = portfolio.CurrentValue;
			if (currentValue != 0m)
			{
				_accountValue = currentValue;
			}
			else if (portfolio.BeginValue != 0m)
			{
				_accountValue = portfolio.BeginValue;
			}
			else
			{
				_accountValue = currentValue;
			}
		}
		else
		{
			_accountValue = 0m;
		}

		_lastSnapshotTime = time;

		if (LogOnEveryUpdate)
		{
			LogInfo($"Snapshot {time:O}: close={_lastClosePrice:0.####}; orders={_openOrdersCount}; account={_accountValue:0.##}; last trade={_lastTradeProfit:0.##}; total pnl={PnL:0.##}.");
		}
	}
}
