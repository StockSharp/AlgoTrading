// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © eastgate3194

//@version=6
strategy('Dual Keltner Channels Strategy [Eastgate3194]', overlay = true, pyramiding = 5, default_qty_type = strategy.percent_of_equity, default_qty_value = 20, initial_capital = 10000, commission_value = 0.05)

//************************
// DEFAULT SETTING - Start
//************************
// test window
testWindowGroup = 'Test Window'
useTimeframe = input.bool(defval = false, title = 'Use timeframe', group = testWindowGroup)

defStartDate = timestamp('01 Jan 2025 00:00 +0000')
startDate = input.time(defStartDate, title = 'Start of trading', group = testWindowGroup)

defEndDate = timestamp('31 Dec 2100 00:00 +0000')
endDate = input.time(defEndDate, title = 'End of Trading', group = testWindowGroup)

window() => not useTimeframe ? true : time >= startDate and time <= endDate ? true : false // create function "within window of time"

tradeGroup = 'Trade'
riskCapital = input.int(defval = 10, title = 'Risk % of capital', minval = 1, group = tradeGroup)
slLength = input.int(defval = 5, title = 'No. of Candles', group = tradeGroup)
maxSlPercent = input.float(defval = 10, title = 'Maximum Stop Loss %', group = tradeGroup)
sltpRatio = input.float(defval = 1, title = 'SLTP Ratio', group = tradeGroup)

// Trade Advance Setting
tradeAdvanceGroup = 'Advance'
tradeDirection = input.string(defval = 'BOTH', title = 'Trade Direction', options = ['LONG', 'SHORT', 'BOTH'], group = tradeAdvanceGroup)

canLong = tradeDirection == 'LONG' or tradeDirection == 'BOTH'
canShort = tradeDirection == 'SHORT' or tradeDirection == 'BOTH'

//************************
// DEFAULT SETTING - End
//************************

//***************************************
// DUAL KELTNER CHANNLES SETTING - Start
//***************************************

keltnelGroup = 'Keltnel'
kcLength = input.int(defval = 50, title = 'Length', group = keltnelGroup)
kcInnerMult = input.float(defval = 2.75, title = 'Inner Multiplier', group = keltnelGroup)
kcOuterMult = input.float(defval = 3.75, title = 'Outter Multiplier', group = keltnelGroup)
// src = input(close, title="Source")
bandsStyle = input.string("Average True Range", options = ["Average True Range", "True Range", "Range"], title="Bands Style")
atrLength = input.int(defval = 10, title = 'ATR Length', group = keltnelGroup)


//***************************************
// DUAL KELTNER CHANNLES SETTING - End
//***************************************

// Check how many units can be purchased based on risk manage ment and stop loss
qty1 = strategy.equity * riskCapital / 100 / close

// check if cash is sufficient  to buy qty1  , if capital not available use the available capital only
qty1 := (qty1 * close >= strategy.equity ) ? (strategy.equity / close) : qty1

hasLongPosition = strategy.position_size > 0
hasShortPosition = strategy.position_size < 0


//***************************************
// MAIN LOGIC - START
//***************************************

// Stop Loss and Take Profit
var float slPrice = na
var float tpPrice = na
var string direction = na

// Stop Loss and Take Profit Lines
var line slLine = na
var line tpLine = na
var line tradeLine = na
var linefill slFill = na
var linefill tpFill = na
var label tradeLabel = na

emaVal = ta.ema(close, kcLength)
rangema = bandsStyle == 'True Range' ? ta.tr(true) : bandsStyle == 'Average True Range' ? ta.atr(atrLength) : ta.rma(high - low, atrLength)

innerUpper = emaVal + rangema * kcInnerMult
innerLower = emaVal - rangema * kcInnerMult
innerU = plot(innerUpper, color=color.orange, title="Inner Upper")
plot(emaVal, color=color.orange, title="Basis")
innerL = plot(innerLower, color=color.orange, title="Inner Lower")
fill(innerU, innerL, color=color.rgb(33, 150, 243, 95), title="Background")


outerUpper = emaVal + rangema * kcOuterMult
outerLower = emaVal - rangema * kcOuterMult
outerU = plot(outerUpper, color=#2962FF, title="Outer Upper")
outerL = plot(outerLower, color=#2962FF, title="Outer Lower")
fill(outerU, outerL, color=color.rgb(33, 150, 243, 95), title="Outer Background")

// Track crossover outerUpper or outerLower
var int longCrossCount = 0
var int shortCrossCount = 0

// display triangle variable
var bool displayTriangleUp = false
var bool displayTriangleDown = false

//***************************************
// MAIN LOGIC - END
//***************************************

crossUnderOuter = ta.crossunder(close, outerLower)
crossOverInner = ta.crossover(close, innerLower)
lowest = ta.lowest(slLength)

//********
// LONG
//********

if window() and canLong
    if not hasLongPosition
        if crossUnderOuter and longCrossCount == 0
            longCrossCount := 1
            displayTriangleUp := true

        if crossOverInner and longCrossCount == 1
            // calculate slPrice
            maxSl = close * (1 - (maxSlPercent / 100.0))
            slPrice := lowest < maxSl ? maxSl : lowest

            // calculate tpPrice
            diff = close - slPrice
            tpPrice := close + (diff * sltpRatio)

            strategy.entry(id = 'LE', comment = 'LE', direction = strategy.long, qty = qty1)
            longCrossCount := 0 // reset counter

            // Draw lines
            slLine := line.new(bar_index - 5, slPrice, bar_index + 20, slPrice, color=color.red, style=line.style_dashed)
            tpLine := line.new(bar_index - 5, tpPrice, bar_index + 20, tpPrice, color=color.green, style=line.style_dashed)
            tradeLine := line.new(bar_index - 5, close, bar_index + 20, close, color=color.blue, style=line.style_solid)

            // Fill areas
            slFill := linefill.new(tradeLine, slLine, color.new(color.red, 90))
            tpFill := linefill.new(tradeLine, tpLine, color.new(color.green, 90))

    if hasLongPosition
        // stop loss
        if close <= slPrice
            slPrice := na // reset
            tpPrice := na // reset
            profit = close - strategy.position_avg_price
            strategy.close(id = 'LE', comment = 'LE SL')

            // Add label for loss
            tradeLabel := label.new(bar_index, low, text="LOSS\n$" + str.tostring(profit, '#.##'), color=color.red, textcolor=color.white, style=label.style_label_up, size=size.small)

        // take profit
        if close >= tpPrice
            slPrice := na // reset
            tpPrice := na // reset
            profit = close - strategy.position_avg_price
            strategy.close(id = 'LE', comment = 'LE TP')

            // Add label for profit
            tradeLabel := label.new(bar_index, high, text="PROFIT\n$" + str.tostring(profit, '#.##'), color=color.green, textcolor=color.white, style=label.style_label_down, size=size.small)

//********
// SHORT
//********

crossOverOuter = ta.crossover(close, outerUpper)
crossUnderInner = ta.crossunder(close, innerUpper)
highest = ta.highest(slLength)

if window() and canShort
    if not hasShortPosition
        if crossOverOuter and shortCrossCount == 0
            shortCrossCount := 1
            displayTriangleDown := true

        if crossUnderInner and shortCrossCount == 1
            // calculate slPrice
            maxSl = close * (1 + (maxSlPercent / 100.0))
            slPrice := highest > maxSl ? maxSl : highest

            // calculate tpPrice
            diff = slPrice - close
            tpPrice := close - (diff * sltpRatio)

            strategy.entry(id = 'SE', comment = 'SE', direction = strategy.short, qty = qty1)
            shortCrossCount := 0 // reset counter

            // Draw lines
            slLine := line.new(bar_index - 5, slPrice, bar_index + 20, slPrice, color=color.red, style=line.style_dashed)
            tpLine := line.new(bar_index - 5, tpPrice, bar_index + 20, tpPrice, color=color.green, style=line.style_dashed)
            tradeLine := line.new(bar_index - 5, close, bar_index + 20, close, color=color.blue, style=line.style_solid)

            // Fill areas
            slFill := linefill.new(tradeLine, slLine, color.new(color.red, 90))
            tpFill := linefill.new(tradeLine, tpLine, color.new(color.green, 90))

    if hasShortPosition
        // stop loss
        if close >= slPrice
            slPrice := na // reset
            tpPrice := na // reset
            profit = strategy.position_avg_price - close
            strategy.close(id = 'SE', comment = 'SE SL')

            // Add label for loss
            tradeLabel := label.new(bar_index, high, text="LOSS\n$" + str.tostring(profit, '#.##'), color=color.red, textcolor=color.white, style=label.style_label_down, size=size.small)

        // take profit
        if close <= tpPrice
            slPrice := na // reset
            tpPrice := na // reset
            profit = strategy.position_avg_price - close
            strategy.close(id = 'SE', comment = 'SE TP')

            // Add label for profit
            tradeLabel := label.new(bar_index, low, text="PROFIT\n$" + str.tostring(profit, '#.##'), color=color.green, textcolor=color.white, style=label.style_label_up, size=size.small)


plotshape(series=displayTriangleUp, location=location.belowbar, color=color.new(color.green, 30), style=shape.triangleup, size=size.tiny)
plotshape(series=displayTriangleDown, location=location.abovebar, color=color.new(color.red, 30), style=shape.triangledown, size=size.tiny)

if displayTriangleUp
    displayTriangleUp := false
if displayTriangleDown
    displayTriangleDown := false