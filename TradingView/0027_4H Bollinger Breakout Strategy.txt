//@version=6
strategy(shorttitle = '4H Bollinger Breakout Strategy', title = '4H Bollinger Breakout Strategy', overlay = true, commission_type = strategy.commission.percent, commission_value = 0.1, slippage = 0, default_qty_type = strategy.percent_of_equity, default_qty_value = 100)
// To revert to long-only strategy:
// 1. Comment out 'Short Signal Logic', 'Short State Update', 'Short Price Labels', 'Short Strategy Execution', and 'Short Alerts' sections
// 2. Remove 'inShortPosition' from 'State Tracking'
// To revert to short-only strategy:
// 1. Comment out 'Long Signal Logic', 'Long State Update', 'Long Price Labels', 'Long Strategy Execution', and 'Long Alerts' sections
// 2. Remove 'inLongPosition' from 'State Tracking'
// To revert to indicator (long-only, short-only, or with both signals):
// 1. Replace 'strategy' with: indicator(shorttitle = 'BB Indicator', title = 'Demo GPT - Bollinger Bands Indicator', overlay = true)
// 2. Remove commission_type, commission_value, slippage, default_qty_type, default_qty_value
// 3. Comment out 'Strategy Execution' sections (long and/or short)

// Inputs
length = input.int(20, minval = 1, title = 'Length')
maType = input.string('SMA', 'Basis MA Type', options = ['SMA', 'EMA', 'SMMA (RMA)', 'WMA', 'VWMA'])
src = input(close, title = 'Source')
mult = input.float(1.8, minval = 0.001, maxval = 50, title = 'StdDev')
offset = input.int(0, 'Offset', minval = -500, maxval = 500)
useFilters = input.bool(true, title = 'Use False Signal Filters', group = 'Filters')
volLength = input.int(20, minval = 1, title = 'Volume MA Length', group = 'Filters')
trendLength = input.int(80, minval = 1, title = 'Trend MA Length', group = 'Filters')
rsiLength = input.int(14, minval = 1, title = 'RSI Length', group = 'Filters')
useLongSignals = input.bool(true, title = 'Use Long Signals', group = 'Signals')
useShortSignals = input.bool(true, title = 'Use Short Signals', group = 'Signals')

// Date Range Filter
startDate = input.time(title = 'Start Date', defval = timestamp('2024-01-01 00:00:00'), confirm = false, group = 'Date Range')
endDate = input.time(title = 'End Date', defval = timestamp('2025-06-22 12:14:00'), confirm = false, group = 'Date Range')
timeAllowed = time >= startDate and time <= endDate

// MA Type Selector
ma(source, length, _type) =>
    switch _type
        'SMA' => ta.sma(source, length)
        'EMA' => ta.ema(source, length)
        'SMMA (RMA)' => ta.rma(source, length)
        'WMA' => ta.wma(source, length)
        'VWMA' => ta.vwma(source, length)

// Calculations
basis = ma(src, length, maType)
dev = mult * ta.stdev(src, length)
upper = basis + dev
lower = basis - dev

// Volume Filter
volMa = ta.sma(volume, volLength)
volConditionLong = useFilters ? volume > volMa * 1.05 : true
volConditionShort = useFilters ? volume > volMa * 1.2 : true

// Trend Filter
trendMa = ta.sma(close, trendLength)
trendConditionLong = useFilters ? close > trendMa : true
trendConditionShort = useFilters ? close < trendMa : true

// RSI Filter
rsi = ta.rsi(close, rsiLength)
rsiConditionShort = useFilters ? rsi < 85 : true

// Crossover/Crossunder Calculations
bbCrossoverLong = ta.crossover(close, lower)
bbCrossoverShortExit = ta.crossover(close, upper)
bbCrossunderShort = ta.crossunder(close, upper)
bbCrossunderLongExit = ta.crossunder(close, lower)

// Preserve Indicator Plots
plot(basis, 'Basis', color = #2962FF, offset = offset)
p1 = plot(upper, 'Upper', color = #F23645, offset = offset)
p2 = plot(lower, 'Lower', color = #089981, offset = offset)
plot(trendMa, 'Trend MA', color = #FF9800, offset = offset, linewidth = 2)
fill(p1, p2, title = 'Background', color = color.rgb(33, 150, 243, 95))

// State Tracking
var bool inLongPosition = false
var bool inShortPosition = false // Remove for long-only

// Long Signal Logic
enterLong = useLongSignals and bbCrossoverLong and timeAllowed and not inLongPosition and volConditionLong and trendConditionLong
exitLong = useLongSignals and bbCrossoverShortExit and timeAllowed and inLongPosition

// Short Signal Logic
enterShort = useShortSignals and bbCrossunderShort and timeAllowed and not inShortPosition and volConditionShort and trendConditionShort and rsiConditionShort
exitShort = useShortSignals and bbCrossunderLongExit and timeAllowed and inShortPosition

// Long State Update
if enterLong
    inLongPosition := true
if exitLong
    inLongPosition := false

// Short State Update
if enterShort
    inShortPosition := true
if exitShort
    inShortPosition := false

// Long Price Labels
if enterLong
    label.new(bar_index, low, str.tostring(close, "#.##"), color=color.green, style=label.style_label_up, textcolor=color.white, yloc=yloc.belowbar)
if exitLong
    label.new(bar_index, high, str.tostring(close, "#.##"), color=color.red, style=label.style_label_down, textcolor=color.white, yloc=yloc.abovebar)

// Short Price Labels
if enterShort
    label.new(bar_index, high, str.tostring(close, "#.##"), color=color.yellow, style=label.style_label_down, textcolor=color.black, yloc=yloc.abovebar)
if exitShort
    label.new(bar_index, low, str.tostring(close, "#.##"), color=color.purple, style=label.style_label_up, textcolor=color.white, yloc=yloc.belowbar)

// Long Strategy Execution
if enterLong
    strategy.entry('Long', strategy.long)
if exitLong
    strategy.close('Long')

// Short Strategy Execution
if enterShort
    strategy.entry('Short', strategy.short)
if exitShort
    strategy.close('Short')

// Alert Conditions
alertcondition(enterLong, title='Long Entry Alert', message='Bollinger Bands: Long Entry Signal')
alertcondition(exitLong, title='Long Exit Alert', message='Bollinger Bands: Long Exit Signal')
alertcondition(enterShort, title='Short Entry Alert', message='Bollinger Bands: Short Entry Signal')
alertcondition(exitShort, title='Short Exit Alert', message='Bollinger Bands: Short Exit Signal')