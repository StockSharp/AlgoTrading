//@version=6

// === INPUTS === //
contractSize = input.float(0.1, title="Tamaño de contrato")
initialCapital = input.float(1000, title="Capital inicial")

strategy(title="IMACD Sniper", overlay=true)

macdSrc     = close
fastLen     = input.int(12, title="MACD Fast Length")
slowLen     = input.int(26, title="MACD Slow Length")
signalLen   = input.int(9, title="MACD Signal Smoothing")
macdDeltaMin = input.float(0.03, title="Mínima diferencia MACD para entrada")
macdZeroLimit = input.float(0.05, title="Distancia mínima del eje 0 para entrada")
rangeLen = input.int(14, title="Nº velas para rango dinámico TP/SL")
rangeMultiplierTP = input.float(4.0, title="Multiplicador de rango para TP")
rangeMultiplierSL = input.float(1.5, title="Multiplicador de rango para SL")

emaLength   = input.int(20, title="EMA Length")
ema = ta.ema(close, emaLength)
plot(ema, color=color.blue, linewidth=3)

[macdLine, signalLine, histLine] = ta.macd(macdSrc, fastLen, slowLen, signalLen)
volumeMa = ta.sma(volume, 20)

macdDelta = math.abs(macdLine - signalLine)
macdFarFromZero = math.abs(macdLine) > macdZeroLimit and math.abs(signalLine) > macdZeroLimit

avgRange = ta.sma(high - low, rangeLen)

dynamicTP = avgRange * rangeMultiplierTP
dynamicSL = avgRange * rangeMultiplierSL

isStrongBullishCandle = close > open and (close - open) > 0.6 * (high - low)
isStrongBearishCandle = close < open and (open - close) > 0.6 * (high - low)

longCondition = ta.crossover(macdLine, signalLine) and close > ema and macdDelta > macdDeltaMin and macdFarFromZero and volume > volumeMa and isStrongBullishCandle
shortCondition = ta.crossunder(macdLine, signalLine) and close < ema and macdDelta > macdDeltaMin and macdFarFromZero and volume > volumeMa and isStrongBearishCandle

var bool inLong = false
var bool inShort = false

// Salida por cruce contrario
closeLongCondition = inLong and ta.crossunder(macdLine, signalLine)
closeShortCondition = inShort and ta.crossover(macdLine, signalLine)

if (longCondition)
    strategy.entry("Long", strategy.long)
    inLong := true
    inShort := false

    longTP = close + dynamicTP
    longSL = close - dynamicSL
    strategy.exit("Exit Long", from_entry="Long", limit=longTP, stop=longSL)
    box.new(bar_index, longTP, bar_index + 1, longSL, border_color=color.green, bgcolor=color.new(color.green, 90), text="TP: "+str.tostring(longTP, format.mintick)+"\nSL: "+str.tostring(longSL, format.mintick), text_size=size.small, text_color=color.white)

if (shortCondition)
    strategy.entry("Short", strategy.short)
    inShort := true
    inLong := false

    shortTP = close - dynamicTP
    shortSL = close + dynamicSL
    strategy.exit("Exit Short", from_entry="Short", limit=shortTP, stop=shortSL)
    box.new(bar_index, shortSL, bar_index + 1, shortTP, border_color=color.red, bgcolor=color.new(color.red, 90), text="TP: "+str.tostring(shortTP, format.mintick)+"\nSL: "+str.tostring(shortSL, format.mintick), text_size=size.small, text_color=color.white)

if (closeLongCondition)
    strategy.close("Long")
    inLong := false

if (closeShortCondition)
    strategy.close("Short")
    inShort := false

plot(macdLine - signalLine, title="MACD Histogram", color=color.orange, display=display.none)