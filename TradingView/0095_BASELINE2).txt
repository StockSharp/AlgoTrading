//@version=6
strategy("BASELINE2)", overlay=true, default_qty_type=strategy.percent_of_equity, default_qty_value=100, calc_on_every_tick=true)

// === Inputs ===
pivotLen = input.int(5, title="Pivot Strength")
touchBufferPct = input.float(1.0, title="Touch Buffer (%)")
slATRMult = input.float(1.0, title="Stop Loss ATR Multiplier")
tpATRMult = input.float(2.2, title="Take Profit ATR Multiplier")
cooldownBars = input.int(2, title="Cooldown Bars Between Trades")
useTrailing = input.bool(false, title="Use Trailing Stop?")
trailingATRMult = input.float(1.5, title="Trailing ATR Multiplier")
strikeOffset = input.float(2.0, title="Strike Offset for Options")
dte = input.int(7, title="DTE for Option Contract")
maxTradesPerDay = input.int(2, title="Max Trades Per Day")
maxDrawdownPct = input.float(10.0, title="Max Drawdown %")

// === Macro Trend (SPY) ===
spyDaily = request.security("SPY", "D", ta.sma(close, 10))
spyWeekly = request.security("SPY", "W", ta.sma(close, 10))
macroBullish = close > spyDaily and close > spyWeekly
macroBearish = close < spyDaily and close < spyWeekly

// === Indicators ===
emaFast = ta.ema(close, 9)
emaSlow = ta.ema(close, 21)
emaHTF = request.security(syminfo.tickerid, "D", ta.ema(close, 50))
rsi = ta.rsi(close, 14)
atr = ta.atr(14)
volumeOK = volume > ta.sma(volume, 20) * 1.1
macdLine = ta.ema(close, 12) - ta.ema(close, 26)
macdSignal = ta.ema(macdLine, 9)

// === ADX Manual ===
adxLength = 14
upMove = high - high[1]
downMove = low[1] - low
plusDM = (upMove > downMove and upMove > 0) ? upMove : 0
minusDM = (downMove > upMove and downMove > 0) ? downMove : 0
trur = ta.rma(ta.tr, adxLength)
plusDI = 100 * ta.rma(plusDM, adxLength) / trur
minusDI = 100 * ta.rma(minusDM, adxLength) / trur
dx = 100 * math.abs(plusDI - minusDI) / (plusDI + minusDI)
adx = ta.rma(dx, adxLength)

// === Price Action Filters ===
bullCandle = close > open
bearCandle = close < open
rsiLong = rsi > 50
rsiShort = rsi < 45

// === Support/Resistance Touch ===
supportLevel = ta.lowest(low, pivotLen)
resistanceLevel = ta.highest(high, pivotLen)
touchedSupport = low <= supportLevel * (1 + touchBufferPct / 100)
touchedResistance = high >= resistanceLevel * (1 - touchBufferPct / 100)

// === Drawdown Filter ===
recentLow = ta.lowest(close, 10)
recentHigh = ta.highest(close, 10)
drawdownTooHigh = (recentHigh - recentLow) / recentHigh > 0.025

// === Time Filter ===
t = time(timeframe.period, "America/New_York")
hourNow = hour(t)
minuteNow = minute(t)
avoidMorningShorts = hourNow == 9 and minuteNow < 30
avoidTimeWindow = (hourNow >= 11 and hourNow <= 13) or (hourNow >= 15 and minuteNow >= 45)

// === EMA Squeeze Filter ===
emaSpread = math.abs(emaFast - emaSlow) / close
avoidEMASqueeze = emaSpread > 0.003

// === Cooldown ===
var int lastTradeBar = na
canTrade = na(lastTradeBar) or (bar_index - lastTradeBar >= cooldownBars)

// === Daily Trade Limit ===
var int tradesToday = 0
newDay = dayofmonth != dayofmonth[1] or month != month[1] or year != year[1]
if newDay
    tradesToday := 0
canTradeToday = tradesToday < maxTradesPerDay

// === Post-loss cooldown ===
var float lastEquity = strategy.equity
var int drawdownBars = 0
drawdownLoss = strategy.equity < lastEquity
lastEquity := strategy.equity
if drawdownLoss
    drawdownBars := 10
if drawdownBars > 0
    drawdownBars -= 1
cooldownFromDrawdown = drawdownBars == 0

// === Volatility Spike Guard ===
volatilitySpike = atr > ta.sma(atr, 14) * 2

// === ATR Cap ===
atrCap = ta.sma(atr, 50) * 1.5
safeATR = atr < atrCap ? atr : atrCap

// === SL/TP Setup ===
longSL = close - safeATR * slATRMult
longTP = close + safeATR * tpATRMult
shortSL = close + safeATR * slATRMult
shortTP = close - safeATR * tpATRMult
trail_offset = useTrailing ? safeATR * trailingATRMult : na

// === Risk/Reward Check ===
riskRewardLongOK = (longTP - close) >= 2 * (close - longSL)
riskRewardShortOK = (close - shortTP) >= 2 * (shortSL - close)

// === Partial Profit Logic ===
longMidTarget = close + safeATR
shortMidTarget = close - safeATR

// === Global Drawdown Guard ===
initialEquity = strategy.initial_capital
equityDrawdown = (initialEquity - strategy.equity) / initialEquity * 100
isInEmergencyDrawdown = equityDrawdown > maxDrawdownPct

// === Entry Logic ===
bullSignal = touchedSupport and emaFast > emaSlow and close > emaHTF and rsiLong and bullCandle and volumeOK and not drawdownTooHigh and macroBullish and adx > 15 and not volatilitySpike and not isInEmergencyDrawdown and not avoidTimeWindow
bearSignal = touchedResistance and emaFast < emaSlow and close < emaHTF and rsiShort and bearCandle and macdLine < macdSignal and macdLine < 0 and volumeOK and not drawdownTooHigh and macroBearish and not avoidMorningShorts and avoidEMASqueeze and adx > 15 and not volatilitySpike and not isInEmergencyDrawdown and not avoidTimeWindow

// === Trade Execution ===
if bullSignal and canTrade and riskRewardLongOK and canTradeToday and cooldownFromDrawdown
    strategy.entry("Long", strategy.long)
    strategy.exit("TP Half", from_entry="Long", limit=longMidTarget, qty_percent=50)
    strategy.exit("Long Exit", from_entry="Long", stop=longSL, limit=longTP, trail_points=trail_offset)
    lastTradeBar := bar_index
    tradesToday += 1
    label.new(bar_index, low - safeATR, "ðŸ“¢ CALL", style=label.style_label_up, color=color.green)

if bearSignal and canTrade and riskRewardShortOK and canTradeToday and cooldownFromDrawdown
    strategy.entry("Short", strategy.short)
    strategy.exit("TP Half", from_entry="Short", limit=shortMidTarget, qty_percent=50)
    strategy.exit("Short Exit", from_entry="Short", stop=shortSL, limit=shortTP, trail_points=trail_offset)
    lastTradeBar := bar_index
    tradesToday += 1
    label.new(bar_index, high + safeATR, "ðŸ”» PUT", style=label.style_label_down, color=color.red)

// === Alerts ===
// alertcondition(bullSignal and canTrade and riskRewardLongOK, title="CALL Entry Alert", message="CALL Entry Alert: Buy Call Option")
// alertcondition(bearSignal and canTrade and riskRewardShortOK, title="PUT Entry Alert", message="PUT Entry Alert: Buy Put Option")