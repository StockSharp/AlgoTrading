//@version=5
strategy("Hammer & Shooting Star â€” Strategy", overlay=true, pyramiding=0,
     default_qty_type=strategy.percent_of_equity, default_qty_value=10, initial_capital=10000, calc_on_every_tick=true)

// === Inputs ===
wickFactor = input.float(0.9, "Min wick : body ratio", step=0.1)
maxOppositeWickFactor = input.float(0.45, "Max opposite-wick : body", step=0.05)
minBodyRangePct = input.float(0.2, "Min body as % of bar range", step=0.01)

// === Candle parts ===
o = open
c = close
h = high
l = low

body = math.abs(c - o)
barRange = h - l
upperWick = h - math.max(c, o)
lowerWick = math.min(c, o) - l

bodyNonZero = barRange > 0 and body > 0

// === Pattern detection (on the bar itself) ===
// Hammer: bearish candle (o > c), long lower wick, small upper wick
isHammer = bodyNonZero and (o > c) and     (lowerWick >= wickFactor * body) and    (upperWick <= maxOppositeWickFactor * body) and    (body / barRange >= minBodyRangePct)

// Shooting star: bullish candle (o < c), long upper wick, small lower wick
isShootingStar = bodyNonZero and (o < c) and    (upperWick >= wickFactor * body) and    (lowerWick <= maxOppositeWickFactor * body) and    (body / barRange >= minBodyRangePct)

// === Use previous-bar signals so entry executes at NEXT bar open ===
hammerSignal = isHammer[1]
ssSignal     = isShootingStar[1]

// === Entries & exits: based on the signal bar (index [1]) ===
canEnter = strategy.position_size == 0

if hammerSignal and canEnter
    // Enter long on current bar (this is the bar AFTER the hammer)
    strategy.entry("Long_Hammer", strategy.long)
    // Exit using the hammer-bar's low/high (signal bar is [1])
    strategy.exit("Long_Exit", from_entry="Long_Hammer", stop=low[1], limit=high[1])

if ssSignal and canEnter
    strategy.entry("Short_SS", strategy.short)
    strategy.exit("Short_Exit", from_entry="Short_SS", stop=high[1], limit=low[1])

// === Visuals: show where patterns occurred ===
//barcolor(isHammer ? color.red : isShootingStar ? color.green : na)
plotshape(isHammer, title="Hammer", style=shape.triangleup, location=location.belowbar, color=color.green, size=size.tiny, text="HAM")
plotshape(isShootingStar, title="Shooting Star", style=shape.triangledown, location=location.abovebar, color=color.red, size=size.tiny, text="SS")