// ------------------------------------------------------------------------------------------------
// BERLIN Range Index | Bar color version
//
// The original problem: The choppiness index is great at finding ranging markets, but it is
// sometimes very slow, which means most of the time it only catches the end of a trend.
//
// This indicator tries to solve this. It uses the choppiness index and filters it using a
// factor that is based on the standard deviation of the ATR.
//
// The ATR based filter is calculated by first calculating the running standard deviation of
// the ATR, and then looking at that in relation to its recent low to find a filtering factor
// to use on the choppiness index. This makes the choppiness index more reactive to trends,
// but also slightly more likely to missidentify ranges.
//
// This is the bar color version of the indicator. It changes the color of the bars when it
// it thinks the market is ranging and when it thinks it is trending.
//
// Yellow = Trending
// Orange = Exhausted trend (could potentially reverse, so if trend trading, use less risk)
// Red = Exhausted trend is weakening (chop or reversal is very likely ahead, use less risk)
// Transparent gray = Ranging
//
// - Version 1.1 -
//    * Added option to use normalized true range in the ATR filter. This is now the default.
//    * Changed color for exhausted trends from transparent gray to solid orange.
//    * Changed color for weakening exhausted trend from transparent yellow to red.
// - Version 1.0 -
//    * Initial release.
//
// ------------------------------------------------------------------------------------------------
// Copyright Â© 2020, Anton "Lejmer" Berlin.
// ------------------------------------------------------------------------------------------------

//@version=4

// ------------------------------------------------------------------------------------------------
//    Setup
// ------------------------------------------------------------------------------------------------

study(title = "BERLIN Range Index v1.1 | Bar color version", shorttitle = "Range index", overlay = true)

// ------------------------------------------------------------------------------------------------
//    Inputs
// ------------------------------------------------------------------------------------------------

length = input(title = "Length", defval = 9, minval = 1, type = input.integer)
chop_max_val = input(title = "Trend threshold (max value)", defval = 40, minval = 1, maxval = 100, type = input.integer)
chop_min_val = input(title = "Exhausted trend threshold (min value)", defval = 10, minval = 0, maxval = 99, type = input.integer)
atr_length = input(title = "ATR Filter Period", defval = 14, minval = 1, type = input.integer)
low_lookback = input(title = "ATR Filter Low Lookback Period", defval = 14, minval = 1, type = input.integer)
use_normalized = input(title = "Used normalized true range for ATR Filter?", defval = true, type = input.bool)
stddev_length = input(title = "Standard Deviation - Length", defval = 14, minval = 1, type = input.integer)
stddev_mean_type = input(title = "Standard Deviation - Mean calculation method", defval = "SMA", options = ["SMA", "EMA", "RMA", "WMA", "LSMA"], type = input.string)

// ------------------------------------------------------------------------------------------------
//    User-defined functions
// ------------------------------------------------------------------------------------------------

ma(type, src, len) =>
    float result = na

    // Calculate the specified MA.
    if (type == "SMA")
        result := sma(src, len)
    if (type == "EMA")
        result := ema(src, len)
    if (type == "RMA")
        result := rma(src, len)
    if (type == "WMA")
        result := wma(src, len)
    if (type == "LSMA")
        if (len == 1)
            result := src
        else
            c = (sma(src, len / 2) - sma(src, len)) / stdev(src, len)
            z = (bar_index - sma(bar_index, len)) / stdev(bar_index, len) * c
            result := sma(src, len) + z * stdev(src, len)

    // Return the result
    result

// ------------------------------------------------------------------------------------------------
//    Calculations
// ------------------------------------------------------------------------------------------------

// Choppiness index
str = sum(tr, length)
ltl = lowest(low <= close[1] ? low : close[1], length)
hth = highest(high >= close[1] ? high : close[1], length)
height = hth - ltl
chop = 100 * (log10(str / height) / log10(length))

// Average Normalized True Range (original idea by Brad Hall)
tr_val = use_normalized ? max(tr, high - close, close - low) / close : tr
atr_val = rma(tr_val, atr_length)

// Running standard deviation of ATR
stddev_a = ma(stddev_mean_type, pow(atr_val, 2), stddev_length)
stddev_b = pow(sum(atr_val, stddev_length), 2) / pow(stddev_length, 2)
stddev = sqrt(stddev_a - stddev_b)
stddev_lo = lowest(stddev, low_lookback)
stddev_factor = stddev_lo / stddev

// Filtered
range_index = chop * stddev_factor

// ------------------------------------------------------------------------------------------------
//    Conditions
// ------------------------------------------------------------------------------------------------

chop_condition = range_index > chop_max_val
trend_condition = range_index[1] > chop_min_val and range_index < chop_max_val and range_index > chop_min_val
strong_trend_condition = range_index < chop_min_val
weakening_trend_condition = range_index[1] < chop_min_val and range_index > chop_min_val

// ------------------------------------------------------------------------------------------------
//    Colors
// ------------------------------------------------------------------------------------------------

chop_clr = color.new(color.gray, transp = 95)
trend_clr = color.new(color.yellow, transp = 0)
strong_trend_clr = color.new(color.orange, transp = 0)
weakening_trend_clr = color.new(color.red, transp = 0)

clr = chop_condition ? chop_clr : trend_condition ? trend_clr : strong_trend_condition ? strong_trend_clr : weakening_trend_condition ? weakening_trend_clr : na

// ------------------------------------------------------------------------------------------------
//    Plotting
// ------------------------------------------------------------------------------------------------

barcolor(title = "Bar color", color = clr)