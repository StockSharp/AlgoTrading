//@version=6
// © Dshergill, Enhanced by Grok
strategy('Price Flip Strategy', overlay=true, behind_chart=false)

// === INPUT GROUPS ===
// Date Range Inputs
group_date = '📅 Date Range'
startDate = input.time(timestamp('01 Jan 2024 00:00 +0000'), title='Start Date', inline='dateRange', group=group_date)
endDate = input.time(timestamp('01 Jan 2030 00:00 +0000'), title='End Date', inline='dateRange', group=group_date)
withinDateRange = time >= startDate and time <= endDate

// Ticker Max/Min Inputs
group_ticker = '📈 Ticker Levels'
ticker_max_length = input.int(100, title='Ticker Max Lookback', minval=1, group=group_ticker)
ticker_min_length = input.int(100, title='Ticker Min Lookback', minval=1, group=group_ticker)
showTickerMax = input.bool(true, title='Show Ticker Max', group=group_ticker)
showTickerMin = input.bool(true, title='Show Ticker Min', group=group_ticker)

// Moving Average Inputs
group_ma = '📊 Moving Averages'
ma_type = input.string('JMA', title='MA Type', options=['SMA', 'EMA', 'WMA', 'SMMA', 'VWMA','HMA', 'TEMA', 'DEMA', 'KAMA', 'FRAMA', 'VAMA', 'JMA','ALMA', 'LSMA', 'EPMA', 'RMA', 'GMA', 'ZLEMA','High MA', 'Low MA', 'Median Price MA', 'Typical Price MA', 'Weighted Close MA'], group=group_ma)
fast_ma_length = input.int(12, title='Fast MA Length', minval=1, group=group_ma)
slow_ma_length = input.int(14, title='Slow MA Length', minval=1, group=group_ma)
showInvertedMA = input.bool(false, title='Show Inverted MA', group=group_ma)
showOriginalMA = input.bool(true, title='Show Original MA', group=group_ma)
trend_filter = input.bool(true, title='Use MA Trend Filter', group=group_ma)
// Additional parameters for specific MAs
alma_offset = input.float(0.85, title='ALMA Offset (0-1)', minval=0, maxval=1, step=0.01, group=group_ma)
alma_sigma = input.float(6.0, title='ALMA Sigma', minval=0.1, step=0.1, group=group_ma)
kama_eff_ratio = input.float(2.0, title='KAMA Efficiency Ratio Period', minval=1, step=1, group=group_ma)
frama_fc = input.int(1, title='FRAMA Fast Constant', minval=1, group=group_ma)
frama_sc = input.int(100, title='FRAMA Slow Constant', minval=1, group=group_ma)

// Price and HLCC4 Inputs
group_price = '📊 Original & Inverted Price'
showInvertedPrice = input.bool(false, title='Show Inverted Price', group=group_price)
showOppositePrice = input.bool(false, title='Show Original Price', group=group_price)
showInvertedCandle = input.bool(false, title='Show Inverted Candles', group=group_price)
group_avg = '📊 Original & Inverted HLCC4'
showOppositeInvertedAvg = input.bool(false, title='Show Original (HLCC4)', group=group_avg)
showInvertedAvg = input.bool(true, title='Show Inverted (HLCC4)', group=group_avg)
showInvertedAvgMid = input.bool(true, title='Show Mid Average (HLCC4)', group=group_avg)

// Label Settings
group_labels = '🏷️ Label Settings'
showLabels = input.bool(true, title='Show Labels', group=group_labels)
text_size = input.string('Normal', title='📏 Label Size', options=['Huge', 'Large', 'Normal', 'Small', 'Tiny'], group=group_labels)
label_offset = input.int(5, title='Label Offset', minval=0, group=group_labels)
labelColor1 = input.color(color.navy, title='Original HLCC4 Label Color', group=group_labels)
labelColor2 = input.color(color.maroon, title='Inverted HLCC4 Label Color', group=group_labels)
labelColor3 = input.color(color.teal, title='Mid HLCC4 Label Color', group=group_labels)
labelColor4 = input.color(color.green, title='Ticker Max Label Color', group=group_labels)
labelColor5 = input.color(color.red, title='Ticker Min Label Color', group=group_labels)
labelColor6 = input.color(color.gray, title='Inverted Price Label Color', group=group_labels)
labelColor7 = input.color(color.teal, title='Original Price Label Color', group=group_labels)
labelColor8 = input.color(color.red, title='Inverted MA Label Color', group=group_labels)
labelColor9 = input.color(color.orange, title='Original MA Label Color', group=group_labels)
size_value = text_size == 'Huge' ? size.huge : text_size == 'Large' ? size.large : text_size == 'Normal' ? size.normal : text_size == 'Small' ? size.small : size.tiny

// === CALCULATIONS ===
// Ticker Max/Min
ticker_max = ta.highest(high, ticker_max_length)
ticker_min = ta.lowest(low, ticker_min_length)

// Inverted Price Calculations
inverted_price = ticker_max + ticker_min - close
inverted_open = ticker_max + ticker_min - open
inverted_high = ticker_max + ticker_min - low
inverted_low = ticker_max + ticker_min - high

// Original Price
opposite_price = close
opposite_open = open
opposite_high = high
opposite_low = low

// Averages (HLCC4)
inverted_avg = (inverted_high + inverted_low + inverted_price + inverted_open) / 4
opposite_inverted_avg = hlcc4
mid_avg = (inverted_avg + opposite_inverted_avg) / 2

// Moving Averages Function
f_get_ma(source, length, type) =>
    float ma = na
    // Basic MAs
    if type == 'SMA'
        ma := ta.sma(source, length)
    else if type == 'EMA'
        ma := ta.ema(source, length)
    else if type == 'WMA'
        ma := ta.wma(source, length)
    else if type == 'SMMA'
        ma := ta.rma(source, length)  // SMMA is approximated as RMA
    else if type == 'VWMA'
        ma := ta.vwma(source, length)
    // Advanced/Specialized MAs
    else if type == 'HMA'
        ma := ta.wma(2 * ta.wma(source, length / 2) - ta.wma(source, length), int(math.sqrt(length)))
    else if type == 'TEMA'
        ema1 = ta.ema(source, length)
        ema2 = ta.ema(ema1, length)
        ema3 = ta.ema(ema2, length)
        ma := 3 * ema1 - 3 * ema2 + ema3
    else if type == 'DEMA'
        ema1 = ta.ema(source, length)
        ema2 = ta.ema(ema1, length)
        ma := 2 * ema1 - ema2
    else if type == 'KAMA'
        change = math.abs(source - source[length])
        volatility = math.sum(math.abs(source - source[1]), length)
        er = volatility != 0 ? change / volatility : 0
        fast_sc = 2 / (2 + 1)
        slow_sc = 2 / (kama_eff_ratio + 1)
        sc = math.pow(er * (fast_sc - slow_sc) + slow_sc, 2)
        var float kama = 0
        kama := nz(kama[1]) + sc * (source - nz(kama[1]))
        ma := kama
    else if type == 'FRAMA'
        // Simplified FRAMA approximation
        w = math.log(2 / (frama_sc + 1))
        h1 = ta.highest(source, length)
        l1 = ta.lowest(source, length)
        n1 = (h1 - l1) / length
        h2 = ta.highest(source[length], length)
        l2 = ta.lowest(source[length], length)
        n2 = (h2 - l2) / length
        d = math.log((n1 + n2) / (n1 > 0 and n2 > 0 ? (n1 - n2) : 1)) / w
        alpha = math.exp(-4.6 * (d - 1))
        alpha := math.max(math.min(alpha, 1), 0.01)
        var float frama = 0
        frama := (alpha * source + (1 - alpha) * nz(frama[1]))
        ma := frama
    else if type == 'VAMA'
        // Volume Adjusted MA (approximation using VWMA with dynamic weighting)
        ma := ta.vwma(source, length)
    else if type == 'JMA'
        // JMA is proprietary; approximate with smoothed EMA
        ma := ta.ema(ta.ema(source, length), length)
    // Adaptive/Modified MAs
    else if type == 'ALMA'
        ma := ta.alma(source, length, alma_offset, alma_sigma)
    else if type == 'LSMA'
        ma := ta.linreg(source, length, 0)
    else if type == 'EPMA'
        // Endpoint MA (approximation using LSMA shifted)
        ma := ta.linreg(source, length, 0)
    else if type == 'RMA'
        ma := ta.rma(source, length)
    else if type == 'GMA'
        // Gaussian MA (approximation using ALMA with high sigma)
        ma := ta.alma(source, length, 0.5, 10.0)
    else if type == 'ZLEMA'
        lag = int(length / 2)
        data = source + (source - source[lag])
        ma := ta.ema(data, length)
    // High/Low-based MAs
    else if type == 'High MA'
        ma := ta.ema(high, length)
    else if type == 'Low MA'
        ma := ta.ema(low, length)
    else if type == 'Median Price MA'
        ma := ta.ema((high + low) / 2, length)
    else if type == 'Typical Price MA'
        ma := ta.ema((high + low + close) / 3, length)
    else if type == 'Weighted Close MA'
        ma := ta.ema((high + low + close + close) / 4, length)
    ma

// Calculate Fast and Slow MAs
fast_inverted_ma = f_get_ma(inverted_price, fast_ma_length, ma_type)
slow_inverted_ma = f_get_ma(inverted_price, slow_ma_length, ma_type)
fast_opposite_ma = f_get_ma(opposite_price, fast_ma_length, ma_type)
slow_opposite_ma = f_get_ma(opposite_price, slow_ma_length, ma_type)

// === TRADING CONDITIONS ===
// MA Crossover Conditions
bullish_crossover = ta.crossover(fast_opposite_ma, slow_opposite_ma)
bearish_crossover = ta.crossunder(fast_opposite_ma, slow_opposite_ma)

// Trend Filter
trend_up = trend_filter ? opposite_price > slow_opposite_ma : true
trend_down = trend_filter ? opposite_price < slow_opposite_ma : true

// Buy/Sell Conditions
buy_condition = opposite_price[1] > inverted_price and bullish_crossover and trend_up and withinDateRange
sell_condition = opposite_price[1] < inverted_price and bearish_crossover and trend_down and withinDateRange

// === STRATEGY EXECUTION ===
if buy_condition
    strategy.entry('Buy', strategy.long)
    strategy.close('Sell')

if sell_condition
    strategy.entry('Sell', strategy.short)
    strategy.close('Buy')

// === SIGNAL LABELS ===
var signalLabels = array.new<label>(0)  // Label buffer
var int labelIndex = 0
var string lastSignal = ""

if buy_condition and lastSignal != "BUY"
    if showLabels
        newLabel = label.new(bar_index, low, '\n' + str.tostring(low, format.mintick),
             style=label.style_label_up, color=color.new(color.white, 100),
             textcolor=labelColor1, size=size.normal)
        if array.size(signalLabels) < 12
            array.push(signalLabels, newLabel)
        else
            label.delete(array.get(signalLabels, labelIndex))
            array.set(signalLabels, labelIndex, newLabel)
            labelIndex := (labelIndex + 1) % 12
    lastSignal := "BUY"

if sell_condition and lastSignal != "SELL"
    if showLabels
        newLabel = label.new(bar_index, high, '\n' + str.tostring(high, format.mintick),
             style=label.style_label_down, color=color.new(color.white, 100),
             textcolor=labelColor2, size=size.normal)
        if array.size(signalLabels) < 12
            array.push(signalLabels, newLabel)
        else
            label.delete(array.get(signalLabels, labelIndex))
            array.set(signalLabels, labelIndex, newLabel)
            labelIndex := (labelIndex + 1) % 12
    lastSignal := "SELL"

// === ALERTS ===
alertcondition(buy_condition, title='Buy Signal', message='Buy signal triggered at {{close}} on {{timenow}}')
alertcondition(sell_condition, title='Sell Signal', message='Sell signal triggered at {{close}} on {{timenow}}')

// === PLOTS ===
// Ticker Levels
plot(showTickerMax ? ticker_max : na, title='Ticker Max', color=color.new(color.green, 80), linewidth=1)
plot(showTickerMin ? ticker_min : na, title='Ticker Min', color=color.new(color.red, 80), linewidth=1)

// Prices
plot(showInvertedPrice ? inverted_price : na, title='Inverted Price', color=color.gray, linewidth=2)
plot(showOppositePrice ? opposite_price : na, title='Original Price', color=color.new(color.teal, 50), linewidth=1)

// Moving Averages with Conditional Colors
fast_ma_color = fast_opposite_ma > slow_opposite_ma ? color.green : color.red
slow_ma_color = color.new(color.blue, 70)
plot(showOriginalMA ? fast_opposite_ma : na, title='Fast Original MA', color=fast_ma_color, linewidth=2)
plot(showOriginalMA ? slow_opposite_ma : na, title='Slow Original MA', color=slow_ma_color, linewidth=1)
plot(showInvertedMA ? fast_inverted_ma : na, title='Fast Inverted MA', color=fast_ma_color, linewidth=2)
plot(showInvertedMA ? slow_inverted_ma : na, title='Slow Inverted MA', color=slow_ma_color, linewidth=2)

// Averages (HLCC4)
plot(showOppositeInvertedAvg ? opposite_inverted_avg : na, title='Original HLCC4', color=color.new(color.gray, 30), linewidth=1)
plot(showInvertedAvg ? inverted_avg : na, title='Inverted HLCC4', color=color.new(color.orange, 50), linewidth=2)
plot(showInvertedAvgMid ? mid_avg : na, title='Mid HLCC4', color=color.new(color.olive, 30), linewidth=1)

// Inverted Candles
plotcandle(showInvertedCandle ? inverted_open : na, showInvertedCandle ? inverted_high : na, showInvertedCandle ? inverted_low : na, showInvertedCandle ? inverted_price : na, title='Inverted Candles', color=inverted_price >= inverted_open ? color.new(color.green, 0) : color.new(color.red, 0), wickcolor=color.new(color.gray, 0), bordercolor=color.new(color.gray, 0))

// === LABELS ON LAST BAR ===
if showLabels and bar_index == last_bar_index
    if showTickerMax
        label.new(bar_index + label_offset, ticker_max, 'Ticker Max', style=label.style_none, textcolor=labelColor4, color=color.new(color.white, 100), textalign=text.align_center, size=size_value)
    if showTickerMin
        label.new(bar_index + label_offset, ticker_min, 'Ticker Min', style=label.style_none, textcolor=labelColor5, color=color.new(color.white, 100), textalign=text.align_center, size=size_value)
    if showInvertedPrice
        label.new(bar_index + label_offset, inverted_price, 'Inverted Price', style=label.style_none, textcolor=labelColor6, color=color.new(color.white, 100), textalign=text.align_center, size=size_value)
    if showOppositePrice
        label.new(bar_index + label_offset, opposite_price, 'Original Price', style=label.style_none, textcolor=labelColor7, color=color.new(color.white, 100), textalign=text.align_center, size=size_value)
    if showInvertedMA
        label.new(bar_index + label_offset, fast_inverted_ma, 'Fast Inverted MA', style=label.style_none, textcolor=labelColor8, color=color.new(color.white, 100), textalign=text.align_center, size=size_value)
        label.new(bar_index + label_offset, slow_inverted_ma, 'Slow Inverted MA', style=label.style_none, textcolor=labelColor8, color=color.new(color.white, 100), textalign=text.align_center, size=size_value)
    if showOriginalMA
        label.new(bar_index + label_offset, fast_opposite_ma, 'Fast Original MA', style=label.style_none, textcolor=labelColor9, color=color.new(color.white, 100), textalign=text.align_center, size=size_value)
        label.new(bar_index + label_offset, slow_opposite_ma, 'Slow Original MA', style=label.style_none, textcolor=labelColor9, color=color.new(color.white, 100), textalign=text.align_center, size=size_value)
    if showOppositeInvertedAvg
        label.new(bar_index + 12, opposite_inverted_avg, 'Original HLCC4', style=label.style_none, textcolor=labelColor1, color=color.new(color.white, 100), textalign=text.align_center, size=size_value)
    if showInvertedAvgMid
        label.new(bar_index + 2, mid_avg, 'Mid HLCC4', style=label.style_none, textcolor=labelColor3, color=color.new(color.white, 100), textalign=text.align_center, size=size_value)
    if showInvertedAvg
        label.new(bar_index + 12, inverted_avg, 'Inverted HLCC4', style=label.style_none, textcolor=labelColor2, color=color.new(color.white, 100), textalign=text.align_center, size=size_value)