// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © n00btraders

//@version=6

// @description Library with pre-defined timezone enums that can be used to request a timezone input from the user.
// The library provides a `tostring()` function to convert enum values to a valid string that can be used as a `timezone` parameter in pine script built-in functions.
// The library also includes a bonus function to get a formatted UTC offset from a UNIX timestamp.
//
// The timezone enums in this library were compiled by referencing the available timezone options from TradingView chart settings
// as well as multiple Wikipedia articles relating to lists of time zones: https://en.wikipedia.org/wiki/Lists_of_time_zones
//
// Some enums from this library are used to retrieve an IANA time zone identifier, while other enums only use UTC/GMT offset notation.
// It is important to note that the following section of the Pine Script User Manual recommends using IANA notation in most cases:
// https://www.tradingview.com/pine-script-docs/concepts/time/#time-zone-strings
library("Timezone")



//#region ------------------------------ Enums ------------------------------

// @enum  Timezone list that most closely matches the "Timezone" options available in TradingView chart settings.
//        The enum fields are primarily sorted by the UTC offset and secondarily sorted by alphabetical order.
//        Note: this enum shows the UTC offsets in Standard Time (SDT) since the titles for enum fields must be constant ("const string"),
//        whereas TradingView timezone settings will dynamically show the actual UTC offset that is currently being observed for each region.
//        Therefore, if using this enum as a user input, it is recommended to include a tooltip to clarify that only the Standard Time offset is shown.
export enum Timezone
    UTC             = "UTC"
    EXCHANGE        = "Exchange"
    HONOLULU        = "(UTC-10) Honolulu"
    ANCHORAGE       = "(UTC-9) Anchorage"
    JUNEAU          = "(UTC-9) Juneau"
    LOS_ANGELES     = "(UTC-8) Los Angeles"
    VANCOUVER       = "(UTC-8) Vancouver"
    DENVER          = "(UTC-7) Denver"
    PHOENIX         = "(UTC-7) Phoenix"
    CHICAGO         = "(UTC-6) Chicago"
    MEXICO_CITY     = "(UTC-6) Mexico City"
    SAN_SALVADOR    = "(UTC-6) San Salvador"
    BOGOTA          = "(UTC-5) Bogota"
    LIMA            = "(UTC-5) Lima"
    NEW_YORK        = "(UTC-5) New York"
    TORONTO         = "(UTC-5) Toronto"
    CARACAS         = "(UTC-4) Caracas"
    SANTIAGO        = "(UTC-4) Santiago"
    BUENOS_AIRES    = "(UTC-3) Buenos Aires"
    SAO_PAULO       = "(UTC-3) Sao Paulo"
    AZORES          = "(UTC-1) Azores"
    DUBLIN          = "(UTC) Dublin"
    LISBON          = "(UTC) Lisbon"
    LONDON          = "(UTC) London"
    REYKJAVIK       = "(UTC) Reykjavik"
    AMSTERDAM       = "(UTC+1) Amsterdam"
    BELGRADE        = "(UTC+1) Belgrade"
    BERLIN          = "(UTC+1) Berlin"
    BRATISLAVA      = "(UTC+1) Bratislava"
    BRUSSELS        = "(UTC+1) Brussels"
    BUDAPEST        = "(UTC+1) Budapest"
    CASABLANCA      = "(UTC+1) Casablanca"
    COPENHAGEN      = "(UTC+1) Copenhagen"
    LAGOS           = "(UTC+1) Lagos"
    LUXEMBOURG      = "(UTC+1) Luxembourg"
    MADRID          = "(UTC+1) Madrid"
    MALTA           = "(UTC+1) Malta"
    OSLO            = "(UTC+1) Oslo"
    PARIS           = "(UTC+1) Paris"
    PRAGUE          = "(UTC+1) Prague"
    ROME            = "(UTC+1) Rome"
    STOCKHOLM       = "(UTC+1) Stockholm"
    TUNIS           = "(UTC+1) Tunis"
    VIENNA          = "(UTC+1) Vienna"
    WARSAW          = "(UTC+1) Warsaw"
    ZURICH          = "(UTC+1) Zurich"
    ATHENS          = "(UTC+2) Athens"
    BUCHAREST       = "(UTC+2) Bucharest"
    CAIRO           = "(UTC+2) Cairo"
    HELSINKI        = "(UTC+2) Helsinki"
    JERUSALEM       = "(UTC+2) Jerusalem"
    JOHANNESBURG    = "(UTC+2) Johannesburg"
    NICOSIA         = "(UTC+2) Nicosia"
    RIGA            = "(UTC+2) Riga"
    TALLINN         = "(UTC+2) Tallinn"
    VILNIUS         = "(UTC+2) Vilnius"
    BAHRAIN         = "(UTC+3) Bahrain"
    ISTANBUL        = "(UTC+3) Istanbul"
    KUWAIT          = "(UTC+3) Kuwait"
    MOSCOW          = "(UTC+3) Moscow"
    NAIROBI         = "(UTC+3) Nairobi"
    QATAR           = "(UTC+3) Qatar"
    RIYADH          = "(UTC+3) Riyadh"
    TEHRAN          = "(UTC+3:30) Tehran"
    DUBAI           = "(UTC+4) Dubai"
    MUSCAT          = "(UTC+4) Muscat"
    KABUL           = "(UTC+4:30) Kabul"
    ASHGABAT        = "(UTC+5) Ashgabat"
    ASTANA          = "(UTC+5) Astana"
    KARACHI         = "(UTC+5) Karachi"
    COLOMBO         = "(UTC+5:30) Colombo"
    KOLKATA         = "(UTC+5:30) Kolkata"
    KATHMANDU       = "(UTC+5:45) Kathmandu"
    DHAKA           = "(UTC+6) Dhaka"
    YANGON          = "(UTC+6:30) Yangon"
    BANGKOK         = "(UTC+7) Bangkok"
    HO_CHI_MINH     = "(UTC+7) Ho Chi Minh"
    JAKARTA         = "(UTC+7) Jakarta"
    CHONGQING       = "(UTC+8) Chongqing"
    HONG_KONG       = "(UTC+8) Hong Kong"
    KUALA_LUMPUR    = "(UTC+8) Kuala Lumpur"
    MANILA          = "(UTC+8) Manila"
    PERTH           = "(UTC+8) Perth"
    SHANGHAI        = "(UTC+8) Shanghai"
    SINGAPORE       = "(UTC+8) Singapore"
    TAIPEI          = "(UTC+8) Taipei"
    SEOUL           = "(UTC+9) Seoul"
    TOKYO           = "(UTC+9) Tokyo"
    ADELAIDE        = "(UTC+9:30) Adelaide"
    BRISBANE        = "(UTC+10) Brisbane"
    SYDNEY          = "(UTC+10) Sydney"
    NORFOLK_ISLAND  = "(UTC+11) Norfolk Island"
    NEW_ZEALAND     = "(UTC+12) New Zealand"
    CHATHAM_ISLANDS = "(UTC+12:45) Chatham Islands"
    TOKELAU         = "(UTC+13) Tokelau"


// @enum  Timezone list that is equivalent to the `Timezone` enum but shows the Daylight Saving Time (DST) offset in addition to the Standard Time (SDT) offset.
//
//        Syntax for the UTC offset inside the parentheses:
//            UTC<SDT offset>/<DST offset>
//                or
//            UTC<offset>
//
//        A single UTC offset means that the region does not observe Daylight Saving Time,
//        so the local time does not move forward or backward at any point in the year.
//
//        The UTC<offset>/<offset> syntax is borrowed from examples in the "Time" section of the Pine Script User Manual:
//        https://www.tradingview.com/pine-script-docs/concepts/time/
export enum TimezoneDST
    UTC             = "UTC"
    EXCHANGE        = "Exchange"
    HONOLULU        = "(UTC-10) Honolulu"
    ANCHORAGE       = "(UTC-9/-8) Anchorage"
    JUNEAU          = "(UTC-9/-8) Juneau"
    LOS_ANGELES     = "(UTC-8/-7) Los Angeles"
    VANCOUVER       = "(UTC-8/-7) Vancouver"
    DENVER          = "(UTC-7/-6) Denver"
    PHOENIX         = "(UTC-7) Phoenix"
    CHICAGO         = "(UTC-6/-5) Chicago"
    MEXICO_CITY     = "(UTC-6) Mexico City"
    SAN_SALVADOR    = "(UTC-6) San Salvador"
    BOGOTA          = "(UTC-5) Bogota"
    LIMA            = "(UTC-5) Lima"
    NEW_YORK        = "(UTC-5/-4) New York"
    TORONTO         = "(UTC-5/-4) Toronto"
    CARACAS         = "(UTC-4) Caracas"
    SANTIAGO        = "(UTC-4/-3) Santiago"
    BUENOS_AIRES    = "(UTC-3) Buenos Aires"
    SAO_PAULO       = "(UTC-3) Sao Paulo"
    AZORES          = "(UTC-1/+0) Azores"
    DUBLIN          = "(UTC+0/+1) Dublin"
    LISBON          = "(UTC+0/+1) Lisbon"
    LONDON          = "(UTC+0/+1) London"
    REYKJAVIK       = "(UTC) Reykjavik"
    AMSTERDAM       = "(UTC+1/+2) Amsterdam"
    BELGRADE        = "(UTC+1/+2) Belgrade"
    BERLIN          = "(UTC+1/+2) Berlin"
    BRATISLAVA      = "(UTC+1/+2) Bratislava"
    BRUSSELS        = "(UTC+1/+2) Brussels"
    BUDAPEST        = "(UTC+1/+2) Budapest"
    CASABLANCA      = "(UTC+1/+0) Casablanca"
    COPENHAGEN      = "(UTC+1/+2) Copenhagen"
    LAGOS           = "(UTC+1) Lagos"
    LUXEMBOURG      = "(UTC+1/+2) Luxembourg"
    MADRID          = "(UTC+1/+2) Madrid"
    MALTA           = "(UTC+1/+2) Malta"
    OSLO            = "(UTC+1/+2) Oslo"
    PARIS           = "(UTC+1/+2) Paris"
    PRAGUE          = "(UTC+1/+2) Prague"
    ROME            = "(UTC+1/+2) Rome"
    STOCKHOLM       = "(UTC+1/+2) Stockholm"
    TUNIS           = "(UTC+1) Tunis"
    VIENNA          = "(UTC+1/+2) Vienna"
    WARSAW          = "(UTC+1/+2) Warsaw"
    ZURICH          = "(UTC+1/+2) Zurich"
    ATHENS          = "(UTC+2/+3) Athens"
    BUCHAREST       = "(UTC+2/+3) Bucharest"
    CAIRO           = "(UTC+2/+3) Cairo"
    HELSINKI        = "(UTC+2/+3) Helsinki"
    JERUSALEM       = "(UTC+2/+3) Jerusalem"
    JOHANNESBURG    = "(UTC+2) Johannesburg"
    NICOSIA         = "(UTC+2/+3) Nicosia"
    RIGA            = "(UTC+2/+3) Riga"
    TALLINN         = "(UTC+2/+3) Tallinn"
    VILNIUS         = "(UTC+2/+3) Vilnius"
    BAHRAIN         = "(UTC+3) Bahrain"
    ISTANBUL        = "(UTC+3) Istanbul"
    KUWAIT          = "(UTC+3) Kuwait"
    MOSCOW          = "(UTC+3) Moscow"
    NAIROBI         = "(UTC+3) Nairobi"
    QATAR           = "(UTC+3) Qatar"
    RIYADH          = "(UTC+3) Riyadh"
    TEHRAN          = "(UTC+3:30) Tehran"
    DUBAI           = "(UTC+4) Dubai"
    MUSCAT          = "(UTC+4) Muscat"
    KABUL           = "(UTC+4:30) Kabul"
    ASHGABAT        = "(UTC+5) Ashgabat"
    ASTANA          = "(UTC+5) Astana"
    KARACHI         = "(UTC+5) Karachi"
    COLOMBO         = "(UTC+5:30) Colombo"
    KOLKATA         = "(UTC+5:30) Kolkata"
    KATHMANDU       = "(UTC+5:45) Kathmandu"
    DHAKA           = "(UTC+6) Dhaka"
    YANGON          = "(UTC+6:30) Yangon"
    BANGKOK         = "(UTC+7) Bangkok"
    HO_CHI_MINH     = "(UTC+7) Ho Chi Minh"
    JAKARTA         = "(UTC+7) Jakarta"
    CHONGQING       = "(UTC+8) Chongqing"
    HONG_KONG       = "(UTC+8) Hong Kong"
    KUALA_LUMPUR    = "(UTC+8) Kuala Lumpur"
    MANILA          = "(UTC+8) Manila"
    PERTH           = "(UTC+8) Perth"
    SHANGHAI        = "(UTC+8) Shanghai"
    SINGAPORE       = "(UTC+8) Singapore"
    TAIPEI          = "(UTC+8) Taipei"
    SEOUL           = "(UTC+9) Seoul"
    TOKYO           = "(UTC+9) Tokyo"
    ADELAIDE        = "(UTC+9:30/+10:30) Adelaide"
    BRISBANE        = "(UTC+10) Brisbane"
    SYDNEY          = "(UTC+10/+11) Sydney"
    NORFOLK_ISLAND  = "(UTC+11/+12) Norfolk Island"
    NEW_ZEALAND     = "(UTC+12/+13) New Zealand"
    CHATHAM_ISLANDS = "(UTC+12:45/+13:45) Chatham Islands"
    TOKELAU         = "(UTC+13) Tokelau"


// @enum  Timezone list that is equivalent to the `Timezone` enum but without the UTC offset in parentheses.
export enum TimezoneRegion
    UTC             = "UTC"
    EXCHANGE        = "Exchange"
    HONOLULU        = "Honolulu"
    ANCHORAGE       = "Anchorage"
    JUNEAU          = "Juneau"
    LOS_ANGELES     = "Los Angeles"
    VANCOUVER       = "Vancouver"
    DENVER          = "Denver"
    PHOENIX         = "Phoenix"
    CHICAGO         = "Chicago"
    MEXICO_CITY     = "Mexico City"
    SAN_SALVADOR    = "San Salvador"
    BOGOTA          = "Bogota"
    LIMA            = "Lima"
    NEW_YORK        = "New York"
    TORONTO         = "Toronto"
    CARACAS         = "Caracas"
    SANTIAGO        = "Santiago"
    BUENOS_AIRES    = "Buenos Aires"
    SAO_PAULO       = "Sao Paulo"
    AZORES          = "Azores"
    DUBLIN          = "Dublin"
    LISBON          = "Lisbon"
    LONDON          = "London"
    REYKJAVIK       = "Reykjavik"
    AMSTERDAM       = "Amsterdam"
    BELGRADE        = "Belgrade"
    BERLIN          = "Berlin"
    BRATISLAVA      = "Bratislava"
    BRUSSELS        = "Brussels"
    BUDAPEST        = "Budapest"
    CASABLANCA      = "Casablanca"
    COPENHAGEN      = "Copenhagen"
    LAGOS           = "Lagos"
    LUXEMBOURG      = "Luxembourg"
    MADRID          = "Madrid"
    MALTA           = "Malta"
    OSLO            = "Oslo"
    PARIS           = "Paris"
    PRAGUE          = "Prague"
    ROME            = "Rome"
    STOCKHOLM       = "Stockholm"
    TUNIS           = "Tunis"
    VIENNA          = "Vienna"
    WARSAW          = "Warsaw"
    ZURICH          = "Zurich"
    ATHENS          = "Athens"
    BUCHAREST       = "Bucharest"
    CAIRO           = "Cairo"
    HELSINKI        = "Helsinki"
    JERUSALEM       = "Jerusalem"
    JOHANNESBURG    = "Johannesburg"
    NICOSIA         = "Nicosia"
    RIGA            = "Riga"
    TALLINN         = "Tallinn"
    VILNIUS         = "Vilnius"
    BAHRAIN         = "Bahrain"
    ISTANBUL        = "Istanbul"
    KUWAIT          = "Kuwait"
    MOSCOW          = "Moscow"
    NAIROBI         = "Nairobi"
    QATAR           = "Qatar"
    RIYADH          = "Riyadh"
    TEHRAN          = "Tehran"
    DUBAI           = "Dubai"
    MUSCAT          = "Muscat"
    KABUL           = "Kabul"
    ASHGABAT        = "Ashgabat"
    ASTANA          = "Astana"
    KARACHI         = "Karachi"
    COLOMBO         = "Colombo"
    KOLKATA         = "Kolkata"
    KATHMANDU       = "Kathmandu"
    DHAKA           = "Dhaka"
    YANGON          = "Yangon"
    BANGKOK         = "Bangkok"
    HO_CHI_MINH     = "Ho Chi Minh"
    JAKARTA         = "Jakarta"
    CHONGQING       = "Chongqing"
    HONG_KONG       = "Hong Kong"
    KUALA_LUMPUR    = "Kuala Lumpur"
    MANILA          = "Manila"
    PERTH           = "Perth"
    SHANGHAI        = "Shanghai"
    SINGAPORE       = "Singapore"
    TAIPEI          = "Taipei"
    SEOUL           = "Seoul"
    TOKYO           = "Tokyo"
    ADELAIDE        = "Adelaide"
    BRISBANE        = "Brisbane"
    SYDNEY          = "Sydney"
    NORFOLK_ISLAND  = "Norfolk Island"
    NEW_ZEALAND     = "New Zealand"
    CHATHAM_ISLANDS = "Chatham Islands"
    TOKELAU         = "Tokelau"


// @enum  Timezone list that is equivalent to the `Timezone` enum but directly shows the IANA time zone database name
//        instead of showing the city name or region that corresponds to the time zone database name.
//        The enum fields are sorted by alphabetical order but they still represent the same options from the `Timezone` enum.
export enum TimezoneID
    UTC             = "UTC"
    EXCHANGE        = "Exchange"
    CAIRO           = "Africa/Cairo"
    CASABLANCA      = "Africa/Casablanca"
    JOHANNESBURG    = "Africa/Johannesburg"
    LAGOS           = "Africa/Lagos"
    NAIROBI         = "Africa/Nairobi"
    TUNIS           = "Africa/Tunis"
    ANCHORAGE       = "America/Anchorage"
    BUENOS_AIRES    = "America/Argentina/Buenos_Aires"
    BOGOTA          = "America/Bogota"
    CARACAS         = "America/Caracas"
    CHICAGO         = "America/Chicago"
    DENVER          = "America/Denver"
    SAN_SALVADOR    = "America/El_Salvador"
    JUNEAU          = "America/Juneau"
    LIMA            = "America/Lima"
    LOS_ANGELES     = "America/Los_Angeles"
    MEXICO_CITY     = "America/Mexico_City"
    NEW_YORK        = "America/New_York"
    PHOENIX         = "America/Phoenix"
    SANTIAGO        = "America/Santiago"
    SAO_PAULO       = "America/Sao_Paulo"
    TORONTO         = "America/Toronto"
    VANCOUVER       = "America/Vancouver"
    ASTANA          = "Asia/Almaty"
    ASHGABAT        = "Asia/Ashgabat"
    BAHRAIN         = "Asia/Bahrain"
    BANGKOK         = "Asia/Bangkok"
    CHONGQING       = "Asia/Chongqing"
    COLOMBO         = "Asia/Colombo"
    DHAKA           = "Asia/Dhaka"
    DUBAI           = "Asia/Dubai"
    HO_CHI_MINH     = "Asia/Ho_Chi_Minh"
    HONG_KONG       = "Asia/Hong_Kong"
    JAKARTA         = "Asia/Jakarta"
    JERUSALEM       = "Asia/Jerusalem"
    KABUL           = "Asia/Kabul"
    KARACHI         = "Asia/Karachi"
    KATHMANDU       = "Asia/Kathmandu"
    KOLKATA         = "Asia/Kolkata"
    KUALA_LUMPUR    = "Asia/Kuala_Lumpur"
    KUWAIT          = "Asia/Kuwait"
    MANILA          = "Asia/Manila"
    MUSCAT          = "Asia/Muscat"
    NICOSIA         = "Asia/Nicosia"
    QATAR           = "Asia/Qatar"
    RIYADH          = "Asia/Riyadh"
    SEOUL           = "Asia/Seoul"
    SHANGHAI        = "Asia/Shanghai"
    SINGAPORE       = "Asia/Singapore"
    TAIPEI          = "Asia/Taipei"
    TEHRAN          = "Asia/Tehran"
    TOKYO           = "Asia/Tokyo"
    YANGON          = "Asia/Yangon"
    AZORES          = "Atlantic/Azores"
    REYKJAVIK       = "Atlantic/Reykjavik"
    ADELAIDE        = "Australia/Adelaide"
    BRISBANE        = "Australia/Brisbane"
    PERTH           = "Australia/Perth"
    SYDNEY          = "Australia/Sydney"
    AMSTERDAM       = "Europe/Amsterdam"
    ATHENS          = "Europe/Athens"
    BELGRADE        = "Europe/Belgrade"
    BERLIN          = "Europe/Berlin"
    BRATISLAVA      = "Europe/Bratislava"
    BRUSSELS        = "Europe/Brussels"
    BUCHAREST       = "Europe/Bucharest"
    BUDAPEST        = "Europe/Budapest"
    COPENHAGEN      = "Europe/Copenhagen"
    DUBLIN          = "Europe/Dublin"
    HELSINKI        = "Europe/Helsinki"
    ISTANBUL        = "Europe/Istanbul"
    LISBON          = "Europe/Lisbon"
    LONDON          = "Europe/London"
    LUXEMBOURG      = "Europe/Luxembourg"
    MADRID          = "Europe/Madrid"
    MALTA           = "Europe/Malta"
    MOSCOW          = "Europe/Moscow"
    OSLO            = "Europe/Oslo"
    PARIS           = "Europe/Paris"
    PRAGUE          = "Europe/Prague"
    RIGA            = "Europe/Riga"
    ROME            = "Europe/Rome"
    STOCKHOLM       = "Europe/Stockholm"
    TALLINN         = "Europe/Tallinn"
    VIENNA          = "Europe/Vienna"
    VILNIUS         = "Europe/Vilnius"
    WARSAW          = "Europe/Warsaw"
    ZURICH          = "Europe/Zurich"
    NEW_ZEALAND     = "Pacific/Auckland"
    CHATHAM_ISLANDS = "Pacific/Chatham"
    TOKELAU         = "Pacific/Fakaofo"
    HONOLULU        = "Pacific/Honolulu"
    NORFOLK_ISLAND  = "Pacific/Norfolk"


// @enum  Combined list of available UTC offsets from the `TimezoneDST` enum (includes both SDT and DST offsets).
//        Note: using this enum will prevent tracking any UTC offset changes for regions that observe Daylight Saving Time (DST).
export enum OffsetUTC
    MINUS_1000 = "UTC-10"
    MINUS_0900 = "UTC-9"
    MINUS_0800 = "UTC-8"
    MINUS_0700 = "UTC-7"
    MINUS_0600 = "UTC-6"
    MINUS_0500 = "UTC-5"
    MINUS_0400 = "UTC-4"
    MINUS_0300 = "UTC-3"
    MINUS_0100 = "UTC-1"
    PLUS_0000  = "UTC"
    PLUS_0100  = "UTC+1"
    PLUS_0200  = "UTC+2"
    PLUS_0300  = "UTC+3"
    PLUS_0330  = "UTC+3:30"
    PLUS_0400  = "UTC+4"
    PLUS_0430  = "UTC+4:30"
    PLUS_0500  = "UTC+5"
    PLUS_0530  = "UTC+5:30"
    PLUS_0545  = "UTC+5:45"
    PLUS_0600  = "UTC+6"
    PLUS_0630  = "UTC+6:30"
    PLUS_0700  = "UTC+7"
    PLUS_0800  = "UTC+8"
    PLUS_0900  = "UTC+9"
    PLUS_0930  = "UTC+9:30"
    PLUS_1000  = "UTC+10"
    PLUS_1030  = "UTC+10:30"
    PLUS_1100  = "UTC+11"
    PLUS_1200  = "UTC+12"
    PLUS_1245  = "UTC+12:45"
    PLUS_1300  = "UTC+13"
    PLUS_1345  = "UTC+13:45"


// @enum  GMT offset list that is equivalent to the `OffsetUTC` enum but shows the 'GMT' prefix instead of 'UTC'.
//        Note: using this enum will prevent tracking any UTC offset changes for regions that observe Daylight Saving Time (DST).
export enum OffsetGMT
    MINUS_1000 = "GMT-10"
    MINUS_0900 = "GMT-9"
    MINUS_0800 = "GMT-8"
    MINUS_0700 = "GMT-7"
    MINUS_0600 = "GMT-6"
    MINUS_0500 = "GMT-5"
    MINUS_0400 = "GMT-4"
    MINUS_0300 = "GMT-3"
    MINUS_0100 = "GMT-1"
    PLUS_0000  = "GMT"
    PLUS_0100  = "GMT+1"
    PLUS_0200  = "GMT+2"
    PLUS_0300  = "GMT+3"
    PLUS_0330  = "GMT+3:30"
    PLUS_0400  = "GMT+4"
    PLUS_0430  = "GMT+4:30"
    PLUS_0500  = "GMT+5"
    PLUS_0530  = "GMT+5:30"
    PLUS_0545  = "GMT+5:45"
    PLUS_0600  = "GMT+6"
    PLUS_0630  = "GMT+6:30"
    PLUS_0700  = "GMT+7"
    PLUS_0800  = "GMT+8"
    PLUS_0900  = "GMT+9"
    PLUS_0930  = "GMT+9:30"
    PLUS_1000  = "GMT+10"
    PLUS_1030  = "GMT+10:30"
    PLUS_1100  = "GMT+11"
    PLUS_1200  = "GMT+12"
    PLUS_1245  = "GMT+12:45"
    PLUS_1300  = "GMT+13"
    PLUS_1345  = "GMT+13:45"


// @enum  List of all possible UTC time offsets from all regions of the world (includes both SDT and DST offsets).
//        Reference: https://en.wikipedia.org/wiki/List_of_UTC_offsets
//        Note: using this enum will prevent tracking any UTC offset changes for regions that observe Daylight Saving Time (DST).
export enum Offset
    MINUS_1200 = "-12:00"
    MINUS_1100 = "-11:00"
    MINUS_1000 = "-10:00"
    MINUS_0930 = "-09:30"
    MINUS_0900 = "-09:00"
    MINUS_0800 = "-08:00"
    MINUS_0700 = "-07:00"
    MINUS_0600 = "-06:00"
    MINUS_0500 = "-05:00"
    MINUS_0400 = "-04:00"
    MINUS_0330 = "-03:30"
    MINUS_0300 = "-03:00"
    MINUS_0230 = "-02:30"
    MINUS_0200 = "-02:00"
    MINUS_0100 = "-01:00"
    PLUS_0000  = "+00:00"
    PLUS_0100  = "+01:00"
    PLUS_0200  = "+02:00"
    PLUS_0300  = "+03:00"
    PLUS_0330  = "+03:30"
    PLUS_0400  = "+04:00"
    PLUS_0430  = "+04:30"
    PLUS_0500  = "+05:00"
    PLUS_0530  = "+05:30"
    PLUS_0545  = "+05:45"
    PLUS_0600  = "+06:00"
    PLUS_0630  = "+06:30"
    PLUS_0700  = "+07:00"
    PLUS_0800  = "+08:00"
    PLUS_0845  = "+08:45"
    PLUS_0900  = "+09:00"
    PLUS_0930  = "+09:30"
    PLUS_1000  = "+10:00"
    PLUS_1030  = "+10:30"
    PLUS_1100  = "+11:00"
    PLUS_1200  = "+12:00"
    PLUS_1245  = "+12:45"
    PLUS_1300  = "+13:00"
    PLUS_1345  = "+13:45"
    PLUS_1400  = "+14:00"


// @enum  Military time zones including both the time zone name and the UTC offset.
//        Reference: https://en.wikipedia.org/wiki/Military_time_zone
//        Note: using this enum will prevent tracking any UTC offset changes for regions that observe Daylight Saving Time (DST).
export enum MilitaryTimezone
    ALFA     = "UTC+01:00 Alfa"
    BRAVO    = "UTC+02:00 Bravo"
    CHARLIE  = "UTC+03:00 Charlie"
    DELTA    = "UTC+04:00 Delta"
    ECHO     = "UTC+05:00 Echo"
    FOXTROT  = "UTC+06:00 Foxtrot"
    GOLF     = "UTC+07:00 Golf"
    HOTEL    = "UTC+08:00 Hotel"
    INDIA    = "UTC+09:00 India"
    KILO     = "UTC+10:00 Kilo"
    LIMA     = "UTC+11:00 Lima"
    MIKE     = "UTC+12:00 Mike"
    NOVEMBER = "UTC-01:00 November"
    OSCAR    = "UTC-02:00 Oscar"
    PAPA     = "UTC-03:00 Papa"
    QUEBEC   = "UTC-04:00 Quebec"
    ROMEO    = "UTC-05:00 Romeo"
    SIERRA   = "UTC-06:00 Sierra"
    TANGO    = "UTC-07:00 Tango"
    UNIFORM  = "UTC-08:00 Uniform"
    VICTOR   = "UTC-09:00 Victor"
    WHISKEY  = "UTC-10:00 Whiskey"
    X_RAY    = "UTC-11:00 X-ray"
    YANKEE   = "UTC-12:00 Yankee"
    ZULU     = "UTC+00:00 Zulu"


// @enum                          List of formatting options for a time zone offset string.
// @field NONE                    Unmodified time offset (2-digit hours & 2-digit minutes).
// @field TRIM_HOURS              Offset with leading zeroes removed from the hours portion.
// @field TRIM_MINUTES            Offset with the minutes portion removed if it equals to 0.
// @field TRIM_HOURS_AND_MINUTES  Trims both the hours and minutes portion of the offset.
// @field MINIMAL                 Minimal information needed to represent the offset.
// @field TIME_ZONE_ABBREVIATION  Abbreviation of the time zone name.
// @field TIME_ZONE_NAME          Full time zone name.
// @field NAUTICAL                Letter suffix respresenting the nautical time zone.
export enum OffsetFormat
    NONE
    TRIM_HOURS
    TRIM_MINUTES
    TRIM_HOURS_AND_MINUTES
    MINIMAL
    TIME_ZONE_ABBREVIATION
    TIME_ZONE_NAME
    NAUTICAL

//#endregion



//#region ------------------------------ tostring() Functions ------------------------------

// @function  Used to produce an IANA time zone database name that can be passed as a `timezone` parameter.
// ___
// **Usage**
// > ```
// > string timezoneIdentifier = tostring(Timezone.UTC)
// > string timezoneIdentifier = Timezone.UTC.tostring()
// > ```
// >
// @param timezone  (series Timezone) The user-selected timezone.
// @returns         IANA time zone identifier.
export method tostring(Timezone timezone) =>
    switch timezone
        Timezone.UTC             => "Etc/UTC"
        Timezone.EXCHANGE        => syminfo.timezone
        Timezone.HONOLULU        => "Pacific/Honolulu"
        Timezone.ANCHORAGE       => "America/Anchorage"
        Timezone.JUNEAU          => "America/Juneau"
        Timezone.LOS_ANGELES     => "America/Los_Angeles"
        Timezone.VANCOUVER       => "America/Vancouver"
        Timezone.DENVER          => "America/Denver"
        Timezone.PHOENIX         => "America/Phoenix"
        Timezone.CHICAGO         => "America/Chicago"
        Timezone.MEXICO_CITY     => "America/Mexico_City"
        Timezone.SAN_SALVADOR    => "America/El_Salvador"
        Timezone.BOGOTA          => "America/Bogota"
        Timezone.LIMA            => "America/Lima"
        Timezone.NEW_YORK        => "America/New_York"
        Timezone.TORONTO         => "America/Toronto"
        Timezone.CARACAS         => "America/Caracas"
        Timezone.SANTIAGO        => "America/Santiago"
        Timezone.BUENOS_AIRES    => "America/Argentina/Buenos_Aires"
        Timezone.SAO_PAULO       => "America/Sao_Paulo"
        Timezone.AZORES          => "Atlantic/Azores"
        Timezone.DUBLIN          => "Europe/Dublin"
        Timezone.LISBON          => "Europe/Lisbon"
        Timezone.LONDON          => "Europe/London"
        Timezone.REYKJAVIK       => "Atlantic/Reykjavik"
        Timezone.AMSTERDAM       => "Europe/Amsterdam"
        Timezone.BELGRADE        => "Europe/Belgrade"
        Timezone.BERLIN          => "Europe/Berlin"
        Timezone.BRATISLAVA      => "Europe/Bratislava"
        Timezone.BRUSSELS        => "Europe/Brussels"
        Timezone.BUDAPEST        => "Europe/Budapest"
        Timezone.CASABLANCA      => "Africa/Casablanca"
        Timezone.COPENHAGEN      => "Europe/Copenhagen"
        Timezone.LAGOS           => "Africa/Lagos"
        Timezone.LUXEMBOURG      => "Europe/Luxembourg"
        Timezone.MADRID          => "Europe/Madrid"
        Timezone.MALTA           => "Europe/Malta"
        Timezone.OSLO            => "Europe/Oslo"
        Timezone.PARIS           => "Europe/Paris"
        Timezone.PRAGUE          => "Europe/Prague"
        Timezone.ROME            => "Europe/Rome"
        Timezone.STOCKHOLM       => "Europe/Stockholm"
        Timezone.TUNIS           => "Africa/Tunis"
        Timezone.VIENNA          => "Europe/Vienna"
        Timezone.WARSAW          => "Europe/Warsaw"
        Timezone.ZURICH          => "Europe/Zurich"
        Timezone.ATHENS          => "Europe/Athens"
        Timezone.BUCHAREST       => "Europe/Bucharest"
        Timezone.CAIRO           => "Africa/Cairo"
        Timezone.HELSINKI        => "Europe/Helsinki"
        Timezone.JERUSALEM       => "Asia/Jerusalem"
        Timezone.JOHANNESBURG    => "Africa/Johannesburg"
        Timezone.NICOSIA         => "Asia/Nicosia"
        Timezone.RIGA            => "Europe/Riga"
        Timezone.TALLINN         => "Europe/Tallinn"
        Timezone.VILNIUS         => "Europe/Vilnius"
        Timezone.BAHRAIN         => "Asia/Bahrain"
        Timezone.ISTANBUL        => "Europe/Istanbul"
        Timezone.KUWAIT          => "Asia/Kuwait"
        Timezone.MOSCOW          => "Europe/Moscow"
        Timezone.NAIROBI         => "Africa/Nairobi"
        Timezone.QATAR           => "Asia/Qatar"
        Timezone.RIYADH          => "Asia/Riyadh"
        Timezone.TEHRAN          => "Asia/Tehran"
        Timezone.DUBAI           => "Asia/Dubai"
        Timezone.MUSCAT          => "Asia/Muscat"
        Timezone.KABUL           => "Asia/Kabul"
        Timezone.ASHGABAT        => "Asia/Ashgabat"
        Timezone.ASTANA          => "Asia/Almaty"
        Timezone.KARACHI         => "Asia/Karachi"
        Timezone.COLOMBO         => "Asia/Colombo"
        Timezone.KOLKATA         => "Asia/Kolkata"
        Timezone.KATHMANDU       => "Asia/Kathmandu"
        Timezone.DHAKA           => "Asia/Dhaka"
        Timezone.YANGON          => "Asia/Yangon"
        Timezone.BANGKOK         => "Asia/Bangkok"
        Timezone.HO_CHI_MINH     => "Asia/Ho_Chi_Minh"
        Timezone.JAKARTA         => "Asia/Jakarta"
        Timezone.CHONGQING       => "Asia/Chongqing"
        Timezone.HONG_KONG       => "Asia/Hong_Kong"
        Timezone.KUALA_LUMPUR    => "Asia/Kuala_Lumpur"
        Timezone.MANILA          => "Asia/Manila"
        Timezone.PERTH           => "Australia/Perth"
        Timezone.SHANGHAI        => "Asia/Shanghai"
        Timezone.SINGAPORE       => "Asia/Singapore"
        Timezone.TAIPEI          => "Asia/Taipei"
        Timezone.SEOUL           => "Asia/Seoul"
        Timezone.TOKYO           => "Asia/Tokyo"
        Timezone.ADELAIDE        => "Australia/Adelaide"
        Timezone.BRISBANE        => "Australia/Brisbane"
        Timezone.SYDNEY          => "Australia/Sydney"
        Timezone.NORFOLK_ISLAND  => "Pacific/Norfolk"
        Timezone.NEW_ZEALAND     => "Pacific/Auckland"
        Timezone.CHATHAM_ISLANDS => "Pacific/Chatham"
        Timezone.TOKELAU         => "Pacific/Fakaofo"


// @function  Used to produce an IANA time zone database name that can be passed as a `timezone` parameter.
// ___
// **Usage**
// > ```
// > string timezoneIdentifier = tostring(TimezoneDST.UTC)
// > string timezoneIdentifier = TimezoneDST.UTC.tostring()
// > ```
// >
// @param timezone  (series TimezoneDST) The user-selected timezone.
// @returns         IANA time zone identifier.
export method tostring(TimezoneDST timezone) =>
    switch timezone
        TimezoneDST.UTC             => "Etc/UTC"
        TimezoneDST.EXCHANGE        => syminfo.timezone
        TimezoneDST.HONOLULU        => "Pacific/Honolulu"
        TimezoneDST.ANCHORAGE       => "America/Anchorage"
        TimezoneDST.JUNEAU          => "America/Juneau"
        TimezoneDST.LOS_ANGELES     => "America/Los_Angeles"
        TimezoneDST.VANCOUVER       => "America/Vancouver"
        TimezoneDST.DENVER          => "America/Denver"
        TimezoneDST.PHOENIX         => "America/Phoenix"
        TimezoneDST.CHICAGO         => "America/Chicago"
        TimezoneDST.MEXICO_CITY     => "America/Mexico_City"
        TimezoneDST.SAN_SALVADOR    => "America/El_Salvador"
        TimezoneDST.BOGOTA          => "America/Bogota"
        TimezoneDST.LIMA            => "America/Lima"
        TimezoneDST.NEW_YORK        => "America/New_York"
        TimezoneDST.TORONTO         => "America/Toronto"
        TimezoneDST.CARACAS         => "America/Caracas"
        TimezoneDST.SANTIAGO        => "America/Santiago"
        TimezoneDST.BUENOS_AIRES    => "America/Argentina/Buenos_Aires"
        TimezoneDST.SAO_PAULO       => "America/Sao_Paulo"
        TimezoneDST.AZORES          => "Atlantic/Azores"
        TimezoneDST.DUBLIN          => "Europe/Dublin"
        TimezoneDST.LISBON          => "Europe/Lisbon"
        TimezoneDST.LONDON          => "Europe/London"
        TimezoneDST.REYKJAVIK       => "Atlantic/Reykjavik"
        TimezoneDST.AMSTERDAM       => "Europe/Amsterdam"
        TimezoneDST.BELGRADE        => "Europe/Belgrade"
        TimezoneDST.BERLIN          => "Europe/Berlin"
        TimezoneDST.BRATISLAVA      => "Europe/Bratislava"
        TimezoneDST.BRUSSELS        => "Europe/Brussels"
        TimezoneDST.BUDAPEST        => "Europe/Budapest"
        TimezoneDST.CASABLANCA      => "Africa/Casablanca"
        TimezoneDST.COPENHAGEN      => "Europe/Copenhagen"
        TimezoneDST.LAGOS           => "Africa/Lagos"
        TimezoneDST.LUXEMBOURG      => "Europe/Luxembourg"
        TimezoneDST.MADRID          => "Europe/Madrid"
        TimezoneDST.MALTA           => "Europe/Malta"
        TimezoneDST.OSLO            => "Europe/Oslo"
        TimezoneDST.PARIS           => "Europe/Paris"
        TimezoneDST.PRAGUE          => "Europe/Prague"
        TimezoneDST.ROME            => "Europe/Rome"
        TimezoneDST.STOCKHOLM       => "Europe/Stockholm"
        TimezoneDST.TUNIS           => "Africa/Tunis"
        TimezoneDST.VIENNA          => "Europe/Vienna"
        TimezoneDST.WARSAW          => "Europe/Warsaw"
        TimezoneDST.ZURICH          => "Europe/Zurich"
        TimezoneDST.ATHENS          => "Europe/Athens"
        TimezoneDST.BUCHAREST       => "Europe/Bucharest"
        TimezoneDST.CAIRO           => "Africa/Cairo"
        TimezoneDST.HELSINKI        => "Europe/Helsinki"
        TimezoneDST.JERUSALEM       => "Asia/Jerusalem"
        TimezoneDST.JOHANNESBURG    => "Africa/Johannesburg"
        TimezoneDST.NICOSIA         => "Asia/Nicosia"
        TimezoneDST.RIGA            => "Europe/Riga"
        TimezoneDST.TALLINN         => "Europe/Tallinn"
        TimezoneDST.VILNIUS         => "Europe/Vilnius"
        TimezoneDST.BAHRAIN         => "Asia/Bahrain"
        TimezoneDST.ISTANBUL        => "Europe/Istanbul"
        TimezoneDST.KUWAIT          => "Asia/Kuwait"
        TimezoneDST.MOSCOW          => "Europe/Moscow"
        TimezoneDST.NAIROBI         => "Africa/Nairobi"
        TimezoneDST.QATAR           => "Asia/Qatar"
        TimezoneDST.RIYADH          => "Asia/Riyadh"
        TimezoneDST.TEHRAN          => "Asia/Tehran"
        TimezoneDST.DUBAI           => "Asia/Dubai"
        TimezoneDST.MUSCAT          => "Asia/Muscat"
        TimezoneDST.KABUL           => "Asia/Kabul"
        TimezoneDST.ASHGABAT        => "Asia/Ashgabat"
        TimezoneDST.ASTANA          => "Asia/Almaty"
        TimezoneDST.KARACHI         => "Asia/Karachi"
        TimezoneDST.COLOMBO         => "Asia/Colombo"
        TimezoneDST.KOLKATA         => "Asia/Kolkata"
        TimezoneDST.KATHMANDU       => "Asia/Kathmandu"
        TimezoneDST.DHAKA           => "Asia/Dhaka"
        TimezoneDST.YANGON          => "Asia/Yangon"
        TimezoneDST.BANGKOK         => "Asia/Bangkok"
        TimezoneDST.HO_CHI_MINH     => "Asia/Ho_Chi_Minh"
        TimezoneDST.JAKARTA         => "Asia/Jakarta"
        TimezoneDST.CHONGQING       => "Asia/Chongqing"
        TimezoneDST.HONG_KONG       => "Asia/Hong_Kong"
        TimezoneDST.KUALA_LUMPUR    => "Asia/Kuala_Lumpur"
        TimezoneDST.MANILA          => "Asia/Manila"
        TimezoneDST.PERTH           => "Australia/Perth"
        TimezoneDST.SHANGHAI        => "Asia/Shanghai"
        TimezoneDST.SINGAPORE       => "Asia/Singapore"
        TimezoneDST.TAIPEI          => "Asia/Taipei"
        TimezoneDST.SEOUL           => "Asia/Seoul"
        TimezoneDST.TOKYO           => "Asia/Tokyo"
        TimezoneDST.ADELAIDE        => "Australia/Adelaide"
        TimezoneDST.BRISBANE        => "Australia/Brisbane"
        TimezoneDST.SYDNEY          => "Australia/Sydney"
        TimezoneDST.NORFOLK_ISLAND  => "Pacific/Norfolk"
        TimezoneDST.NEW_ZEALAND     => "Pacific/Auckland"
        TimezoneDST.CHATHAM_ISLANDS => "Pacific/Chatham"
        TimezoneDST.TOKELAU         => "Pacific/Fakaofo"


// @function  Used to produce an IANA time zone database name that can be passed as a `timezone` parameter.
// ___
// **Usage**
// > ```
// > string timezoneIdentifier = tostring(TimezoneRegion.UTC)
// > string timezoneIdentifier = TimezoneRegion.UTC.tostring()
// > ```
// >
// @param timezone  (series TimezoneRegion) The user-selected timezone.
// @returns         IANA time zone identifier.
export method tostring(TimezoneRegion timezone) =>
    switch timezone
        TimezoneRegion.UTC             => "Etc/UTC"
        TimezoneRegion.EXCHANGE        => syminfo.timezone
        TimezoneRegion.HONOLULU        => "Pacific/Honolulu"
        TimezoneRegion.ANCHORAGE       => "America/Anchorage"
        TimezoneRegion.JUNEAU          => "America/Juneau"
        TimezoneRegion.LOS_ANGELES     => "America/Los_Angeles"
        TimezoneRegion.VANCOUVER       => "America/Vancouver"
        TimezoneRegion.DENVER          => "America/Denver"
        TimezoneRegion.PHOENIX         => "America/Phoenix"
        TimezoneRegion.CHICAGO         => "America/Chicago"
        TimezoneRegion.MEXICO_CITY     => "America/Mexico_City"
        TimezoneRegion.SAN_SALVADOR    => "America/El_Salvador"
        TimezoneRegion.BOGOTA          => "America/Bogota"
        TimezoneRegion.LIMA            => "America/Lima"
        TimezoneRegion.NEW_YORK        => "America/New_York"
        TimezoneRegion.TORONTO         => "America/Toronto"
        TimezoneRegion.CARACAS         => "America/Caracas"
        TimezoneRegion.SANTIAGO        => "America/Santiago"
        TimezoneRegion.BUENOS_AIRES    => "America/Argentina/Buenos_Aires"
        TimezoneRegion.SAO_PAULO       => "America/Sao_Paulo"
        TimezoneRegion.AZORES          => "Atlantic/Azores"
        TimezoneRegion.DUBLIN          => "Europe/Dublin"
        TimezoneRegion.LISBON          => "Europe/Lisbon"
        TimezoneRegion.LONDON          => "Europe/London"
        TimezoneRegion.REYKJAVIK       => "Atlantic/Reykjavik"
        TimezoneRegion.AMSTERDAM       => "Europe/Amsterdam"
        TimezoneRegion.BELGRADE        => "Europe/Belgrade"
        TimezoneRegion.BERLIN          => "Europe/Berlin"
        TimezoneRegion.BRATISLAVA      => "Europe/Bratislava"
        TimezoneRegion.BRUSSELS        => "Europe/Brussels"
        TimezoneRegion.BUDAPEST        => "Europe/Budapest"
        TimezoneRegion.CASABLANCA      => "Africa/Casablanca"
        TimezoneRegion.COPENHAGEN      => "Europe/Copenhagen"
        TimezoneRegion.LAGOS           => "Africa/Lagos"
        TimezoneRegion.LUXEMBOURG      => "Europe/Luxembourg"
        TimezoneRegion.MADRID          => "Europe/Madrid"
        TimezoneRegion.MALTA           => "Europe/Malta"
        TimezoneRegion.OSLO            => "Europe/Oslo"
        TimezoneRegion.PARIS           => "Europe/Paris"
        TimezoneRegion.PRAGUE          => "Europe/Prague"
        TimezoneRegion.ROME            => "Europe/Rome"
        TimezoneRegion.STOCKHOLM       => "Europe/Stockholm"
        TimezoneRegion.TUNIS           => "Africa/Tunis"
        TimezoneRegion.VIENNA          => "Europe/Vienna"
        TimezoneRegion.WARSAW          => "Europe/Warsaw"
        TimezoneRegion.ZURICH          => "Europe/Zurich"
        TimezoneRegion.ATHENS          => "Europe/Athens"
        TimezoneRegion.BUCHAREST       => "Europe/Bucharest"
        TimezoneRegion.CAIRO           => "Africa/Cairo"
        TimezoneRegion.HELSINKI        => "Europe/Helsinki"
        TimezoneRegion.JERUSALEM       => "Asia/Jerusalem"
        TimezoneRegion.JOHANNESBURG    => "Africa/Johannesburg"
        TimezoneRegion.NICOSIA         => "Asia/Nicosia"
        TimezoneRegion.RIGA            => "Europe/Riga"
        TimezoneRegion.TALLINN         => "Europe/Tallinn"
        TimezoneRegion.VILNIUS         => "Europe/Vilnius"
        TimezoneRegion.BAHRAIN         => "Asia/Bahrain"
        TimezoneRegion.ISTANBUL        => "Europe/Istanbul"
        TimezoneRegion.KUWAIT          => "Asia/Kuwait"
        TimezoneRegion.MOSCOW          => "Europe/Moscow"
        TimezoneRegion.NAIROBI         => "Africa/Nairobi"
        TimezoneRegion.QATAR           => "Asia/Qatar"
        TimezoneRegion.RIYADH          => "Asia/Riyadh"
        TimezoneRegion.TEHRAN          => "Asia/Tehran"
        TimezoneRegion.DUBAI           => "Asia/Dubai"
        TimezoneRegion.MUSCAT          => "Asia/Muscat"
        TimezoneRegion.KABUL           => "Asia/Kabul"
        TimezoneRegion.ASHGABAT        => "Asia/Ashgabat"
        TimezoneRegion.ASTANA          => "Asia/Almaty"
        TimezoneRegion.KARACHI         => "Asia/Karachi"
        TimezoneRegion.COLOMBO         => "Asia/Colombo"
        TimezoneRegion.KOLKATA         => "Asia/Kolkata"
        TimezoneRegion.KATHMANDU       => "Asia/Kathmandu"
        TimezoneRegion.DHAKA           => "Asia/Dhaka"
        TimezoneRegion.YANGON          => "Asia/Yangon"
        TimezoneRegion.BANGKOK         => "Asia/Bangkok"
        TimezoneRegion.HO_CHI_MINH     => "Asia/Ho_Chi_Minh"
        TimezoneRegion.JAKARTA         => "Asia/Jakarta"
        TimezoneRegion.CHONGQING       => "Asia/Chongqing"
        TimezoneRegion.HONG_KONG       => "Asia/Hong_Kong"
        TimezoneRegion.KUALA_LUMPUR    => "Asia/Kuala_Lumpur"
        TimezoneRegion.MANILA          => "Asia/Manila"
        TimezoneRegion.PERTH           => "Australia/Perth"
        TimezoneRegion.SHANGHAI        => "Asia/Shanghai"
        TimezoneRegion.SINGAPORE       => "Asia/Singapore"
        TimezoneRegion.TAIPEI          => "Asia/Taipei"
        TimezoneRegion.SEOUL           => "Asia/Seoul"
        TimezoneRegion.TOKYO           => "Asia/Tokyo"
        TimezoneRegion.ADELAIDE        => "Australia/Adelaide"
        TimezoneRegion.BRISBANE        => "Australia/Brisbane"
        TimezoneRegion.SYDNEY          => "Australia/Sydney"
        TimezoneRegion.NORFOLK_ISLAND  => "Pacific/Norfolk"
        TimezoneRegion.NEW_ZEALAND     => "Pacific/Auckland"
        TimezoneRegion.CHATHAM_ISLANDS => "Pacific/Chatham"
        TimezoneRegion.TOKELAU         => "Pacific/Fakaofo"


// @function  Used to produce an IANA time zone database name that can be passed as a `timezone` parameter.
// ___
// **Usage**
// > ```
// > string timezoneIdentifier = tostring(TimezoneID.UTC)
// > string timezoneIdentifier = TimezoneID.UTC.tostring()
// > ```
// >
// @param timezone  (series TimezoneID) The user-selected timezone.
// @returns         IANA time zone identifier.
export method tostring(TimezoneID timezone) =>
    switch timezone
        TimezoneID.UTC      => "Etc/UTC"
        TimezoneID.EXCHANGE => syminfo.timezone
        => str.tostring(timezone)


// @function  Used to produce a UTC offset that can be passed as a `timezone` parameter.
// ___
// **Usage**
// > ```
// > string timeOffset = tostring(OffsetUTC.PLUS_0000)
// > string timeOffset = OffsetUTC.PLUS_0000.tostring()
// > ```
// >
// @param offset  (series OffsetUTC) The user-selected offset.
// @returns       UTC offset.
export method tostring(OffsetUTC offset) =>
    str.tostring(offset)


// @function  Used to produce a GMT offset that can be passed as a `timezone` parameter.
// ___
// **Usage**
// > ```
// > string timeOffset = tostring(OffsetGMT.PLUS_0000)
// > string timeOffset = OffsetGMT.PLUS_0000.tostring()
// > ```
// >
// @param offset  (series OffsetGMT) The user-selected offset.
// @returns       GMT offset.
export method tostring(OffsetGMT offset) =>
    str.tostring(offset)


// @function  Used to produce a UTC offset that can be passed as a `timezone` parameter.
// ___
// **Usage**
// > ```
// > string timeOffset = tostring(Offset.PLUS_0000)
// > string timeOffset = Offset.PLUS_0000.tostring()
// > ```
// >
// @param offset  (series Offset) The user-selected offset.
// @returns       UTC offset.
export method tostring(Offset offset) =>
    "UTC" + str.tostring(offset)


// @function  Used to produce a UTC offset that can be passed as a `timezone` parameter.
// ___
// **Usage**
// > ```
// > string timeOffset = tostring(MilitaryTimezone.ZULU)
// > string timeOffset = MilitaryTimezone.ZULU.tostring()
// > ```
// >
// @param offset  (series MilitaryTimezone) The user-selected offset.
// @returns       UTC offset.
export method tostring(MilitaryTimezone timezone) =>
    string title = str.tostring(timezone)
    str.substring(title, 0, 9)

//#endregion



//#region ------------------------------ Offset Formatting ------------------------------

// @function         Extracts the time offset components from a UNIX timestamp.
// @param timestamp  (series int) The UNIX timestamp.
// @param timezone   (series string) The timezone used to represent the timestamp.
// @param colon      (series bool) True if the colon separator should be used.
// @returns          A tuple of string elements: [sign, hours, separator, minutes], where `sign` is '+' or '-', and `separator` is ':' or [na](https://www.tradingview.com/pine-script-reference/v6/#var_na).
components(int timestamp, string timezone, bool colon) =>
    string offset = str.format_time(timestamp, "Z", timezone)

    if str.length(offset) != 5 or na(str.tonumber(offset))
        runtime.error("Time zone (UTC offset) is not in ±HHmm format")

    string separator = colon ? ":" : na

    string sign = str.substring(offset, 0, 1)
    string hours = str.substring(offset, 1, 3)
    string minutes = str.substring(offset, 3, 5)
    [sign, hours, separator, minutes]


// @function               Gets the letter that is used to designate a military time zone. \
//                         Note: the zone description indicates the correction which must be applied to a military time in order to convert to UTC. \
//                         Therefore, the zone description is the same integer as the UTC offset but using the opposite sign (plus or minus). \
//                         Reference: https://en.wikipedia.org/wiki/Military_time_zone
// @param zoneDescription  (series int) The numeric zone description for a Military time zone.
// @returns                Military time zone letter.
getZoneLetter(int zoneDescription) =>
    switch zoneDescription
        -1  => "A"
        -2  => "B"
        -3  => "C"
        -4  => "D"
        -5  => "E"
        -6  => "F"
        -7  => "G"
        -8  => "H"
        -9  => "I"
        -10 => "K"
        -11 => "L"
        -12 => "M"
        +1  => "N"
        +2  => "O"
        +3  => "P"
        +4  => "Q"
        +5  => "R"
        +6  => "S"
        +7  => "T"
        +8  => "U"
        +9  => "V"
        +10 => "W"
        +11 => "X"
        +12 => "Y"
        0   => "Z"


// @function         Builds a UTC offset string in the default format (±HHmm or ±HH:mm).
// @param timestamp  (series int) A UNIX time.
// @param timezone   (series string) A UTC/GMT offset or IANA time zone identifier.
// @param colon      (series bool) Optional usage of colon separator.
// @returns          A UTC offset in ±HH[:]mm format.
default(int timestamp, string timezone, bool colon) =>
    [sign, hours, separator, minutes] = components(timestamp, timezone, colon)
    sign + hours + separator + minutes


// @function         Trims the hours portion of a time offset.
// @param timestamp  (series int) A UNIX time.
// @param timezone   (series string) A UTC/GMT offset or IANA time zone identifier.
// @param colon      (series bool) Optional usage of colon separator.
// @returns          A time offset string.
trimHours(series int timestamp, string timezone, bool colon) =>
    [sign, hours, separator, minutes] = components(timestamp, timezone, colon)
    if str.startswith(hours, "0")
        hours := str.substring(hours, 1)
    sign + hours + separator + minutes


// @function         Trims the minutes portion of a time offset.
// @param timestamp  (series int) A UNIX time.
// @param timezone   (series string) A UTC/GMT offset or IANA time zone identifier.
// @param colon      (series bool) Optional usage of colon separator.
// @returns          A time offset string.
trimMinutes(int timestamp, string timezone, bool colon) =>
    [sign, hours, separator, minutes] = components(timestamp, timezone, colon)
    minutes == "00" ? (sign + hours) : (sign + hours + separator + minutes)


// @function         Trims both the hours and minutes portion of a time offset.
// @param timestamp  (series int) A UNIX time.
// @param timezone   (series string) A UTC/GMT offset or IANA time zone identifier.
// @param colon      (series bool) Optional usage of colon separator.
// @returns          A time offset string.
trimHoursAndMinutes(int timestamp, string timezone, bool colon) =>
    [sign, hours, separator, minutes] = components(timestamp, timezone, colon)
    if str.startswith(hours, "0")
        hours := str.substring(hours, 1)
    minutes == "00" ? (sign + hours) : (sign + hours + separator + minutes)


// @function         Reduces a time offset to the minimum amount of necessary information.
// @param timestamp  (series int) A UNIX time.
// @param timezone   (series string) A UTC/GMT offset or IANA time zone identifier.
// @param colon      (series bool) Optional usage of colon separator.
// @returns          A time offset string, or `na` if there is no offset (i.e., the original offset is +0000).
minimal(int timestamp, string timezone, bool colon) =>
    string trimmedOffset = trimHoursAndMinutes(timestamp, timezone, colon)
    trimmedOffset == "+0" ? na : trimmedOffset


// @function         Converts a time offset to the letter suffix used for a nautical time zone. \
//                   References: \
//                   https://en.wikipedia.org/wiki/Nautical_time \
//                   https://web.archive.org/web/20230106063023/http://astro.ukho.gov.uk/nao/miscellanea/WMTZ/
// @param timestamp  (series int) A UNIX time.
// @param timezone   (series string) A UTC/GMT offset or IANA time zone identifier.
// @returns          A nautical letter, or a section sign (§) if the time offset does not align with a nautical time zone.
nautical(int timestamp, string timezone) =>
    [sign, hours, _, minutes] = components(timestamp, timezone, false)
    string offset = sign + hours + minutes

    if offset == "+1400"
        getZoneLetter(-12) + "†"
    else if offset == "+1345"
        getZoneLetter(1) + "‡"
    else if offset == "+1300"
        getZoneLetter(-12) + "*"
    else if offset == "+1245"
        getZoneLetter(-12) + "‡"
    else if str.startswith(offset, "+12")
        str.endswith(offset, "00") ? getZoneLetter(-12) : "§"
    else
        int zoneDescription = math.round(str.tonumber(sign + hours)) * -1
        string nauticalLetter = getZoneLetter(zoneDescription)
        string extension = switch minutes
            "45" => "†"
            "30" => "*"
            "00" => na
            => "§"
        na(nauticalLetter) or extension == "§" ? "§" : nauticalLetter + extension


// @function  Formats the time offset from a UNIX timestamp represented in a specified timezone. \
//            \
//            The `prefix` and `colon` parameters are unused if the `format` parameter is any of the following:\
//            OffsetFormat.TIME_ZONE_ABBREVIATION, OffsetFormat.TIME_ZONE_NAME, OffsetFormat.NAUTICAL. \
//            \
//            Note: if the `timezone` parameter represents a fixed offset from UTC rather than an IANA time zone identifier, \
//            then using `format` = OffsetFormat.TIME_ZONE_ABBREVIATION or OffsetFormat.TIME_ZONE_NAME \
//            will cause the function to return a result that uses a 'GMT±HH:mm' format.
// ___
// **Parameters**
// ```
// • series int timestamp
// • series OffsetFormat format
// • series string timezone
// • series string prefix
// • series bool colon
// ```
// `timestamp` - The UNIX timestamp (in milliseconds) to get the time offset from. \
// `format` - The formatting option for the time offset in the resulting string.  The default is OffsetFormat.NONE. \
// `timezone` - A timezone specified in either UTC/GMT notation or as an IANA time zone database name.  The default is [syminfo.timezone](https://www.tradingview.com/pine-script-reference/v6/#var_syminfo.timezone). \
// `prefix` - The prefix to add at the beginning of the resulting string: 'UTC', 'GMT', or [na](https://www.tradingview.com/pine-script-reference/v6/#var_na).  The default is no prefix. \
// `colon` - Whether to include a colon separator between the hours & minutes portion of the time offset.  The default is [false](https://www.tradingview.com/pine-script-reference/v6/#const_false).
// ___
// **Usage**
// > ```
// > int timestamp = timenow
// > string timezone = input.enum(Timezone.EXCHANGE).tostring()
// > string offset = offset(timestamp, OffsetFormat.NONE, timezone, prefix = "UTC", colon = true)
// > ```
// >
// ___
// **Examples** \
// The table below shows example outputs using `prefix` = 'UTC' and `colon` = true
// ```
//
// Example offset:                        │ '-0500'                 │ '+0000'               │ '+0530'
// ───────────────────────────────────────┼─────────────────────────┼───────────────────────┼──────────────────────
// OffsetFormat.NONE                      │ 'UTC-05:00'             │ 'UTC+00:00'           │ 'UTC+05:30'
// OffsetFormat.TRIM_HOURS                │ 'UTC-5:00'              │ 'UTC+0:00'            │ 'UTC+5:30'
// OffsetFormat.TRIM_MINUTES              │ 'UTC-05'                │ 'UTC+00'              │ 'UTC+05:30'
// OffsetFormat.TRIM_HOURS_AND_MINUTES    │ 'UTC-5'                 │ 'UTC+0'               │ 'UTC+5:30'
// OffsetFormat.MINIMAL                   │ 'UTC-5'                 │ 'UTC'                 │ 'UTC+5:30'
// OffsetFormat.TIME_ZONE_ABBREVIATION    │ 'EST'                   │ 'GMT'                 │ 'IST'
// OffsetFormat.TIME_ZONE_NAME            │ 'Eastern Standard Time' │ 'Greenwich Mean Time' │ 'India Standard Time'
// OffsetFormat.NAUTICAL                  │ 'R'                     │ 'Z'                   │ 'E*'
//
//
// ```
// The original, unmodified time offset can be retrieved by using the default values for these parameters: `format`, `prefix`, `colon`
// > ```
// > string offset = offset(timestamp, OffsetFormat.NONE, timezone, prefix = na, colon = false)
// > string offset = offset(timestamp, timezone = timezone) // equivalent to the above
// > ```
// >
// Use the following parameters to match the display format that TradingView uses for UTC offsets:
// > ```
// > string offset = offset(timestamp, OffsetFormat.MINIMAL, timezone, prefix = "UTC", colon = true)
// > ```
// >
// ___
// @param timestamp  (series int) A UNIX time.
// @param format     (series OffsetFormat) A time offset format.
// @param timezone   (series string) A UTC/GMT offset or IANA time zone identifier.
// @param prefix     (series string) Optional 'UTC' or 'GMT' prefix for the result.
// @param colon      (series bool) Optional usage of colon separator.
// @returns          Time zone offset using the selected format.
export offset(int timestamp, OffsetFormat format = OffsetFormat.NONE, string timezone = syminfo.timezone, string prefix = na, bool colon = false) =>
    if not na(prefix)
        if prefix != "UTC" and prefix != "GMT"
            runtime.error("Invalid value for the 'prefix' argument ('" + prefix + "') in the 𝚘𝚏𝚏𝚜𝚎𝚝() function. Possible values: 'UTC', 'GMT', na")

    switch format
        OffsetFormat.NONE                   => prefix + default(timestamp, timezone, colon)
        OffsetFormat.TRIM_HOURS             => prefix + trimHours(timestamp, timezone, colon)
        OffsetFormat.TRIM_MINUTES           => prefix + trimMinutes(timestamp, timezone, colon)
        OffsetFormat.TRIM_HOURS_AND_MINUTES => prefix + trimHoursAndMinutes(timestamp, timezone, colon)
        OffsetFormat.MINIMAL                => prefix + minimal(timestamp, timezone, colon)
        OffsetFormat.TIME_ZONE_ABBREVIATION => str.format_time(timestamp, "z", timezone)
        OffsetFormat.TIME_ZONE_NAME         => str.format_time(timestamp, "zzzz", timezone)
        OffsetFormat.NAUTICAL               => nautical(timestamp, timezone)
        => prefix + default(timestamp, timezone, colon)

//#endregion



//#region ------------------------------ Script Code ------------------------------

const string TIMEZONE_TOOLTIP = "The timezone list shows the UTC offsets\nin Standard Time (SDT), "
                              + "but the script's\ntime calculations will automatically apply\nDaylight Saving Time (DST) as necessary"

timezoneInput = input.enum(Timezone.EXCHANGE, "Timezone", tooltip = TIMEZONE_TOOLTIP)


string selectedTimezone = str.tostring(timezoneInput)
string timezoneIdentifier = timezoneInput.tostring()

int currentTime = timenow
string date = str.format_time(currentTime, "MMM dd, yyyy  hh:mm a", timezoneIdentifier)
string formattedOffset = offset(currentTime, OffsetFormat.MINIMAL, timezoneIdentifier, prefix = "UTC", colon = true)


var table table = table.new(position.top_right, 2, 3, chart.fg_color)

if barstate.islast
    table.cell(table, 0, 0, text_color = chart.bg_color, text_halign = text.align_left, text = "Selected timezone:")
    table.cell(table, 1, 0, text_color = chart.bg_color, text_halign = text.align_left, text = selectedTimezone)
    table.cell(table, 0, 1, text_color = chart.bg_color, text_halign = text.align_left, text = "IANA time zone identifier:")
    table.cell(table, 1, 1, text_color = chart.bg_color, text_halign = text.align_left, text = timezoneIdentifier)
    table.cell(table, 0, 2, text_color = chart.bg_color, text_halign = text.align_left, text = "Formatted `timenow`:")
    table.cell(table, 1, 2, text_color = chart.bg_color, text_halign = text.align_left, text = date + " (" + formattedOffset + ")")

//#endregion