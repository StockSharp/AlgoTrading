//@version=5
strategy("EXODUS", overlay=true, default_qty_type=strategy.percent_of_equity, default_qty_value=5, margin_long=100, margin_short=100, pyramiding=0)

//==== INPUTS ====
spr_lookback    = input.int(15, "SPR Lookback")
spr_threshold   = input.float(0.7, "SPR Threshold")
spr_atr_length  = input.int(21, "SPR ATR Length")
vwmo_momlen     = input.int(21, "VWMO Momentum Length")
vwmo_volback    = input.int(30, "VWMO Volume Lookback")
vwmo_smooth     = input.int(9,  "VWMO Smoothing")
vwmo_threshold  = input.float(10, "VWMO Threshold")
vei_eflen       = input.int(14, "VEI Efficiency Smoothing")
vei_momlen      = input.int(8, "VEI Momentum Length")
vei_threshold   = input.float(4.5, "VEI Threshold")
risk            = input.float(0.4, "Risk % per Trade")
atr_len         = input.int(21, "ATR Length")
atr_mult        = input.float(2.1, "ATR Mult (Stop)")
tp_mult         = input.float(4.1, "TP Mult (TakeProfit)")
adx_len         = input.int(21, "ADX Length")
adx_min         = input.float(27, "Min ADX (Trend)")
min_atr_mult    = input.float(1.0, "ATR min mult (Volatility Gate)")
chop_len        = input.int(14, "Choppiness Index Len")
chop_th         = input.float(54.5, "Chop. Index Max for Trades")
vol_expansion   = input.float(1.12, "ATR Expansion Gate (Ratio)")

//==== SPR ====
rth_session  = input.session("0930-1600","SPR: RTH Sess.")
rth_timezone = "America/New_York"
is_rth_bool  = not na(time(timeframe.period, rth_session, rth_timezone))
var float prev_session_close = na
var float cumulative_volume_rth = 0.0
var float recalibration_score_rth = na
session_start = is_rth_bool and not is_rth_bool[1]
session_end   = not is_rth_bool and is_rth_bool[1]
if session_end
    prev_session_close := close
if is_rth_bool
    cumulative_volume_rth := session_start ? volume : cumulative_volume_rth[1] + volume
else
    cumulative_volume_rth := 0.0
if is_rth_bool and not na(prev_session_close)
    price_dev = close - prev_session_close
    recalibration_score_rth := price_dev * cumulative_volume_rth
else
    recalibration_score_rth := na
var float spr_val = na
if is_rth_bool and not na(recalibration_score_rth)
    spr_val := recalibration_score_rth - nz(recalibration_score_rth[spr_lookback])
else
    spr_val := na
spr_atr_val = ta.atr(spr_atr_length)
spr_normalized = not na(spr_val) and spr_atr_val > 0 ? spr_val / (spr_atr_val + 1e-9) : na

//==== VWMO ====
price_mom = close - close[vwmo_momlen]
avg_vol   = ta.sma(volume, vwmo_volback)
vol_weight = volume / math.max(avg_vol, 1)
vwm_raw   = price_mom * vol_weight
vwmo      = ta.sma(vwm_raw, vwmo_smooth)
vwmo_normalized = vwmo

//==== VEI ====
bar_rng_vei    = high - low
bar_vol_vei    = math.max(volume, 1)
bar_efficiency = bar_rng_vei / bar_vol_vei
sm_eff         = ta.ema(bar_efficiency, vei_eflen)
vei_mom        = sm_eff - nz(sm_eff[vei_momlen])
bar_inertia    = bar_vol_vei / math.max(bar_rng_vei, syminfo.mintick * 0.1)
sm_inertia     = ta.ema(bar_inertia, vei_eflen)
vei_inertia_ch = sm_inertia - nz(sm_inertia[vei_momlen])
vei_comp       = vei_mom - ta.ema(vei_inertia_ch, vei_eflen)
vei_normalized = ta.sma(vei_comp, 3)

//==== ADX ====
up   = ta.change(high)
down = -ta.change(low)
plusDM  = na(up)   ? na : (up > down and up > 0 ? up : 0)
minusDM = na(down) ? na : (down > up and down > 0 ? down : 0)
trur = ta.rma(ta.tr, adx_len)
plusDI = 100 * ta.rma(plusDM, adx_len) / trur
minusDI = 100 * ta.rma(minusDM, adx_len) / trur
dx = 100 * math.abs(plusDI - minusDI) / (plusDI + minusDI)
adx_value = ta.rma(dx, adx_len)

//==== CHOPPINESS ====
float sum_tr = 0.0
for i = 0 to chop_len - 1
    sum_tr += nz(ta.tr[i])
high_max   = ta.highest(high, chop_len)
low_min    = ta.lowest(low, chop_len)
chop_range = high_max - low_min
choppiness = na(chop_range) or chop_range == 0 ? na : 100 * math.log10(sum_tr / chop_range) / math.log10(chop_len)
allow_chop = choppiness < chop_th

//==== ATR AND VOLATILITY ====
atr_value = ta.atr(atr_len)
min_atr = ta.sma(atr_value, 60) * min_atr_mult
allow_vol = atr_value > min_atr
atr_expansion = atr_value > ta.atr(atr_len)[10] * vol_expansion
allow_trend = adx_value > adx_min

//==== DYNAMIC SIZING ====
riskdollar = strategy.equity * risk / 100
sz = math.round(riskdollar / (atr_value * atr_mult))
sz := math.max(sz, 10)
sz := math.min(sz, 200)

//==== VOTE ENGINE ====
score_long = 0
votes_long = 0
score_short = 0
votes_short = 0
if not na(spr_normalized)
    score_long += spr_normalized >  spr_threshold ? 1 : 0
    votes_long += 1
if not na(vwmo_normalized)
    score_long += vwmo_normalized > vwmo_threshold ? 1 : 0
    votes_long += 1
if not na(vei_normalized)
    score_long += vei_normalized > vei_threshold ? 1 : 0
    votes_long += 1
if not na(spr_normalized)
    score_short += spr_normalized < -spr_threshold ? 1 : 0
    votes_short += 1
if not na(vwmo_normalized)
    score_short += vwmo_normalized < -vwmo_threshold ? 1 : 0
    votes_short += 1
if not na(vei_normalized)
    score_short += vei_normalized < -vei_threshold ? 1 : 0
    votes_short += 1

min_votes_long  = 3
min_votes_short = 3
long_ok  = votes_long >= 3 and score_long == 3
short_ok = votes_short >= 3 and score_short == 3

no_trade_zone = (math.abs(spr_normalized) < spr_threshold/2) and (math.abs(vwmo_normalized) < vwmo_threshold/2) and (math.abs(vei_normalized) < vei_threshold/2)

//==== ENTRIES / EXITS ====
trade_long  = long_ok and allow_trend and allow_vol and allow_chop and atr_expansion and not no_trade_zone
trade_short = short_ok and allow_trend and allow_vol and allow_chop and atr_expansion and not no_trade_zone

if trade_long
    strategy.entry("EXODUS Long", strategy.long, qty=sz)
if trade_short
    strategy.entry("EXODUS Short", strategy.short, qty=sz)

strategy.exit("Long Exit",  from_entry="EXODUS Long",  stop=close-atr_value*atr_mult, limit=close+atr_value*tp_mult)
strategy.exit("Short Exit", from_entry="EXODUS Short", stop=close+atr_value*atr_mult, limit=close-atr_value*tp_mult)

if (strategy.position_size > 0 and score_long < 2)
    strategy.close("EXODUS Long", comment="Votes dropped")
if (strategy.position_size < 0 and score_short < 2)
    strategy.close("EXODUS Short", comment="Votes dropped")

//==== REGIME (for dashboard color/status) ====
regime = strategy.position_size > 0 ? 1 : strategy.position_size < 0 ? -1 : 0

//==== WIN PCT ====
win_pct = strategy.closedtrades > 0 ? strategy.wintrades / strategy.closedtrades : na
win_pct_display = na(win_pct) ? 0 : win_pct * 100
win_color = win_pct_display > 50 ? color.lime : color.red

//==== VISUAL HELPERS ====
get_progress(pct) =>
    full = math.round(pct * 0.10)
    empty = 10 - full
    str.repeat("█", full) + str.repeat("░", empty)

//==== STREAK ====
var int streak = 0
bool won_last = strategy.closedtrades > nz(strategy.closedtrades[1]) and strategy.wintrades > nz(strategy.wintrades[1])
bool lost_last = strategy.closedtrades > nz(strategy.closedtrades[1]) and strategy.wintrades < nz(strategy.wintrades[1])
streak := won_last ? nz(streak[1]) + 1 : lost_last ? nz(streak[1]) - 1 : nz(streak[1])
string streak_emoji = streak >= 3 ? "🔥" : streak <= -3 ? "❄️" : "●"

//==== MARKET MOOD HEATMAP ====
bgcolor(trade_long ? color.new(color.lime,90) : trade_short ? color.new(color.red,90) : allow_chop and not trade_long and not trade_short ? color.new(color.navy,97) : na, title="Regime Heatmap")

//==== ENTRY/EXIT VISUALS ====
if trade_long
    label.new(bar_index, low, "▲LONG\nSz:" + str.tostring(sz) + "\nADX:" + str.tostring(adx_value, "#.##"), color=color.new(color.lime, 82), textcolor=color.black, size=size.normal, yloc=yloc.belowbar, style=label.style_label_up)
if trade_short
    label.new(bar_index, high, "▼SHORT\nSz:" + str.tostring(sz) + "\nADX:" + str.tostring(adx_value, "#.##"), color=color.new(color.red, 82), textcolor=color.white, size=size.normal, yloc=yloc.abovebar, style=label.style_label_down)
plotshape(trade_long, style=shape.triangleup, location=location.belowbar, color=color.new(color.lime, 14), size=size.large, title="Buy Glow")
plotshape(trade_short, style=shape.triangledown, location=location.abovebar, color=color.new(color.red, 14), size=size.large, title="Sell Glow")

//==== SCORE PLOTS =====
plot(score_long, title="Score L", color=color.lime, linewidth=2, display=display.data_window)
plot(score_short, title="Score S", color=color.red, linewidth=2, display=display.data_window)

//==== BARCOLOR SIGNALS ====
barcolor(trade_long ? color.new(color.lime,89) : na)
barcolor(trade_short ? color.new(color.red,89) : na)
barcolor(spr_normalized > spr_threshold and not trade_long ? color.new(color.teal,92) : na)
barcolor(spr_normalized < -spr_threshold and not trade_short ? color.new(color.fuchsia,92) : na)

// ==== DASHBOARD (TOP RIGHT TABLE) ====
var table dash = na
if na(dash)
    dash := table.new(position.top_right, 2, 3, bgcolor=color.new(color.black, 95), border_color=color.purple)
table.clear(dash, 0, 0)

// HEADER
table.cell(dash, 0, 0, "      ⚡Dskyz (DAFE) EXODUS      ", bgcolor=color.purple, text_color=color.black, text_size=size.large)
table.merge_cells(dash, 0, 0, 1, 0)
table.cell(dash, 0, 1,
     "SPR: " + str.tostring(spr_normalized, "#.##") +
     " | VWMO: " + str.tostring(vwmo_normalized, "#.##")  +
     " | VEI: " + str.tostring(vei_normalized, "#.##") +
     "\nADX: " + str.tostring(adx_value, "#.##") +
     " | Chop: " + str.tostring(choppiness, "#.##") +
     "\nStatus: " + (regime == 1 ? "LONG" : regime == -1 ? "SHORT" : "NEUTRAL"),
     text_color=regime == 1 ? color.lime : regime == -1 ? color.red : color.silver, text_size=size.normal)
table.merge_cells(dash, 0, 1, 1, 1)

// PERFORMANCE STATS ROW
table.cell(dash, 0, 2,
     "Score L/S: " + str.tostring(score_long) + "/" + str.tostring(score_short) +
     " | Net P/L: " + str.tostring(strategy.netprofit, "0.##") +
     "\nWin %: " + (na(win_pct) ? "N/A" : str.tostring(win_pct_display, "#.##") + "% " + get_progress(win_pct_display)) +
     " | Streak: " + streak_emoji + str.tostring(streak) +
     "\nTP: " + str.tostring(tp_mult) + "x | SL: " + str.tostring(atr_mult) + "x",
     text_color=win_color, text_size=size.normal)
table.merge_cells(dash, 0, 2, 1, 2)

// --- Watermark
var table watermarkTable = na
if na(watermarkTable)
    watermarkTable := table.new(position.bottom_right, 1, 1, bgcolor=color.new(color.black, 90), border_color=color.new(color.purple, 80), border_width=1)
table.clear(watermarkTable, 0, 0)
table.cell(watermarkTable, 0, 0, "⚡ Dskyz (DAFE) Trading Systems", text_color=color.rgb(200, 200, 255), text_size=size.normal)