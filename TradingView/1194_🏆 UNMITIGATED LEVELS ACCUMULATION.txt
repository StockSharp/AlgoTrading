//@version=6
strategy("🏆 UNMITIGATED LEVELS ACCUMULATION", overlay=true,
         default_qty_type=strategy.cash,
         default_qty_value=10000,
         initial_capital=10000,
         pyramiding=1000,
         close_entries_rule="ANY",
         calc_on_every_tick=true)

// === 📊 INPUTS ===
londonSession = input.session("0900-1700", title="🇬🇧 Londres (UTC+1)")
maxLookback = input.int(50, "Máximo lookback", minval=10, maxval=100)
enableVisuals = input.bool(true, "📈 Visualización")

// === 🕒 DETECTAR SESIÓN LONDRES UTC+1 ===
inLondon = not na(time(timeframe.period, londonSession))

// === 📉 OBTENER TODOS LOS LOWS MANUALMENTE ===
pdl1 = request.security(syminfo.tickerid, "1D", low[1])
pdl2 = request.security(syminfo.tickerid, "1D", low[2])
pdl3 = request.security(syminfo.tickerid, "1D", low[3])
pdl4 = request.security(syminfo.tickerid, "1D", low[4])
pdl5 = request.security(syminfo.tickerid, "1D", low[5])

pwl1 = request.security(syminfo.tickerid, "1W", low[1])
pwl2 = request.security(syminfo.tickerid, "1W", low[2])
pwl3 = request.security(syminfo.tickerid, "1W", low[3])

pml1 = request.security(syminfo.tickerid, "1M", low[1])
pml2 = request.security(syminfo.tickerid, "1M", low[2])

pyl1 = request.security(syminfo.tickerid, "12M", low[1])

// === 📈 ALL TIME HIGH (ATH) ===
var float allTimeHigh = na
if na(allTimeHigh) or high > allTimeHigh
    allTimeHigh := high

// === 💰 POSITION SIZING DINÁMICO ===
initialCapital = 10000
currentEquity = strategy.equity
capitalMultiplier = currentEquity / initialCapital

basePDL = 0.1
basePWL = 0.2
basePML = 0.4
basePYL = 0.8

currentPDL = basePDL
currentPWL = basePWL
currentPML = basePML
currentPYL = basePYL

if capitalMultiplier >= 2
    doublings = math.floor(math.log(capitalMultiplier) / math.log(2))
    multiplier = math.pow(2, doublings)
    currentPDL := basePDL * multiplier
    currentPWL := basePWL * multiplier
    currentPML := basePML * multiplier
    currentPYL := basePYL * multiplier

// === 🔢 CONTADORES ===
var int totalOrders = 0
var array<string> placedOrdersToday = array.new<string>()

newDay = ta.change(time("D")) != 0
if newDay
    array.clear(placedOrdersToday)

// === 🎯 FUNCIÓN QUE RETORNA VALOR (NO MODIFICA VARIABLES GLOBALES) ===
isLevelMitigated(level) =>
    mitigated = false
    if not na(level)
        lookbackBars = math.min(maxLookback, bar_index)
        for i = 0 to lookbackBars
            if not na(low[i]) and low[i] <= level
                mitigated := true
                break
    mitigated

alreadyPlacedOrder(levelKey) =>
    found = false
    if array.size(placedOrdersToday) > 0
        for i = 0 to array.size(placedOrdersToday) - 1
            if array.get(placedOrdersToday, i) == levelKey
                found := true
                break
    found

// === 🎯 FUNCIÓN QUE RETORNA SI DEBE COLOCAR ORDEN (SIN MODIFICAR VARIABLES) ===
shouldPlaceOrder(level, levelType) =>
    shouldPlace = false
    if not na(level) and level > 0 and inLondon
        levelKey = levelType + "_" + str.tostring(level, "#.####")
        if not isLevelMitigated(level) and not alreadyPlacedOrder(levelKey)
            shouldPlace := true
    [shouldPlace, levelType + "_" + str.tostring(level, "#.####")]

// === 🎯 COLOCAR TODAS LAS ÓRDENES MANUALMENTE ===
ordersPlacedCounter = 0

// PDL Orders
[shouldPDL1, keyPDL1] = shouldPlaceOrder(pdl1, "PDL1")
if shouldPDL1
    totalOrders += 1
    ordersPlacedCounter += 1
    array.push(placedOrdersToday, keyPDL1)
    strategy.entry("PDL1_" + str.tostring(totalOrders), strategy.long, qty=currentPDL, limit=pdl1, comment="PDL1")

[shouldPDL2, keyPDL2] = shouldPlaceOrder(pdl2, "PDL2")
if shouldPDL2
    totalOrders += 1
    ordersPlacedCounter += 1
    array.push(placedOrdersToday, keyPDL2)
    strategy.entry("PDL2_" + str.tostring(totalOrders), strategy.long, qty=currentPDL, limit=pdl2, comment="PDL2")

[shouldPDL3, keyPDL3] = shouldPlaceOrder(pdl3, "PDL3")
if shouldPDL3
    totalOrders += 1
    ordersPlacedCounter += 1
    array.push(placedOrdersToday, keyPDL3)
    strategy.entry("PDL3_" + str.tostring(totalOrders), strategy.long, qty=currentPDL, limit=pdl3, comment="PDL3")

[shouldPDL4, keyPDL4] = shouldPlaceOrder(pdl4, "PDL4")
if shouldPDL4
    totalOrders += 1
    ordersPlacedCounter += 1
    array.push(placedOrdersToday, keyPDL4)
    strategy.entry("PDL4_" + str.tostring(totalOrders), strategy.long, qty=currentPDL, limit=pdl4, comment="PDL4")

[shouldPDL5, keyPDL5] = shouldPlaceOrder(pdl5, "PDL5")
if shouldPDL5
    totalOrders += 1
    ordersPlacedCounter += 1
    array.push(placedOrdersToday, keyPDL5)
    strategy.entry("PDL5_" + str.tostring(totalOrders), strategy.long, qty=currentPDL, limit=pdl5, comment="PDL5")

// PWL Orders
[shouldPWL1, keyPWL1] = shouldPlaceOrder(pwl1, "PWL1")
if shouldPWL1
    totalOrders += 1
    ordersPlacedCounter += 1
    array.push(placedOrdersToday, keyPWL1)
    strategy.entry("PWL1_" + str.tostring(totalOrders), strategy.long, qty=currentPWL, limit=pwl1, comment="PWL1")

[shouldPWL2, keyPWL2] = shouldPlaceOrder(pwl2, "PWL2")
if shouldPWL2
    totalOrders += 1
    ordersPlacedCounter += 1
    array.push(placedOrdersToday, keyPWL2)
    strategy.entry("PWL2_" + str.tostring(totalOrders), strategy.long, qty=currentPWL, limit=pwl2, comment="PWL2")

[shouldPWL3, keyPWL3] = shouldPlaceOrder(pwl3, "PWL3")
if shouldPWL3
    totalOrders += 1
    ordersPlacedCounter += 1
    array.push(placedOrdersToday, keyPWL3)
    strategy.entry("PWL3_" + str.tostring(totalOrders), strategy.long, qty=currentPWL, limit=pwl3, comment="PWL3")

// PML Orders
[shouldPML1, keyPML1] = shouldPlaceOrder(pml1, "PML1")
if shouldPML1
    totalOrders += 1
    ordersPlacedCounter += 1
    array.push(placedOrdersToday, keyPML1)
    strategy.entry("PML1_" + str.tostring(totalOrders), strategy.long, qty=currentPML, limit=pml1, comment="PML1")

[shouldPML2, keyPML2] = shouldPlaceOrder(pml2, "PML2")
if shouldPML2
    totalOrders += 1
    ordersPlacedCounter += 1
    array.push(placedOrdersToday, keyPML2)
    strategy.entry("PML2_" + str.tostring(totalOrders), strategy.long, qty=currentPML, limit=pml2, comment="PML2")

// PYL Orders
[shouldPYL1, keyPYL1] = shouldPlaceOrder(pyl1, "PYL1")
if shouldPYL1
    totalOrders += 1
    ordersPlacedCounter += 1
    array.push(placedOrdersToday, keyPYL1)
    strategy.entry("PYL1_" + str.tostring(totalOrders), strategy.long, qty=currentPYL, limit=pyl1, comment="PYL1")

// === 💎 VENTA SOLO EN ATH ===
if strategy.position_size > 0 and high >= allTimeHigh
    strategy.close_all(comment="ATH REACHED!")

// === 📊 CÁLCULOS ===
totalReturn = ((currentEquity - initialCapital) / initialCapital) * 100

// === 🎨 PLOTS ===
plot(allTimeHigh, "ATH", color=color.orange, linewidth=3)

// === 🌈 BACKGROUND ===
bgcolor(inLondon ? color.new(color.blue, 95) : na)

// === 🎯 SEÑALES ===
anyOrderPlaced = ordersPlacedCounter > 0
plotshape(anyOrderPlaced, "UNMITIGATED ORDER", shape.arrowup, location.belowbar,
          color=color.lime, size=size.small)

athReached = strategy.position_size > 0 and high >= allTimeHigh
plotshape(athReached, "ATH", shape.diamond, location.abovebar,
          color=color.yellow, size=size.huge)

// === 📋 TABLA DE INFO ===
var table infoTable = na
if barstate.islast and enableVisuals
    table.delete(infoTable)
    infoTable := table.new(position.top_right, 2, 6, bgcolor=color.white, border_width=2)

    table.cell(infoTable, 0, 0, "UNMITIGATED LEVELS", text_color=color.white, bgcolor=color.blue)
    table.cell(infoTable, 1, 0, "VALUES", text_color=color.white, bgcolor=color.blue)

    table.cell(infoTable, 0, 1, "Capital", text_color=color.black)
    table.cell(infoTable, 1, 1, "$" + str.tostring(currentEquity, "#,###"), text_color=color.black)

    table.cell(infoTable, 0, 2, "Return %", text_color=color.black)
    returnColor = totalReturn > 0 ? color.green : color.red
    table.cell(infoTable, 1, 2, str.tostring(totalReturn, "#.##") + "%", text_color=returnColor)

    table.cell(infoTable, 0, 3, "Multiplicador", text_color=color.black)
    table.cell(infoTable, 1, 3, str.tostring(capitalMultiplier, "#.##") + "x", text_color=color.black)

    table.cell(infoTable, 0, 4, "Ordenes Total", text_color=color.black)
    table.cell(infoTable, 1, 4, str.tostring(totalOrders), text_color=color.black)

    table.cell(infoTable, 0, 5, "Ordenes Hoy", text_color=color.black)
    table.cell(infoTable, 1, 5, str.tostring(array.size(placedOrdersToday)), text_color=color.black)