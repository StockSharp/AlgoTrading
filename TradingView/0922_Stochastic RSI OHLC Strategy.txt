//@version=5
strategy("Stochastic RSI OHLC Strategy", "RSIOHLC", overlay=false, margin_long=0.5, margin_short=0.5, initial_capital=50000, default_qty_type = strategy.fixed, default_qty_value=1, commission_type = strategy.commission.percent, commission_value = 0.01, process_orders_on_close = true)
group_core = "Core"

var int entryBar = na
var bool tradeOpen = false
tf = input.timeframe("5", "Timeframe for analysis")

tradingStyle = input.string("Volume Color Swing", "Trading Style", options=["Volume Color Swing", "90/10 Cross", "Color Swing 6", "Color Swing 5", "Color Swing 4", "Color Swing 3" ,"Color Swing 2", "Color Swing",  "Default", "Any Bounce", 'Cross Trail', 'RSI Divergence', 'RSI Range', 'RSI Trend Following', 'RSI Pullback', 'RSI MA Crossover', 'RSI Multi-Timeframe'])
invertStrategy =  input.string("No", "Invert Strategy", options = ["Yes", "No"], group = group_core) == "Yes" ? true : false

onlyTradeMoneyHours = input.string("NY Session 9:30-11:30", title="Trade NY sessions", options= ['NY Session 9:30-11:30', 'Extended NY Session 8-4', 'All Sessions'], group=group_core)
eodCloseSessions = input.string("Close Positions", title="End of Day Close Positions", options= ['Keep Positions', 'Close Positions'], group=group_core) == "Keep Positions" ? false : true
useVolumeBias = input.string("No", "Use Volume Bias", options = ["Yes", "No"], group = group_core) == "Yes" ? true : false
volumeLookback = input.int(34, "Volume Lookback", minval=0, step=1, group=group_core)

group_entry = "Entry Settings"
longEntry = input.float(30, "Enter Long", minval = 0, maxval = 100, group=group_entry)
shortEntry = input.float(60, "Enter Short", minval = 0, maxval = 100, group=group_entry)

longEntryPeak = input.float(2, "Long Pivot", minval = 0, maxval = 100, group=group_entry)
shortEntryPeak = input.float(98, "Short Pivot", minval = 0, maxval = 100, group=group_entry)

money_trail="Money PT/SL"
var float maxProfit = na
runMoneyProfit = input.string("No", "Use Money Strategy", options = ["Yes", "No"], group = money_trail) == "Yes" ? true : false
float stopSize   = input.float(5.0, "SL %", minval = 0.0, group=money_trail, step=0.01, tooltip = "0.99 is equal to 0.99%") / 100.0
float profitSize = input.float(5.0, "TP %", minval = 0.0, group=money_trail, step=0.01, tooltip = "0.5 is equal to 0.50%") / 100.0

group_trail = "Trail Stop Settings"
useTrailStopLoss = input.bool(false, "Trail Stop Mechanism", group=group_trail)
longTrailPerc = input.float(0.2, title="Trail Long Loss (%)", minval=0.0, step=0.05, group=group_trail) * 0.01
shortTrailPerc = input.float(0.2, title="Trail Short Loss (%)", minval=0.0, step=0.05, group=group_trail) * 0.01

group_exit = "Exit Settings"
useTimeBasedStopLoss = input.bool(false, "Use Time-Based Stop Loss", group=group_exit)
barsToClose = input.int(10, "Bars to Close Trade After", minval=1, step=1, group=group_exit)

useMomentumStopLoss = input.string("No", "Use Momentum SL", options = ["Yes", "No"], group = money_trail) == "Yes" ? true : false

rsi_trail = "RSI Settings"
// Input for Stochastic RSI parameters
kLength = input.int(14, title="K Length", group=rsi_trail)
dLength = input.int(3, title="D Length", group=rsi_trail)
rsiLength = input.int(14, title="RSI Length", group=rsi_trail)

// Calculate the Stochastic RSI
rsiValueCurrent = ta.rsi(close, rsiLength)
rsiValue = request.security(syminfo.tickerid, tf, rsiValueCurrent)
stochK = ta.sma(ta.stoch(rsiValue, rsiValue, rsiValue, kLength), dLength)

// Calculate the high and low values of Stochastic RSI
rsiHighValue = ta.rsi(high, rsiLength)
rsiLowValue = ta.rsi(low, rsiLength)
stochHigh = ta.sma(ta.stoch(rsiHighValue, rsiHighValue, rsiHighValue, kLength), dLength)
stochLow = ta.sma(ta.stoch(rsiLowValue, rsiLowValue, rsiLowValue, kLength), dLength)
stochClose = stochK
stochOpen = na(stochClose[1]) ? stochClose : stochClose[1]

// Define color for the bars based on close change
colorStoch = stochClose >= stochOpen ? color.green : color.red

// Plot horizontal lines
hline(100, "Overbought", linewidth = 2, linestyle = hline.style_solid)
hline(0, "Oversold", linewidth = 2, linestyle = hline.style_solid)
hline(50, "Middle Line")
hline(75, "Upper Band")
hline(25, "Lower Band")

// Plot the bars
volumePeriod = input.int(21, title="Volume SMA Period")
avgVolume = ta.sma(volume, volumePeriod)


plottedLow = stochLow < stochHigh ? stochLow : stochHigh
plottedHigh =  stochHigh > stochLow ? stochHigh : stochLow

plottedLow := plottedLow < stochClose ? plottedLow : stochOpen
plottedHigh :=  stochHigh > stochClose ? plottedHigh : stochOpen
plotStoch = plot(plottedLow, "Low", color.white, display = display.pane)
plotStoch2 = plot(plottedHigh, "High", color.blue, display = display.pane)


tempColor = plottedHigh > plottedHigh[1] ? color.green : plottedLow < plottedLow[1] ? color.red : na

if(na(tempColor) and plottedHigh < plottedHigh[1])
    tempColor := color.red

if(na(tempColor) and plottedLow > plottedLow[1])
    tempColor := color.green

currentColor = tempColor
signalDirection = currentColor == color.green ? 100 : currentColor == color.red ? 0 : 50


fill(plotStoch, plotStoch2, color = tempColor)
//fill(plotStochCLose, plotStoch2, color =  color.red )

trail_group=rsi_trail
trailEMA = input.int(5, "Trail EMA Length", group=trail_group)
emaClose = ta.ema(stochClose, trailEMA)
plotcandle(stochOpen, stochHigh, stochLow, stochClose, title="Stochastic RSI Bars", color=colorStoch)
plotStochCLose = plot(stochClose, "Close", color.white, display = display.all)
plot(emaClose, "Trail", color.yellow, display = display.all)
plot(ta.ema(math.avg(plottedLow, plottedHigh), 5), "Mid Line", colorStoch)

htfLabel = label.new(bar_index + 2, stochClose, str.tostring(stochClose), color = #FF4500, style = label.style_label_left, size=size.tiny)
ltfLabel = label.new(bar_index + 2, emaClose, str.tostring(emaClose), color = #1E90FF, style = label.style_label_left, size=size.tiny)

label.delete(htfLabel[1])
label.delete(ltfLabel[1])

upHighlight = volume > avgVolume and stochClose > ta.ema(stochClose, 13)
dnHighlight = volume > avgVolume and stochClose < ta.ema(stochClose, 13)

bgColor1 = upHighlight ? color.green : dnHighlight ? color.red : color.new(color.blue, 100)
volPlot = upHighlight ? 101 : dnHighlight ? -1 : na
plot(volPlot, "Volume Spike",bgColor1, 3, plot.style_circles )

anyCloseOver(compareValue, stoch1, stoch2, stoch3) =>
    returnVal = false
    if stoch1 >= compareValue or stoch2 >= compareValue or stoch3 >= compareValue
        returnVal := true
    returnVal

anyCloseUnder(compareValue, stoch1, stoch2, stoch3) =>
    returnVal = false
    if stoch1 <= compareValue or stoch2 <= compareValue or stoch3 <= compareValue
        returnVal := true
    returnVal

// Divergence detection
bullishDivergence = ta.lowest(close, 3) < ta.lowest(close, 5) and rsiValue > ta.lowest(rsiValue, 5)
bearishDivergence = ta.highest(close, 3) > ta.highest(close, 5) and rsiValue < ta.highest(rsiValue, 5)

// RSI Trend Following
isUptrend = ta.rising(ta.sma(close, 50), 5)
isDowntrend = ta.falling(ta.sma(close, 50), 5)

// Multi-Timeframe RSI
higherTimeframeRSI = request.security(syminfo.tickerid, "D", ta.rsi(close, rsiLength))

plot(ta.ema(stochClose, 5), "EMA", color.yellow)
//plot(signalDirection, "Simple Buy Sell", color.maroon, 3)
plot(ta.ema(signalDirection, 13), "EMA Simple Buy Sell", signalDirection == 100 ? color.green : color.red, 4, display = display.none)

runStrategy(isTradeable, stochOpen, stochHigh, stochLow, stochClose, volume) =>

    goLong = false
    goShort = false

    if isTradeable
        if tradingStyle == "Volume Color Swing"
            if(stochClose[2] < 90 and stochClose[2] < stochClose[1] and stochClose[1] < stochClose[0] and signalDirection[2] == 100 and signalDirection[1] == 100 and signalDirection == 100)
                goLong := true
            if(stochClose[2] > 10 and stochClose[2] > stochClose[1] and stochClose[1] > stochClose[0] and signalDirection[2] == 0 and signalDirection[1] == 0 and signalDirection == 0)
                goShort := true

        if tradingStyle == "90/10 Cross"
            if(ta.crossover(stochClose, 90) and ta.ema(stochClose, 8) < 85)
                goLong := true
            if(ta.crossunder(stochClose, 10) and ta.ema(stochClose, 8) > 15)
                goShort := true

        if tradingStyle == "Color Swing 6"
            if(ta.ema(signalDirection, 3) < 50 and signalDirection == 100)
                goLong := true
            if( ta.ema(signalDirection, 3) > 50 and signalDirection == 0)
                goShort := true

        if tradingStyle == "Color Swing 5"
            if(ta.ema(stochClose, 4) < 19 and stochClose[2] < 19 and stochClose[1] < 19 and signalDirection[1] == 0 and signalDirection == 100)
                goLong := true
            if(ta.ema(stochClose, 4) > 81 and stochClose[2] > 81 and stochClose[1] > 81 and signalDirection[1] == 100 and signalDirection == 0)
                goShort := true

        if tradingStyle == "Color Swing 3"
            if(stochClose[2] < 19 and signalDirection[1] == 0 and signalDirection == 100)
                goLong := true
            if(stochClose[2] > 81 and signalDirection[1] == 100 and signalDirection == 0)
                goShort := true

        if tradingStyle == "Color Swing 4"
            if(stochClose[2] < 81 and signalDirection[2] == 0 and signalDirection[1] == 100 and signalDirection == 100)
                goLong := true
            if(stochClose[2] > 19 and signalDirection[2] == 100 and signalDirection[1] == 0 and signalDirection == 0)
                goShort := true

        if tradingStyle == "Color Swing 2"
            if(signalDirection[1] == 0 and signalDirection == 100)
                goLong := true
            if(signalDirection[1] == 100 and signalDirection == 0)
                goShort := true

        if tradingStyle == "Color Swing"
            if(signalDirection[2] == 0 and signalDirection[1] == 100 and signalDirection == 100)
                goLong := true
            if(signalDirection[2] == 100 and signalDirection[1] == 0 and signalDirection == 0)
                goShort := true

        if tradingStyle == "Any Bounce"
            if(anyCloseOver(longEntryPeak,stochClose[3], stochClose[2], stochClose[1] )  and stochClose[1] < stochClose)
                if anyCloseOver(longEntry, stochClose[2], stochClose[1], stochClose)
                    goLong := true

            if(anyCloseUnder(shortEntryPeak, stochClose[3], stochClose[2], stochClose[1])  and stochClose[1] > stochClose)
                if anyCloseUnder(shortEntry, stochClose[2], stochClose[1], stochClose)
                    goShort := true

        if tradingStyle == "Default"
            if(stochClose[3] >= longEntryPeak and stochClose[1] < stochClose)
                if anyCloseOver(longEntry, stochClose[2], stochClose[1], stochClose)
                    goLong := true

            if(stochClose[3] <= shortEntryPeak  and stochClose[1] > stochClose)
                if anyCloseUnder(shortEntry, stochClose[2], stochClose[1], stochClose)
                    goShort := true

        if tradingStyle == "Cross Trail"
            if(ta.crossover(stochClose[2], trailEMA[2]))
                if stochClose >= longEntry and stochClose > stochClose[2]
                    goLong := true

            if(ta.crossunder(stochClose[2], trailEMA[2]))
                if stochClose <= shortEntry and stochClose < stochClose[2]
                    goShort := true

        if tradingStyle == "RSI Divergence"
            if bullishDivergence
                goLong := true
            if bearishDivergence
                goShort := true

        if tradingStyle == "RSI Range"
            if rsiValue < 30
                goLong := true
            if rsiValue > 70
                goShort := true

        if tradingStyle == "RSI Trend Following"
            if isUptrend and rsiValue < 50
                goLong := true
            if isDowntrend and rsiValue > 50
                goShort := true

        if tradingStyle == "RSI Pullback"
            if isUptrend and rsiValue < 50 and ta.crossover(rsiValue, 50)
                goLong := true
            if isDowntrend and rsiValue > 50 and ta.crossunder(rsiValue, 50)
                goShort := true

        if tradingStyle == "RSI MA Crossover"
            rsiMA = ta.sma(rsiValue, 10)
            if ta.crossover(rsiValue, rsiMA)
                goLong := true
            if ta.crossunder(rsiValue, rsiMA)
                goShort := true

        if tradingStyle == "RSI Multi-Timeframe"
            if higherTimeframeRSI > 50 and ta.crossover(rsiValue, 50)
                goLong := true
            if higherTimeframeRSI < 50 and ta.crossunder(rsiValue, 50)
                goShort := true

        if useVolumeBias
            if na(volPlot)
                goLong := false
                goShort := false
            else
                if volPlot < 101 and goLong == true
                    goLong := false
                if volPlot > -1 and goShort == true
                    goShort := false


        if goLong
            if invertStrategy
                strategy.entry("SRSIOHLC Short", strategy.short)
            else
                strategy.entry("SRSIOHLC Long", strategy.long)
        if goShort
            if invertStrategy
                strategy.entry("SRSIOHLC Long", strategy.long)
            else
                strategy.entry("SRSIOHLC Short", strategy.short)

    [goLong,goShort]

startSession = timestamp("GMT-5", year, month, dayofmonth, 09, 30)
endSession = timestamp("GMT-5", year, month, dayofmonth, 11, 30)

extendedStartSession = timestamp("GMT-5", year, month, dayofmonth, 08, 00)
extendedEndSession = timestamp("GMT-5", year, month, dayofmonth, 16, 00)

isTradeWindow = (time >= extendedStartSession and time <= extendedEndSession)

isTradeable = false
if(onlyTradeMoneyHours == "NY Session 9:30-11:30")
    isTradeable := time >= startSession and time <= endSession
else if onlyTradeMoneyHours == "Extended NY Session 8-4"
    isTradeable := time >= extendedStartSession and time <= extendedEndSession
else
    isTradeable := true

[shouldLong, shouldShort] = runStrategy(isTradeable, stochOpen, stochHigh, stochLow, stochClose, volume)

bgcolor(shouldLong ? color.rgb(76, 175, 79, 90) : shouldShort ? color.rgb(255, 82, 82, 90) : na)

if strategy.position_size != 0
    entryBar := bar_index

if useTimeBasedStopLoss and strategy.position_size != 0  and strategy.position_size[barsToClose] == 0
    strategy.close_all(comment = "Time-Based Stop Loss")

longStopPrice = 0.0
shortStopPrice = 0.0

longStopPrice := if strategy.position_size > 0
    stopValue = close * (1 - longTrailPerc)
    math.max(stopValue, longStopPrice[1])
else
    0

shortStopPrice := if strategy.position_size < 0
    stopValue = close * (1 + shortTrailPerc)
    math.min(stopValue, shortStopPrice[1])
else
    999999999999999999999999999999




if useMomentumStopLoss
    if strategy.position_size > 0 and signalDirection[1] == 0 and signalDirection == 0
        strategy.close_all("Momentum Close", alert_message='{ "action": "Close", "Type": "Trade", "comment": "Close Long - Trail Stop" }')

    if strategy.position_size < 0 and signalDirection[1] == 100 and signalDirection == 100
        strategy.close_all("Momentum Close", alert_message='{ "action": "Close", "Type": "Trade", "comment": "Close Short - Trail Stop" }')


if useTrailStopLoss
    if strategy.position_size > 0
        strategy.exit("Trail Close", stop=longStopPrice, alert_message='{ "action": "Close", "Type": "Trade", "comment": "Close Long - Trail Stop" }')

    if strategy.position_size < 0
        strategy.exit("Trail Close", stop=shortStopPrice, alert_message='{ "action": "Close", "Type": "Trade", "comment": "Close Short - Trail Stop" }')

var close_hour = 16
var close_minutes = 45
var open_hour = 17
var open_minutes = 59
var new_day = dayofmonth
var new_month = month
var new_year = year
var int close_trades_at_time_of_day = na
var int open_trades_at_time_of_day = na

if dayofmonth != dayofmonth[1]
    new_day := dayofmonth
if month != month[1]
    new_month := month
if year != year[1]
    new_year := year
close_trades_at_time_of_day := timestamp("GMT-4",new_year,new_month,new_day,close_hour,close_minutes)
open_trades_at_time_of_day := timestamp("GMT-4",new_year,new_month,new_day,open_hour,open_minutes)


if(eodCloseSessions and time >= close_trades_at_time_of_day and time <= open_trades_at_time_of_day)
    strategy.close_all(comment = "End of Day")


// Variables to track profit and set dynamic stop



// Calculate the current unrealized profit
// unrealizedProfit = strategy.position_size > 0 ? (close - strategy.position_avg_price) * strategy.position_size : (strategy.position_avg_price - close) * -strategy.position_size
// log.info("unrealizedProfit:" + str.tostring(unrealizedProfit))
// // Update maxProfit when a new high is reached
// if not na(unrealizedProfit)
//     maxProfit := na(maxProfit) ? unrealizedProfit : math.max(maxProfit, unrealizedProfit)

// // Check if profit has reached or exceeded the threshold, then monitor for drop below $30
// if runMoneyProfit and maxProfit >= closeAtProfit and unrealizedProfit < closeAtProfit
//     strategy.close("Profit Protection", comment = "Profit Protection")


// drawdown = maxProfit - unrealizedProfit
// // Check if drawdown exceeds the threshold, then close the trade
// if runMoneyProfit and drawdown >= drawdownThreshold
//     strategy.close("Drawdown Protection", comment = "Drawdown Protection")

float stopLoss   = na
float takeProfit = na

if runMoneyProfit
    float proximityThreshold = 0.01 // 1% proximity

    if strategy.position_size > 0
        // Long position
        stopLoss   := strategy.position_avg_price * (1.0 - stopSize)
        takeProfit := strategy.position_avg_price * (1.0 + profitSize)

        // Check if the close price is within 1% of StopLoss or TakeProfit
        if (close <= stopLoss * (1.0 + proximityThreshold)) or (close >= takeProfit * (1.0 - proximityThreshold))
            strategy.exit("Close Long Money Strategy", stop = stopLoss, limit = takeProfit)

    else if strategy.position_size < 0
        // Short position
        stopLoss   := strategy.position_avg_price * (1.0 + stopSize)
        takeProfit := strategy.position_avg_price * (1.0 - profitSize)

        // Check if the close price is within 1% of StopLoss or TakeProfit
        if (close >= stopLoss * (1.0 - proximityThreshold)) or (close <= takeProfit * (1.0 + proximityThreshold))
            strategy.exit("Close Short Money Strategy", stop = stopLoss, limit = takeProfit)
    //strategy.exit("Exit", stop = stopLoss, limit = takeProfit)