//@version=6
// Strategy declaration on a single line
strategy(title="RSI Pro+ (Bear market, financial crisis and so on Edition", shorttitle="RSI Pro+ (Bear market, financial crisis and so on Edition)", overlay=true, pyramiding=0, initial_capital=10000, default_qty_type=strategy.percent_of_equity, default_qty_value=10, commission_type=strategy.commission.percent, commission_value=0.05, process_orders_on_close=true)

// --- Inputs ---
group_rsi = "RSI Settings"
rsiLength = input.int(11, title="RSI Period", minval=1, group=group_rsi, tooltip="Period for RSI.")
rsiLevel = input.float(8.0, title="RSI Crossover Level", group=group_rsi, tooltip="RSI must cross above this level.")

group_exit = "Exit Settings"
exitPercentInput = input.float(0.11, title="Take Profit Percentage (%)", minval=0.0, step=0.01, group=group_exit, tooltip="TP percentage above entry.")

group_visuals = "Visual Enhancements"
showEntryHighlight = input.bool(true, title="Highlight Entry Bar Background?", group=group_visuals)
showTradeBars = input.bool(true, title="Color Bars During Trade?", group=group_visuals)
showEntryLine = input.bool(true, title="Plot Entry Price Line?", group=group_visuals)
showEntryMarker = input.bool(true, title="Show Custom Entry Marker?", group=group_visuals)
showInfoTable = input.bool(true, title="Show On-Chart Info Table?", group=group_visuals)
tableHalign = input.string(position.bottom_right, "Info Table Position", options=[position.top_right, position.top_left, position.bottom_right, position.bottom_left, position.middle_right, position.middle_left], group=group_visuals)

// --- Calculations ---
rsiValue = ta.rsi(close, rsiLength)
takeProfitMultiplier = exitPercentInput / 100.0

// --- Entry Condition ---
longCondition = ta.crossover(rsiValue, rsiLevel)

// --- State Management for Exit & Visuals ---
var float entryPrice = na
var float takeProfitLevel = na
var table tradeInfoTable = na // Declare table variable once globally

isNewPosition = strategy.position_size > 0 and strategy.position_size[1] <= 0
if isNewPosition
    entryPrice := strategy.opentrades.entry_price(strategy.opentrades - 1)
    takeProfitLevel := entryPrice * (1 + takeProfitMultiplier)

isClosedPosition = strategy.position_size <= 0 and strategy.position_size[1] > 0
if isClosedPosition
    entryPrice := na
    takeProfitLevel := na
    // Delete info table when trade closes
    if (showInfoTable and not na(tradeInfoTable))
        table.delete(tradeInfoTable)
        tradeInfoTable := na

// --- Strategy Execution ---
// Entry logic (only if flat)
if (longCondition and strategy.opentrades == 0)
    strategy.entry("RsiLE", strategy.long, comment="RSI Cross Entry")

// Exit logic
if (strategy.position_size > 0)
    strategy.exit(id="RsiLX", from_entry="RsiLE", limit=takeProfitLevel, comment="TP Hit " + str.tostring(exitPercentInput, "#.##") + "%")

// --- Visual Enhancements ---

// 1. Highlight Entry Bar Background
bgColor = showEntryHighlight and longCondition ? color.new(color.teal, 85) : na
bgcolor(bgColor)

// 2. Color Bars During Trade
tradeActiveColor = showTradeBars and strategy.position_size > 0 ? color.new(color.blue, 90) : na
barcolor(tradeActiveColor)

// 3. Plot Entry Price Line
plot(showEntryLine and strategy.position_size > 0 ? entryPrice : na,
     title="Entry Price",
     color=color.new(color.gray, 20),
     style=plot.style_linebr,
     linewidth=1)

// Plot Take Profit Level Line (kept from previous)
plot(strategy.position_size > 0 ? takeProfitLevel : na,
     title="Take Profit Level",
     color=color.new(color.green, 0),
     style=plot.style_linebr,
     linewidth=2) // Slightly thicker

// 4. Custom Entry Marker (only show on the actual entry bar)
plotshape(showEntryMarker and isNewPosition,
          title="Entry Signal",
          location=location.belowbar,
          color=color.new(color.lime, 0),
          style=shape.triangleup,
          size=size.small)

// 5. On-Chart Info Table
if (showInfoTable and strategy.position_size > 0 and not na(entryPrice)) // Check entryPrice is valid
    // Calculate current PnL %
    currentPnLPercent = ((close - entryPrice) / entryPrice) * 100

    // Create table if it doesn't exist for this trade
    if (na(tradeInfoTable))
        tradeInfoTable := table.new(tableHalign, 2, 3, border_width=1, border_color=color.gray, bgcolor=color.new(color.black, 70))

    // Update table content (clear previous first to prevent overdraw)
    // Using row/col 0,0 to 1,2 (2 columns, 3 rows)
    table.clear(tradeInfoTable, 0, 2) // Clears content without deleting table structure

    // Row 0: Entry Price
    table.cell(tradeInfoTable, 0, 0, "Entry:", text_halign=text.align_right, text_color=color.gray)
    table.cell(tradeInfoTable, 1, 0, str.tostring(entryPrice, format.mintick), text_halign=text.align_left, text_color=color.white)
    // Row 1: Take Profit Target
    table.cell(tradeInfoTable, 0, 1, "TP Target:", text_halign=text.align_right, text_color=color.gray)
    table.cell(tradeInfoTable, 1, 1, str.tostring(takeProfitLevel, format.mintick), text_halign=text.align_left, text_color=color.green)
    // Row 2: Current PnL
    pnlColor = currentPnLPercent >= 0 ? color.green : color.red
    table.cell(tradeInfoTable, 0, 2, "PnL:", text_halign=text.align_right, text_color=color.gray)
    table.cell(tradeInfoTable, 1, 2, str.tostring(currentPnLPercent, format.percent), text_halign=text.align_left, text_color=pnlColor)

// --- End of Script ---