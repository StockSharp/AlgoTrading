// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © gggoaaat
//@version=5
strategy("Power Hour Money Strategy", overlay=false, calc_on_every_tick=true, process_orders_on_close = true)
group_core = "Core"
onlyTradeMoneyHours = input.string("NY Session 9:30-11:30", title="Trade NY sessions", options= ['NY Session 9:30-11:30', 'Extended NY Session 8-4', 'All Sessions'], group=group_core)

eodCloseSessions = input.string("Close Positions", title="End of Day Close Positions", options= ['Keep Positions', 'Close Positions'], group=group_core)  == "Keep Positions" ? false : true // input.bool(false, "Trade the sessions")


group_trail = "Trail Stop Settings"
useTrailStopLoss = input.bool(true, "Trail Stop Mechanism", group=group_trail)
longTrailPerc = input.float(0.2, title="Trail Long Loss (%)", minval=0.0, step=0.05, group=group_trail) * 0.01
shortTrailPerc = input.float(0.2, title="Trail Short Loss (%)", minval=0.0, step=0.05, group=group_trail) * 0.01


// Function to determine if a time frame is green or red
f_is_green(_open, _close) =>
    _close > _open

// Get higher time frame open and close prices
monthOpen = request.security(syminfo.tickerid, "M", open, lookahead = barmerge.lookahead_off)
monthClose = close//request.security(syminfo.tickerid, "M", close, lookahead = barmerge.lookahead_on)

weekOpen = request.security(syminfo.tickerid, "W", open, lookahead = barmerge.lookahead_off)
weekClose = close//request.security(syminfo.tickerid, "W", close, lookahead = barmerge.lookahead_on)

dayOpen = request.security(syminfo.tickerid, "D", open, lookahead = barmerge.lookahead_off)
dayClose = close//request.security(syminfo.tickerid, "D", close, lookahead = barmerge.lookahead_on)
show = ta.change(time("D"))

hourOpen = request.security(syminfo.tickerid, "60", open, lookahead = barmerge.lookahead_off)
hourClose = close //request.security(syminfo.tickerid, "60", close, lookahead = barmerge.lookahead_on)



// Determine if each time frame is green or red
monthGreen = f_is_green(monthOpen, monthClose)
weekGreen = f_is_green(weekOpen, weekClose)
dayGreen = f_is_green(dayOpen, dayClose)
hourGreen = f_is_green(hourOpen, hourClose)

monthRed = not monthGreen
weekRed = not weekGreen
dayRed = not dayGreen
hourRed = not hourGreen


startSession = timestamp("GMT-5", year, month, dayofmonth, 09, 30)
endSession = timestamp("GMT-5", year, month, dayofmonth, 11, 30)

extendedStartSession = timestamp("GMT-5", year, month, dayofmonth, 08, 00)
extendedEndSession = timestamp("GMT-5", year, month, dayofmonth, 16, 00)

isTradeWindow = (time >= extendedStartSession and time <= extendedEndSession)

isTradeable = false
if(onlyTradeMoneyHours == "NY Session 9:30-11:30")
    isTradeable := time >= startSession and time <= endSession
else if onlyTradeMoneyHours == "Extended NY Session 8-4"
    isTradeable := time >= extendedStartSession and time <= extendedEndSession
else
    isTradeable := true
// Enter long if all time frames are green

callLong = isTradeable and monthGreen and weekGreen and dayGreen and hourGreen
callShort = isTradeable and monthRed and weekRed and dayRed and hourRed

if(callLong)
    alert("Power Hour Long", alert.freq_once_per_bar)

if(callShort)
    alert("Power Hour Short", alert.freq_once_per_bar)

if (callLong and barstate.isconfirmed)
    strategy.entry("Long", strategy.long)

// Enter short if all time frames are red
if (callShort  and barstate.isconfirmed)
    strategy.entry("Short", strategy.short)

longStopPrice = 0.0
shortStopPrice = 0.0



longStopPrice := if strategy.position_size > 0
    stopValue = close * (1 - longTrailPerc)
    math.max(stopValue, longStopPrice[1])
else
    0

shortStopPrice := if strategy.position_size < 0
    stopValue = close * (1 + shortTrailPerc)
    math.min(stopValue, shortStopPrice[1])
else
    999999999999999999999999999999


if useTrailStopLoss //and close <= longStopPrice //and (longDelta >= longTicks)
    if strategy.position_size > 0
        strategy.exit("Trail Close", stop=longStopPrice, alert_message='{ "action": "Close", "Type": "Trade", "comment": "Close Long - Trail Stop" }')

if useTrailStopLoss //and close >= shortStopLoss
    if strategy.position_size < 0
        strategy.exit("Trail Close", stop=shortStopPrice, alert_message='{ "action": "Close", "Type": "Trade", "comment": "Close Short - Trail Stop" }')




hourGreenabel = label.new(bar_index + 2, 7, "Hour  ", style = label.style_none, textcolor = color.white, size=size.tiny)
dayGreenLabel = label.new(bar_index + 2, 5, "Day", style = label.style_none, textcolor = color.white, size=size.tiny)
weekGreenLabel = label.new(bar_index + 2, 3, "Week ", style = label.style_none, textcolor = color.white, size=size.tiny)
monthGreenLabel = label.new(bar_index + 2, 1, "Month ", style = label.style_none, textcolor = color.white, size=size.tiny)

label.delete(hourGreenabel[1])
label.delete(dayGreenLabel[1])
label.delete(weekGreenLabel[1])
label.delete(monthGreenLabel[1])

monthRedLabel = label.new(bar_index + 2, -3, "Month ", style = label.style_none, textcolor = color.white, size=size.tiny)
weekRedLabel = label.new(bar_index + 2, -5, "Week ", style = label.style_none, textcolor = color.white, size=size.tiny)
dayRedLabel = label.new(bar_index + 2, -7, "Day", style = label.style_none, textcolor = color.white, size=size.tiny)
hourRedabel = label.new(bar_index + 2, -9, "Hour  ", style = label.style_none, textcolor = color.white, size=size.tiny)

label.delete(hourRedabel[1])
label.delete(dayRedLabel[1])
label.delete(weekRedLabel[1])
label.delete(monthRedLabel[1])


plot(8, "Hour", hourGreen ? color.green: color.new(color.black, 100), 2, plot.style_circles, display = display.pane)
plot(6, "Day", dayGreen ?color.green: color.new(color.black, 100), 2, plot.style_circles, display = display.pane)
plot(4, "Week", weekGreen ?color.green: color.new(color.black, 100), 2, plot.style_circles, display = display.pane)
plot(2, "Month", monthGreen ? color.green : color.new(color.black, 100), 2, plot.style_circles, display = display.pane)
hline(0, "Center")
plot(-2, "Month", monthRed ? color.red : color.new(color.black, 100), 2, plot.style_circles, display = display.pane)
plot(-4, "Week", weekRed ? color.red : color.new(color.black, 100), 2, plot.style_circles, display = display.pane)
plot(-6, "Day",  dayRed ? color.red : color.new(color.black, 100), 2, plot.style_circles, display = display.pane)
plot(-8, "Hour", hourRed ? color.red : color.new(color.black, 100), 2, plot.style_circles, display = display.pane)

//if(barstate.isconfirmed)
log.info("-----------")
log.info("monthGreen: "  + str.tostring(monthGreen))
log.info("monthOpen: "  + str.tostring(monthOpen))
log.info("monthClose: " + str.tostring(monthClose))
log.info("weekGreen: "  + str.tostring(weekGreen))
log.info("weekOpen: "  + str.tostring(weekOpen))
log.info("weekClose: " + str.tostring(weekClose))
log.info("dayGreen: "  + str.tostring(dayGreen))
log.info("dayOpen: "  + str.tostring(dayOpen))
log.info("dayClose: " + str.tostring(dayClose))
log.info("hourGreen: "  + str.tostring(hourGreen))
log.info("hourOpen: "  + str.tostring(hourOpen))
log.info("hourClose: " + str.tostring(hourClose))

var close_hour = 16
var close_minutes = 45
var new_day = dayofmonth
var new_month = month
var new_year = year
var int close_trades_at_time_of_day = na

if dayofmonth != dayofmonth[1]
    new_day := dayofmonth
if month != month[1]
    new_month := month
if year != year[1]
    new_year := year
close_trades_at_time_of_day := timestamp("GMT-4",new_year,new_month,new_day,close_hour,close_minutes)

if(eodCloseSessions and time == close_trades_at_time_of_day)
    strategy.close_all(comment = "End of Day")