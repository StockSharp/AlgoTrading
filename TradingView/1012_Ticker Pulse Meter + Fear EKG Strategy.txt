// Realistic commission and slippage have been added to the strategy properties (default: Commissions = 1% and Slippage = 15 ticks) to align with average retail trading costs and market execution realities.
// These values are customizable to reflect individual broker fees and asset liquidity

//@version=6
//strategy("Ticker Pulse Meter + Fear EKG Strategy", overlay=true, initial_capital=2500, currency=currency.USD, default_qty_type=strategy.fixed, default_qty_value=2, pyramiding=2, max_bars_back=5000)
strategy("Ticker Pulse Meter + Fear EKG Strategy", overlay=true, initial_capital=2500, currency=currency.USD, default_qty_type=strategy.fixed, default_qty_value=2, pyramiding=2, max_bars_back=5000, commission_type=strategy.commission.percent, commission_value=1, slippage=15)

/////////////////////////////////////////////
// Group Labels
const string GRP2 = "BACKTESTING SETTINGS"
const string GRP3 = "TICKER PULSE SETTINGS"
const string GRP4 = "ENTRY/EXIT THRESHOLD SETTINGS"
const string GRP5 = "MOVING AVERAGE SETTINGS"
const string GRP6 = "BOLLINGER BANDS SETTINGS"
const string GRP7 = "LINEAR REGRESSION SETTINGS"

/////////////////////////////////////////
// Backtest Start Date
input_time = input.time(timestamp("2000-01-01T00:00:00"), group=GRP2, title="Backtest Start Date")

/////////////////////////////////////////
// Lookback Settings
lookback_short = input.int(50, title="Short Lookback Period", minval=1, group=GRP3)
lookback_long = input.int(200, title="Long Lookback Period", minval=1, group=GRP3)
i_res = input.timeframe("D", title="Resolution", options=["60", "240", "D", "W", "M"], group=GRP3)
profitTake = input.int(95, title="Profit Take Level", minval=1, maxval=100, group=GRP4)
entryThresholdhigh = input.int(20, title="Above Long/Above Short Level", group=GRP4)
entryThresholdlow = input.int(40, title="Below Long/Below Short Level", group=GRP4)
orangeEntryThreshold = input.int(95, title="Irrational Selling", minval=40, maxval=99, group=GRP4)

/////////////////////////////////////////
// Exit Settings
enable_short_signal = input.bool(true, "Enable Exit Signal", group=GRP2)
enable_yellow_signals = input.bool(true, "Include Orange Buy Signals In Backtesting", group=GRP2)
exitAmt = input.float(50.0, "Exit Percentage (e.g., 25 for 25%, 100 for 100%)", minval=0.01, maxval=100, step=0.01, group=GRP2)
exitPercentage = exitAmt > 1 ? exitAmt / 100 : exitAmt

/////////////////////////////////////////
// Validation
if lookback_short >= lookback_long
    runtime.error("Short lookback must be less than long lookback")

/////////////////////////////////////////
// Request OHLC from higher timeframe with lookahead OFF
stock_ticker = syminfo.ticker
[price_open, price_high, price_low, price_close] = request.security(stock_ticker, i_res, [open, high, low, close], lookahead=barmerge.lookahead_off)

/////////////////////////////////////////
// Indicator Calculations
min_price_short = ta.lowest(price_low, lookback_short)
max_price_short = ta.highest(price_high, lookback_short)
pct_above_short = (price_close - min_price_short) / (max_price_short - min_price_short)
min_price_long = ta.lowest(price_low, lookback_long)
max_price_long = ta.highest(price_high, lookback_long)
pct_above_long = (price_close - min_price_long) / (max_price_long - min_price_long)
pct_above_long_above_short = pct_above_long * pct_above_short * 100
pct_above_long_below_short = pct_above_long * (1 - pct_above_short) * 100
pct_below_long_below_short = (1 - pct_above_long) * (1 - pct_above_short) * 100

/////////////////////////////////////////
// Bar confirmed check
barClosed = bar_index > 0 and barstate.isconfirmed

/////////////////////////////////////////
// Signal Conditions (shifted back 1 bar to prevent repainting)
cross_pct_above = ta.crossover(pct_above_long_above_short[1], entryThresholdhigh)
cross_upper2 = ta.crossunder(pct_below_long_below_short[1], orangeEntryThreshold)

fekg = cross_upper2
tpm = cross_pct_above and pct_below_long_below_short[1] < entryThresholdlow
long_entry = tpm or (fekg and enable_yellow_signals)

/////////////////////////////////////////
// Exit Logic
long_exit = ta.crossunder(pct_above_long_above_short[1], profitTake)

/////////////////////////////////////////
// Position Tracking
var float total_position_size = 0.0
var int exit_count = 0
var float last_position_size = 0.0

/////////////////////////////////////////
// Trade Execution
if time >= input_time and long_entry
    strategy.entry("Long", strategy.long)
    if strategy.position_size > last_position_size
        total_position_size := strategy.position_size
        exit_count := 0
    last_position_size := strategy.position_size

if long_exit and strategy.position_size > 0 and (exitPercentage < 1.0 or exit_count < 4) and enable_short_signal
    qty_to_exit = math.round(strategy.position_size * exitPercentage)
    qty_to_exit := math.max(1, qty_to_exit)
    strategy.close("Long", qty=qty_to_exit, comment="Exit " + str.tostring(exitPercentage * 100) + "% - " + str.tostring(exit_count + 1))
    exit_count := exit_count + 1
    last_position_size := strategy.position_size

/////////////////////////////////////////
// Sell-off Background Highlighting
selloff_start = ta.crossover(pct_below_long_below_short[1], entryThresholdhigh)
selloff_end = ta.crossunder(pct_below_long_below_short[1], entryThresholdhigh)
var bool in_selloff = false
if selloff_start
    in_selloff := true
if selloff_end
    in_selloff := false
bgcolor(in_selloff ? color.new(color.red, 80) : na)

/////////////////////////////////////////
// Plot Entry and Exit Dots with bar confirmation to avoid repainting
plotshape(barClosed and fekg, title="LE (Orange)", style=shape.circle, location=location.belowbar, color=color.new(color.orange, 30), size=size.tiny)
plotshape(barClosed and tpm, title="LE (Green)", style=shape.circle, location=location.belowbar, color=color.new(color.green, 40), size=size.tiny)
plotshape(barClosed and long_exit, title="LX", style=shape.circle, location=location.abovebar, color=color.new(color.red, 50), size=size.tiny)

/////////////////////////////////////////
// Position Info Table
var table position_table = na
if bar_index == 0
    position_table := table.new(position=position.bottom_right, columns=1, rows=4, border_width=1, bgcolor=color.new(color.white, 40))
if strategy.position_size > 0 or strategy.position_size != last_position_size
    table.cell(position_table, 0, 0, "Open Positions: " + str.tostring(strategy.position_size), text_color=color.gray, bgcolor=color.new(color.white, 40))
    table.cell(position_table, 0, 1, "Fear EKG: " + str.tostring(math.round(pct_below_long_below_short, 1)) + "%", text_color=pct_below_long_below_short > 20 ? color.red : color.orange, bgcolor=color.new(color.white, 40))
    table.cell(position_table, 0, 2, "Ticker Pulse: " + str.tostring(math.round(pct_above_long_above_short, 1)) + "%", text_color=pct_above_long_above_short > 20 ? color.green : color.orange, bgcolor=color.new(color.white, 40))
    table.cell(position_table, 0, 3, " ", text_color=color.gray, bgcolor=color.new(color.white, 40))  // Padding

/////////////////////////////////////////
// Alerts, in event of indicator
//alertcondition(barClosed and long_entry, title="Long Entry Alert", message="Long Entry Signal")
//alertcondition(barClosed and long_exit, title="Long Exit Alert", message="Long Exit Signal")

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// --- BELOW IS PROUDLY SOURCED SOURCED AND INSPIRED FROM PUBLIC DOMAIN---
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// --- Simple Moving Average Indicator ---
//Note: Visual and contextual enhancer. Optional and not core to trading strategy. Adapted from commonly available and standard Pine Script practices, inspired by public scripts on Tradingview.
len = input.int(200, minval=1, title="Length", group=GRP5)
src = input(close, title="Source", group=GRP5)
out = ta.sma(src, len)
plot(out, color=#f6f8fa, title="MA", linewidth=3)

///////////////////////////////////////
// --- Smoothing MA Inputs ---
//Note: Visual and contextual enhancer. Optional and not core to trading strategy. Adapted from commonly available and standard Pine Script practices, inspired by public scripts on Tradingview.
TT_BB = "Only applies when 'SMA + Bollinger Bands' is selected. Determines the distance between the SMA and the bands."
maTypeInput = input.string("SMA + Bollinger Bands", "Type", options=["None", "SMA", "SMA + Bollinger Bands", "EMA", "SMMA (RMA)", "WMA", "VWMA"], group=GRP6, display=display.data_window)
maLengthInput = input.int(100, "Smoothing Length", minval=1, group=GRP6, display=display.data_window)
bbMultInput = input.float(2.0, "BB StdDev", minval=0.001, maxval=50, step=0.5, tooltip=TT_BB, group=GRP6, display=display.data_window)
var enableMA = maTypeInput != "None"
var isBB = maTypeInput == "SMA + Bollinger Bands"

///////////////////////////////////////
// --- Smoothing MA Calculation ---
//Note: Visual and contextual enhancer. Optional and not core to trading strategy. Adapted from commonly available and standard Pine Script practices, inspired by public scripts on Tradingview.
ma(source, length, MAtype) =>
    switch MAtype
        "SMA"                   => ta.sma(source, length)
        "SMA + Bollinger Bands" => ta.sma(source, length)
        "EMA"                   => ta.ema(source, length)
        "SMMA (RMA)"            => ta.rma(source, length)
        "WMA"                   => ta.wma(source, length)
        "VWMA"                  => ta.vwma(source, length)

///////////////////////////////////////
// --- Smoothing MA Plots ---
//Note: Visual and contextual enhancer. Optional and not core to trading strategy. Adapted from commonly available and standard Pine Script practices, inspired by public scripts on Tradingview.
smoothingMA = enableMA ? ma(out, maLengthInput, maTypeInput) : na
smoothingStDev = isBB ? ta.stdev(out, maLengthInput) * bbMultInput : na
plot(smoothingMA, "SMA-based MA", color=color.yellow, display=enableMA ? display.all : display.none)
bbUpperBand = plot(smoothingMA + smoothingStDev, title="Upper Bollinger Band", color=color.green, display=isBB ? display.all : display.none)
bbLowerBand = plot(smoothingMA - smoothingStDev, title="Lower Bollinger Band", color=color.green, display=isBB ? display.all : display.none)
fill(bbUpperBand, bbLowerBand, color=isBB ? color.new(color.green, 90) : na, title="Bollinger Bands Background Fill", display=isBB ? display.all : display.none)