//@version=5
strategy("ORB 15m â€“ SE First 15min Breakout (Long/Short)",
     overlay=true, initial_capital=25000, pyramiding=0,
     calc_on_every_tick=false, process_orders_on_close=true)

// ===== Inputs =====
accountSize     = input.float(25000, "Account Size", minval=1)
riskPct         = input.float(1.0,   "Risk per Trade (%)", minval=0.01, step=0.1)
oneTradePerDay  = input.bool(true,   "Limit to 1 Trade per Day?")
useLongs        = input.bool(true,   "Allow Longs?")
useShorts       = input.bool(true,   "Allow Shorts?")
tpMode          = input.string("10R","Take Profit Mode", options=["10R","EoDOnly"])
R_multiple      = input.float(10.0,  "TP = R multiple (if 10R)", minval=0.1, step=0.5)
sessEndHourSE   = input.int(22, "Session End Hour (Europe/Stockholm)", minval=0, maxval=23)
sessEndMinSE    = input.int(0,  "Session End Minute", minval=0, maxval=59)
sessionOpenHour = input.int(15, "Session Open Hour (Europe/Stockholm)", minval=0, maxval=23)
sessionOpenMin  = input.int(30, "Session Open Minute", minval=0, maxval=59)

// ===== Detect first 15-min candle after open =====
isSessionOpen = hour(time, "Europe/Stockholm") == sessionOpenHour and minute(time, "Europe/Stockholm") == sessionOpenMin
is15m         = timeframe.isintraday and timeframe.multiplier == 15
plotchar(not is15m, title="Timeframe Warning", char="X", location=location.top, color=color.red, size=size.tiny)

// Reference candle vars
var int   refBarIndex = na
var float refOpen     = na
var float refHigh     = na
var float refLow      = na
var float refClose    = na

if barstate.isnew and isSessionOpen
    refBarIndex := bar_index
    refOpen     := open
    refHigh     := high
    refLow      := low
    refClose    := close

if bar_index == refBarIndex
    refHigh  := math.max(refHigh, high)
    refLow   := math.min(refLow, low)
    refClose := close

// Direction
refIsGreen = not na(refOpen) and not na(refClose) and (refClose > refOpen)
refIsRed   = not na(refOpen) and not na(refClose) and (refClose < refOpen)

// One trade per day
var int lastTradeYmd = 0
todayYmd    = year * 10000 + month * 100 + dayofmonth
tradedToday = (lastTradeYmd == todayYmd)

// Trade vars
var float entry     = na
var float stopPrice = na
var float r         = na
var float tp        = na
var int   qty       = 0

// Entry at close of first 15-min candle
isRefBarClose = barstate.isconfirmed and (bar_index == refBarIndex)
if isRefBarClose and not tradedToday and strategy.position_size == 0
    entry := close

    // Long
    if refIsGreen and useLongs
        stopPrice := refLow
        r := math.abs(entry - stopPrice)
        qty := r > 0 ? int(math.floor((accountSize * (riskPct * 0.01)) / r)) : 1
        qty := qty < 1 ? 1 : qty
        strategy.entry("L", strategy.long, qty=qty)
        if tpMode == "10R"
            tp := entry + (R_multiple * r)
            strategy.exit("L-Exit", from_entry="L", stop=stopPrice, limit=tp)
        else
            strategy.exit("L-Exit", from_entry="L", stop=stopPrice)
        lastTradeYmd := todayYmd

    // Short
    if refIsRed and useShorts
        stopPrice := refHigh
        r := math.abs(entry - stopPrice)
        qty := r > 0 ? int(math.floor((accountSize * (riskPct * 0.01)) / r)) : 1
        qty := qty < 1 ? 1 : qty
        strategy.entry("S", strategy.short, qty=qty)
        if tpMode == "10R"
            tp := entry - (R_multiple * r)
            strategy.exit("S-Exit", from_entry="S", stop=stopPrice, limit=tp)
        else
            strategy.exit("S-Exit", from_entry="S", stop=stopPrice)
        lastTradeYmd := todayYmd

// Flatten at session end
sessEndTsSE = timestamp("Europe/Stockholm", year, month, dayofmonth, sessEndHourSE, sessEndMinSE)
if time_close == sessEndTsSE and strategy.position_size != 0
    strategy.close_all()