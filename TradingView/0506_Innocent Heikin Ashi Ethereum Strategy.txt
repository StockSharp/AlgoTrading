//@version=5
strategy("IHAES v2", overlay=true, default_qty_type=strategy.percent_of_equity, default_qty_value=10, commission_value=0.05)

// Signal Logic by ppx10 ~ MarginMage@x

// Importing necessary PVSRA library (by @TradersReality)
import TradersReality/Traders_Reality_Lib/1 as trLib

//Fixed settings
int confirmationLevel = 1
bool enableMoonMode = true
bool showSellSignals = true
bool showBullTraps = true
bool showBearTraps = true

// User-defined input for Risk/Reward Ratio
float riskRewardRatio = input.float(title="SL/TP Multiplier ()", defval=1.0, minval=0.1, maxval=5.0, tooltip="Range of TP and SL for the entry condition (Higher means bigger price ranges)")

// PVSRA Data for ETH/USDT on Binance
string ethSymbol = "BINANCE:ETHUSDT"
ethVolume = request.security(ethSymbol, "", volume, barmerge.gaps_off, barmerge.lookahead_off)
ethHigh = request.security(ethSymbol, "", high, barmerge.gaps_off, barmerge.lookahead_off)
ethLow = request.security(ethSymbol, "", low, barmerge.gaps_off, barmerge.lookahead_off)
ethClose = request.security(ethSymbol, "", close, barmerge.gaps_off, barmerge.lookahead_off)
ethOpen = request.security(ethSymbol, "", open, barmerge.gaps_off, barmerge.lookahead_off)

// Candle color settings based on PVSRA
color colorRed = color.red
color colorGreen = color.lime
color colorViolet = color.fuchsia
color colorBlue = color.blue
color regularCandleUpColor = color.new(color.gray, 50)
color regularCandleDownColor = color.new(color.gray, 80)

// PVSRA calculation to determine candle color
[pvsraColor, _, _, _, _] = trLib.calcPvsra(ethVolume, ethHigh, ethLow, ethClose, ethOpen, colorRed, colorGreen, colorViolet, colorBlue, regularCandleDownColor, regularCandleUpColor)

// Calculate EMAs (50 and 200 periods) and the lowest low over the last 28 candles
ema50 = ta.ema(close, 50)
ema200 = ta.ema(close, 200)
lowestLow = ta.lowest(ethLow, 28)

// Variables to track signal logic
var float lastRedVectorBelowEMA50 = na
var float lastGreenVectorAboveEMA200 = 0
var int lastBuySignalIndex = na
var int trapSignalBarIndex = na
var int redCountUnderEMA50 = 0
var int lastSellSignalIndex = na

// Buy signal preconditions
if (pvsraColor == colorRed and close < ema50)
    redCountUnderEMA50 += 1
if (pvsraColor == colorRed and open < ema50 and close < ema50)
    lastRedVectorBelowEMA50 := bar_index
if ((pvsraColor == colorBlue or pvsraColor == colorGreen) and open > ema200 and open > ema50)
    lastSellSignalIndex := bar_index
if (pvsraColor == colorGreen and close > ema200)
    lastGreenVectorAboveEMA200 += 1

// Calculate stop loss and take profit levels
float stopLossPrice = na
float takeProfitPrice = na
if not na(lastRedVectorBelowEMA50) and pvsraColor == colorGreen
    stopLossPrice := lowestLow
    takeProfitPrice := close + (close - stopLossPrice) * riskRewardRatio

// Buy Signal Logic
if (barstate.isconfirmed and not na(lastRedVectorBelowEMA50) and pvsraColor == colorGreen and open > ema50 and (na(lastBuySignalIndex) or bar_index > lastBuySignalIndex))
    if close < ema200 and redCountUnderEMA50 >= confirmationLevel
        lastBuySignalIndex := bar_index
        lastRedVectorBelowEMA50 := na
        redCountUnderEMA50 := 0
        strategy.entry("Buy", strategy.long)
        strategy.exit("Take Profit/Stop Loss", from_entry="Buy", limit=takeProfitPrice, stop=stopLossPrice)

// Aggressive Buy Signal Logic (Moon Mode)
if (barstate.isconfirmed and not na(lastRedVectorBelowEMA50) and pvsraColor == colorGreen and open > ema50 and (na(lastBuySignalIndex) or bar_index > lastBuySignalIndex))
    if enableMoonMode and close > ema200 and redCountUnderEMA50 >= confirmationLevel
        lastBuySignalIndex := bar_index
        lastRedVectorBelowEMA50 := na
        redCountUnderEMA50 := 0
        strategy.entry("Buy", strategy.long)
        strategy.exit("Take Profit/Stop Loss", from_entry="Buy", limit=takeProfitPrice, stop=stopLossPrice)

// Sell Signal Logic
if (barstate.isconfirmed and not na(lastSellSignalIndex) and (pvsraColor == colorRed) and open > ema200 and close > ema200 and bar_index == lastSellSignalIndex + 1)
    if showSellSignals and lastGreenVectorAboveEMA200 >= confirmationLevel
        strategy.close("Buy")
        lastSellSignalIndex := na
        lastGreenVectorAboveEMA200 := 0

// Bull Trap Logic
if (barstate.isconfirmed and bar_index == lastBuySignalIndex + 1 and (pvsraColor == colorRed or pvsraColor == colorViolet))
    if showBullTraps
        strategy.close("Buy")

// Bear Trap Logic
if (barstate.isconfirmed and bar_index == lastSellSignalIndex + 1 and pvsraColor == colorGreen)
    if showBearTraps
        strategy.close("Buy")

// Random candle color for aesthetic purposes
randomColor = color.new(color.rgb(math.round(math.random(0, 255)), math.round(math.random(0, 255)), math.round(math.random(0, 255))), 0)
barcolor(randomColor)

// Alerts for Buy, Trap, and Sell signals
alertcondition(condition=bar_index == lastBuySignalIndex, title="BUY Signal", message="A BUY signal was triggered at {{close}}.")
alertcondition(condition=bar_index == trapSignalBarIndex, title="TRAP Signal", message="A TRAP signal was triggered at {{close}}.")
alertcondition(condition=bar_index == lastSellSignalIndex, title="Sell2 Signal", message="A SELL signal was triggered at {{close}}.")