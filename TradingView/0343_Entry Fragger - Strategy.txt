//@version=5
strategy("Entry Fragger Strategy v3", overlay=true, default_qty_type=strategy.percent_of_equity, default_qty_value=10, commission_value=0.1)

//       _ Entry Fragger v3   _
//    /\   \/\   \/\   \/\   \
//   /  \___\ \___\ \___\ \___\
//   \  / __/_/   / /   / /   /
//    \/_/\   \__/\/___/\/___/
//      /  \___\    /  \___\
//      \  / __/_  _\  /   /
//       \/_/\   \/\ \/___/
//         /  \__/  \___\
//         \  / _\  /   /
//          \/_/\ \/___/
//            /  \___\
//            \  /   /
//             \/ppx/

// Importing necessary libraries and setting up input parameters
import TradersReality/Traders_Reality_Lib/1 as trLib
bool showEMAs = input.bool(group='PVSRA Colors', title='Enable EMAs', defval=true)
bool setCandleColors = input.bool(true, title='Enable PVSRA Colors', group='PVSRA Colors', inline='setCandle')
bool reverseTrading = input.bool(title="Reverse Trading On", defval=false, group='Strategy Settings')
color redVectorColor = input.color(title='Vector: Red', group='PVSRA Colors', defval=color.red, inline='vectors')
color greenVectorColor = input.color(title='Vector: Green', group='PVSRA Colors', defval=color.lime, inline='vectors')
color violetVectorColor = input.color(title='Vector: Violet', group='PVSRA Colors', defval=color.fuchsia, inline='vectors')
color blueVectorColor = input.color(title='Vector: Blue', group='PVSRA Colors', defval=color.blue, inline='vectors')
color regularCandleUpColor = input.color(title='Regular: Up Candle', group='PVSRA Colors', defval=#999999, inline='nonVectors')
color regularCandleDownColor = input.color(title='Regular: Down Candle', group='PVSRA Colors', defval=#4d4d4d, inline='nonVectors')
bool overrideSym = input.bool(group='PVSRA System Override', title='Override PVSRA Data', defval=false, inline='pvsra')
string pvsraSym = input.string(group='PVSRA System Override', title='', defval='INDEX:TICKERUSD', tooltip='Example: BINANCE:BTCUSDT+COINBASE:BTCUSD', inline='pvsra')
int SignalAccuracy = input.int(title="Buy Signal Accuracy (1-10)", group='Signal Settings', defval=2, minval=0, maxval=10)
int SellSignalAccuracy = input.int(title="Sell Signal Accuracy (1-10)", group='Signal Settings', defval=2, minval=0, maxval=10)
bool ShowSell = input.bool(true, group='Signal Settings', title='Show Sell Signals')
bool ShowBuy = input.bool(true, group='Signal Settings', title='Show Buy Signals')

// Requesting PVSRA Data
pvsraVolume = request.security(overrideSym ? pvsraSym : syminfo.tickerid, timeframe.period, volume, barmerge.gaps_off, barmerge.lookahead_off)
pvsraHigh = request.security(overrideSym ? pvsraSym : syminfo.tickerid, timeframe.period, high, barmerge.gaps_off, barmerge.lookahead_off)
pvsraLow = request.security(overrideSym ? pvsraSym : syminfo.tickerid, timeframe.period, low, barmerge.gaps_off, barmerge.lookahead_off)
pvsraClose = request.security(overrideSym ? pvsraSym : syminfo.tickerid, timeframe.period, close, barmerge.gaps_off, barmerge.lookahead_off)
pvsraOpen = request.security(overrideSym ? pvsraSym : syminfo.tickerid, timeframe.period, open, barmerge.gaps_off, barmerge.lookahead_off)
[pvsraColor, alertFlag, averageVolume, volumeSpread, highestVolumeSpread] = trLib.calcPvsra(pvsraVolume, pvsraHigh, pvsraLow, pvsraClose, pvsraOpen, redVectorColor, greenVectorColor, violetVectorColor, blueVectorColor, regularCandleDownColor, regularCandleUpColor)

// Setting Candle Color based on PVSRA data
var color pvsraCandleColor = na
if setCandleColors
    pvsraCandleColor := pvsraColor
barcolor(pvsraCandleColor)

// Calculating EMAs
ema50 = ta.ema(close, 50)
ema200 = ta.ema(close, 200)

// Plotting EMAs
plot(showEMAs ? ema50 : na, color=color.rgb(111, 0, 255), linewidth=1, title="50 EMA")
plot(showEMAs ? ema200 : na, color=color.rgb(255, 255, 255), linewidth=1, title="200 EMA")

// Adding EMA Cloud around the 50 EMA
cloudSize = ta.stdev(close, 50) / 4
upperCloud = ema50 + cloudSize
lowerCloud = ema50 - cloudSize
fill(plot(showEMAs ? upperCloud : na), plot(showEMAs ? lowerCloud : na), color=color.new(color.purple, 80), title="50 EMA Cloud")

// Declare Signal Logic Variables
var float lastRedVectorBelow50 = na
var int lastBuySignal = na
var int redVectorCountUnderEMA50 = 0
var float lastGreenVectorAbove50 = na
var int greenVectorCountOverEMA50 = 0
var float entryPrice = na
var bool isHoldingLong = false  // Track if holding a long position
var bool isHoldingShort = false // Track if holding a short position

// Pre-Signal Logic, Signal Conditions/Criteria
if (pvsraColor == redVectorColor and close < ema50)
    redVectorCountUnderEMA50 += 1
if (pvsraColor == redVectorColor and open < ema50 and close < ema50)
    lastRedVectorBelow50 := bar_index
if (pvsraColor == greenVectorColor and open > ema50 and close > ema50)
    greenVectorCountOverEMA50 += 1
    lastGreenVectorAbove50 := bar_index

// Buy Signal Logic with reverse trading or default behavior
if (ShowBuy and barstate.isconfirmed and not na(lastRedVectorBelow50) and pvsraColor == greenVectorColor and open > ema50 and close > upperCloud and (na(lastBuySignal) or bar_index > lastBuySignal))
    if redVectorCountUnderEMA50 >= SignalAccuracy
        label.new(x=bar_index, y=low, text="BUY", color=color.green, style=label.style_label_up, size=size.small)
        lastBuySignal := bar_index
        lastRedVectorBelow50 := na
        redVectorCountUnderEMA50 := 0
        entryPrice := close

        if reverseTrading and isHoldingShort
            strategy.close("Sell")  // Reverse: Close Short before opening Long
        strategy.entry("Buy", strategy.long)
        isHoldingLong := true  // Track that we are holding a long
        isHoldingShort := false  // No longer holding a short

// Sell Signal Logic with new condition: green vector followed by red vector
if (ShowSell and barstate.isconfirmed and not na(lastGreenVectorAbove50))
    // Check if previous candle was green vector and current is red vector
    if (pvsraColor[1] == greenVectorColor and (pvsraColor == redVectorColor or pvsraColor == violetVectorColor))
        // Existing conditions
        if close > upperCloud and open > ema50
            if greenVectorCountOverEMA50 >= SellSignalAccuracy
                label.new(x=bar_index, y=high, text="SELL", color=color.red, style=label.style_label_down, size=size.small)
                greenVectorCountOverEMA50 := 0  // Reset Sell Signal Accuracy count

                if isHoldingLong
                    if reverseTrading
                        strategy.close("Buy")  // Reverse: Close Long before opening Short
                        strategy.entry("Sell", strategy.short)
                    else
                        strategy.close("Buy")  // Default: Only close the Buy position
                    isHoldingLong := false  // No longer holding a long
                else
                    if isHoldingShort and not reverseTrading
                        // Do nothing if another sell appears unless reverse trading is enabled
                        isHoldingShort := true
                    if reverseTrading and not isHoldingShort
                        // Open a new short position if reverse trading is enabled
                        strategy.entry("Sell", strategy.short)
                        isHoldingShort := true

// Alert Conditions
alertcondition(condition=ShowBuy and bar_index == lastBuySignal, title="BUY Signal", message="A BUY signal was triggered at {{close}}.")
alertcondition(condition=ShowSell and barstate.isconfirmed and pvsraColor[1] == greenVectorColor and (pvsraColor == redVectorColor or pvsraColor == violetVectorColor), title="SELL Signal", message="A SELL signal was triggered at {{close}}.")