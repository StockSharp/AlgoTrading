//@version=6
strategy("FlexATR", overlay=true, initial_capital=100000, currency=currency.USD,
     default_qty_type=strategy.percent_of_equity, default_qty_value=10, calc_on_every_tick=true)

// =====================
// Start Date (modificabile via form)
// =====================
startDate = input.time(timestamp("2025-01-01T00:00:00"), title="Start Date")

// =====================
// Determinazione del timeframe
// ---------------------
// "resString" contiene il valore del timeframe (es. "D", "1D", "30", "60", "240", "5", "W", "1W", ecc.)
// "res_minutes" è il numero di minuti per barra; gestiamo anche i casi per D, W e M.
resString = timeframe.period
var float res_minutes = na
if resString == "D" or resString == "1D"
    res_minutes := 1440.0
else if resString == "W" or resString == "1W"
    res_minutes := 10080.0
else if resString == "M" or resString == "1M"
    res_minutes := 43200.0
else
    res_minutes := nz(str.tonumber(resString), 1)  // ad es. "30", "60", "240", "5", ecc.

// Se il grafico è intraday (minuti/barra < 1440)
intraday = res_minutes < 1440.0
// Calcolo del numero di barre in un giorno (utile per convertire "giorni" in barre)
barsPerDay = intraday ? (1440.0 / res_minutes) : 1.0

// =====================
// INPUT PARAMETRI MODIFICABILI VIA FORM PER OGNI TIMEFRAME
// =====================

// [Daily Parameters]
fastDays_Daily = input.float(8.0,  title="EMA Veloce (giorni)",  group="Daily Parameters")
slowDays_Daily = input.float(21.0, title="EMA Lenta (giorni)",  group="Daily Parameters")
rsiDays_Daily  = input.float(14.0, title="RSI (giorni)",         group="Daily Parameters")
atrDays_Daily  = input.float(14.0, title="ATR Period (giorni)",  group="Daily Parameters")

// [Weekly Parameters]
fastDays_Weekly = input.float(40.0,  title="EMA Veloce (giorni)",  group="Weekly Parameters")
slowDays_Weekly = input.float(105.0, title="EMA Lenta (giorni)",  group="Weekly Parameters")
rsiDays_Weekly  = input.float(14.0,  title="RSI (giorni)",         group="Weekly Parameters")
atrDays_Weekly  = input.float(14.0,  title="ATR Period (giorni)",  group="Weekly Parameters")

// [30m Parameters] – MODIFICATI per maggiore reattività:
// EMA veloce ridotta da 0.4 a 0.35; EMA lenta da 1.0 a 0.9; RSI e ATR da 0.5 a 0.45.
fastDays_30m = input.float(0.35, title="EMA Veloce (giorni)", group="30m Parameters")
slowDays_30m = input.float(0.9,  title="EMA Lenta (giorni)",  group="30m Parameters")
rsiDays_30m  = input.float(0.45, title="RSI (giorni)",         group="30m Parameters")
atrDays_30m  = input.float(0.45, title="ATR Period (giorni)",  group="30m Parameters")

// [60m Parameters]
fastDays_60m = input.float(0.6, title="EMA Veloce (giorni)", group="60m Parameters")
slowDays_60m = input.float(1.6, title="EMA Lenta (giorni)",  group="60m Parameters")
rsiDays_60m  = input.float(0.6, title="RSI (giorni)",         group="60m Parameters")
atrDays_60m  = input.float(0.6, title="ATR Period (giorni)",  group="60m Parameters")

// [4h Parameters]
fastDays_4h = input.float(1.3, title="EMA Veloce (giorni)", group="4h Parameters")
slowDays_4h = input.float(3.5, title="EMA Lenta (giorni)",  group="4h Parameters")
rsiDays_4h  = input.float(1.3, title="RSI (giorni)",         group="4h Parameters")
atrDays_4h  = input.float(1.3, title="ATR Period (giorni)",  group="4h Parameters")

// [5m Parameters]
fastDays_5m = input.float(0.15, title="EMA Veloce (giorni)", group="5m Parameters")
slowDays_5m = input.float(0.45, title="EMA Lenta (giorni)",  group="5m Parameters")
rsiDays_5m  = input.float(0.15, title="RSI (giorni)",         group="5m Parameters")
atrDays_5m  = input.float(0.15, title="ATR Period (giorni)",  group="5m Parameters")

// =====================
// SELEZIONE DEI PARAMETRI IN BASE AL TIMEFRAME CORRENTE
// Se il timeframe corrente non corrisponde a nessuna categoria, uso i parametri Daily.
fastDays = (resString=="D" or resString=="1D")      ? fastDays_Daily  :
           (resString=="W" or resString=="1W")      ? fastDays_Weekly :
           (resString=="30")                        ? fastDays_30m    :
           (resString=="60")                        ? fastDays_60m    :
           (resString=="240")                       ? fastDays_4h     :
           (resString=="5")                         ? fastDays_5m     : fastDays_Daily

slowDays = (resString=="D" or resString=="1D")      ? slowDays_Daily  :
           (resString=="W" or resString=="1W")      ? slowDays_Weekly :
           (resString=="30")                        ? slowDays_30m    :
           (resString=="60")                        ? slowDays_60m    :
           (resString=="240")                       ? slowDays_4h     :
           (resString=="5")                         ? slowDays_5m     : slowDays_Daily

rsiDays  = (resString=="D" or resString=="1D")      ? rsiDays_Daily   :
           (resString=="W" or resString=="1W")      ? rsiDays_Weekly  :
           (resString=="30")                        ? rsiDays_30m     :
           (resString=="60")                        ? rsiDays_60m     :
           (resString=="240")                       ? rsiDays_4h      :
           (resString=="5")                         ? rsiDays_5m      : rsiDays_Daily

atrDays  = (resString=="D" or resString=="1D")      ? atrDays_Daily   :
           (resString=="W" or resString=="1W")      ? atrDays_Weekly  :
           (resString=="30")                        ? atrDays_30m     :
           (resString=="60")                        ? atrDays_60m     :
           (resString=="240")                       ? atrDays_4h      :
           (resString=="5")                         ? atrDays_5m      : atrDays_Daily

// =====================
// Conversione dei periodi (espresso in "giorni") in numero di barre
fastPeriod = intraday ? math.round(fastDays * barsPerDay) : math.round(fastDays)
slowPeriod = intraday ? math.round(slowDays * barsPerDay) : math.round(slowDays)
rsiPeriod  = intraday ? math.round(rsiDays * barsPerDay)  : math.round(rsiDays)
atrPeriod  = intraday ? math.round(atrDays * barsPerDay)  : math.round(atrDays)

// =====================
// Definizione dei colori "color-blind friendly" (palette Okabe-Ito)
// EMA Veloce: Blu (RGB 0,114,178)
// EMA Lenta: Arancione (RGB 230,159,0)
// Stop Loss: Vermilion (RGB 213,94,0)
// Profit Target: Azzurro (RGB 86,180,233)
emaFastColor = color.rgb(0,114,178)
emaSlowColor = color.rgb(230,159,0)
stopColor    = color.rgb(213,94,0)
targetColor  = color.rgb(86,180,233)

// =====================
// Calcolo degli indicatori
emaFast  = ta.ema(close, fastPeriod)
emaSlow  = ta.ema(close, slowPeriod)
rsiValue = ta.rsi(close, rsiPeriod)
atrValue = ta.atr(atrPeriod)

// =====================
// Input per la gestione del rischio (modificabili via form)
atrStopMult   = input.float(3.0, title="Moltiplicatore ATR per Stop Loss", step=0.1)
atrProfitMult = input.float(1.5, title="Moltiplicatore ATR per Profit Target", step=0.1)

// NUOVO: Abilitazione del Trailing Stop Dinamico
enableTrailingStop = input.bool(true, title="Abilita Trailing Stop Dinamico")
atrTrailMult       = input.float(1.0, title="Moltiplicatore ATR per Trailing Stop", step=0.1)

// =====================
// Condizioni di ingresso
// Long: quando l'EMA veloce incrocia al rialzo quella lenta e l'RSI è > 50
longCondition = ta.crossover(emaFast, emaSlow) and (rsiValue > 50)
// Short: quando l'EMA veloce incrocia al ribasso quella lenta e l'RSI è < 50
shortCondition = ta.crossunder(emaFast, emaSlow) and (rsiValue < 50)

// Calcolo dei livelli fissi di stop loss e profit target basati sull'ATR
longStop   = close - atrValue * atrStopMult
longTarget = close + atrValue * atrProfitMult
shortStop  = close + atrValue * atrStopMult
shortTarget= close - atrValue * atrProfitMult

// =====================
// Plot degli indicatori
plot(emaFast, title="EMA Veloce", color=emaFastColor)
plot(emaSlow, title="EMA Lenta", color=emaSlowColor)
hline(50, title="RSI 50", color=color.gray, linestyle=hline.style_dotted)
plot(rsiValue, title="RSI", color=color.blue, display=display.none)

// =====================
// Logica degli ingressi e gestione delle posizioni (attiva solo se time >= startDate)
if (time >= startDate)
    if (longCondition)
        strategy.entry("Long", strategy.long)
    if (shortCondition)
        strategy.entry("Short", strategy.short)

    // Per le uscite, se il trailing stop dinamico è abilitato, lo usiamo; altrimenti l'uscita fissa
    if (strategy.position_size > 0)
        if (enableTrailingStop)
            strategy.exit("Exit Long", from_entry="Long", trail_offset=atrValue * atrTrailMult, limit=longTarget)
        else
            strategy.exit("Exit Long", from_entry="Long", stop=longStop, limit=longTarget)

    if (strategy.position_size < 0)
        if (enableTrailingStop)
            strategy.exit("Exit Short", from_entry="Short", trail_offset=atrValue * atrTrailMult, limit=shortTarget)
        else
            strategy.exit("Exit Short", from_entry="Short", stop=shortStop, limit=shortTarget)

// =====================
// Plot dei livelli di Stop Loss e Profit Target quando in posizione
plot(strategy.position_size > 0 ? longStop   : na, title="Stop Loss",   style=plot.style_linebr, color=stopColor)
plot(strategy.position_size > 0 ? longTarget : na, title="Profit Target", style=plot.style_linebr, color=targetColor)
plot(strategy.position_size < 0 ? shortStop  : na, title="Stop Loss",   style=plot.style_linebr, color=stopColor)
plot(strategy.position_size < 0 ? shortTarget: na, title="Profit Target", style=plot.style_linebr, color=targetColor)