//@version=5
// Strategy: 5-Min Scalping (EMA + VWAP)
// Enhancements:
// 1. Optional confirmation filters for Price Action (Engulfing) and Volume Spikes.
// 2. Toggles to enable Longs-Only or Shorts-Only trading modes.
// 3. Automatic plotting of Take Profit and Stop Loss lines for each individual trade.

strategy("Ultimate Scalping Strategy v2",
         shorttitle="Ult. EMA+VWAP v2",
         overlay=true,
         initial_capital=10000,
         default_qty_type=strategy.percent_of_equity,
         default_qty_value=10)

// === Input Parameters ===
group_main = "Main Indicator Settings"
fastEMA_len = input.int(9, title="Fast EMA Length", group=group_main)
slowEMA_len = input.int(21, title="Slow EMA Length", group=group_main)

group_direction = "Trade Direction Settings"
allowLongs = input.bool(true, title="✅ Allow Longs (Buys)?", group=group_direction)
allowShorts = input.bool(true, title="✅ Allow Shorts (Sells)?", group=group_direction)

group_filters = "Confirmation Filters (Optional)"
usePriceAction = input.bool(false, title="Use Price Action (Engulfing)?", group=group_filters)
useVolume = input.bool(false, title="Use Volume Confirmation?", group=group_filters)
vol_ma_len = input.int(20, title="Volume MA Length", group=group_filters)

group_exits = "Exit Logic Settings"
atr_len = input.int(14, title="ATR Length for SL/TP", group=group_exits)
sl_atr_multiplier = input.float(1.5, title="Stop Loss ATR Multiplier", step=0.1, group=group_exits)
tp_atr_multiplier = input.float(2.0, title="Take Profit ATR Multiplier", step=0.1, group=group_exits)
useExitOnOppositeSignal = input.bool(true, title="Exit on Opposite Signal?", group=group_exits)

// === Indicator & Confirmation Calculations ===
emaFast = ta.ema(close, fastEMA_len)
emaSlow = ta.ema(close, slowEMA_len)
vwapLine = ta.vwap
atr = ta.atr(atr_len)
isBullishCandle = close > open
isBearishCandle = close < open
bullishEngulfing = isBullishCandle and isBearishCandle[1] and close > open[1] and open < close[1]
bearishEngulfing = isBearishCandle and isBullishCandle[1] and close < open[1] and open > close[1]
volumeMA = ta.sma(volume, vol_ma_len)
isVolumeSpike = volume > volumeMA

// === Entry Conditions ===
baseLongCond = ta.crossover(emaFast, emaSlow) and close > vwapLine
baseShortCond = ta.crossunder(emaFast, emaSlow) and close < vwapLine
longCond = baseLongCond and (not usePriceAction or bullishEngulfing) and (not useVolume or isVolumeSpike)
shortCond = baseShortCond and (not usePriceAction or bearishEngulfing) and (not useVolume or isVolumeSpike)

// === Plotting on Chart ===
plot(emaFast, color=color.blue, title="Fast EMA")
plot(emaSlow, color=color.orange, title="Slow EMA")
plot(vwapLine, color=color.white, title="VWAP")
plotshape(longCond and allowLongs, title="Buy Signal Arrow", location=location.belowbar, color=color.new(color.green, 0), style=shape.triangleup, size=size.small)
plotshape(shortCond and allowShorts, title="Sell Signal Arrow", location=location.abovebar, color=color.new(color.red, 0), style=shape.triangledown, size=size.small)

// === Strategy Execution Logic ===
if (longCond and allowLongs)
    strategy.entry("Long", strategy.long)

if (shortCond and allowShorts)
    strategy.entry("Short", strategy.short)

if (strategy.position_size > 0)
    longStopPrice = strategy.position_avg_price - atr * sl_atr_multiplier
    longTakeProfitPrice = strategy.position_avg_price + atr * tp_atr_multiplier
    strategy.exit("Long Exit", from_entry="Long", stop=longStopPrice, limit=longTakeProfitPrice)
    if (shortCond and useExitOnOppositeSignal)
        strategy.close("Long", comment="Exit on Short Signal")

if (strategy.position_size < 0)
    shortStopPrice = strategy.position_avg_price + atr * sl_atr_multiplier
    shortTakeProfitPrice = strategy.position_avg_price - atr * tp_atr_multiplier
    strategy.exit("Short Exit", from_entry="Short", stop=shortStopPrice, limit=shortTakeProfitPrice)
    if (longCond and useExitOnOppositeSignal)
        strategy.close("Short", comment="Exit on Long Signal")


// === TP/SL Plotting Logic (Always On) ===
// This plots the Stop Loss and Take Profit levels only during an active trade.

// Declare persistent variables to hold the SL/TP levels for the current trade.
var float plot_sl_level = na
var float plot_tp_level = na

// Detect the exact bar when a new trade is entered.
bool isNewTrade = strategy.position_size != 0 and strategy.position_size[1] == 0

// Detect the exact bar when a trade is closed.
bool isTradeClosed = strategy.position_size == 0 and strategy.position_size[1] != 0

// If a new trade starts, calculate and set the SL/TP levels.
if (isNewTrade)
    if (strategy.position_size > 0) // It's a Long Trade
        plot_sl_level := strategy.position_avg_price - atr * sl_atr_multiplier
        plot_tp_level := strategy.position_avg_price + atr * tp_atr_multiplier
    else // It's a Short Trade
        plot_sl_level := strategy.position_avg_price + atr * sl_atr_multiplier
        plot_tp_level := strategy.position_avg_price - atr * tp_atr_multiplier

// If a trade closes, reset the levels to 'na' to stop plotting.
if (isTradeClosed)
    plot_sl_level := na
    plot_tp_level := na

// --- Final Plots ---
// Plot the levels. They will only appear on the chart when they have a number and not 'na'.
// There is no need for a line.delete() with this method.
plot(plot_sl_level, title="Stop Loss", color=color.new(color.red, 0), style=plot.style_linebr, linewidth=2)
plot(plot_tp_level, title="Take Profit", color=color.new(color.green, 0), style=plot.style_linebr, linewidth=2)

// === Alerts ===
alertcondition(longCond and allowLongs, title="Long Entry Alert", message="Strategy Long: {{ticker}} at {{close}}")
alertcondition(shortCond and allowShorts, title="Short Entry Alert", message="Strategy Short: {{ticker}} at {{close}}")