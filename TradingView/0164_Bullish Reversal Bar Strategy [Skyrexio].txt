// This Pine Script‚Ñ¢ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// ¬© Skyrexio

//@version=6
//_______ <licence>
strategy(title = "Bullish Reversal Bar Strategy [Skyrexio]",
         shorttitle = "Bullish Reveral Bar Strategy",
         overlay = true,
         format = format.inherit,
         pyramiding = 1,
         calc_on_order_fills = false,
         calc_on_every_tick = false,
         default_qty_type = strategy.percent_of_equity,
         default_qty_value = 50,
         initial_capital = 10000,
         currency = currency.NONE,
         commission_type = strategy.commission.percent,
         commission_value = 0.1,
         slippage = 5,
         use_bar_magnifier = true)


//_______ <constant_declarations>
var const color skyrexGreen               = color.new(#2ECD99, 0)
var const color skyrexGray                = color.new(#F2F2F2, 0)
var const color skyrexWhite               = color.new(#FFFFFF, 0)


//________<variables declarations>
var int trend                             = 0
var float upFractalLevel                  = na
var float upFractalActivationLevel        = na
var float downFractalLevel                = na
var float downFractalActivationLevel      = na
var bool isTrueBullishReversalBar         = false
bool highCrossesUpfractalLevel            = ta.crossover(high, upFractalActivationLevel)
bool lowCrossesDownFractalLevel           = ta.crossunder(low, downFractalActivationLevel)
var float bullBarConfirmationLevel        = na
var float bullBarInvalidationLevel        = na
var float stopLossLevel                   = na



//_______ <inputs>
// Trading bot settings
sourceUuid               = input.string(title = "sourceUuid:", defval = "yourBotSourceUuid", group = "ü§ñTrading Bot Settingsü§ñ")
secretToken              = input.string(title = "secretToken:", defval = "yourBotSecretToken", group = "ü§ñTrading Bot Settingsü§ñ")


// Trading period settings
lookBackPeriodStart      = input.time(title = "Trade Start Date/Time", defval = timestamp('2023-01-01T00:00:00'), group = "üïêTrading Period Settingsüïê")
lookBackPeriodStop       = input.time(title = "Trade Stop Date/Time", defval = timestamp('2026-01-01T00:00:00'), group = "üïêTrading Period Settingsüïê")


// Strategy settings
enable_MFI               = input.bool(false, title = 'Enable MFI')
enable_AO                = input.bool(false, title = 'Enable AO')

//_______ <function_declarations>
//@function       Used to calculate Simple moving average for Alligator
//@param src      Sourse for smma Calculations
//@param length   Number of bars to calculate smma
//@returns        The calculated smma value
smma(src, length) =>
    var float smma = na
    sma_value = ta.sma(src, length)
    smma := na(smma) ? sma_value : (smma * (length - 1) + src) / length
    smma


//@function       Used to define if the current bar is bullish reversal
//@returns        True if bar is bullish reversal, False otherwise
isBullishReversalBar() =>
    lowest = ta.lowest(7)
    result = close > hl2 and lowest == low
    result
//_______ <calculations>

//Calculating MFI
MFI      = 1000000000 * (high - low) / volume
PreMFI   = 1000000000 * (high[1] - low [1]) / volume[1]
greenbar = (MFI > PreMFI) and (volume > volume[1])
fadebar  = (MFI < PreMFI) and (volume < volume[1])
fakebar  = (MFI > PreMFI) and (volume < volume[1])
squatbar = (MFI < PreMFI) and (volume > volume[1])

//Calculating Awesome Oscillator
ao   = ta.sma(hl2,5) - ta.sma(hl2,34)
diff = ao - ao[1]


//Upfractal calculation
upFractalPrice = ta.pivothigh(2, 2)
upFractal = not na(upFractalPrice)


//Downfractal calculation
downFractalPrice = ta.pivotlow(2, 2)
downFractal = not na(downFractalPrice)


//Calculating Alligator's teeth
jaw   = smma(hl2, 13)[8]
teeth = smma(hl2, 8)[5]
lips  = smma(hl2, 5)[3]


//Calculating upfractal and downfractal levels
if upFractal
    upFractalLevel := upFractalPrice
else
    upFractalLevel := upFractalLevel[1]


if downFractal
    downFractalLevel := downFractalPrice
else
    downFractalLevel := downFractalLevel[1]


//Calculating upfractal activation level, downfractal activation level to approximate the trend and this current trend
if upFractalLevel > teeth
    upFractalActivationLevel := upFractalLevel

if highCrossesUpfractalLevel
    trend := 1
    upFractalActivationLevel := na
    downFractalActivationLevel := downFractalLevel


if downFractalLevel < teeth
    downFractalActivationLevel := downFractalLevel

if lowCrossesDownFractalLevel
    trend := -1
    downFractalActivationLevel := na
    upFractalActivationLevel := upFractalLevel


if trend == 1
    upFractalActivationLevel := na

if trend == -1
    downFractalActivationLevel := na


//Calculating the bullish reversal bars according to inputs
if enable_AO and enable_MFI
    isTrueBullishReversalBar := isBullishReversalBar() and high < jaw and high < teeth and high < lips and diff < 0 and (squatbar or squatbar[1] or squatbar[2])

if enable_AO and not enable_MFI
    isTrueBullishReversalBar := isBullishReversalBar() and high < jaw and high < teeth and high < lips and diff < 0

if not enable_AO and enable_MFI
    isTrueBullishReversalBar := isBullishReversalBar() and high < jaw and high < teeth and high < lips and (squatbar or squatbar[1] or squatbar[2])

if not enable_AO and not enable_MFI
    isTrueBullishReversalBar := isBullishReversalBar() and high < jaw and high < teeth and high < lips


//Calculating bullish reversal bar confirmation and invalidation level
if isTrueBullishReversalBar
    bullBarConfirmationLevel := high
    bullBarInvalidationLevel := low


//Calculation stopLossLevel
if strategy.opentrades > strategy.opentrades[1]
    bullBarConfirmationLevel := na
    stopLossLevel := bullBarInvalidationLevel

if trend[1] == -1 and trend == 1
    stopLossLevel := na

if strategy.opentrades == 0
    stopLossLevel := na


//Strategy entry
if (isTrueBullishReversalBar and time >= lookBackPeriodStart and time <= lookBackPeriodStop)
    strategy.entry(id = "entry1", direction = strategy.long, stop = bullBarConfirmationLevel + syminfo.mintick,  alert_message = '{\n"base": "' + syminfo.basecurrency + '",\n"quote": "' + syminfo.currency + '",\n"position": "entry1",\n"price": "' + str.tostring(close) + '",\n"sourceUuid": "' + sourceUuid + '",\n"secretToken": "' + secretToken + '",\n"timestamp": "' + str.tostring(timenow) + '"\n}')

//Strategy exit
strategy.exit(id = "entry1", stop=stopLossLevel , alert_message = '{\n"base": "' + syminfo.basecurrency + '",\n"quote": "' + syminfo.currency + '",\n"position": "close",\n"price": "' + str.tostring(close) + '",\n"sourceUuid": "' + sourceUuid + '",\n"secretToken": "' + secretToken + '",\n"timestamp": "' + str.tostring(timenow) + '"\n}')

if strategy.opentrades == 1 and na(stopLossLevel) and trend[1] == 1 and trend == -1
    strategy.close_all()