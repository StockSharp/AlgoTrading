//@version=5
// by rk
// based on AHR999 indicator by discountry
//
strategy("BTC DCA AHR999 Strategy", overlay = false, default_qty_type = strategy.fixed)

// === User Inputs ===
usd_invest_1 = input.float(100, title = "USD Investment when ahr999 < 1.2")
usd_invest_2 = input.float(1000, title = "USD Investment when ahr999 < 0.45")
len = input.int(200, title = "Length for Geometric Mean")
scale_factor = input.float(1000, title = "Scale Factor for ahr999 Plot")

// === Date Range Inputs ===
start_year = input.int(2024, title = "Start Year")
start_month = input.int(2, title = "Start Month")
start_day = input.int(1, title = "Start Day")

end_year = input.int(2025, title = "End Year", minval = 2020)
end_month = input.int(12, title = "End Month", minval = 1, maxval = 12)
end_day = input.int(31, title = "End Day", minval = 1, maxval = 31)

start_time = timestamp(start_year, start_month, start_day, 00, 00)
end_time = timestamp(end_year, end_month, end_day, 23, 59)

// === Price Data ===
daily_close = request.security("BNC:BLX", "D", close)
scale_daily_close = daily_close / 10000

// === Geometric Mean Calculation ===
calculateGeometricMean(lookback) =>
    product = 1.0
    for i = 0 to lookback - 1
        product := product * scale_daily_close[i]
    mean = product > 0 ? math.pow(product, 1 / lookback) : na
    mean

gma = calculateGeometricMean(len)
avg_index = scale_daily_close / gma

// === Estimate Price Based on Bitcoin Age ===
calculateEstimatePrice(k, b, x) =>
    y = math.pow(10, k * math.log10(x) + b)
    y

bitcoin_age = request.security("BNC:BLX", "D", bar_index) + 561
estimate_price = calculateEstimatePrice(5.84, -17.01, bitcoin_age)
estimate_index = daily_close / estimate_price

// === Final ahr999 Index ===
ahr999 = avg_index * estimate_index

// === Strategy Logic ===
isMonday = dayofweek == dayofweek.monday
qty_100 = usd_invest_1 / daily_close
qty_1000 = usd_invest_2 / daily_close

// === Cumulative Tracking ===
var float total_invested = 0.0
var float total_quantity = 0.0

// === Buy Logic: Only One Buy Per Monday
in_range = (time >= start_time and time <= end_time)

if in_range
    if isMonday and ahr999 < 0.45
        strategy.order("Buy $" + str.tostring(usd_invest_2), strategy.long, qty = qty_1000)
        total_invested += usd_invest_2
        total_quantity += qty_1000
    else if isMonday and ahr999 < 1.2
        strategy.order("Buy $" + str.tostring(usd_invest_1), strategy.long, qty = qty_100)
        total_invested += usd_invest_1
        total_quantity += qty_100

// === Final Exit One Bar Before Last
if bar_index == last_bar_index - 1
    strategy.close_all(comment = "Final Exit")

// === Custom Equity Curve ===
cumulative_capital_worth = total_quantity * daily_close
spent_capital = total_invested
AHR999_value = ahr999 * scale_factor

// === Plotting with Legend Titles ===
plot(cumulative_capital_worth, title = "Cumulative Capital Worth", color = color.gray, linewidth = 2)
plot(spent_capital, title = "Spent Capital", color = color.black, linewidth = 1)
plot(AHR999_value, title = "AHR999 Value (scaled)", color = ahr999 > 1 ? color.lime : ahr999 > 0.45 ? color.orange : color.red)
//hline(1.2 * scale_factor, title = "Fixed Investment Line", color = color.blue)
//hline(0.45 * scale_factor, title = "Bottom Line", color = color.red)

// === Persistent Labels: Create Once and Update ===
var label spentLabel = na
var label worthLabel = na
var label ahrLabel = na
if bar_index == ta.highest(bar_index, 1)
    if not na(spentLabel)
        label.delete(spentLabel)
    if not na(worthLabel)
        label.delete(worthLabel)
    if not na(ahrLabel)
        label.delete(ahrLabel)

    spentLabel := label.new(x=bar_index, y=spent_capital, text="Spent Capital", style=label.style_label_left, color=color.black, textcolor=color.white)
    worthLabel := label.new(x=bar_index, y=cumulative_capital_worth, text="Invest Worth", style=label.style_label_left, color=color.gray, textcolor=color.white)
    ahrLabel := label.new(x=bar_index, y=AHR999_value, text="AHR999 Indicator", style=label.style_label_left, color=color.red, textcolor=color.white)


// === Static Lines with Right-Aligned Value Display ===
// === Static Lines with Legend Titles ===
plot(1.2 * scale_factor, title = "1.2", color = color.blue, linewidth = 1)
plot(0.45 * scale_factor, title = "0.45", color = color.red, linewidth = 1)