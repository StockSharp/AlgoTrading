// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// ©MapleFrogStudio

//@version=6
//indicator("MFS-3 Bars Pattern Enhanced", overlay=true)
strategy("MFS-3 Bars Pattern Strategy", overlay=true, fill_orders_on_standard_ohlc = true, initial_capital = 1000, default_qty_type = strategy.percent_of_equity, default_qty_value = 100, commission_type = strategy.commission.percent, commission_value = 0.1)


// Constants
enum VolWindow              // Lookback period to detect increased volume from previous candles
    Short = 'Short SMA'
    Med = 'Med SMA'
    Long = 'Long SMA'
igniteMultiplier = 3        // Multiplier for the average body size, to trigger an Ignite Bar
maxPullBackSize = 1/3       // Maximum size of pullback candle vs the Ignite Bar (Must be smaller)
minConfirmationSize = 1/3   // Minimum size of confirmation candle vs the Ignite Bar (Can ne bigger, but not smaller than minimum)


// Setup inputs
indicatorColor = input.color(color.yellow, '',inline = 'Group0')
showBox = input.bool(true, title="Show 3 Bar Box ", inline = 'Group0')
iSmaShort = input(20, 'SMA: Short', ' ' , 'Group1')
iSmaMed = input(50, 'Med', ' ' , 'Group1')
iSmaLong = input(200, 'Long', 'Three levels for Trends window', 'Group1')
VolWindow iVolWindow = input.enum(VolWindow.Med, 'Volume Average Aligned To', inline = 'Group2')
iVolumeInc = input(10,'% Increase', 'Volume increase for the Pull Back Candle', inline = 'Group2')

// Calculate indicators
smaShort = ta.sma(close, iSmaShort)
smaMed = ta.sma(close, iSmaMed)
smaLong = ta.sma(close, iSmaLong)
volMed = ta.sma(volume, iSmaMed)

// utility calcultaions
bodySize = math.abs(close - open)
avgBodySize = ta.sma(math.abs(close - open), iSmaMed)
smaAligned = smaLong > smaMed and smaMed > smaShort
priceBelowSMAShort = close < smaShort


// Check if Ignite condition
igniteBar = (bodySize >= avgBodySize * igniteMultiplier) and (close > open)

// Pulback candle conditions
// 1-Must be a nearish candle (Red : close < open)
// 2-Previous candle must be an Ignite Candle (igniteBar[1] is True if an Ignite Cndle is detected)
// 3-The size of the pullback is less than a percentage of the Ignite candle (bodySize < bodySize[1] * maxPullBackSize)
// 4-The high of the Pullback must be above the Ignite Close
// 5-The low of the pullback must be below the Ignite Close
pullBackBar = (close < open) and igniteBar[1] and (bodySize < bodySize[1] * maxPullBackSize) and (high > close[1]) and (low < close[1])

// Confirmation candle conditions
// 1-Must be an Bullish candle (green : Close > Open)
// 2-Previous candle must be a Pullback candle (pullBack[1] is true)
// 3-BodySize of confirmation candle must be a minimum size vs the Ignite body size (2 bars before)
confirmationBar = (close > open) and pullBackBar[1] and (bodySize > bodySize[2] * minConfirmationSize) and (open > close[1])



// 3Bar Buy pattern detected
// 3 consecutive basr : Ignite, PullBack, Confirmation
// Market trend : SMA must be in downtrend (Lomg > Medium > Short)
// Ignite bar: possible reversal (ignite candle close must be below all SMA's)
signal3BarDetected = (igniteBar[2] and pullBackBar[1] and confirmationBar) and smaAligned[2] and (close[2] < smaShort[2])


// Trade parameters and risk management
r2rr = 2.0                                          // Risk to reward at least 2
buySignal = signal3BarDetected[1]                   // Buy signal if 3 Bar exists in previous candles
stopLoss = low[2]                                   // Low of igniteBar
targetPrice = open + (open - stopLoss) * r2rr       // Risk to Reward at least 2

entryPrice = close
//stop_loss_price_long = stopLoss
//take_profit_price_long = targetPrice

stopLossLongInTicks = (entryPrice - stopLoss) / syminfo.mintick
takeProfitLongInTicks = (targetPrice - entryPrice) / syminfo.mintick


// Enter Positions
if signal3BarDetected and strategy.position_size == 0
    strategy.entry("Long", strategy.long)
    strategy.exit("Long", loss = stopLossLongInTicks, profit = takeProfitLongInTicks, comment_loss="SL Long", comment_profit = "TP Long")


// PLOT BOX, Stop Loss dshed line and Take Profit dashed line
var box b = na
var line slLine = na
var line tpLine = na
if signal3BarDetected
    // Calculate the range for the box
    boxLeft = bar_index - 2
    boxRight = bar_index + 0
    highestHigh =   math.max(high[2], high[1], high)    // The high of Ignite, PullBack or Confirmation
    lowestLow = math.min(low[2], low[1], low)           // The low  of Ignite, PullBack or Confirmation
    boxTop = highestHigh
    boxBottom = lowestLow

    if showBox
        b := box.new(left=boxLeft, top=boxTop, right=boxRight, bottom=boxBottom, border_color=indicatorColor, border_width=1, border_style=line.style_solid, bgcolor=color.new(indicatorColor, 80))
        slLine := line.new(x1=bar_index - 2, y1=stopLoss, x2=bar_index + 10, y2=stopLoss, color=color.red, style=line.style_dashed, width=2)
        tpLine := line.new(x1=bar_index - 2, y1=targetPrice, x2=bar_index + 10, y2=targetPrice, color=color.green, style=line.style_dashed, width=2)

// Plots data
plot(smaShort, 'SMA Short', color = color.yellow)
plot(smaMed, 'SMA Medium', color = color.blue)
plot(smaLong, 'SMA Long', color = color.white)

plotshape(igniteBar, title="Ignite", text="I", location=location.bottom, style=shape.arrowup, size=size.normal, color=color.green, textcolor=color.white)
plotshape(pullBackBar, title="Pullback", text="P", location=location.bottom, style=shape.arrowup, size=size.normal, color=color.red, textcolor=color.white)
plotshape(confirmationBar, title="ConfirmationBar", text="C", location=location.bottom, style=shape.arrowup, size=size.normal, color=color.yellow, textcolor=color.white)