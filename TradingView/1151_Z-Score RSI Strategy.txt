// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © Nathan Farmer (nathanfarmer)

//@version=5
strategy("RSI of Z-Score Strategy", overlay=false, initial_capital=10000, commission_value=1, commission_type=strategy.commission.percent, slippage=100)

// Import library
import TradingView/ta/7

// Input parameters
zScoreLength = input.int(20, minval=1, title="Z-Score Length")
rsiLength = input.int(9, minval=1, title="RSI Length")
smoothingLength = input.int(15, minval=1, title="RSI MA Length")
maType = input.string("EMA", title="Moving Average Type", options=["EMA", "SMA", "WMA", "HMA", "DEMA", "TEMA", "VWMA", "LSMA", "TMA", "FRAMA", "SMMA (RMA)"])
midline = input.float(50.0, "Midline Level")

// Overbought/Oversold Levels
overboughtLevel = input.float(70.0, title="Overbought Level")
oversoldLevel = input.float(30.0, title="Oversold Level")

// Entry Condition Type
entryConditionType = input.string("Moving Average Midline Crossover", title="Entry Condition Type", options=["Moving Average Midline Crossover","RSI Moving Average Crossover","RSI Overbought/Oversold","RSI MA Overbought/Oversold"])

// Exit Level Option
exitLevelOption = input.string("1/2 Way", title="Exit Level Option", options=["1/4 Way", "1/2 Way", "3/4 Way", "Full Crossover"])

// Maximum risked per trades
maxRisk = input.float(0.05, title="Maximum Risked Per Trade")

// Price data
price = close

// Calculate Rolling Mean and Standard Deviation
mean = ta.sma(price, zScoreLength)
stdDev = ta.stdev(price, zScoreLength)

// Calculate Z-Score
zScore = (price - mean) / stdDev != 0 ? stdDev : 1

// Calculate RSI over Z-Score
rsiZ = ta.rsi(zScore, rsiLength)

// Choose MA type for RSI MA
rsiMa = switch maType
    "SMA"         => ta.sma(rsiZ, smoothingLength)
    "EMA"         => ta.ema(rsiZ, smoothingLength)
    "WMA"         => ta.wma(rsiZ, smoothingLength)
    "HMA"         => ta.hma(rsiZ, smoothingLength)
    "DEMA"        => ta.dema(rsiZ, smoothingLength)
    "TEMA"        => ta.tema(rsiZ, smoothingLength)
    "VWMA"        => ta.vwma(rsiZ, smoothingLength)
    "LSMA"        => ta.linreg(rsiZ, smoothingLength, 0)
    "TMA"         => ta.trima(rsiZ, smoothingLength)
    "FRAMA"       => ta.frama(rsiZ, smoothingLength)
    "SMMA (RMA)"  => ta.rma(rsiZ, smoothingLength)
    => ta.sma(rsiZ, smoothingLength)  // Default to SMA

// Plot RSI of Z-Score with a neutral white color
plot(rsiZ, color=color.new(color.white, 40), title="RSI of Z-Score", linewidth=1)

// Set color for the moving average line based on signals
maColor = switch entryConditionType
    "Moving Average Midline Crossover" => rsiMa > midline ? color.green : rsiMa < midline ? color.red : color.gray
    "RSI Moving Average Crossover" => rsiZ > rsiMa ? color.green : rsiZ < rsiMa ? color.red : color.gray
    => color.purple //default to purple


plot(rsiMa, color=maColor, title="MA of RSI", linewidth=2)

// Plot Overbought and Oversold Levels
hline(overboughtLevel, 'Overbought Level', color=color.red)
hline(oversoldLevel, 'Oversold Level', color=color.green)
hline(midline, 'Midline', color=color.gray)

// Calculate the OB/OS range and exit levels
obOsRange = overboughtLevel - oversoldLevel

exitLongLevel = switch exitLevelOption
    "1/4 Way"       => oversoldLevel + obOsRange * 0.25
    "1/2 Way"       => oversoldLevel + obOsRange * 0.5
    "3/4 Way"       => oversoldLevel + obOsRange * 0.75
    "Full Crossover"=> overboughtLevel
    => oversoldLevel + obOsRange * 0.5  // Default to "1/2 Way"

exitShortLevel = switch exitLevelOption
    "1/4 Way"       => overboughtLevel - obOsRange * 0.25
    "1/2 Way"       => overboughtLevel - obOsRange * 0.5
    "3/4 Way"       => overboughtLevel - obOsRange * 0.75
    "Full Crossover"=> oversoldLevel
    => overboughtLevel - obOsRange * 0.5  // Default to "1/2 Way"

// Initialize conditions
longCondition = false
shortCondition = false
exitLongCondition = false
exitShortCondition = false

// Entry and Exit Conditions based on Entry Condition Type
switch entryConditionType
    "Moving Average Midline Crossover" =>
        // Entry Conditions
        longCondition := ta.crossover(rsiMa, 50)
        shortCondition := ta.crossunder(rsiMa, 50)
        // Exit Conditions
        exitLongCondition := ta.crossunder(rsiMa, 50)
        exitShortCondition := ta.crossover(rsiMa, 50)
    "RSI Moving Average Crossover" =>
        // Entry Conditions
        longCondition := ta.crossover(rsiZ, rsiMa)
        shortCondition := ta.crossunder(rsiZ, rsiMa)
        // Exit Conditions
        exitLongCondition := ta.crossunder(rsiZ, rsiMa)
        exitShortCondition := ta.crossover(rsiZ, rsiMa)
    "RSI Overbought/Oversold" =>
        // Entry Conditions
        longCondition := ta.crossunder(rsiZ, oversoldLevel)
        shortCondition := ta.crossover(rsiZ, overboughtLevel)
        // Exit Conditions
        exitLongCondition := ta.crossover(rsiZ, exitLongLevel)
        exitShortCondition := ta.crossunder(rsiZ, exitShortLevel)
    "RSI MA Overbought/Oversold" =>
        // Entry Conditions
        longCondition := ta.crossunder(rsiMa, oversoldLevel)
        shortCondition := ta.crossover(rsiMa, overboughtLevel)
        // Exit Conditions
        exitLongCondition := ta.crossover(rsiMa, exitLongLevel)
        exitShortCondition := ta.crossunder(rsiMa, exitShortLevel)
    =>
        // Default to Moving Average Midline Crossover
        longCondition := ta.crossover(rsiMa, 50)
        shortCondition := ta.crossunder(rsiMa, 50)
        exitLongCondition := ta.crossunder(rsiMa, 50)
        exitShortCondition := ta.crossover(rsiMa, 50)

// Execute trades
if (longCondition and strategy.position_size <= 0) // Long signal, need to check that we're already in a long
    strategy.entry("Long Entry", strategy.long)
if (shortCondition and strategy.position_size >= 0) // Short signal, need to check that we're already in a short
    strategy.entry("Short Entry", strategy.short)

if (strategy.position_size > 0) //in a long
    if (strategy.openprofit_percent > maxRisk)
        strategy.close("Long Entry")
if (strategy.position_size < 0) //in a short
    if (strategy.openprofit_percent > maxRisk)
        strategy.close("Short Entry")

// Exit trades based on conditions
if (strategy.position_size > 0 and exitLongCondition)
    strategy.close("Long Entry")
if (strategy.position_size < 0 and exitShortCondition)
    strategy.close("Short Entry")

// Highlight the background based on position (Long/Short)
bgcolor(strategy.position_size > 0 ? color.new(color.green, 90) : strategy.position_size < 0 ? color.new(color.red, 90) : na, title="Background Color Based on Position")