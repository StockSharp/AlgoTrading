//@version=5
strategy(title='Dkoderweb repainting issue fix strategy', overlay=true, pyramiding=0, initial_capital=100000, currency=currency.USD)

useHA = input(false, title='Use Heikken Ashi Candles')
useAltTF = input(true, title='Use Alt Timeframe')
tf = input('60', title='Alt Timeframe')
showPatterns = input(true, title='Show Patterns')
showFib0000 = input(title='Display Fibonacci 0.000:', defval=true)
showFib0236 = input(title='Display Fibonacci 0.236:', defval=true)
showFib0382 = input(title='Display Fibonacci 0.382:', defval=true)
showFib0500 = input(title='Display Fibonacci 0.500:', defval=true)
showFib0618 = input(title='Display Fibonacci 0.618:', defval=true)
showFib0764 = input(title='Display Fibonacci 0.764:', defval=true)
showFib1000 = input(title='Display Fibonacci 1.000:', defval=true)

zigzag() =>
    _isUp = close >= open
    _isDown = close <= open
    _direction = 0
    _direction := _isUp[1] and _isDown ? -1 : _isDown[1] and _isUp ? 1 : nz(_direction[1])
    _zigzag = _isUp[1] and _isDown and _direction[1] != -1 ? high[1] : _isDown[1] and _isUp and _direction[1] != 1 ? low[1] : na
    _zigzag

_ticker = syminfo.tickerid
sz = useAltTF ? ta.change(time(tf)) != 0 ? request.security(_ticker, tf, zigzag(), lookahead=barmerge.lookahead_on) : na : zigzag()

plot(sz, title='zigzag', color=color.new(color.black, 0), linewidth=2)

//  ||---   Pattern Recognition:
x = ta.valuewhen(sz, sz, 4)
a = ta.valuewhen(sz, sz, 3)
b = ta.valuewhen(sz, sz, 2)
c = ta.valuewhen(sz, sz, 1)
d = ta.valuewhen(sz, sz, 0)

xab = math.abs(b - a) / math.abs(x - a)
xad = math.abs(a - d) / math.abs(x - a)
abc = math.abs(b - c) / math.abs(a - b)
bcd = math.abs(c - d) / math.abs(b - c)

//  ||-->   Pattern Recognition Functions:
isBat(_mode) =>
    _xab = xab >= 0.382 and xab <= 0.5
    _abc = abc >= 0.382 and abc <= 0.886
    _bcd = bcd >= 1.618 and bcd <= 2.618
    _xad = xad <= 0.618 and xad <= 1.000  // 0.886
    _xab and _abc and _bcd and _xad and (_mode == 1 ? d < c : d > c)

isAntiBat(_mode) =>
    _xab = xab >= 0.500 and xab <= 0.886  // 0.618
    _abc = abc >= 1.000 and abc <= 2.618  // 1.13 --> 2.618
    _bcd = bcd >= 1.618 and bcd <= 2.618  // 2.0  --> 2.618
    _xad = xad >= 0.886 and xad <= 1.000  // 1.13
    _xab and _abc and _bcd and _xad and (_mode == 1 ? d < c : d > c)

isAltBat(_mode) =>
    _xab = xab <= 0.382
    _abc = abc >= 0.382 and abc <= 0.886
    _bcd = bcd >= 2.0 and bcd <= 3.618
    _xad = xad <= 1.13
    _xab and _abc and _bcd and _xad and (_mode == 1 ? d < c : d > c)

isButterfly(_mode) =>
    _xab = xab <= 0.786
    _abc = abc >= 0.382 and abc <= 0.886
    _bcd = bcd >= 1.618 and bcd <= 2.618
    _xad = xad >= 1.27 and xad <= 1.618
    _xab and _abc and _bcd and _xad and (_mode == 1 ? d < c : d > c)

isAntiButterfly(_mode) =>
    _xab = xab >= 0.236 and xab <= 0.886  // 0.382 - 0.618
    _abc = abc >= 1.130 and abc <= 2.618  // 1.130 - 2.618
    _bcd = bcd >= 1.000 and bcd <= 1.382  // 1.27
    _xad = xad >= 0.500 and xad <= 0.886  // 0.618 - 0.786
    _xab and _abc and _bcd and _xad and (_mode == 1 ? d < c : d > c)

isABCD(_mode) =>
    _abc = abc >= 0.382 and abc <= 0.886
    _bcd = bcd >= 1.13 and bcd <= 2.618
    _abc and _bcd and (_mode == 1 ? d < c : d > c)

isGartley(_mode) =>
    _xab = xab >= 0.5 and xab <= 0.618  // 0.618
    _abc = abc >= 0.382 and abc <= 0.886
    _bcd = bcd >= 1.13 and bcd <= 2.618
    _xad = xad >= 0.75 and xad <= 0.875  // 0.786
    _xab and _abc and _bcd and _xad and (_mode == 1 ? d < c : d > c)

isAntiGartley(_mode) =>
    _xab = xab >= 0.500 and xab <= 0.886  // 0.618 -> 0.786
    _abc = abc >= 1.000 and abc <= 2.618  // 1.130 -> 2.618
    _bcd = bcd >= 1.500 and bcd <= 5.000  // 1.618
    _xad = xad >= 1.000 and xad <= 5.000  // 1.272
    _xab and _abc and _bcd and _xad and (_mode == 1 ? d < c : d > c)

isCrab(_mode) =>
    _xab = xab >= 0.500 and xab <= 0.875  // 0.886
    _abc = abc >= 0.382 and abc <= 0.886
    _bcd = bcd >= 2.000 and bcd <= 5.000  // 3.618
    _xad = xad >= 1.382 and xad <= 5.000  // 1.618
    _xab and _abc and _bcd and _xad and (_mode == 1 ? d < c : d > c)

isAntiCrab(_mode) =>
    _xab = xab >= 0.250 and xab <= 0.500  // 0.276 -> 0.446
    _abc = abc >= 1.130 and abc <= 2.618  // 1.130 -> 2.618
    _bcd = bcd >= 1.618 and bcd <= 2.618  // 1.618 -> 2.618
    _xad = xad >= 0.500 and xad <= 0.750  // 0.618
    _xab and _abc and _bcd and _xad and (_mode == 1 ? d < c : d > c)

isShark(_mode) =>
    _xab = xab >= 0.500 and xab <= 0.875  // 0.5 --> 0.886
    _abc = abc >= 1.130 and abc <= 1.618  //
    _bcd = bcd >= 1.270 and bcd <= 2.240  //
    _xad = xad >= 0.886 and xad <= 1.130  // 0.886 --> 1.13
    _xab and _abc and _bcd and _xad and (_mode == 1 ? d < c : d > c)

isAntiShark(_mode) =>
    _xab = xab >= 0.382 and xab <= 0.875  // 0.446 --> 0.618
    _abc = abc >= 0.500 and abc <= 1.000  // 0.618 --> 0.886
    _bcd = bcd >= 1.250 and bcd <= 2.618  // 1.618 --> 2.618
    _xad = xad >= 0.500 and xad <= 1.250  // 1.130 --> 1.130
    _xab and _abc and _bcd and _xad and (_mode == 1 ? d < c : d > c)

is5o(_mode) =>
    _xab = xab >= 1.13 and xab <= 1.618
    _abc = abc >= 1.618 and abc <= 2.24
    _bcd = bcd >= 0.5 and bcd <= 0.625  // 0.5
    _xad = xad >= 0.0 and xad <= 0.236  // negative?
    _xab and _abc and _bcd and _xad and (_mode == 1 ? d < c : d > c)

isWolf(_mode) =>
    _xab = xab >= 1.27 and xab <= 1.618
    _abc = abc >= 0 and abc <= 5
    _bcd = bcd >= 1.27 and bcd <= 1.618
    _xad = xad >= 0.0 and xad <= 5
    _xab and _abc and _bcd and _xad and (_mode == 1 ? d < c : d > c)

isHnS(_mode) =>
    _xab = xab >= 2.0 and xab <= 10
    _abc = abc >= 0.90 and abc <= 1.1
    _bcd = bcd >= 0.236 and bcd <= 0.88
    _xad = xad >= 0.90 and xad <= 1.1
    _xab and _abc and _bcd and _xad and (_mode == 1 ? d < c : d > c)

isConTria(_mode) =>
    _xab = xab >= 0.382 and xab <= 0.618
    _abc = abc >= 0.382 and abc <= 0.618
    _bcd = bcd >= 0.382 and bcd <= 0.618
    _xad = xad >= 0.236 and xad <= 0.764
    _xab and _abc and _bcd and _xad and (_mode == 1 ? d < c : d > c)

isExpTria(_mode) =>
    _xab = xab >= 1.236 and xab <= 1.618
    _abc = abc >= 1.000 and abc <= 1.618
    _bcd = bcd >= 1.236 and bcd <= 2.000
    _xad = xad >= 2.000 and xad <= 2.236
    _xab and _abc and _bcd and _xad and (_mode == 1 ? d < c : d > c)


//-------------------------------------------------------------------------------------------------------------------------------------------------------------
fib_range = math.abs(d - c)

f_last_fib(_rate) =>
    d > c ? d - fib_range * _rate : d + fib_range * _rate

trade_size = input(title='Trade size:', defval=10000.00)
ew_rate = input(title='Fib. Rate to use for Entry Window:', defval=0.382)
tp_rate = input(title='Fib. Rate to use for TP:', defval=0.618)
sl_rate = input(title='Fib. Rate to use for SL:', defval=-0.618)
buy_patterns_00 = isABCD(1) or isBat(1) or isAltBat(1) or isButterfly(1) or isGartley(1) or isCrab(1) or isShark(1) or is5o(1) or isWolf(1) or isHnS(1) or isConTria(1) or isExpTria(1)
buy_patterns_01 = isAntiBat(1) or isAntiButterfly(1) or isAntiGartley(1) or isAntiCrab(1) or isAntiShark(1)
sel_patterns_00 = isABCD(-1) or isBat(-1) or isAltBat(-1) or isButterfly(-1) or isGartley(-1) or isCrab(-1) or isShark(-1) or is5o(-1) or isWolf(-1) or isHnS(-1) or isConTria(-1) or isExpTria(-1)
sel_patterns_01 = isAntiBat(-1) or isAntiButterfly(-1) or isAntiGartley(-1) or isAntiCrab(-1) or isAntiShark(-1)

buy_entry = (buy_patterns_00 or buy_patterns_01) and close <= f_last_fib(ew_rate)
buy_close = high >= f_last_fib(tp_rate) or low <= f_last_fib(sl_rate)
sel_entry = (sel_patterns_00 or sel_patterns_01) and close >= f_last_fib(ew_rate)
sel_close = low <= f_last_fib(tp_rate) or high >= f_last_fib(sl_rate)

// Variables to track active trade status
var int buy_bar_index = na
var int sell_bar_index = na
var float buy_tp_level = na
var float buy_sl_level = na
var float sell_tp_level = na
var float sell_sl_level = na
var bool in_buy_trade = false
var bool in_sell_trade = false

// For tracking changes in positions
buy_signal = buy_entry and not in_buy_trade
sell_signal = sel_entry and not in_sell_trade
buy_close_signal = buy_close and in_buy_trade
sell_close_signal = sel_close and in_sell_trade

// Strategy entry and exit
if buy_signal
    strategy.entry('buy', direction=strategy.long, qty=trade_size, comment='buy')
    buy_bar_index := bar_index
    buy_tp_level := f_last_fib(tp_rate)
    buy_sl_level := f_last_fib(sl_rate)
    in_buy_trade := true
    in_buy_trade

if buy_close_signal
    strategy.close('buy')
    in_buy_trade := false
    in_buy_trade

if sell_signal
    strategy.entry('sell', direction=strategy.short, qty=trade_size, comment='sell')
    sell_bar_index := bar_index
    sell_tp_level := f_last_fib(tp_rate)
    sell_sl_level := f_last_fib(sl_rate)
    in_sell_trade := true
    in_sell_trade

if sell_close_signal
    strategy.close('sell')
    in_sell_trade := false
    in_sell_trade

// Plot entry and exit markers
plotshape(buy_signal, title='Buy Signal', location=location.belowbar, color=color.new(color.green, 0), style=shape.triangleup, size=size.normal)
plotshape(sell_signal, title='Sell Signal', location=location.abovebar, color=color.new(color.red, 0), style=shape.triangledown, size=size.normal)
plotshape(buy_close_signal, title='Buy Close', location=location.belowbar, color=color.new(color.purple, 0), style=shape.circle, size=size.small)
plotshape(sell_close_signal, title='Sell Close', location=location.abovebar, color=color.new(color.purple, 0), style=shape.circle, size=size.small)

// Custom function to plot horizontal lines - FIXED to ensure consistent return type


// Plot TP and SL horizontal lines only during active trades

// Plot areas (visible only in specific bars) instead of lines on all bars
bgcolor(in_buy_trade ? color.new(color.green, 90) : na, title='Buy Zone', transp=90)
bgcolor(in_sell_trade ? color.new(color.red, 90) : na, title='Sell Zone', transp=90)

// Alert messages
buymsg = input.string(defval='Buy / Main, Close = close Symbol = symbol', title=' Long message', group='Alerts')
sellmsg = input.string(defval='Sell / Main, Close = close Symbol = symbol', title=' Short message', group='Alerts')
buyexit = input.string(defval='Buy exit', title=' Short message', group='Alerts')
sellexit = input.string(defval='Sell exit', title=' Short message', group='Alerts')

// Convert the message
getClose(message) =>
    result = message
    result += ' Price: ' + str.tostring(close)
    result += ' Symbol: ' + syminfo.ticker
    result

// Alerts only when signals occur
if buy_signal
    alert(getClose(buymsg), alert.freq_once_per_bar_close)

if sell_signal
    alert(getClose(sellmsg), alert.freq_once_per_bar_close)

if buy_close_signal
    alert(getClose(buyexit), alert.freq_once_per_bar_close)

if sell_close_signal
    alert(getClose(sellexit), alert.freq_once_per_bar_close)