// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © Shivam_Mandrai

//@version=6
strategy("IU Gap Fill Strategy", overlay = true, initial_capital = 100000, slippage = 1, commission_value = 0.02)

// ______________________________________________ User Inputs ______________________________________________ \\
pec_gap                     = input.float(0.2, "Percenatage difference for valid Gap = ")
ATR_lenght                  = input.int(14, 'ATR Lenght = ', group = "Trailing Stop Loss Setting")
ATR_factor                  = input.float(2, 'ATR factor = ', group = "Trailing Stop Loss Setting")

//______________________________________________ Getting values _____________________________________________ \\
session_first_bar_open      = ta.valuewhen(session.isfirstbar, open, 0)
last_session_last_bar_close = ta.valuewhen(session.isfirstbar, close[1], 0)

//@function To get the valid diff based on pec gap allowed
cal_diff(Close, Open)=>
    return_ = false
    if math.abs(Close - Open) >= Open *(pec_gap / 100)
        return_ := true
    return_

// _____________________________________________ Entry Conditions ____________________________________________ \\
valid_gap     = cal_diff(last_session_last_bar_close, session_first_bar_open)
gap_up        = session_first_bar_open > last_session_last_bar_close
gap_down      = session_first_bar_open < last_session_last_bar_close
long_cond     = low  < last_session_last_bar_close and close > last_session_last_bar_close
                 and gap_up and valid_gap and not session.isfirstbar and not session.islastbar
short_cond    = high > last_session_last_bar_close and close < last_session_last_bar_close
                 and gap_down and valid_gap and not session.isfirstbar and not session.islastbar

// _____________________________________________ Going Long and Short ________________________________________ \\
// -------- Long Entry ---------- \\
if long_cond and strategy.position_size == 0 and barstate.isconfirmed
    strategy.entry("long", strategy.long, comment = "Long Entry")
//-------- Short Entry --------- \\
if short_cond and strategy.position_size == 0 and barstate.isconfirmed
    strategy.entry("short", strategy.short, comment = "Short Entry")


// ____________________________________________ ATR Trailing Stop Loss ________________________________________ \\
float atr          = ta.atr(ATR_lenght)
var float ATR_TSL  = na
// -------- Long Side Trailing --------- \\
if strategy.position_size > 0
    // ---- Asigning trailing SL if its na ----- \\
    if na(ATR_TSL)
        ATR_TSL    := strategy.position_avg_price - (atr * ATR_factor)
    else
        ATR_TSL    := math.max(ATR_TSL, close - (atr * ATR_factor))
    // ---------- Setting Trailing SL --------------- \\
    strategy.exit("long", "long", stop = ATR_TSL, comment = "Trailing SL")

// -------- Short Side Trailing --------- \\
if strategy.position_size < 0
    // ---- Asigning trailing SL if its na ----- \\
    if na(ATR_TSL)
        ATR_TSL    := strategy.position_avg_price + (atr * ATR_factor)
    else
        ATR_TSL    := math.min(ATR_TSL, close + (atr * ATR_factor))
    // ---------- Setting Trailing SL --------------- \\
    strategy.exit("short", "short", stop = ATR_TSL, comment = "Short Trailing SL")

// ------ Resetting Trailing SL ------ \\
if strategy.position_size == 0
    ATR_TSL        := na


// ______________________________________________ Plotting _________________________________________________ \\
ATR_TSL_plot = plot(strategy.position_size != 0 ? ATR_TSL : na, color = color.purple,
                     style = plot.style_linebr, linewidth = 1)
mid_level    = plot(hl2, "Mid Level", display = display.none)
// ----------------- Filling Positions ---------------- \\
fill(ATR_TSL_plot, mid_level, hl2 ,ATR_TSL, color(na), strategy.position_size != 0 ? color.new(color.purple, 70) : na)
// ------------------ Valid gap plotting -------------- \\
plot(not session.islastbar and valid_gap and strategy.position_size[1] == 0 ? last_session_last_bar_close : na,
         "Gap Level", gap_up ? color.green : gap_down ? color.red : color(na), 2, style = plot.style_linebr)