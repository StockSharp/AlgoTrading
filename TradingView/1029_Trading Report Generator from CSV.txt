// This Pine Script® code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © adolgov

//@version=6
strategy("Trading Report Generator from CSV", margin_long = 0, margin_short = 0, overlay = true)

tradesCSV = input.text_area(title = "Transactions CSV:", defval = "Symbol,Side,Qty,Fill Price,Closing Time\nCRYPTO:BTCUSD,Buy,200,107900,2025-07-08 01:59:29\nCRYPTO:BTCUSD,Sell,100,123000,2025-07-14 07:00:00\nCRYPTO:BTCUSD,Sell,100,115000,2025-07-25 07:00:00")

type Trade
    string tickerId
    bool isBuy
    float qty
    float price
    int execTime

var supportedHeader1 = "Symbol,Side,Qty,Fill Price,Commission,Closing Time"
var supportedHeader2 = "Symbol,Side,Qty,Fill Price,Closing Time"

method tostring(Trade this)=>
    str.format("{0} {1} {2} shares at {3}", this.isBuy ? "buy" : "sell", this.tickerId, this.qty, this.price)

parseTimestamp(string timeStamp)=>
    // timeStamp in yyyy-MM-DD hh:mm:ss format
    parts = str.split(timeStamp, ' ')
    date = str.split(parts.get(0), '-')
    y = str.tonumber(date.get(0))
    m = str.tonumber(date.get(1))
    d = str.tonumber(date.get(2))

    tm = str.split(parts.get(1), ':')
    h = str.tonumber(tm.get(0))
    min = str.tonumber(tm.get(1))
    s = str.tonumber(tm.get(2))

    timestamp(int(y), int(m), int(d), int(h), int(min), int(s))

checkSize(array<string> elems, int minCount, int lineNumber)=>
    if elems.size() < minCount
        runtime.error(str.format("Expected {0} values, founded less: {1} on the line with number {2}", minCount, elems, lineNumber))

parseTrade(string ln, int lineNumber, bool header1) =>
    elems = str.split(str.trim(ln), ',')
    ticker = elems.get(0)
    isTrade = ticker != '$CASH' // skip not trade transactions (the Portfolio export csv can contains $CASH transactions)
    if isTrade
        checkSize(elems, header1 ? 6 : 5, lineNumber)
        qty = str.tonumber(elems.get(2))
        price = str.tonumber(elems.get(3))
        tm = parseTimestamp(elems.get(header1 ? 5 : 4))
        Trade.new(ticker, str.lower(elems.get(1))=="buy", qty, price, tm)

var mainTicker = ticker.standard(syminfo.tickerid)

parseTrades()=>
    result = map.new<int,Trade>()
    lines = str.split(tradesCSV, '\n')
    if lines.size() > 0
        header = str.trim(lines.get(0))
        if header != supportedHeader1 and header != supportedHeader2
            runtime.error('Unsupported csv format. Expecting csv with columns: "' + supportedHeader1 + '" or "' + supportedHeader2 + '"\nFounded "' + header + '"')
        for i = 1 to lines.size()-1
            t = parseTrade(lines.get(i), i + 1, header == supportedHeader1)
            if not na(t) and mainTicker == t.tickerId
                result.put(t.execTime, t)
    result

var trades = parseTrades()

sortedKeys()=>
    result = trades.keys()
    result.sort(order.descending)
    result

var times = sortedKeys()

var barDurationMs = timeframe.in_seconds("") * 1000

nextId()=>
    varip uniqueId = 0
    uniqueId += 1
    str.tostring(uniqueId)

while times.size() > 0
    firstT = times.last()
    if time_close + barDurationMs > firstT
        first = trades.remove(firstT)
        strategy.order(id = (first.isBuy ? "buy " : "sell ") + nextId(), direction = first.isBuy ? strategy.long : strategy.short, qty = first.qty, limit = first.price, comment = first.isBuy ? "buy" : "sell")
        times.pop()
        continue
    else
        break