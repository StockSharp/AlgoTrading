//  TASC Issue: May 2025
//     Article: A Test Of Three Approaches
//              Trading The Channel
//  Article By: Perry J. Kaufman
//    Language: TradingView's Pine ScriptÂ® v6
// Provided By: PineCoders, for tradingview.com

//@version=6
string TITLE  = "TASC 2025.05 Trading The Channel"
string STITLE = "Trading The Channel"
string QTYT   = strategy.fixed
float  ICAP   = 100000
strategy(TITLE, STITLE, false, default_qty_type = QTYT, initial_capital = ICAP)


//#region Constants, enums, and inputs:

// @variable A constant for displaying plots in all locations except the status line.
DSP = display.all - display.status_line

// @enum An enumeration of possible trade rules.
enum Rule
    T1 = "Trade the trend"
    T2 = "Trade channel breakouts"
    T3 = "Trade within the channel"

// @enum An enumeration of position sizing options.
enum Sizing
    auto   = "Auto"
    manual = "Manual"

// Tooltips
string TT0 = "Specifies the trading rule:\n\n
             -> 'Trade the trend' (rule 1) places orders based on slope changes.\n
             -> 'Trade channel breakouts' (rule 2) places orders based on the direction in
             which price crosses outside the current channel.\n
             -> 'Trade within the channel' (rule 3) places mean reversion orders within
             upper and lower channel zones whose widths are defined by the 'Zone %'.
             The strategy filters the orders based on slope when 'Trend filter'
             is enabled."
string TT1 = "The source price for the regression calculation. Recommended options are: 'close', 'hlc3' or 'hl2'."
string TT2 = "The source prices for the channel range calculations. Applies only to rule 2 and 3."
string TT3 = "Percentage deviation of the bands to use for trading zones with rule 3."
string TT4 = "When enabled, places a stop-loss order at the specified percentage distance
              away from the closing price in the unfavorable direction."
string TT5 = "Specifies the position sizing mode:\n\n
             -> With 'Auto' mode, the size is 10000 divided by the closing price for equities,
             25000 divided by the product of 20-bar ATR and point value for futures,
             and 0 for all other symbols.\n
             -> With 'Manual' mode, the size is defined by the 'Order size' inputs in the
             'Properties' tab."
string TT6 = "When using rule 3:\n\n
             -> Allow a long position only when the slope is positive.\n
             -> Allow a short position only when the slope is negative."

// Inputs
Rule   rule     = input.enum(Rule.T1, "Trade rule:", tooltip = TT0)
int    from     = input.time(timestamp("2 Apr 2024 00:00 +0300"), "Start date:")
int    period   = input.int(40, "Period:", minval = 2)
float  price    = input.source(close, "Linreg source:", tooltip = TT1)
string chSource = input.string("close", "Range source:", options=["close", "high/low"], tooltip = TT2)
float  zone     = input.float(20, "Zone %:", minval = 0, maxval = 50, tooltip = TT3) / 100
bool   useSL    = input.bool(false, "SL %:   ", TT3, "sl")
float  stopperc = input.float(5, "", minval = 0, maxval = 100, tooltip = TT4, inline = "sl") / 100
Sizing sizing   = input.enum(Sizing.auto, "Position sizing:", tooltip = TT5)
bool   longonly = input.bool(false, "Long trades only")
bool   filter   = input.bool(false, "Trend filter", tooltip = TT6)
//#endregion


//#region Functions:

// @function      Calculates the current value, y-intercept, slope, and
//                direction of a `length`-bar linear regression line.
// @param src     The source series to process.
// @param length  The number of bars in the regression calculation.
// @returns       A tuple containing the following values:
//                 - The current linear regression value (LSMA).
//                 - The y-intercept of the moving sample window, where
//                   `length` bars back represents x == 0.
//                 - The slope of the linear regression line.
//                 - The sign of the slope (1, 0, or -1).
LRISS(float src, int length) =>
    float linreg    = ta.linreg(src, length, 0)
    float linreg1   = ta.linreg(src, length, 1)
    float slope     = linreg - linreg1
    float signal    = math.sign(slope)
    float intercept = linreg - slope * length
    [linreg, intercept, slope, signal]
//#endregion


//#region Calculations:

// Get the current linear regression value, y-intercept, slope,
// and direction of the `price` series over `period` bars.
[linreg, intercept, slope, signal] = LRISS(price, period)

// Calculate upper and lower bands from the `linreg`, `slope`, and historical prices.
float b = 0.0, float t = 0.0
for i = 0 to period
    b := math.max(b, linreg - (i * slope) -  (chSource == "close" ? close : low)[i])
    t := math.max(t, (chSource == "close" ? close : high)[i] - (linreg - (i * slope)))
float upperband = linreg + t + slope
float lowerband = linreg - b + slope

// @variable A simple moving average for visual comparison.
float sma = ta.sma(close, period)
//#endregion


//#region Strategy:

// Declare variables to detect whether the chart uses a futures or equities symbol.
var bool isFutures  = syminfo.type == "futures"
var bool isEquities = str.match(syminfo.type, "stock|fund") != ""

// Determine the position size. For equities with "Auto" sizing, the number of contracts is 10,000 divided by the
// closing price. For futures, the number of contracts is 25,000 divided by the product of the 20-bar ATR and the
// symbol's point value. If the `sizing` input is set to "Manual", the position size is defined by the "Order size"
// inputs in the "Settings/Properties" tab.
float futuresSize  = nz(25000 / (ta.atr(20) * syminfo.pointvalue))
float equitiesSize = 10000 / close
float posSize = switch
    sizing == Sizing.manual => na
    isFutures               => futuresSize
    isEquities              => equitiesSize
    =>                         0.0

//@variable Alias for `strategy.position_size`.
float position = strategy.position_size
// @variable Is `true` if the bar's opening time is greater than or equal to the `from` time, `false` otherwise.
bool tradesAllowed = time >= from
// Variables for zone calculations in Rule 3 logic.
float buyZone = na, float sellZone = na

if tradesAllowed
    // Rule 1: Trade the trend.
    if rule == Rule.T1 and signal != signal[1]
        // Close short trades and enter a long trade if
        // `position` is not positive and `signal` is 1.
        if position <= 0 and signal == 1
            strategy.close_all("S1 Exit")
            strategy.entry("L1 Entry", strategy.long, posSize)
            // Place a stop-loss order below the `close` if `useSL` is `true`.
            if useSL
                strategy.exit("L1 SL", "L1 Entry", stop = close * (1.0 - stopperc))
        // Close long trades if `position` is not negative and `signal` is -1.
        else if position >= 0 and signal == -1
            strategy.close_all("L1 Exit")
            // Enter a short trade if `longonly` is `false`.
            if not longonly
                strategy.entry("S1 Entry", strategy.short, posSize)
                // Place a stop-loss order above the `close` if `useSL` is `true`.
                if useSL
                    strategy.exit("S1 SL", "S1 Entry", stop = close * (1.0 + stopperc))

    // Rule 2: Trade channel breakouts.
    if rule == Rule.T2
        // Close long trades if `position` is not negative
        // and `close` is below the `lowerband`.
        if position >= 0 and close < lowerband
            strategy.close_all("L2 Exit")
            // Enter a short trade if `longonly` is `false`.
            if not longonly
                strategy.entry("S2 Entry", strategy.short, posSize)
                // Place a stop-loss order above the `close` if `useSL` is `true`.
                if useSL
                    strategy.exit("S2 SL", "S2 Entry", stop = close * (1.0 + stopperc))
        // Close short trades and enter a long trade if `position`
        // is not positive and `close` is above the `upperband`.
        else if position <= 0 and close > upperband
            strategy.close_all("S2 Exit")
            strategy.entry("L2 Entry", strategy.long, posSize)
            // Place a stop-loss order below the `close` if `useSL` is `true`.
            if useSL
                strategy.exit("L2 SL", "L2 Entry", stop = close * (1.0 - stopperc))

    // Rule 3: Trade within the channel.
    // Includes an optional slope filter, enabled from the `filter` input.
    if rule == Rule.T3
        // @variable The distance from the `lowerband` to the `upperband`.
        float bandRange = upperband - lowerband
        // Set `buyZone` and `sellZone` using a fractional distance of the `bandRange`.
        buyZone  := lowerband + zone * bandRange
        sellZone := upperband - zone * bandRange
        // Close long trades if `close` is at or above the `sellZone` or `slope` is negative.
        if position > 0 and (close >= sellZone or (filter and slope < 0))
            strategy.close_all("L3 Exit")
        // Close short trades if `close` is at or below the `buyZone` or `slope` is positive.
        if position < 0 and (close <= buyZone or (filter and slope > 0))
            strategy.close_all("S3 Exit")
        // Enter a long trade if `position` is not positive, `close` is at or below `buyZone`,
        // and `slope` is positive.
        if position <= 0 and close <= buyZone and (filter ? slope > 0 : true)
            strategy.entry("L3 Entry", strategy.long, posSize)
            // Place a stop-loss order below the `close` if `useSL` is `true`.
            if useSL
                strategy.exit("L3 SL", "L3 Entry", stop = close * (1.0 - stopperc))
        // Enter a short trade if `longonly` is `false`, `position` is not negative,
        // `close` is at or above `sellZone`, and `slope` is negative.
        if not longonly and position >= 0 and close >= sellZone and (filter ? slope < 0 : true)
            // Place a market order to open a short position.
            strategy.entry("S3 Entry", strategy.short, posSize)
            // Place a stop-loss order above the `close` if `useSL` is `true`.
            if useSL
                strategy.exit("S3 SL", "S3 Entry", stop = close * (1.0 + stopperc))
//#endregion


//#region Display:

// Plot the `slope` in a separate pane.
plot(slope, color = slope > 0 ? #ed7722 : #0e46be, display = DSP, linewidth = 2)
// Plot the `sma` for comparison when using rule 1.
plot(
     rule == Rule.T1 ? sma : na, "SMA", color = sma > sma[1] ? #ed7722 : #0e46be,
     force_overlay = true, display = DSP
 )
// Plot shapes for trend signals when using rule 1.
plotshape(
     rule == Rule.T1 and signal > math.max(signal[1], 0) ? 0 : na, "Trend signal up", shape.triangleup,
     location.absolute, size = size.tiny, color = color.lime, display = DSP
 )
plotshape(
     rule == Rule.T1 and signal < math.min(signal[1], 0) ? 0 : na, "Trend signal down", shape.triangledown,
     location.absolute, size = size.tiny, color = color.red, display = DSP
 )

// Plot the `upperband` and `lowerband` for rules 2 and 3.
pT = plot(rule != Rule.T1 ? upperband : na, "Upper band", tradesAllowed ? #ce0e0e99 : na,
     force_overlay = true, display = DSP
 )
pB = plot(rule != Rule.T1 ? lowerband : na, "Lower band", tradesAllowed ? #0ece4b99 : na,
     force_overlay = true, display = DSP
 )
// Plot the `sellZone` and `buyZone` for rule 3.
pT_ = plot(rule == Rule.T3 ? sellZone  : na, "Sell zone",  #ff990000, force_overlay = true, display = DSP)
pB_ = plot(rule == Rule.T3 ? buyZone   : na, "Buy zone",   #ff990000, force_overlay = true, display = DSP)
// Fill the plots with a gradient color.
fill(pT, pT_, upperband, sellZone, #ce0e0e4f, #ce0e0e10, "Upper band")
fill(pB, pB_, lowerband, buyZone , #0ece4b4f, #0ece4b10, "Lower band")
// Plot a horizontal line at 0.
hline(0)

// Draw a vertical line at the trade starting time.
if tradesAllowed and not tradesAllowed[1]
    line.new(
         bar_index, close, bar_index, close + syminfo.mintick, extend = extend.both,
         color = #b2b5be89, style = line.style_dashed, force_overlay = true
     )
// Logic to draw channel lines.
if rule != Rule.T1 and last_bar_index - bar_index <= 1
    // @variable References a line object for the regression line.
    var lI = line.new(na, na, na, na, force_overlay = true)
    // @variable References a line object for the top of the channel.
    var lT = line.new(na, na, na, na, force_overlay=true, color=color.red)
    // @variable References a line object showing a horizontal line at the channel top.
    var lT_= line.new(na, na, na, na, force_overlay=true, color=#ce0e0e80)
    // @variable References a line object for the bottom of the channel.
    var lB = line.new(na, na, na, na, force_overlay=true, color=color.lime)
    // @variable References a line object showing a horizontal line at the channel bottom.
    var lB_= line.new(na, na, na, na, force_overlay=true, color=#0ece4b80)
    // @variable The first x-coordinate of the channel lines.
    int x0 = bar_index - period
    // Update each line's coordinates.
    lI .set_xy1(x0,   intercept),      lI .set_xy2(bar_index + 1, linreg + slope)
    lT .set_xy1(x0,   intercept + t),  lT .set_xy2(bar_index + 1, upperband)
    lT_.set_xy1(bar_index, upperband), lT_.set_xy2(bar_index + 1, upperband)
    lB .set_xy1(x0,   intercept - b),  lB .set_xy2(bar_index + 1, lowerband)
    lB_.set_xy1(bar_index, lowerband), lB_.set_xy2(bar_index + 1, lowerband)
//#endregion