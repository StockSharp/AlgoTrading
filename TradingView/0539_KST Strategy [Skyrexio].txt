//_______ <licence>
// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © Skyrexio

//_______ <version>
//@version=6

//_______ <declaration_statement>
strategy(title = "KST Strategy [Skyrexio]",
         shorttitle = "KST",
         overlay = true,
         format = format.inherit,
         pyramiding = 1,
         calc_on_order_fills = false,
         calc_on_every_tick = false,
         default_qty_type = strategy.percent_of_equity,
         default_qty_value = 60,
         initial_capital = 10000,
         currency = currency.NONE,
         commission_type = strategy.commission.percent,
         commission_value = 0.1,
         slippage = 5,
         use_bar_magnifier = true)


//_______ <constant_declarations>
var const color skyrexGreen       = color.new(#2ECD99, 0)
var const color skyrexGray        = color.new(#F2F2F2, 0)
var const color skyrexWhite       = color.new(#FFFFFF, 0)


var float atrStopLoss             = na
var float atrTakeProfit           = na


//_______ <inputs>
// COMMON SETTINGS
// Trading bot settings
sourceUuid                        = input.string(title = "sourceUuid:", defval = "yourBotSourceUuid", group = "🤖Trading Bot Settings🤖")
secretToken                       = input.string(title = "secretToken:", defval = "yourBotSecretToken", group = "🤖Trading Bot Settings🤖")

// Trading period settings
lookBackPeriodStart               = input.time(title = "Trade Start Date/Time", defval = timestamp('2023-01-01T00:00:00'), group = "🕐Trading Period Settings🕐")
lookBackPeriodStop                = input.time(title = "Trade Stop Date/Time", defval = timestamp('2025-05-01T00:00:00'), group = "🕐Trading Period Settings🕐")

//KST SETTINGS
// Strategy settings
atrNumStopLoss                    = input.float(title = "ATR Stop Loss", defval = 1.5, minval = 1.0, maxval = 4.0, step = 0.1,  group = "📈KST Strategy Settings📈")
atrNumTakeProfit                  = input.float(title = "ATR Take Profit", defval = 3.5, minval = 1.0, maxval = 7.0, step = 0.1,  group = "📈KST Strategy Settings📈")
filterMAType                      = input.string(defval = "Least Squares MA", options = ["Exponential MA", "Simple MA", "Weighted MA", "Hull MA", "Smoothed MA", "Arnauld Legoux MA", "Least Squares MA", "Volume Weighted MA"], title = "Filter MA Type", group = "📈KST Strategy Settings📈")
filterMALength                    = input.int(defval = 200, minval = 30, maxval = 200, step = 5, title = 'Filter MA Length', group = "📈KST Strategy Settings📈")

// Choppiness index settings
enableChopFilter                  = input.bool(defval = true, title = 'Enable Choppiness Index Filter', group = "📈KST Strategy Settings📈")
chopTreshold                      = input.float(defval = 50.0, maxval = 70.0, minval = 30.0, step = 5.0, title = 'Choppiness Index Treshold', group = "📈KST Strategy Settings📈")
chopLength                        = input.int(defval = 14, minval = 1, step = 1, title = 'Choppiness Index Length', group = "📈KST Strategy Settings📈")

// KST Settings
roclen1                           = input.int(10, minval=1, title = "KST ROC Length #1",  group = "📈KST Strategy Settings📈")
roclen2                           = input.int(15, minval=1, title = "KST ROC Length #2",  group = "📈KST Strategy Settings📈")
roclen3                           = input.int(20, minval=1, title = "KST ROC Length #3",  group = "📈KST Strategy Settings📈")
roclen4                           = input.int(30, minval=1, title = "KST ROC Length #4",  group = "📈KST Strategy Settings📈")
smalen1                           = input.int(10, minval=1, title = "KST SMA Length #1",  group = "📈KST Strategy Settings📈")
smalen2                           = input.int(10, minval=1, title = "KST SMA Length #2",  group = "📈KST Strategy Settings📈")
smalen3                           = input.int(10, minval=1, title = "KST SMA Length #3",  group = "📈KST Strategy Settings📈")
smalen4                           = input.int(15, minval=1, title = "KST SMA Length #4",  group = "📈KST Strategy Settings📈")
siglen                            = input.int(9, minval=1, title = "KST Signal Line Length",  group = "📈KST Strategy Settings📈")


//_______ <function_declarations>
smma(src, length) =>
    var float smma = na
    sma_value = ta.sma(src, length)
    smma := na(smma) ? sma_value : (smma * (length - 1) + src) / length
    smma

//_______ <calculations>
//Calculating Know Sure Think (KST) Indicator and it's signal line
smaroc(roclen, smalen) => ta.sma(ta.roc(close, roclen), smalen)
kst = smaroc(roclen1, smalen1) + 2 * smaroc(roclen2, smalen2) + 3 * smaroc(roclen3, smalen3) + 4 * smaroc(roclen4, smalen4)
sig = ta.sma(kst, siglen)

// Calculating Alligator's lines (Jaw, Teeth, Lips)
jaw = smma(hl2, 13)[8]
teeth = smma(hl2, 8)[5]
lips = smma(hl2, 5)[3]

// Calculating Choppiness Index (CI) and specifying the filter condition, based on it

ci = 100 * math.log10(math.sum(ta.atr(1), chopLength) / (ta.highest(chopLength) - ta.lowest(chopLength))) / math.log10(chopLength)
chopCond = enableChopFilter ? ci < chopTreshold : true


//Calculating trend filtering Moving Average (MA)
filter = switch filterMAType
    "Simple MA"           => ta.sma(close, filterMALength)
    "Exponential MA"      => ta.ema(close, filterMALength)
    "Weighted MA"         => ta.wma(close, filterMALength)
    "Hull MA"             => ta.hma(close, filterMALength)
    "Smoothed MA"         => ta.rma(close, filterMALength)
    "Arnauld Legoux MA"   => ta.alma(close, filterMALength, 0.85, 6)
    "Least Squares MA"    => ta.linreg(close, filterMALength, 0)
    "Volume Weighted MA"  => ta.vwma(close, filterMALength)
    => na

//Calculating entry and exit conditions for KST strategy
longSignal = ta.crossover(kst, sig) and close > filter and close > jaw and chopCond

stopLossPrice = low - atrNumStopLoss*ta.atr(14)
takeProfit    = close + atrNumTakeProfit*ta.atr(14)

if longSignal and strategy.opentrades == 0
    atrStopLoss := stopLossPrice
    atrTakeProfit := takeProfit

closeTradeCondition = high[1] >= atrTakeProfit[1] or low[1] <= atrStopLoss[1]



//_______ <strategy_calls>
//last trade signal

//KST Strategy entry
if (longSignal and time >= lookBackPeriodStart and time <= lookBackPeriodStop)
    strategy.entry(id = "entry1", direction = strategy.long,  alert_message = '{\n"base": "' + syminfo.basecurrency + '",\n"quote": "' + syminfo.currency + '",\n"position": "entry1",\n"price": "' + str.tostring(close) + '",\n"sourceUuid": "' + sourceUuid + '",\n"secretToken": "' + secretToken + '",\n"timestamp": "' + str.tostring(timenow) + '"\n}')

//KST Strategy exit
if (high >= atrTakeProfit or low <= atrStopLoss)
    strategy.close(id = "entry1",immediately = true , alert_message = '{\n"base": "' + syminfo.basecurrency + '",\n"quote": "' + syminfo.currency + '",\n"position": "entry1",\n"price": "' + str.tostring(close) + '",\n"sourceUuid": "' + sourceUuid + '",\n"secretToken": "' + secretToken + '",\n"timestamp": "' + str.tostring(timenow) + '"\n}')


//_______ <visuals>



//_______ <alerts>