//@version=4
//@author=Daveatt

// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/

StudyName        = "BEST Dollar Cost Average"
ShortStudyName   = "BEST DCA"
study(StudyName, shorttitle=ShortStudyName, overlay=true, precision=5, max_bars_back=4000)

// ———————————————————— Function used to round values.
RoundToTick( _price) => round(_price/syminfo.mintick)*syminfo.mintick

Round( _val, _decimals) =>
    // Rounds _val to _decimals places.
    _p = pow(10,_decimals)
    round(abs(_val)*_p)/_p*sign(_val)

PNC(value) => value > 0 ? color.green : color.red
N_PNC(value) => value > 0 ? color.orange : color.fuchsia
PNC_compare(value1, value2) => value1 > value2 ? color.green : color.red

DCA_print(_txt) =>

    t = time + (time - time[1]) * 25,

    var _lbl = label.new(t, highest(50), _txt, xloc.bar_time, yloc.price,
     color=#f09311, textcolor=color.white, size=size.large)

    label.set_xy(_lbl, t, high + 3 * tr)

NO_DCA_print(_txt) =>

    t = time + (time - time[1]) * 45,

    var _lbl = label.new(t, highest(50), _txt, xloc.bar_time, yloc.price,
     color=#f09311, textcolor=color.white, size=size.large)

    label.set_xy(_lbl, t, high + 3 * tr)

use_current_res = input(true, title="Use current resolution")
res_input = input(defval="Weekly", title="Timeframe used to DCA", options=["Daily","Weekly","Monthly"])
amount_invested = input(defval=100, title="Amound invested in your local currency")
//starting_date = input("07/26/2018", type=input.string, title="Starting Date (MM/DD/YYYY)")
starting_year =  input(2018, "From Year", minval=1900)
starting_month = input(1, "From Month", minval=1, maxval=12)
starting_day = input(1, "From Day", minval=1, maxval=31)

end_year =  input(2020, "To Year", minval=1900)
end_month = input(1, "To Month", minval=1, maxval=12)
end_day = input(28, "To Day", minval=1, maxval=31)


intra_period = "close"//input(defval="close", title="Select a candle level for the desired timeframe", options=["open","close"])

// DCA
var p_final_spent = 0.0
var p_dca_qty = 0.0
var p_dca_total_pf = 0.0
var p_dca_profit = 0.0
var p_dca_perc_change = 0.0

// NO DCA
var no_dca_final_spent       = 0.0
var no_dca_dca_qty           = 0.0
var no_dca_total_pf          = 0.0
var no_dca_profit            = 0.0
var no_dca_perc_change       = 0.0

// variables initialization
//time_delta = (timenow - time)
daily_interval = 1000 * 60 * 60 * 24 * timeframe.multiplier
weekly_interval = 1000 * 60 * 60 * 24 * 7 * timeframe.multiplier
biweekly_interval = 1000 * 60 * 60 * 24 * 7 * 2 * timeframe.multiplier
monthly_interval = 1000 * 60 * 60 * 24 * 30 * timeframe.multiplier
quarterly_interval = 1000 * 60 * 60 * 24 * 30 * 3 * timeframe.multiplier
// OCLF MTF

res = if use_current_res
    timeframe.period
else
    res_input == "Daily" ? "D" : res_input == "Weekly" ? "W" : "M"

open_MTF = security(syminfo.tickerid, res, open, lookahead=true)
close_MTF = security(syminfo.tickerid, res, close, lookahead=true)//, barmerge.gaps_off, barmerge.lookahead_on)



// find the number of candles to calculate
starting_time = timestamp(starting_year, starting_month, starting_day, 00, 00)
end_time = timestamp(end_year, end_month, end_day, 23, 59)

// current timestamp
time_delta = (timenow - time)
time_final_delta = end_time - starting_time
//time_final_delta = end_time - time

// check the time range
trade_date_allowed = (time >= starting_time and time <= end_time)


bgcolor(trade_date_allowed ? color.new(color.green, 90) : na, title="Dates range")

TDA(plot) => trade_date_allowed ? plot : na

nb_days = Round(time_final_delta / daily_interval, 0)
nb_weeks = Round(time_final_delta / weekly_interval, 0)
nb_months = Round(time_final_delta / monthly_interval, 0)

nb_periods = (res == "D") ? nb_days : (res == "W") ? nb_weeks : nb_months

OC = intra_period == "close" ? close_MTF : open_MTF

total_invested = amount_invested * nb_periods
spent = 0
total = 0.0

//fake_time_delta = (timenow - time)
dca_interval = (res == "D") ? daily_interval * nb_days : (res == "W") ? weekly_interval * nb_weeks :
 monthly_interval * nb_months

GiveMeTheS(nb_periods) => nb_periods > 1 ? "s" : ""
period_label = (res == "D") ? "day" : (res == "W") ? "week" : "month"

//within = time_delta < dca_interval

fraction = amount_invested / OC
// only count the data in the time range
for i = 1 to nb_periods
    if trade_date_allowed
        if fraction[i]
            spent := spent + amount_invested
        total := total + nz(fraction[i], 0)

// express the profit in local currency
// BTC maximalists would remove the line just below because muh 1 BTC = 1 BTC :)
dca_total_pf = total * OC


// rolling version of the code above
rolling_spent = 0, rolling_total = 0.0, dca_qty=0.0
// rolling only works if TF security = TF chart
check_rolling = timeframe.period == res
rolling_spent := trade_date_allowed and check_rolling ? nz(rolling_spent[1]) + amount_invested : 0
rolling_total := trade_date_allowed and check_rolling ? nz(rolling_total[1]) + fraction : 0.0
rolling_total_pf = rolling_total * OC
//dca_qty := trade_date_allowed and check_rolling ? nz(dca_qty[1]) + amount_invested/close :

// use to display periods in rolling mode
counter_period = 0, counter_mtf = 0
// counter_period := trade_date_allowed ? nz(counter_period[1]) + 1 : 0

// // is it a new week

if trade_date_allowed
    if timeframe.period != res
        if res == "W" and (dayofweek == dayofweek.monday) //and (dayofweek != dayofweek[1])
            counter_mtf := nz(counter_mtf[1]) + 1
        else
            // was lazy to calculate the exact end of the month
            // will do it for the V2
            // 28 because Februarys sometimes have 28 days
            if res == "M" and dayofmonth == 28
                counter_mtf := nz(counter_mtf[1]) + 1
            else // daily
                counter_mtf := counter_mtf[1]
    // daily chart on daily TF for instance
    else
        counter_mtf := nz(counter_mtf[1]) + 1
else
    counter_mtf := 0

if trade_date_allowed
    // if check_rolling
    //     dca_qty := nz(dca_qty[1]) + amount_invested/close
    // else
    //     total
    if timeframe.period != res
        if res == "W" and (dayofweek == dayofweek.monday) //and (dayofweek != dayofweek[1])
            dca_qty := nz(dca_qty[1]) + amount_invested/OC
        else
            if res == "M" and dayofmonth == 28
                dca_qty := nz(dca_qty[1]) +  amount_invested/OC
            else // daily
                dca_qty := dca_qty[1]
        // daily chart on daily TF for instance
    else
        dca_qty := nz(dca_qty[1]) + amount_invested/OC
else
    dca_qty := 0.0

AssignVariableMTF(value) =>

    counter = 0.0

    if trade_date_allowed
        if timeframe.period != res
            if res == "W" and (dayofweek == dayofweek.monday)
                counter := nz(counter[1]) + value
            else
                if res == "M" and dayofmonth == 28
                    counter := nz(counter[1]) + value
                else // daily
                    counter := counter[1]
        else
            counter := nz(counter[1]) + value
    else
        counter := 0.0

    counter

// chose between rolling and non rolling for spent
final_spent = check_rolling ? rolling_spent : spent
dca_perc_change = ((dca_total_pf - final_spent) / final_spent) * 100

dca_profit = dca_total_pf - final_spent

test = 0
test := (dayofweek == dayofweek.monday) and trade_date_allowed ? nz(test[1]) + 1 : test[1]

format_text(_str) =>

    str = _str + "\n\n"
    str

prev_day(_day) =>

    day = 1

    if _day == 7
        day := 1
    else
        day := _day - 1

    day

is_last_day(time1, time2) =>

    year(time1) == year(time2)
     and month(time1) == month(time2)
     and weekofyear(time1) == weekofyear(time2)
     and dayofweek(time1) == dayofweek(time2)

if is_last_day(time, end_time)
    p_final_spent       := final_spent
    p_dca_qty           := dca_qty
    p_dca_total_pf      := dca_total_pf
    p_dca_profit        := dca_profit
    p_dca_perc_change   := dca_perc_change

lapos_x         = timenow + round(change(time)*10*3)
lapos_y         = highest(50)
color_DCA       = color.new(color.teal, 30)
textcolor_DCA   = color.new(color.white, 0)
style_DCA       = label.style_labelup

//plot(p_dca_qty, title='TEEEEEEEEEEEEEEEEES', transp=100)

//if barstate.isrealtime

txt         = format_text(" DCA Panel \n")
txt1        = format_text("Asset last price: " + tostring(close, '#.#####'))
txt2        = format_text("Amount invested per period: " + tostring(amount_invested) + " " + syminfo.currency)
txt3        = format_text("Spent: " + tostring(p_final_spent)  + " " + syminfo.currency)
txt4        = format_text("Qty of assets: " + tostring(Round(p_dca_qty,3),'#.###'))
txt5        = format_text("Total Portfolio value: " + tostring(round(p_dca_total_pf)) + " " + syminfo.currency)
txt6        = format_text("Profit/Loss (value): " + tostring(Round(p_dca_profit,1),'#.#') + " " + syminfo.currency)
txt7        = format_text("PnL (%): " + tostring(Round(p_dca_perc_change,1),'#.#'))
txt8        = "\n ----------- "

final_txt   = txt + txt1 + txt2 + txt3 + txt4 + txt5 + txt6 + txt7 + txt8

var label DCA_Label = na
label.delete(DCA_Label)
DCA_Label := label.new(lapos_x, lapos_y, final_txt, color=color_DCA, textcolor=textcolor_DCA, style=style_DCA, yloc=yloc.price, xloc=xloc.bar_time)

//plotshape(barstate.islast ? lapos_y : na, style=style_DCA, color=color_DCA, textcolor=textcolor_DCA, text=final_txt)

plot(TDA(nb_periods), title="[BOTH] - Number of periods", transp=100) // hide
//plot(TDA(counter_period), title="[BOTH] - Current period", transp=100) // hide
plot(counter_mtf, title="[BOTH] - Current period", transp=100) // hide

plot(close, title="[DCA] Asset last price", transp=100) // hide
plot(amount_invested, title="[DCA] Amount invested per period", color=color.green, transp=100) // hide)
plot(TDA(final_spent), title="[DCA] Spent", color=color.orange, transp=100) // hide)
// if period = 7 months, 1 X bought per month = 7 X in total
plot(TDA(Round(dca_qty,3)), title="[DCA] Qty of assets", color=color.blue, transp=100) // hide)
plot(TDA(dca_total_pf), title="[DCA] Total PF value", color=PNC_compare(dca_total_pf, final_spent), transp=100) // hide)
plot(TDA(dca_profit), title="[DCA] Profit/Loss (value)",  color=PNC(dca_profit), transp=100) // hide)
plot(TDA(dca_perc_change), title="[DCA] PnL (%)", color=PNC(dca_perc_change), transp=100) // hide)

// Non-DCA calculation
asset_variation = OC - OC[nb_periods]
// non rolling version
// non DCA qty is static and invested at the beginning of the date range
initial_qty_asset = 0.0
start_asset_price = 0.0

if time == starting_time
    initial_qty_asset := total_invested / OC
    start_asset_price := OC
else
    initial_qty_asset := initial_qty_asset[1]
    start_asset_price := start_asset_price[1]

//qty_asset := time == starting_time ? total_invested / OC[nb_periods] : nz(qty_asset[1])

start_PF = total_invested
final_PF = initial_qty_asset * OC
non_dca_profit = final_PF - start_PF
non_dca_perc_change = ((OC - OC[nb_periods]) / OC[nb_periods]) * 100

if is_last_day(time, end_time)
    no_dca_final_spent       := total_invested
    no_dca_dca_qty           := initial_qty_asset
    no_dca_total_pf          := final_PF
    no_dca_profit            := non_dca_profit
    no_dca_perc_change       := non_dca_perc_change

lapos_x2           = timenow + round(change(time)*35*3)
lapos_y2           = highest(50)
color_no_DCA       = color.new(color.orange, 30)
textcolor_no_DCA   = color.new(color.black, 0)
style_no_DCA       = label.style_labelup

no_dca_txt         = format_text(" NO DCA Panel \n")
no_dca_txt0        = format_text("Asset last price: " + tostring(close, '#.#####'))
no_dca_txt1        = format_text("Asset price at starting time: " + tostring(start_asset_price, '#.#####'))
no_dca_txt2        = format_text("Spent: " + tostring(no_dca_final_spent) + " " + syminfo.currency)
no_dca_txt3        = format_text("Qty of assets: " + tostring(Round(no_dca_dca_qty, 3)))
no_dca_txt4        = format_text("Total Porfolio value: " + tostring(round(no_dca_total_pf)) + " " + syminfo.currency)
no_dca_txt5        = format_text("Profit/Loss (value): " + tostring(Round(no_dca_profit,1), '#.#') + " " + syminfo.currency)
no_dca_txt6        = format_text("PnL (%): " + tostring(Round(no_dca_perc_change,1),'#.#'))
no_dca_txt7        = "\n ----------- "

no_dca_final_txt   = no_dca_txt + no_dca_txt0 + no_dca_txt1 + no_dca_txt2 + no_dca_txt3 + no_dca_txt4 +
 no_dca_txt5 + no_dca_txt6 + no_dca_txt7

var label NO_DCA_Label = na
label.delete(NO_DCA_Label)
NO_DCA_Label := label.new(lapos_x2, lapos_y2, no_dca_final_txt, color=color_no_DCA,
 textcolor=textcolor_no_DCA, style=style_no_DCA, yloc=yloc.price, xloc=xloc.bar_time)

plot(TDA(start_asset_price), title="[NO DCA] Asset price at starting time", transp=100) // hide
plot(TDA(total_invested), title="[NO DCA] Spent", transp=100, color=color.orange) // hide
plot(TDA(initial_qty_asset), title="[NO DCA] Qty of assets ", transp=100) // hide
plot(TDA(final_PF), title="[NO DCA] Total PF value", color=PNC_compare(final_PF, total_invested),transp=100) // hide
plot(TDA(non_dca_profit), title="[NO DCA] Profit/Loss (value)", color=PNC(non_dca_profit),transp=100) // hide
plot(TDA(non_dca_perc_change), title="[NO DCA] PnL (%)", color=PNC(non_dca_perc_change),transp=100) // hide

// used to debug
//plot(counter_period , title="time delta", linewidth=5)
//plot(starting_time, title="starting_time", linewidth=5)
//plot(time_final_delta, title="time_final_delta", linewidth=5)