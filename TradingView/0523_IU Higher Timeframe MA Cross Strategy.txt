// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © Shivam_Mandrai

//@version=6
strategy("IU Higher Timeframe MA Cross Strategy", overlay=true, initial_capital = 100000, slippage = 1, commission_value = 0.02)

// -------- Risk to Reward Settings ---------- \\
RTR = input.float(2.00, "Risk To Reward = ")

// __________________________ user Settng ma 1_______________________ \\
ma1_grounp       =  " ================== MA 1 Settings ================== "
ma1_source       = input.source(close, "MA 1 Source = ", "Choose the MA 1 soucre for calculation", group = ma1_grounp)
ma1_timeframe    = input.timeframe("60", "MA 1 Timeframe = ", group = ma1_grounp)
ma1_lenght       = input.int(20, 'MA 1 Lenght =',group =  ma1_grounp)
ma1_type         = input.string("EMA", "MA 1 Type = ", options = ["None", "SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"], group = ma1_grounp)
smooth_ma1       = input.bool(true, "Smooth MA 1 ?" , tooltip = "This Will marge the gaps hance Smoothing the MA", group = ma1_grounp)

// __________________________ user Settng ma 2_______________________ \\
ma2_grounp        =  " ================== MA 2 Settings ================== "
ma2_source        = input.source(close, "MA 2 Source = ", "Choose the MA 2 soucre for calculation", group = ma2_grounp)
ma2_timeframe     = input.timeframe("60", "MA 2 Timeframe = ", group = ma2_grounp)
ma2_lenght        = input.int(50, 'MA 2 Lenght =',group =  ma2_grounp)
ma2_type          = input.string("EMA", "MA 2 Type = ", options = ["None", "SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"], group = ma2_grounp)
smooth_ma2        = input.bool(true, "Smooth MA 2 ?" , tooltip = "This Will marge the gaps hance Smoothing the MA" , group = ma2_grounp)


//@function To get the Moving Average based on the type input
ma(source, length, ma_type) =>
    switch ma_type
        "SMA"                   => ta.sma(source, length)
        "EMA"                   => ta.ema(source, length)
        "SMMA (RMA)"            => ta.rma(source, length)
        "WMA"                   => ta.wma(source, length)
        "VWMA"                  => ta.vwma(source, length)



// ________________________________________ Getting the MAs _____________________________________________\\
ma1 = request.security("", ma1_timeframe, ma(ma1_source, ma1_lenght,ma1_type)[barstate.isrealtime ? 1 : 0]
         , gaps = smooth_ma1 ? barmerge.gaps_on : barmerge.gaps_off)[barstate.isrealtime ? 0 : 1]

ma2 = request.security("", ma2_timeframe, ma(ma2_source, ma2_lenght,ma2_type)[barstate.isrealtime ? 1 : 0]
         , gaps = smooth_ma2 ? barmerge.gaps_on : barmerge.gaps_off)[barstate.isrealtime ? 0 : 1]

// --------- Plotting the MAs ----------- \\
plot(ma1,"MA 1", color = color.lime, linewidth = 2)
plot(ma2,"MA 2", color = color.red , linewidth = 2)


// _________________________________________________ Long and Short Conditions _______________________________________ \\
// ---- long cond ------ \\
long  = ta.crossover(ma1, ma2)  and barstate.isconfirmed and strategy.position_size == 0
// ---- short cond ----- \\
short = ta.crossunder(ma1, ma2) and barstate.isconfirmed and strategy.position_size == 0

// ---- going long ----- \\
if long
    strategy.entry("long" , strategy.long , comment = 'Long Entry' )
// ---- going short ----- \\
if short
    strategy.entry("short", strategy.short, comment = "Short Entry")


//_____________________________ Stop Loss and Take Profit ____________________________\\
// ---- long and short SL ------ \\
long_SL = ta.valuewhen(strategy.position_size > 0 and strategy.position_size[1] == 0 , low[1], 0)
short_SL = ta.valuewhen(strategy.position_size < 0 and strategy.position_size[1] == 0, high[1], 0)
// ----- long and short TP ------ \\
long_TP = (strategy.position_avg_price - long_SL) * RTR + strategy.position_avg_price
short_TP = strategy.position_avg_price - (short_SL - strategy.position_avg_price) * RTR

// ____________________________ Stting long and short SL / TP ___________________________\\
if strategy.position_size > 0
    strategy.exit("long", "long", stop = long_SL, limit = long_TP, comment = "Long Exit")

if strategy.position_size < 0
    strategy.exit("short", "short", stop = short_SL, limit = short_TP, comment = "Short Exit")

// ________________________________________ plotting long and short SL/TP ______________________________\\
//-------- long and short SL/TP ----------\\
long_SL_plot  = plot(strategy.position_size[1]  > 0 ? long_SL      : na, 'Long SL' , color.red  , style = plot.style_linebr)
long_TP_plot  = plot(strategy.position_size[1]  > 0 ? long_TP[1]   : na, 'Long TP' , color.green, style = plot.style_linebr)
short_SL_plot = plot(strategy.position_size[1]  < 0 ? short_SL     : na, 'Shprt SL', color.red  , style = plot.style_linebr)
short_TP_plot = plot(strategy.position_size[1]  < 0 ? short_TP[1]  : na, 'Short TP', color.green, style = plot.style_linebr)


//______________________________ Filling stop loss and take profits ______________//
entry_plot = plot(strategy.position_size[1] != 0 ? strategy.position_avg_price[1]: na, color = color.new(color.black, 50)
             , style = plot.style_linebr)
// ------------- for long ----------- \\
fill(entry_plot, long_SL_plot ,long_SL    , strategy.position_avg_price[1], top_color = color.new(#FF2400, 50), bottom_color = color(na)            )
fill(entry_plot, long_TP_plot , long_TP[1], strategy.position_avg_price[1], bottom_color = color(na), top_color = color.new(#03C03C, 50))
// ------------- for short ---------- \\
fill(entry_plot, short_SL_plot, strategy.position_avg_price[1], short_SL, bottom_color = color.new(#FF2400, 50), top_color = color(na))
fill(entry_plot, short_TP_plot, strategy.position_avg_price[1], short_TP[1], bottom_color = color.new(#03C03C, 50), top_color = color(na))