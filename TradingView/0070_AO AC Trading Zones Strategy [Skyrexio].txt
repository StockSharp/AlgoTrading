// This Pine Script‚Ñ¢ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// ¬© Skyrexio

//@version=6
//_______ <licence>
strategy(title = "AO/AC Trading Zones Strategy [Skyrexio] ",
         shorttitle = "Trading Zones Strategy",
         overlay = true,
         format = format.inherit,
         pyramiding = 5,
         calc_on_order_fills = false,
         calc_on_every_tick = false,
         default_qty_type = strategy.percent_of_equity,
         default_qty_value = 10,
         initial_capital = 10000,
         currency = currency.NONE,
         commission_type = strategy.commission.percent,
         commission_value = 0.1,
         slippage = 5,
         use_bar_magnifier = true)


//_______ <constant_declarations>
var const color skyrexGreen               = color.new(#2ECD99, 0)
var const color skyrexGray                = color.new(#F2F2F2, 0)
var const color skyrexWhite               = color.new(#FFFFFF, 0)


//________<variables declarations>
var int trend                             = 0
var float upFractalLevel                  = na
var float upFractalActivationLevel        = na
var float downFractalLevel                = na
var float downFractalActivationLevel      = na
bool highCrossesUpfractalLevel            = ta.crossover(high, upFractalActivationLevel)
bool lowCrossesDownFractalLevel           = ta.crossunder(low, downFractalActivationLevel)
var int qtyGreenBars                      = 0
var float stopLossLevel                   = na


//_______ <inputs>
// Trading bot settings
sourceUuid               = input.string(title = "sourceUuid:", defval = "yourBotSourceUuid", group = "ü§ñTrading Bot Settingsü§ñ")
secretToken              = input.string(title = "secretToken:", defval = "yourBotSecretToken", group = "ü§ñTrading Bot Settingsü§ñ")


// Trading period settings
lookBackPeriodStart      = input.time(title = "Trade Start Date/Time", defval = timestamp('2023-01-01T00:00:00'), group = "üïêTrading Period Settingsüïê")
lookBackPeriodStop       = input.time(title = "Trade Stop Date/Time", defval = timestamp('2026-01-01T00:00:00'), group = "üïêTrading Period Settingsüïê")


// Strategy settings
EMaLength                = input.int(100, minval = 10, step = 10, title = "EMA Length", group = "üìàStrategy settingsüìà")


//_______ <function_declarations>
//@function       Used to calculate Simple moving average for Alligator
//@param src      Sourse for smma Calculations
//@param length   Number of bars to calculate smma
//@returns        The calculated smma value
smma(src, length) =>
    var float smma = na
    sma_value = ta.sma(src, length)
    smma := na(smma) ? sma_value : (smma * (length - 1) + src) / length
    smma

//_______ <calculations>


//Upfractal calculation
upFractalPrice = ta.pivothigh(2, 2)
upFractal = not na(upFractalPrice)


//Downfractal calculation
downFractalPrice = ta.pivotlow(2, 2)
downFractal = not na(downFractalPrice)


//Calculating Alligator's teeth
teeth = smma(hl2, 8)[5]


//Calculating upfractal and downfractal levels
if upFractal
    upFractalLevel := upFractalPrice
else
    upFractalLevel := upFractalLevel[1]


if downFractal
    downFractalLevel := downFractalPrice
else
    downFractalLevel := downFractalLevel[1]


//Calculating upfractal activation level, downfractal activation level to approximate the trend and this current trend
if upFractalLevel > teeth
    upFractalActivationLevel := upFractalLevel

if highCrossesUpfractalLevel
    trend := 1
    upFractalActivationLevel := na
    downFractalActivationLevel := downFractalLevel


if downFractalLevel < teeth
    downFractalActivationLevel := downFractalLevel

if lowCrossesDownFractalLevel
    trend := -1
    downFractalActivationLevel := na
    upFractalActivationLevel := upFractalLevel


if trend == 1
    upFractalActivationLevel := na

if trend == -1
    downFractalActivationLevel := na


//Calculating filter EMA
filterEMA = ta.ema(close, EMaLength)


//–°alculating AO and AC
ao = ta.sma(hl2,5) - ta.sma(hl2,34)
ac = ao - ta.sma(ao,5)
diff = ac - ac[1]

//Calculatign signal condition
if close > teeth and ac > ac[1] and ao > ao[1] and close > filterEMA
    qtyGreenBars := qtyGreenBars + 1
else
    qtyGreenBars := 0



//_______ <strategy_calls>
//Defining trade close condition
if qtyGreenBars == 5
    stopLossLevel := low

if strategy.opentrades == 0
    stopLossLevel := na

closeCondition =  trend[1] == 1 and trend == -1 or low < stopLossLevel


//Strategy entry
if (strategy.opentrades == 0 and close > close[1] and qtyGreenBars >= 2 and qtyGreenBars < 7 and time >= lookBackPeriodStart and time <= lookBackPeriodStop)
    strategy.entry(id = "entry1", direction = strategy.long, alert_message = '{\n"base": "' + syminfo.basecurrency + '",\n"quote": "' + syminfo.currency + '",\n"position": "entry1",\n"price": "' + str.tostring(close) + '",\n"sourceUuid": "' + sourceUuid + '",\n"secretToken": "' + secretToken + '",\n"timestamp": "' + str.tostring(timenow) + '"\n}')

if (strategy.opentrades == 1 and close > close[1] and qtyGreenBars >= 2 and qtyGreenBars < 7 and time >= lookBackPeriodStart and time <= lookBackPeriodStop)
    strategy.entry(id = "entry2", direction = strategy.long, alert_message = '{\n"base": "' + syminfo.basecurrency + '",\n"quote": "' + syminfo.currency + '",\n"position": "entry2",\n"price": "' + str.tostring(close) + '",\n"sourceUuid": "' + sourceUuid + '",\n"secretToken": "' + secretToken + '",\n"timestamp": "' + str.tostring(timenow) + '"\n}')

if (strategy.opentrades == 2 and close > close[1] and qtyGreenBars >= 2 and qtyGreenBars < 7 and time >= lookBackPeriodStart and time <= lookBackPeriodStop)
    strategy.entry(id = "entry3", direction = strategy.long, alert_message = '{\n"base": "' + syminfo.basecurrency + '",\n"quote": "' + syminfo.currency + '",\n"position": "entry3",\n"price": "' + str.tostring(close) + '",\n"sourceUuid": "' + sourceUuid + '",\n"secretToken": "' + secretToken + '",\n"timestamp": "' + str.tostring(timenow) + '"\n}')

if (strategy.opentrades == 3 and close > close[1] and qtyGreenBars >= 2 and qtyGreenBars < 7 and time >= lookBackPeriodStart and time <= lookBackPeriodStop)
    strategy.entry(id = "entry4", direction = strategy.long, alert_message = '{\n"base": "' + syminfo.basecurrency + '",\n"quote": "' + syminfo.currency + '",\n"position": "entry4",\n"price": "' + str.tostring(close) + '",\n"sourceUuid": "' + sourceUuid + '",\n"secretToken": "' + secretToken + '",\n"timestamp": "' + str.tostring(timenow) + '"\n}')

if (strategy.opentrades == 4 and close > close[1] and qtyGreenBars >= 2 and qtyGreenBars < 7 and time >= lookBackPeriodStart and time <= lookBackPeriodStop)
    strategy.entry(id = "entry5", direction = strategy.long, alert_message = '{\n"base": "' + syminfo.basecurrency + '",\n"quote": "' + syminfo.currency + '",\n"position": "entry5",\n"price": "' + str.tostring(close) + '",\n"sourceUuid": "' + sourceUuid + '",\n"secretToken": "' + secretToken + '",\n"timestamp": "' + str.tostring(timenow) + '"\n}')

//Strategy exit
if (closeCondition)
    strategy.close_all(alert_message = '{\n"base": "' + syminfo.basecurrency + '",\n"quote": "' + syminfo.currency + '",\n"position": "close",\n"price": "' + str.tostring(close) + '",\n"sourceUuid": "' + sourceUuid + '",\n"secretToken": "' + secretToken + '",\n"timestamp": "' + str.tostring(timenow) + '"\n}')


//_______ <visuals>
//Plotting shapes for adding to current long trades
gradPercent = if strategy.opentrades == 2
    90
else if strategy.opentrades == 3
    80
else if strategy.opentrades == 4
    70
else if strategy.opentrades == 5
    60

pricePlot = plot(close, title="Price", color=color.new(color.blue, 100))
teethPlot = plot(strategy.opentrades > 1 ? teeth : na, title="Teeth", color= skyrexGreen, style=plot.style_linebr, linewidth = 2)
fill(pricePlot, teethPlot, color = color.new(skyrexGreen, gradPercent))
if strategy.opentrades != 1 and  strategy.opentrades[1] == strategy.opentrades - 1
    label.new(bar_index, teeth, style = label.style_label_up, color = color.lime, size = size.tiny, text="Buy More", textcolor = color.black, text_formatting = text.format_bold)


//_______ <alerts>