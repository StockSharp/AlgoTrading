// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © blntduman

//@version=5
strategy(title="ALMA & UT Bot Confluence Strategy", overlay=true, pyramiding=0)

//==============================================================================
//==  (USER INPUTS) ==
//==============================================================================

// Main Strategy Inputs
fast_ema_length = input.int(20, title="Fast EMA Length", minval=5, maxval=40, group="Main Strategy Settings")
atr_length = input(14, title="ATR Length", group="Main Strategy Settings")
ema_length = input(72, title="EMA Length", group="Main Strategy Settings")
adx_length = input.int(10, title="ADX Length", group="Main Strategy Settings")
rsi_length = input(14, title="RSI Length", group="Main Strategy Settings")
rsi_overbought = 70
rsi_oversold = 30
bb_mult = input.float(3.0, title="Bollinger Band Multiplier", group="Main Strategy Settings")

// Exit Strategy Inputs
sl_atr_mult = input.float(5.0, title="Stop Loss Multiplier (ATR)", minval=0.1, group="Exit Strategy ")
tp_atr_mult = input.float(4.0, title="Take Profit Multiplier (ATR)", minval=0.1, group="Exit Strategy ")
time_based_exit = input.int(0, title="Time Based Exit (Bars)", minval=0, group="Exit Strategy ")

// UT Bot Inputs
a = input.int(1,     title = "UT Bot: Key Value", group="UT Bot Settings")
c = input.int(10,    title = "UT Bot: ATR Period", group="UT Bot Settings")
h = input.bool(false, title = "UT Bot: Signals from Heikin Ashi Candles", group="UT Bot Settings")

// === New Filters and Output Options ===
group_filters = "New Filters and Output Options"

volume_ma_length = input.int(20, title="volume MA Period", group=group_filters)
min_volume_mult = input.float(0.8, title="Minimum Volume Multiplier", minval=0.1, tooltip="Current volume must be greater than the volume average multiplied by this factor.", group=group_filters)

base_cooldown_bars = input.int(7, title="Base Cooldown Time (Same Signal Block)", minval=1, group=group_filters)
min_atr = input.float(0.005, title="Minimum ATR Değeri", minval=0.0001, group=group_filters)
use_ut_exit = input.bool(true, title="Use UT Bot Trailing Stop for Output", tooltip="If checked, outputs will be made with UT Bot's Trailing Stop. Otherwise, fixed ATR-based SL/TP will be used.", group=group_filters)

//==============================================================================
//== INDICATOR AND FILTER CALCULATIONS ==
//==============================================================================

fast_ema = ta.ema(close, fast_ema_length)
alma9 = ta.alma(close, 15, 0.65, 6)
ema50 = ta.ema(close, ema_length)
[_, _, adx] = ta.dmi(adx_length, 14)
rsi = ta.rsi(close, rsi_length)
atr = ta.atr(atr_length)
stop_loss = atr * sl_atr_mult
profit_target = atr * tp_atr_mult
bb_basis = ta.sma(close, 20)
bb_dev = bb_mult * ta.stdev(close, 20)
bb_upper = bb_basis + bb_dev
bb_lower = bb_basis - bb_dev

// --- UT Bot Calculation ---
xATR  = ta.atr(c)
nLoss = a * xATR
src = h ? request.security(syminfo.tickerid, timeframe.period, close, lookahead = barmerge.lookahead_on) : close
var float xATRTrailingStop = 0.0
xATRTrailingStop := src > nz(xATRTrailingStop[1], 0) and src[1] > nz(xATRTrailingStop[1], 0) ? math.max(nz(xATRTrailingStop[1]), src - nLoss) : src < nz(xATRTrailingStop[1], 0) and src[1] < nz(xATRTrailingStop[1], 0) ? math.min(nz(xATRTrailingStop[1]), src + nLoss) : src > nz(xATRTrailingStop[1], 0) ? src - nLoss : src + nLoss
var int pos = 0
pos := src[1] < nz(xATRTrailingStop[1], 0) and src > nz(xATRTrailingStop[1], 0) ? 1 : src[1] > nz(xATRTrailingStop[1], 0) and src < nz(xATRTrailingStop[1], 0) ? -1 : nz(pos[1], 0)
ema_ut = ta.ema(src,1)
buy_ut  = src > xATRTrailingStop and ta.crossover(ema_ut, xATRTrailingStop)
sell_ut = src < xATRTrailingStop and ta.crossunder(ema_ut, xATRTrailingStop)

// ---New Filter Calculations ---
avg_volume = ta.sma(volume, volume_ma_length)
volume_filter = volume > avg_volume * min_volume_mult
avg_atr = ta.sma(atr, 50)
atr_ratio = atr / avg_atr
dynamic_cooldown_bars = math.round(base_cooldown_bars * atr_ratio)
dynamic_cooldown_bars := math.max(1, dynamic_cooldown_bars)
volatilite_filtresi = atr > min_atr

//==============================================================================
//==STRATEGY CONDITIONS AND ORDER MANAGEMENT =
//==============================================================================


var int last_buy_bar = na
var int last_sell_bar = na
var int entry_bar_index = na
var string last_signal = ""

// BUY Conditions
buy_condition = volatilite_filtresi and volume_filter and close > ema50 and (close > alma9 ) and rsi > rsi_oversold and adx > 30 and close < bb_upper and buy_ut and (na(last_buy_bar) or bar_index - last_buy_bar > dynamic_cooldown_bars) and (last_signal != "BUY")

// SELL Conditions
sell_condition = volatilite_filtresi and volume_filter and ta.crossunder(close, fast_ema) and sell_ut and (last_signal != "SELL")

// --- Order Submission ---
if (buy_condition)
    strategy.entry("BUY", strategy.long)
    last_buy_bar := bar_index
    entry_bar_index := bar_index
    last_signal := "BUY"

if (sell_condition)
    strategy.close("BUY", comment="Sell Signal Exit")
    strategy.entry("SELL", strategy.short)
    last_sell_bar := bar_index
    last_signal := "SELL"

// --- Exit Strategy Management ---
if not use_ut_exit
    // Original ATR based SL/TP output
    if time_based_exit > 0
        strategy.exit("BUY_EXIT", from_entry="BUY", loss=stop_loss, profit=profit_target, when=bar_index - entry_bar_index >= time_based_exit)
    else
        strategy.exit("BUY_EXIT", from_entry="BUY", loss=stop_loss, profit=profit_target)
    strategy.exit("SELL_EXIT", from_entry="SELL", loss=stop_loss, profit=profit_target)
else

    if strategy.position_size > 0 and ta.crossunder(close, xATRTrailingStop)
        strategy.close("BUY", comment="UT Trailing Stop")
    if strategy.position_size < 0 and ta.crossover(close, xATRTrailingStop)
        strategy.close("SELL", comment="UT Trailing Stop")

//==============================================================================
//==  (PLOTTING) ==
//==============================================================================

bgcolor_color = pos == 1 ? color.new(color.green, 90) : pos == -1 ? color.new(color.red, 90) : na
bgcolor(bgcolor_color, title="UT Bot Trend Arka Planı")

plot(fast_ema, title="Quick EMA", color=color.orange)
var color almaColor1 = na
almaColor1 := close > alma9 ? color.green : color.red
plot(alma9, title="ALMA9", color=almaColor1)
plot(ema50, "EMA 50", color=color.blue, linewidth=2)
p_upper = plot(bb_upper, "Bollinger Upper", color=#4f0489)
p_lower = plot(bb_lower, "Bollinger Lower", color=#4f0489)
fill(p_upper, p_lower, color=color.new(#4f0489, 90))

ut_line_color = close > xATRTrailingStop ? color.green : color.red
plot(xATRTrailingStop, color=ut_line_color, title="UT ATR Trailing Stop", linewidth=2)

plotshape(series=buy_condition, location=location.belowbar, color=color.green, style=shape.triangleup, size=size.small, title="BUY Signal", text="BUY", textcolor=color.white)
plotshape(series=sell_condition, location=location.abovebar, color=color.red, style=shape.triangledown, size=size.small, title="SELL Signal", text="SELL", textcolor=color.white)