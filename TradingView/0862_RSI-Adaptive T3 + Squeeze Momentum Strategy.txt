// This Pine Script® code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © PakunFX

//@version=6
strategy("RSI-Adaptive T3 + Squeeze Momentum Strategy", overlay=true, default_qty_type=strategy.percent_of_equity, default_qty_value=100)

// ====== User Inputs ======
src = close
rsiLen = input.int(14, 'RSI Length', group="T3")
minLen = input.int(5, 'Min T3 Length', group="T3")
maxLen = input.int(50, 'Max T3 Length', group="T3")
v = input.float(0.7, 'T3 Volume Factor', step=0.01, maxval=2, minval=0.1, group="T3")

length = input(27, title="BB Length", group="Squeeze")
mult = input(2.0, title="BB MultFactor", group="Squeeze")
lengthKC = input(20, title="KC Length", group="Squeeze")
multKC = input(1.5, title="KC MultFactor", group="Squeeze")
useTrueRange = input(true, title="Use TrueRange (KC)", group="Squeeze")

// ====== T3 Calculation ======
rsi = ta.rsi(src, rsiLen)
rsi_scale = 1 - rsi / 100
len = math.round(minLen + (maxLen - minLen) * rsi_scale)

pine_ema(s, l) =>
    alpha = 2 / (l + 1)
    sum = 0.0
    sum := na(sum[1]) ? s : alpha * s + (1 - alpha) * nz(sum[1])
    sum

e1 = pine_ema(src, len)
e2 = pine_ema(e1, len)
e3 = pine_ema(e2, len)
e4 = pine_ema(e3, len)
e5 = pine_ema(e4, len)
e6 = pine_ema(e5, len)

c1 = -v * v * v
c2 = 3 * v * v + 3 * v * v * v
c3 = -6 * v * v - 3 * v - 3 * v * v * v
c4 = 1 + 3 * v + v * v * v + 3 * v * v
t3 = c1 * e6 + c2 * e5 + c3 * e4 + c4 * e3

// ====== Squeeze Momentum Calculation ======
basis = ta.sma(src, length)
dev = multKC * ta.stdev(src, length)
upperBB = basis + dev
lowerBB = basis - dev

ma = ta.sma(src, lengthKC)
kcrange = useTrueRange ? ta.tr : (high - low)
kcrangema = ta.sma(kcrange, lengthKC)
upperKC = ma + kcrangema * multKC
lowerKC = ma - kcrangema * multKC

sqzOn = (lowerBB > lowerKC) and (upperBB < upperKC)
sqzOff = (lowerBB < lowerKC) and (upperBB > upperKC)

midLine = (ta.highest(high, lengthKC) + ta.lowest(low, lengthKC)) / 2
val = ta.linreg(src - (midLine + ta.sma(close, lengthKC)) / 2, lengthKC, 0)

// ====== Strategy Logic ======
longCondition = ta.crossover(t3, t3[1]) and val > 0 and sqzOff
shortCondition = ta.crossunder(t3, t3[1]) and val < 0 and sqzOff

if (longCondition)
    strategy.entry("Long", strategy.long)
if (shortCondition)
    strategy.entry("Short", strategy.short)