//_______ <licence>
// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © Skyrex

//_______ <version>
//@version=5

//_______ <declaration_statement>
strategy(title = "Momentum Alligator 4h Bitcoin Strategy",
         shorttitle = "Momentum Strategy",
         overlay = true,
         format = format.inherit,
         pyramiding = 1,
         calc_on_order_fills = false,
         calc_on_every_tick = true,
         default_qty_type = strategy.percent_of_equity,
         default_qty_value = 50,
         initial_capital = 10000,
         currency = currency.NONE,
         commission_type = strategy.commission.percent,
         commission_value = 0.1,
         slippage = 5)


//_______ <constant_declarations>
var color skyrexGreen       = color.new(#2ECD99, 0)
var color skyrexGray        = color.new(#F2F2F2, 0)
var color skyrexWhite       = color.new(#FFFFFF, 0)

var color barcolor          = na
var float stopLossLevel     = na
var int skip_count          = 0


//_______ <inputs>
// Trading bot settings
sourceUuid               = input.string(title = "sourceUuid:", defval = "yourBotSourceUuid", group = "Trading Bot Settings")
secretToken              = input.string(title = "secretToken:", defval = "yourBotSecretToken", group = "Trading Bot Settings")
stopLossPercent          = input.float(defval = 0.02, title = "Stop loss", step = 0.005, group = "Strategy settings")

// Trading Period Settings
lookBackPeriodStart      = input.time(title = "Trade Start Date/Time", defval = timestamp('2023-01-01T00:00:00'), group = "Trading Period Settings")
lookBackPeriodStop       = input.time(title = "Trade Stop Date/Time", defval = timestamp('2025-01-01T00:00:00'), group = "Trading Period Settings")

//_______ <function_declarations>
//@function       Used to calculate Simple moving average for Alligator
//@param src      Sourse for smma Calculations
//@param length   Number of bars to calculate smma
//@returns        The calculated smma value
smma(src, length) =>
    var float smma = na
    sma_value = ta.sma(src, length)
    smma := na(smma) ? sma_value : (smma * (length - 1) + src) / length
    smma


//_______ <calculations>

//Calculating chart's time frame Alligator's lines (Jaw, Teeth, Lips)
jaw = smma(hl2, 13)[8]
teeth = smma(hl2, 8)[5]
lips = smma(hl2, 5)[3]

//Calculating 1D time frame Alligator's lines (Jaw, Teeth, Lips)
jaw_1D = request.security(syminfo.tickerid, "D", smma(hl2, 13))[8]
teeth_1D = request.security(syminfo.tickerid, "D", smma(hl2, 8))[5]
lips_1D = request.security(syminfo.tickerid, "D", smma(hl2, 5))[3]


//Calculating Awesome oscillator and it's 5 period SMA
ao = ta.sma(hl2,5) - ta.sma(hl2,34)
ao_5sma = ta.sma(ao, 5)

//Calculating dynamic stop loss level
stopLossLevel := strategy.position_avg_price*(1-stopLossPercent) > jaw ? strategy.position_avg_price*(1-stopLossPercent) : jaw

//Calculating number of trades to skip after the profitable one
if (strategy.closedtrades > 0)
    last_trade = strategy.closedtrades - 1
    if (strategy.closedtrades.profit(last_trade) > 0 and skip_count == 0)
        skip_count := 2  //


if (skip_count > 0)
    skip_count := skip_count - 1



//_______ <strategy_calls>
longCondition = ta.crossover(ao, ao_5sma) and close > jaw_1D and close > teeth_1D and close > lips_1D

if (longCondition and time >= lookBackPeriodStart and time <= lookBackPeriodStop and  skip_count == 0)
    strategy.entry(id = "entry1", direction = strategy.long, alert_message = '{\n"base": "' + syminfo.basecurrency + '",\n"quote": "' + syminfo.currency + '",\n"position": "entry1",\n"price": "' + str.tostring(close) + '",\n"sourceUuid": "' + sourceUuid + '",\n"secretToken": "' + secretToken + '",\n"timestamp": "' + str.tostring(timenow) + '"\n}')


strategy.exit(id = "entry1", stop=stopLossLevel, alert_message = '{\n"base": "' + syminfo.basecurrency + '",\n"quote": "' + syminfo.currency + '",\n"position": "close",\n"price": "' + str.tostring(close) + '",\n"sourceUuid": "' + sourceUuid + '",\n"secretToken": "' + secretToken + '",\n"timestamp": "' + str.tostring(timenow) + '"\n}')


//_______ <visuals>

//_______ <alerts>