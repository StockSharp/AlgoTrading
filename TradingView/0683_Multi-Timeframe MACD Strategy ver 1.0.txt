//@version=5
strategy("Multi-Timeframe MACD Strategy ver 1.0", overlay=true, shorttitle="MTF MACD Strategy ver 1.0")

// --- Input Settings ---

// MACD Settings
fastLength = input.int(12, title="Fast Length")
slowLength = input.int(26, title="Slow Length")
signalLength = input.int(9, title="Signal Smoothing")

// Multi-Timeframe Settings
higherTimeframe = input.timeframe("D", title="Higher Timeframe")
showCurrentTF = input.bool(true, title="Show Current Timeframe MACD")
showHigherTF = input.bool(true, title="Show Higher Timeframe MACD")

// Color Settings (Optional - for visual clarity on the chart)
currentMACDColor = input.color(color.blue, title="Current MACD Color")
currentSignalColor = input.color(color.orange, title="Current Signal Color")
higherMACDColor = input.color(color.aqua, title="Higher MACD Color")
higherSignalColor = input.color(color.fuchsia, title="Higher Signal Color")

// Entry/Exit Type
entryType = input.string("Crossover", title="Entry Type", options=["Crossover", "Zero Cross", "Both"])
useTrailingStop = input.bool(false, title="Use Trailing Stop Loss")
trailingStopPercent = input.float(2.0, title="Trailing Stop %", minval=0.1, step=0.1) / 100

// --- MACD Calculations ---

// Current Timeframe MACD
[currentMACD, currentSignal, _] = ta.macd(close, fastLength, slowLength, signalLength)

// Higher Timeframe MACD (using request.security with lookahead=barmerge.lookahead_off)
[higherMACD, higherSignal, _] = request.security(syminfo.tickerid, higherTimeframe, ta.macd(close, fastLength, slowLength, signalLength), lookahead=barmerge.lookahead_off)

// --- Plotting (Optional - to visualize the MACD lines on the chart)
// We don't plot the MACD as a histogram like a traditional MACD indicator.
// Instead, we only plot the MACD and Signal lines as circles.

plot(showCurrentTF ? currentMACD : na, style=plot.style_circles, color=currentMACDColor, linewidth=2, title="Current MACD")
plot(showCurrentTF ? currentSignal : na, style=plot.style_circles, color=currentSignalColor, linewidth=2, title="Current Signal")

plot(showHigherTF ? higherMACD : na, style=plot.style_circles, color=higherMACDColor, linewidth=2, title="Higher MACD")
plot(showHigherTF ? higherSignal : na, style=plot.style_circles, color=higherSignalColor, linewidth=2, title="Higher Signal")

// --- Strategy Logic ---

// 1. Determine MACD States (for easier readability)
currentMACDBullish = currentMACD > currentSignal
currentMACDBearish = currentMACD < currentSignal
higherMACDBullish = higherMACD > higherSignal
higherMACDBearish = higherMACD < higherSignal

currentMACDAboveZero = currentMACD > 0
currentMACDBelowZero = currentMACD < 0
higherMACDAboveZero = higherMACD > 0
higherMACDBelowZero = higherMACD < 0

// 2. Entry Conditions
longCondition_Crossover = false
shortCondition_Crossover = false
longCondition_ZeroCross = false
shortCondition_ZeroCross = false

//Crossover conditions
if showCurrentTF and showHigherTF
    longCondition_Crossover := currentMACDBullish and higherMACDBullish and ta.crossover(currentMACD, currentSignal)
    shortCondition_Crossover := currentMACDBearish and higherMACDBearish and ta.crossunder(currentMACD, currentSignal)
else if showCurrentTF and not showHigherTF
    longCondition_Crossover := currentMACDBullish and ta.crossover(currentMACD, currentSignal)
    shortCondition_Crossover := currentMACDBearish and ta.crossunder(currentMACD, currentSignal)
else if not showCurrentTF and showHigherTF
    longCondition_Crossover := higherMACDBullish and ta.crossover(higherMACD, higherSignal) //Using crossover for HTF only
    shortCondition_Crossover := higherMACDBearish and ta.crossunder(higherMACD, higherSignal)

// Zero Cross Conditions
if showCurrentTF and showHigherTF
    longCondition_ZeroCross := currentMACDAboveZero and higherMACDAboveZero and ta.crossover(currentMACD, 0)
    shortCondition_ZeroCross := currentMACDBelowZero and higherMACDBelowZero and ta.crossunder(currentMACD, 0)
else if showCurrentTF and not showHigherTF
    longCondition_ZeroCross := currentMACDAboveZero and ta.crossover(currentMACD, 0)
    shortCondition_ZeroCross := currentMACDBelowZero and ta.crossunder(currentMACD, 0)
else if not showCurrentTF and showHigherTF
    longCondition_ZeroCross := higherMACDAboveZero and ta.crossover(higherMACD, 0)
    shortCondition_ZeroCross := higherMACDBelowZero and ta.crossunder(higherMACD, 0)

//Combine conditions based on entry type.
longCondition = (entryType == "Crossover" and longCondition_Crossover) or (entryType == "Zero Cross" and longCondition_ZeroCross) or (entryType == "Both" and (longCondition_Crossover or longCondition_ZeroCross))
shortCondition = (entryType == "Crossover" and shortCondition_Crossover) or (entryType == "Zero Cross" and shortCondition_ZeroCross) or (entryType == "Both" and (shortCondition_Crossover or shortCondition_ZeroCross))
// 3. Trailing Stop Loss (Optional)
var float longStopPrice = na
var float shortStopPrice = na

if (useTrailingStop)
    longStopPrice := strategy.position_avg_price * (1 - trailingStopPercent)
    shortStopPrice := strategy.position_avg_price * (1 + trailingStopPercent)

    if (strategy.position_size > 0)
        longStopPrice := math.max(longStopPrice, close * (1 - trailingStopPercent))  // Update trailing stop
        strategy.exit("Trailing Stop Long", "Long", stop=longStopPrice)
    else if (strategy.position_size < 0)
        shortStopPrice := math.min(shortStopPrice, close * (1 + trailingStopPercent)) // Update trailing stop
        strategy.exit("Trailing Stop Short", "Short", stop=shortStopPrice)


// 4. Exit Conditions (without trailing stop - for Crossover/Zero Cross)
longExitCondition = (entryType == "Crossover" or entryType == "Both") and ta.crossunder(currentMACD, currentSignal)
shortExitCondition = (entryType == "Crossover" or entryType == "Both") and ta.crossover(currentMACD, currentSignal)
longExitConditionZero = (entryType == "Zero Cross" or entryType == "Both") and ta.crossunder(currentMACD, 0)
shortExitConditionZero = (entryType == "Zero Cross" or entryType == "Both") and ta.crossover(currentMACD, 0)

// 5. Strategy Orders
if (longCondition)
    strategy.entry("Long", strategy.long)

if (shortCondition)
    strategy.entry("Short", strategy.short)

if (not useTrailingStop)
    if longExitCondition or longExitConditionZero
        strategy.close("Long", comment = "MACD Exit")
    if shortExitCondition or shortExitConditionZero
        strategy.close("Short", comment = "MACD Exit")