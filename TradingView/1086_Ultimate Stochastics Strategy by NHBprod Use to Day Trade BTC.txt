//@version=5
strategy('Ultimate Stochastics Strategy by NHBprod', overlay=false, currency='USD', initial_capital=100, default_qty_type=strategy.cash, default_qty_value=100, commission_value=0.1)

MenuBacktesting = input(true, '============== Strategy Tester ===========')

positionType = input.string(defval='Long', title='  Order Type', options=['Long & Short', 'Long', 'Short'])

use_opposite = input(true, 'Use Opposite Signals to Close Trades')
usetrademanagement = input(true, 'Use Take Profit & Stop Loss')

//iteration       = input(defval=0,       title="  Iterations",          type=input.integer)
tp = input.float(defval=14.0, title='  Take Profit %') / 100
sl = input.float(defval=8.0, title='  Stop Loss %') / 100







customperiod = input(false, title='Use Custom Period')

y1 = input(defval=2020, title='  From Year')
mo1 = input(defval=0, title='  From Month')
d1 = input(defval=0, title='  From Day')
h1x = input(defval=0, title='  From Hour')
m1 = input(defval=0, title='  From Minute')
y2 = input(defval=2025, title='  To Year')
mo2 = input(defval=8, title='  To Month')
d2 = input(defval=1, title='  To Day')
h2 = input(defval=0, title='  To Hour')
m2 = input(defval=0, title='  To Minute')

t1 = timestamp(y1, mo1, d1, h1x, m1)
t2 = timestamp(y2, mo2, d2, h2, m2)




//--------------------------FUNCTION----------------------------
isInRange() =>
    ret = customperiod ? time >= t1 and time <= t2 : true
    ret



hull_ma(src, length) =>
    // Compute the Hull Moving Average
    return_1 = ta.wma(2 * ta.wma(src, length / 2) - ta.wma(src, length), math.round(math.sqrt(length)))
    return_1

ma_function(source, length, smoothing) =>
    smoothing == 'RMA' ? ta.rma(source, length) : smoothing == 'SMA' ? ta.sma(source, length) : smoothing == 'EMA' ? ta.ema(source, length) : smoothing == 'WMA' ? ta.wma(source, length) : smoothing == 'HMA' ? hull_ma(source, length) : na

//----------------------------------Stochastic------------------------------------



useSTOCH = input(defval=true, title='ðŸŸ¦ <============ Use Stoch =============')
stoch_exit = input(defval=true, title='ðŸŸ¥ Use Sell Condition')

fast_k_period = input.int(defval=9, minval=1, title='  Fast K Length')
slow_k_period = input.int(defval=18, minval=1, title='  Slow K Length')
slow_d_period = input.int(defval=4, minval=1, title='  Slow D Length')
stochOverbought = input.int(defval=60, minval=0, title='  Stoch Overbought')
stochOversold = input.int(defval=90, minval=0, title='  Stoch Oversold')
stoch_smoothing = input.string(title='  Smoothing', defval='SMA', options=['RMA', 'SMA', 'EMA', 'WMA', 'HMA'])
input_since_stoch = input.int(defval=1, title='  Max Bars Since Signal', minval=0)

fast_k = ta.stoch(close, high, low, fast_k_period)
slow_k = ma_function(  fast_k, slow_k_period, stoch_smoothing)
slow_d = ma_function(  slow_k, slow_d_period, stoch_smoothing)
//k = sma(stoch(close, high, low, length), smoothK)
//d = sma(k, smoothD)
stoch_signal0 = ta.crossover(slow_k, slow_d) and slow_d and slow_k < stochOversold and isInRange()
stoch_signal0_since = ta.barssince(stoch_signal0) <= input_since_stoch
stoch_signal0_sell = ta.crossunder(slow_k, slow_d) and slow_d and slow_k > stochOverbought  and isInRange()
stoch_signal0_sell_since = ta.barssince(stoch_signal0_sell) <= input_since_stoch
stoch_signal = useSTOCH ? stoch_signal0_since : true  //false
stoch_signal_sell = stoch_exit ? stoch_signal0_sell_since : true  //false
//plotchar(slow_k, color=slow_k > slow_d ? color.green : color.red, title='Stoch K', offset=0, editable=false, location=location.top, transp=50)
//plotchar(slow_d, color=slow_k>slow_d?color.green:color.red, title="Stoch D",offset=0,editable=false,location=location.top,transp=100)
plot((fast_k), color = #8a8a8a,title="fast k")
plot((slow_k), color = #28c22d,title="slow k")
plot((slow_d), color = #2196f3, title="slow d")
//----------------------------------Bars Back Ratio------------------------------------
useBARSBACK = false
barsBack_signal = false  // Temporary assignment until algo is completed.

//----------------------------------MASTER---------------------------------------------------------------------------------------------------------------------------------------------------------------------

select1 =  useSTOCH   //or usePRICECHANGE) or useDMI or useMFI  or

master_signal =  stoch_signal and select1  //and pct_chg_signal and dmi_signal and mfi_signal

select2 =  stoch_exit   //(useMACD or useSTOCH or useMA or useRSI) and

master_sell =  stoch_signal_sell  and select2



//plot(0, color=color.new(color.black, 100), title='======== BUY SIGNALS ========', offset=-9999, editable=false)

//plotshape(master_signal, style=shape.circle, location=location.abovebar, color=color.new(color.yellow, 0), title='Master Buy', text='Master Buy', textcolor=color.new(color.yellow, 0))

//plotshape(stoch_signal and useSTOCH, style=shape.triangleup, location=location.belowbar, color=#00ff51, title='STOCH Buy', text='STOCH Buy', textcolor=color.new(color.orange, 0))


//plot(0, color=color.new(color.black, 100), title='======== SELL SIGNALS ========', offset=-9999, editable=false)
//plotshape(stoch_signal_sell and stoch_exit, style=shape.triangledown, location=location.abovebar, color=#ff9a03, title='STOCH Sell', text='STOCH', textcolor=color.new(color.orange, 0))

// //----------------------------------ALERT-------------------------------------


Longtake_level = strategy.position_avg_price * (1 + tp)
Longstop_level = strategy.position_avg_price * (1 - sl)

Shorttake_level = strategy.position_avg_price * (1 - tp)
Shortstop_level = strategy.position_avg_price * (1 + sl)


strategy.entry('Long', strategy.long, when=master_signal and positionType != 'Short')
strategy.close('Long', when=use_opposite and master_sell)

if usetrademanagement
    strategy.exit('Close Long', 'Long', limit=Longtake_level, stop=Longstop_level)

strategy.entry('Short', strategy.short, when=master_sell and positionType != 'Long')
strategy.close('Short', when=use_opposite and master_signal)

if usetrademanagement
    strategy.exit('Close Short', 'Short', limit=Shorttake_level, stop=Shortstop_level)