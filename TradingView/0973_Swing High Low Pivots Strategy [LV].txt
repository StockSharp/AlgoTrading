// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Designed with passion by © LucasVivien
// @version=6

strategy(title = "Swing High/Low Pivots Strategy [LV]", shorttitle="Swing Strat. [LV]", overlay=true, calc_on_every_tick=true, default_qty_type=strategy.cash,
 initial_capital= 100000, default_qty_value=50000, slippage= 100, commission_value= 0.1, max_labels_count=500, max_lines_count=500)


//  ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
//{ ▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼   INPUTS   ▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼

var g_0  = "-----------------------   TRADE SETTINGS   -----------------------"
length   = input.int  (23         , title="Limit        " , group=g_0, inline="0a", tooltip="--- LOOKBACK ---\nNumber of elapsed bars before a pivot* is confirmed: higher high (HH*) or lower high (LH*) or higher low (HL*) or lower low (LL*).")
limCol   = input.color(#787b8680, title=''              , group=g_0, inline="0a")
i_SL     = input.float(300000     , title="Stop Loss    " , group=g_0, inline="0b", tooltip="--- SL ---\nValue in minimum ticks from entry price\nor in pips if symbol is Forex", step=1, minval=1)
SLcol    = input.color(#ff0000ee, title=''              , group=g_0, inline="0b")
i_TP     = input.float(150000     , title="Take Profit   ", group=g_0, inline="0c", tooltip="--- TP1 ---\nValue in minimum ticks from entry price\nor in pips if symbol is Forex", step=1, minval=1)
TPcol    = input.color(#00ff00ee, title=''              , group=g_0, inline="0c")
i_TP2    = input.float(100000     , title="Take Profit 2 ", group=g_0, inline="0d", tooltip="--- TP2 ---\nValue in minimum ticks from TP1\nor in pips if symbol is Forex\n\nTick box to enable:\n- Trade entries with double quantity\n- 50% exit uppon TP1 hit, SL moves to entry price\n- 100% exit uppon TP2 or SL hit", step=1, minval=1)
dblE     = input.bool (true       , title="  "            , group=g_0, inline="0d")

var g_1 = "------------------------   TREND FILTER   ------------------------"
oMA     = input.bool  (true , title=" ", group=g_1, inline="1a")
maT     = input.string("EMA", title="" , group=g_1, inline="1a", options=["SMA", "EMA", "WMA", "HMA", "VWMA", "RMA", "SWMA", "VWAP", "ALMA"])
maL     = input.int   (200  , title="" , group=g_1, inline="1a", tooltip="Tick box to enable:\n- Long trades only open if Pivot (LL or HL) was above moving average.\n- Short trades only open if Pivot (HH or LL) was below moving average.")

var g_3  ="-----------   ALERT MESSAGES (OPEN ➔ CLOSE)   -----------"
LmessIn  = input.string(title="Long  " , defval="", group=g_3, inline="3a")
LmessOut = input.string(title="➔"     , defval="", group=g_3, inline="3a", tooltip='When creating your alert, use the following placeholder in the "Message" box:\n{{strategy.order.alert_message}}')
SmessIn  = input.string(title="Short  ", defval="", group=g_3, inline="3b")
SmessOut = input.string(title="➔"     , defval="", group=g_3, inline="3b", tooltip='When creating your alert, use the following placeholder in the "Message" box:\n{{strategy.order.alert_message}}')


//}
//  ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
//{ ▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼   INDICATORS & DATA   ▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼

// Moving Average
movingAverage = switch maT
    "HMA"  => ta.hma (close, maL)
    "WMA"  => ta.wma (close, maL)
    "EMA"  => ta.ema (close, maL)
    "SMA"  => ta.sma (close, maL)
    "RMA"  => ta.rma (close, maL)
    "VWMA" => ta.vwma(close, maL)
    "SWMA" => ta.swma(close)
    "VWAP" => ta.vwap(close)
    "ALMA" => ta.alma(close, maL, 0.85, 6)

bullTrend = close > movingAverage
bearTrend = close < movingAverage
longMAfilter  = oMA ? bullTrend : true
shortMAfilter = oMA ? bearTrend : true

// Ticks to Pips converter
pipsMult = syminfo.mintick * (syminfo.type == "forex" ?
 syminfo.mintick == 0.000001 ? 10 :
 syminfo.mintick == 0.00001  ? 10 :
 syminfo.mintick == 0.0001   ? 1  :
 syminfo.mintick == 0.001    ? 10 :
 syminfo.mintick == 0.01     ? 1  :
 na : 1)

// Swing High & Swing Low
var float phy = na
var float ply = na
pHi = ta.pivothigh(length, length)
pLo = ta.pivotlow (length, length)


//}
//  ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
//{ ▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼   TRADES MANAGEMENT    ▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼

// Trade Variables
var float L_limit = na   , var float S_limit = na
var float L_TP    = na   , var float S_TP    = na
var float L_TP2   = na   , var float S_TP2   = na
var float L_SL    = na   , var float S_SL    = na
var float L_SL2   = na   , var float S_SL2   = na
var L_TPhit       = false, var S_TPhit       = false
var L_pending     = false, var S_pending     = false

SPS = strategy.position_size

longLimit  = open[length] < close[length] ? open[length] : close[length]
shortLimit = open[length] > close[length] ? open[length] : close[length]

// Save Pivots & Limits
if not na(pLo)
    L_limit  := longLimit
    ply      := pLo
if not na(pHi)
    S_limit := shortLimit
    phy     := pHi

// Signal validation
validLong  = not na(pLo) and longMAfilter  and barstate.isconfirmed and SPS==0
validShort = not na(pHi) and shortMAfilter and barstate.isconfirmed and SPS==0

// ===================================================   Entries   ====================================================
// Longs
if validLong
    strategy.cancel("Long")
    L_TP      := L_limit + i_TP  * pipsMult
    L_TP2     := L_TP    + i_TP2 * pipsMult
    L_SL      := L_limit - i_SL  * pipsMult
    L_SL2     := L_limit + 2     * pipsMult
    if high >= L_limit
        strategy.entry("Long", direction=strategy.long, limit=L_limit, alert_message=LmessIn)
        if dblE
            strategy.entry("Long 2", direction=strategy.long, limit=L_limit)
    L_pending := true

// Shorts
if validShort
    strategy.cancel("Short")
    S_TP       := S_limit - i_TP  * pipsMult
    S_TP2      := S_TP    - i_TP2 * pipsMult
    S_SL       := S_limit + i_SL  * pipsMult
    S_SL2      := S_limit - 2     * pipsMult
    if low <= S_limit
        strategy.entry("Short", direction=strategy.short, limit=S_limit, alert_message=SmessIn)
        if dblE
            strategy.entry("Short 2", direction=strategy.short, limit=S_limit)
    S_pending := true

// ===========================================   Trade Variables Management   =========================================
// Reset SL/TP if opposite direction
if SPS < 0
    strategy.cancel("Long")
    strategy.cancel("Long 2")
    L_TP  := na, L_SL  := na
    L_TP2 := na, L_SL2 := na
if SPS > 0
    strategy.cancel("Short")
    strategy.cancel("Short 2")
    S_TP  := na, S_SL  := na
    S_TP2 := na, S_SL2 := na

// Reset TP hit after trade
if SPS == 0
    L_TPhit := false
    S_TPhit := false

// Reset Limit hit if trade start
if SPS[1] == 0 and SPS != 0
    L_limit   := na
    S_limit   := na

// Reset pending limit
if L_pending[1] and low  <= L_limit and SPS > 0
    L_pending := false
if S_pending[1] and high >= S_limit and SPS < 0
    S_pending := false

// Save TP hit
if not L_TPhit and SPS[1]>0 and high >= L_TP and dblE
    L_TPhit := true
if not S_TPhit and SPS[1]<0 and low  <= S_TP and dblE
    S_TPhit := true

// ====================================================   Exits   =====================================================
// Longs
if not dblE
    strategy.exit("Long Exit"  , "Long"  , alert_message=LmessOut, limit=L_TP , stop=L_SL)
if dblE and SPS > 0
    strategy.exit("Long Exit"  , "Long"  , alert_message=LmessOut, limit=L_TP , stop=L_SL)
    strategy.exit("Long 2 Exit", "Long 2", alert_message=LmessOut, limit=L_TP2, stop=L_TPhit ? L_SL2 : L_SL)

// Shorts
if not dblE
    strategy.exit("Short Exit"  , "Short"  , alert_message=SmessOut, limit=S_TP , stop=S_SL)
if dblE and SPS < 0
    strategy.exit("Short Exit"  , "Short"  , alert_message=SmessOut, limit=S_TP , stop=S_SL)
    strategy.exit("Short 2 Exit", "Short 2", alert_message=SmessOut, limit=S_TP2, stop=S_TPhit ? S_SL2 : S_SL)


//}
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
//{ ▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼   PLOTS   ▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼

// Limits lines
if not na(pHi)
    line.new (bar_index[length],shortLimit,bar_index,shortLimit, style=line.style_dotted, color=limCol)
if not na(pLo)
    line.new (bar_index[length],longLimit,bar_index,longLimit, style=line.style_dotted, color=limCol)

// Moving Averages
plot(oMA ? movingAverage : na, title="Moving Average", style=plot.style_line, linewidth=2, color=movingAverage > close ? #00ff77dd :  #ff0077dd)

// Swings highs & lows
plotshape(not na(pHi) and phy > phy[1], title="Higher High", style=shape.triangledown, textcolor=limCol, color=#dc161690, text="HH", location=location.abovebar, size=size.tiny, offset=-length, display=display.pane)
plotshape(not na(pHi) and phy < phy[1], title="Lower High" , style=shape.triangledown, textcolor=limCol, color=#dc161690, text="LH", location=location.abovebar, size=size.tiny, offset=-length, display=display.pane)
plotshape(not na(pLo) and ply < ply[1], title="Lower Low"  , style=shape.triangleup  , textcolor=limCol, color=#13d6c290, text="LL", location=location.belowbar, size=size.tiny, offset=-length, display=display.pane)
plotshape(not na(pLo) and ply > ply[1], title="Higher Low" , style=shape.triangleup  , textcolor=limCol, color=#13d6c290, text="HL", location=location.belowbar, size=size.tiny, offset=-length, display=display.pane)

// Limits
plot(L_pending and L_limit==L_limit[1] ? L_limit : na, title="Long Entry Limit" , color=limCol, style=plot.style_steplinebr, editable=false)
plot(S_pending and S_limit==S_limit[1] ? S_limit : na, title="Short Entry Limit", color=limCol, style=plot.style_steplinebr, editable=false)

// Stop Losses
plot(SPS > 0 and not L_TPhit ? L_SL : SPS > 0 and L_TPhit ? L_SL2 : na , title="Long SL" , color=SLcol, style=plot.style_steplinebr, linewidth=2, editable=false)
plot(SPS < 0 and not S_TPhit ? S_SL : SPS < 0 and S_TPhit ? S_SL2 : na , title="Short SL", color=SLcol, style=plot.style_steplinebr, linewidth=2, editable=false)

// Take Profits
plot(SPS > 0 and not L_TPhit ? L_TP  : na, title="Long TP"     , color=TPcol, style=plot.style_steplinebr, linewidth=2, editable=false)
plot(SPS > 0 and dblE        ? L_TP2 : na, title="Long 2nd TP" , color=TPcol, style=plot.style_steplinebr, linewidth=2, editable=false)
plot(SPS < 0 and not S_TPhit ? S_TP  : na, title="Short TP"    , color=TPcol, style=plot.style_steplinebr, linewidth=2, editable=false)
plot(SPS < 0 and dblE        ? S_TP2 : na, title="Short 2nd TP", color=TPcol, style=plot.style_steplinebr, linewidth=2, editable=false)


//}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━   END   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━