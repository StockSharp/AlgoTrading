// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © lejmer

//@version=4
study("Random Synthetic Asset Generation", overlay = true)



// ------------------------------------------------------------------------------------
//    Constants
// ------------------------------------------------------------------------------------
//{

var float PI = 3.1415926535

var bool UP_BAR = true
var bool DOWN_BAR = false

var string RANDOM_RS = "Ricardo Santos Method"
var string RANDOM_WH = "Wichmann-Hill Method"

//} Constants



// ------------------------------------------------------------------------------------
//    Input
// ------------------------------------------------------------------------------------
//{

var string method = input(RANDOM_RS, "Pseudo-Random Generation Method", options = [RANDOM_RS, RANDOM_WH])
var int seed = input(123456, "Seed [>= 0]", minval = 0)
var float intrabar_volatility = input(33, "Intrabar Volatility [0 to 100]", minval = 0, maxval = 100, step = 0.1, type = input.float) / 50
var float price_multiplier = input(30, "Price Multiplier [> 0.00001]", minval = 0.00001, type = input.float)
var color up_color = input(#55c754, "Up-Candle Colour")
var color down_color = input(#e26565, "Down-Candle Colour")
var color up_border_color = input(#317530, "Up-Candle Border Colour")
var color down_border_color = input(#8e3e3e, "Down-Candle Border Colour")
var color up_vol_color = input(#26a69a, "Bullish Volume Colour")
var color down_vol_color = input(#ef5350, "Bearish Volume Colour")

//} Input



// ------------------------------------------------------------------------------------
//    Functions
// ------------------------------------------------------------------------------------
//{

// ------------------------------------------------------------------------------------
//    Inverse hyperbolic tangent function
// ------------------------------------------------------------------------------------

atanh(value) =>
//{
    0.5 * log((1 + value) / (1 - value))
//}



// ------------------------------------------------------------------------------------
//    Pseudo-random number generator
// ------------------------------------------------------------------------------------

rand(method, range, seed) =>
//{
    if (method == RANDOM_RS)
    //{
        // Based on the "[RS]Function - Functions to generate Random values" script by Ricardo Santos
        float result = na

        result := PI * (nz(result[1], 1) * bar_index + seed)
        result := result % range
    //}
    else
    //{
        // Wichmann–Hill pseudo-random number generator
        var float germinate = seed * nz(volume, ohlc4) * timenow

        float s1 = na
        s1 := 171 * nz(s1[1], germinate) % 30269

        float s2 = na
        s2 := 172 * nz(s2[1], s1 * seed) % 30307

        float s3 = na
        s3 := 170 * nz(s3[1], s2 * seed) % 30323

        (s1 / 30269 + s2 / 30307 + s3 / 30323) % range
    //}
//}



// ------------------------------------------------------------------------------------
//    Generate a pseudo-random value for a time series between -2 and 2
// ------------------------------------------------------------------------------------

random_value(method, seed) =>
//{
    float rand1 = 0.1 + pow(1 - log10(0.01 + rand(method, 10, seed)), 2)
    float rand2 = rand(method, 1, seed + 1) + 1

    float rand_normal = sqrt(2 * log(rand1 + 1)) * sin(2 * PI * rand2)

    rand_normal + (rand(method, 0.1, seed) - 0.05)
//}



// ------------------------------------------------------------------------------------
//    Generate a pseudo-random candle wick range
// ------------------------------------------------------------------------------------

random_wick(method, change, intrabar_volatility, seed) =>
//{
    float abs_change = abs(change)
    float rand_value = rand(method, 1, seed)
    abs_change * intrabar_volatility + nz(log10(10 - (abs_change + 2) / 2 * 5) * rand_value * (2 * atanh(3 * rand_value)) + abs_change * rand(method, intrabar_volatility, seed))
//}



// ------------------------------------------------------------------------------------
//    Generate a pseudo-random synthetic asset
//
//    Output:
//        random candle open price
//        random candle high price
//        random candle low price
//        random candle close price
//        random volume
//        candle change
//        true range
// ------------------------------------------------------------------------------------

random_asset(method, intrabar_volatility, price_multiplier, seed) =>
//{
    float random_change = random_value(method, timenow + seed)

    float random_close = (100 + cum(random_change)) * price_multiplier
    float random_open = random_close[1]

    float random_wick_range = random_wick(method, random_change, intrabar_volatility, timenow / 2 + seed) * price_multiplier
    float random_wick_intercept = abs(min(1, random_value(method, timenow / 3 + seed) / 2))

    float upper_wick = na
    float lower_wick = na

    if (rand(method, 1, timenow / 4) > 0.5)
        upper_wick := random_wick_range * random_wick_intercept
        lower_wick := random_wick_range - upper_wick
    else
        lower_wick := random_wick_range * random_wick_intercept
        upper_wick := random_wick_range - lower_wick

    float random_high = max(random_close, random_open) + upper_wick
    float random_low = min(random_close, random_open) - lower_wick

    float random_volume = abs(sma(random_change, 3)) * 100
    float random_volume_dev = abs(random_volume - sma(random_volume, 20))
    random_volume := random_volume_dev + sma(random_volume, 20)

    float random_tr = na(random_close[1]) ?
         random_high - random_low :
         max(random_high - random_low, abs(random_high - random_close[1]), abs(random_low - random_close[1]))

    [random_open, random_high, random_low, random_close, random_volume, random_change * price_multiplier, random_tr]
//}



// ------------------------------------------------------------------------------------
//    Used to plot candles correctly
// ------------------------------------------------------------------------------------

bar(is_up_bar, o, c, series) =>
//{
    if (is_up_bar)
        c > o ? series : na
    else
        c > o ? na : series
//}

//} Functions



// ------------------------------------------------------------------------------------
//    Main code
// ------------------------------------------------------------------------------------
//{

// Generate the synthetic asset
[random_open, random_high, random_low, random_close, random_volume, random_change, random_tr] =
     random_asset(method, intrabar_volatility, price_multiplier, seed)

//} Main code



// ------------------------------------------------------------------------------------
//    Plotting
// ------------------------------------------------------------------------------------
//{

plotcandle(
     open  = bar(UP_BAR, random_open, random_close, random_open),
     high  = bar(UP_BAR, random_open, random_close, random_high),
     low   = bar(UP_BAR, random_open, random_close, random_low),
     close = bar(UP_BAR, random_open, random_close, random_close),
     title = "Up-Candles",
     color = up_color,
     wickcolor = up_color,
     bordercolor = up_border_color)

plotcandle(
     open  = bar(DOWN_BAR, random_open, random_close, random_open),
     high  = bar(DOWN_BAR, random_open, random_close, random_high),
     low   = bar(DOWN_BAR, random_open, random_close, random_low),
     close = bar(DOWN_BAR, random_open, random_close, random_close),
     title = "Down-Candles",
     color = down_color,
     wickcolor = down_color,
     bordercolor = down_border_color)

plot(random_volume, "Volume", histbase = 0, color = random_close > random_open ? up_vol_color : down_vol_color, transp = 50, style = plot.style_columns, display = display.none)
plot(random_change, "Change", color = color.white, display = display.none)
plot(random_tr, "True Range", histbase = 0, color = color.blue, style = plot.style_columns, display = display.none)

//} Plotting