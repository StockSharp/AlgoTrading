// This work is licensed under Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC BY-NC-SA 4.0) https://creativecommons.org/licenses/by-nc-sa/4.0/
// © Trendoscope Pty Ltd, Trendoscope®
//                                       ░▒
//                                  ▒▒▒   ▒▒
//                              ▒▒▒▒▒     ▒▒
//                      ▒▒▒▒▒▒▒░     ▒     ▒▒
//                  ▒▒▒▒▒▒           ▒     ▒▒
//             ▓▒▒▒       ▒        ▒▒▒▒▒▒▒▒▒▒▒
//   ▒▒▒▒▒▒▒▒▒▒▒ ▒        ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
//   ▒  ▒       ░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░
//   ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒
//   ▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒ ▒▒
//    ▒▒▒▒▒         ▒▒▒▒▒▒▒
//                 ▒▒▒▒▒▒▒▒▒
//                ▒▒▒▒▒ ▒▒▒▒▒
//               ░▒▒▒▒   ▒▒▒▒▓      ████████╗██████╗ ███████╗███╗   ██╗██████╗  ██████╗ ███████╗ ██████╗ ██████╗ ██████╗ ███████╗
//              ▓▒▒▒▒     ▒▒▒▒      ╚══██╔══╝██╔══██╗██╔════╝████╗  ██║██╔══██╗██╔═══██╗██╔════╝██╔════╝██╔═══██╗██╔══██╗██╔════╝
//              ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒        ██║   ██████╔╝█████╗  ██╔██╗ ██║██║  ██║██║   ██║███████╗██║     ██║   ██║██████╔╝█████╗
//             ▒▒▒▒▒       ▒▒▒▒▒       ██║   ██╔══██╗██╔══╝  ██║╚██╗██║██║  ██║██║   ██║╚════██║██║     ██║   ██║██╔═══╝ ██╔══╝
//            ▒▒▒▒▒         ▒▒▒▒▒      ██║   ██║  ██║███████╗██║ ╚████║██████╔╝╚██████╔╝███████║╚██████╗╚██████╔╝██║     ███████╗
//             ▒▒             ▒
//@version=6

// @description Library to get detailed higher timeframe candle information
library('HTFCandlesLib', overlay = true)

// @type LTFCandle type. Replica of Candle. Created to avoid issues with respect to runtime errors
// @field o Open price of the candle
// @field h High price of the candle
// @field l Low price of the candle
// @field c Close price of the candle
// @field barindex Bar Index of the candle
// @field bartime Bar time of the candle
// @field bartimeclose Bar time of the candle
export type LTFCandle
    float o = open
    float h = high
    float l = low
    float c = close
    int barindex = bar_index
    int bartime = time
    int bartimeclose = time_close

// @type Candle represents the data related to a candle
// @field o Open price of the candle
// @field h High price of the candle
// @field l Low price of the candle
// @field c Close price of the candle
// @field barindex Bar Index of the candle
// @field bartime Bar time of the candle
// @field lo Lower timeframe candle that records the open price of the current candle.
// @field lh Lower timeframe candle that records the high price of the current candle.
// @field ll Lower timeframe candle that records the low price of the current candle.
// @field lc Lower timeframe candle that records the close price of the current candle.
// @field last Link to last candle of the series if any
// @field direction Direction of the candle with respect to last Candle
export type Candle
    float o = open
    float h = high
    float l = low
    float c = close
    int barindex = bar_index
    int bartime = time_close
    LTFCandle lo
    LTFCandle lh
    LTFCandle ll
    LTFCandle lc
    Candle last = na
    float direction = 0

// @function Returns OHLC values, BarIndex of higher and lower timeframe candles in string format
// @param this Current Candle object
// @param delimeter delimeter to join the string components of the candle
// @returns String representation of the Candle
export method tostring(Candle this, string delimeter = '\n') =>
    array.from('O:' + str.tostring(this.o, format.mintick), 'H:' + str.tostring(this.h, format.mintick), 'L:' + str.tostring(this.l, format.mintick), 'C:' + str.tostring(this.c, format.mintick), str.format('Bars : {0} ({1}-{2})', this.barindex, this.lo.barindex, this.lc.barindex)).join(delimeter)

getLtfCandle(isChartTimeframe) =>
    LTFCandle.new(bartimeclose = isChartTimeframe ? time : time_close)

// @function Returns higher timeframe OHLC options with given offset. To be used within request.security
// @param offset Offset to current bar index
// @returns [open, high, low, close, bar_index, time, time_close] for given timeframe in security call
export getOHLC(int offset = 1) =>
    [open[offset], high[offset], low[offset], close[offset], bar_index[offset], time[offset], time_close[offset]]

// @function Gets the current candle along with reassigned ltf components. To be used with request.security to capture higher timeframe candle data
// @param o Open price of the candle
// @param h High price of the candle
// @param l Low price of the candle
// @param c Close price of the candle
// @param b Bar Index of the candle
// @param t Bar time of the candle
// @param isChartTimeframe true if using current chart timeframe, false otherwise
// @returns Candle object with embedded lower timeframe key candles in them
export getCandleFromOhlc(float o, float h, float l, float c, int b, int t, bool isChartTimeframe) =>
    Candle candle = na
    var firstLtfCandle = getLtfCandle(isChartTimeframe)
    currentCandle = getLtfCandle(isChartTimeframe)

    ltfCandle = currentCandle
    var LTFCandle lo = na
    var LTFCandle ll = na
    var LTFCandle lh = na
    var LTFCandle lc = na
    var Candle lastCandle = na
    if not na(o) and not na(c) and firstLtfCandle.bartime < t
        llo = lo
        lll = ll
        llh = lh
        llc = lc
        direction = na(lastCandle) ? 1 : math.sign(c - lastCandle.c)
        candle := Candle.new(o, h, l, c, b, t, llo, llh, lll, llc, lastCandle, direction)
        lastCandle := candle
        lo := na
        ll := na
        lh := na
        lc := na
        lc
    lo := na(lo) ? ltfCandle : lo
    ll := na(ll) ? ltfCandle : ltfCandle.l < ll.l ? ltfCandle : ll
    lh := na(lh) ? ltfCandle : ltfCandle.h > lh.h ? ltfCandle : lh
    lc := ltfCandle
    not na(candle) ? candle : na

// @function Draws the current candle using boxes and lines for body and wicks
// @param this Current Candle object
// @param bullishColor color for bullish representation
// @param bearishColor color for bearish representation
// @param printDescription if set to true prints the description
// @returns Current candle object
export method draw(Candle this, color bullishColor = color.lime, color bearishColor = color.orange, bool printDescription = true) =>
    if not na(this.last)
        direction = math.sign(this.c - this.o) > 0 ? bullishColor : bearishColor
        cDirection = math.sign(this.c - this.last.c) > 0 ? bullishColor : bearishColor
        start = chart.point.new(this.lo.bartime, this.lo.barindex, this.o)
        end = chart.point.new(this.lc.bartime, this.lc.barindex, this.c)
        box.new(start, end, cDirection, 1, line.style_solid, extend.none, xloc.bar_time, color.new(direction, 90), printDescription ? this.tostring() : '', size.small, chart.fg_color)
        upperWickstart = chart.point.new(this.lh.bartime, this.lh.barindex, math.max(this.c, this.o))
        upperWickEnd = chart.point.new(this.lh.bartime, this.lh.barindex, this.h)
        lowerWickStart = chart.point.new(this.ll.bartime, this.ll.barindex, math.min(this.c, this.o))
        lowerWickEnd = chart.point.new(this.ll.bartime, this.ll.barindex, this.l)
        line.new(upperWickstart, upperWickEnd, xloc.bar_time, extend.none, cDirection, width = 5)
        line.new(lowerWickStart, lowerWickEnd, xloc.bar_time, extend.none, cDirection, width = 5)
    this

// ****************************************************** Sample Indicator ******************************************************************* //

// timeframe = input.timeframe('M', 'Timeframe')
// bullishColor = input.color(color.lime, '', inline='c')
// bearishColor = input.color(color.orange, '', inline='c')

// selectedTimeframe = timeframe.in_seconds(timeframe)
// chartTimeframe = timeframe.in_seconds()

// [oo, hh, ll, cc, bb, tt,ttc] = request.security('', timeframe, getOHLC(), barmerge.gaps_on, barmerge.lookahead_on)
// currentCandle = getCandleFromOhlc(oo, hh, ll, cc, bb, tt, false)

// if(not na(currentCandle))
//     currentCandle.draw(bullishColor, bearishColor)

// lastClose = na(currentCandle)? na : currentCandle.c

// plot(lastClose, "HTFClose", offset=-1)