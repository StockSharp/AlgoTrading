//@version=5
strategy("SpeedBullish Strategy Confirm V6.2", overlay=true, initial_capital=100000, default_qty_type=strategy.percent_of_equity, default_qty_value=10)

// ===== Input Parameters =====
pivot_left = input.int(3, title="Pivot Left Bars")
pivot_right = input.int(3, title="Pivot Right Bars")
macd_fast = input.int(8, title="MACD Fast Length")
macd_slow = input.int(21, title="MACD Slow Length")
macd_signal = input.int(6, title="MACD Signal Smoothing")
rsi_length = input.int(14, title="RSI Length")
rsi_entry_level = input.int(50, title="RSI Threshold")

// ===== Risk Management Parameters =====
tp_points = input.float(50, title="Take Profit (Points)")
sl_points = input.float(30, title="Stop Loss (Points)")
trailing_distance_points = input.float(300, title="Trailing Stop Distance (Points)")

// ===== Dynamic Confirmation Parameters =====
use_atr_confirmation = input.bool(true, title="Use ATR Confirmation")
atr_length = input.int(14, title="ATR Length")
atr_multiplier = input.float(1.5, title="ATR Multiplier")

use_volume_confirmation = input.bool(true, title="Use Volume Confirmation")
volume_length = input.int(20, title="Volume SMA Length")
volume_threshold_multiplier = input.float(1.0, title="Volume Threshold Multiplier")

use_pivot_confirmation = input.bool(true, title="Use Pivot Confirmation")

// ===== Webhook Settings =====
webhook_url = input.string("https://your-server.com/webhook.php", title="Webhook URL")
secret_key = input.string("your_secret_key", title="Secret Key")

// ===== HLCC/4 Calculation =====
hlcc4 = (high + low + close + close) / 4

// ===== EMA Calculation =====
ema10 = ta.ema(hlcc4, 10)
ema15 = ta.ema(hlcc4, 15)

// ===== MACD Calculation =====
[macdLine, signalLine, _] = ta.macd(close, macd_fast, macd_slow, macd_signal)
macd_hist = macdLine - signalLine

// ===== RSI Calculation =====
rsiValue = ta.rsi(close, rsi_length)

// ===== ATR and Volume Confirmation =====
atr_value = ta.atr(atr_length)

high_volatility = true
if use_atr_confirmation
    high_volatility := atr_value > atr_multiplier * ta.sma(atr_value, atr_length)

high_volume = true
if use_volume_confirmation
    volume_threshold = ta.sma(volume, volume_length) * volume_threshold_multiplier
    high_volume := volume > volume_threshold

// ===== Find Pivots =====
var float pl = na
var float ph = na
var float lastLow = na
var float lastHigh = na
var int lastLowBar = na
var int lastHighBar = na
possibleW = true
possibleM = true

if use_pivot_confirmation
    ph := ta.pivothigh(high, pivot_left, pivot_right)
    pl := ta.pivotlow(low, pivot_left, pivot_right)
    possibleW := false
    possibleM := false

    if not na(pl)
        if na(lastLow)
            lastLow := pl
            lastLowBar := bar_index
        else
            if pl > lastLow
                possibleW := true
            lastLow := pl
            lastLowBar := bar_index

    if not na(ph)
        if na(lastHigh)
            lastHigh := ph
            lastHighBar := bar_index
        else
            if ph < lastHigh
                possibleM := true
            lastHigh := ph
            lastHighBar := bar_index

// ===== Conditions =====
macd_cross_up = ta.crossover(macd_hist, 0)
macd_cross_down = ta.crossunder(macd_hist, 0)

rsi_ok_buy = rsiValue > rsi_entry_level
rsi_ok_sell = rsiValue < rsi_entry_level

ema_ok_buy = close > ema10 or close > ema15
ema_ok_sell = close < ema10 or close < ema15

buyCondition = ema_ok_buy and macd_cross_up and rsi_ok_buy
sellCondition = ema_ok_sell and macd_cross_down and rsi_ok_sell

if use_atr_confirmation
    buyCondition := buyCondition and high_volatility
    sellCondition := sellCondition and high_volatility

if use_volume_confirmation
    buyCondition := buyCondition and high_volume
    sellCondition := sellCondition and high_volume

// ===== Plots =====
plot(ema10, color=color.blue, title="EMA 10")
plot(ema15, color=color.red, title="EMA 15")

plotshape(use_pivot_confirmation and not na(pl), title="Pivot Low", location=location.belowbar, color=color.green, style=shape.triangleup, size=size.tiny)
plotshape(use_pivot_confirmation and not na(ph), title="Pivot High", location=location.abovebar, color=color.red, style=shape.triangledown, size=size.tiny)

plotshape(buyCondition, title="Buy Signal", location=location.belowbar, color=color.green, style=shape.labelup, text="BUY", size=size.small)
plotshape(sellCondition, title="Sell Signal", location=location.abovebar, color=color.red, style=shape.labeldown, text="SELL", size=size.small)

if use_pivot_confirmation and (possibleW and not na(lastLowBar))
    line.new(x1=lastLowBar, y1=lastLow, x2=bar_index, y2=low, color=color.green, width=2)
if use_pivot_confirmation and (possibleM and not na(lastHighBar))
    line.new(x1=lastHighBar, y1=lastHigh, x2=bar_index, y2=high, color=color.red, width=2)

bgcolor(buyCondition ? color.new(color.green, 90) : na)
bgcolor(sellCondition ? color.new(color.red, 90) : na)

plot(rsiValue, color=color.new(color.blue, 0), linewidth=1, title="RSI")
plot(macd_hist, color=color.new(color.purple, 0), linewidth=1, title="MACD Histogram")

// ===== Strategy Orders =====
if buyCondition and strategy.position_size <= 0
    long_tp_price = close + tp_points * syminfo.mintick
    long_sl_price = close - sl_points * syminfo.mintick
    strategy.entry("Buy", strategy.long)
    strategy.exit("Take Profit", from_entry="Buy", limit=long_tp_price)
    strategy.exit("Trailing Stop", from_entry="Buy", trail_points=trailing_distance_points * syminfo.mintick, trail_offset=trailing_distance_points * syminfo.mintick)
    buy_payload = '{"symbol":"' + syminfo.ticker + '","action":"buy","price":' + str.tostring(close) + '}'
    alert(buy_payload, alert.freq_once_per_bar_close)

if sellCondition and strategy.position_size >= 0
    short_tp_price = close - tp_points * syminfo.mintick
    short_sl_price = close + sl_points * syminfo.mintick
    strategy.entry("Sell", strategy.short)
    strategy.exit("Take Profit", from_entry="Sell", limit=short_tp_price)
    strategy.exit("Trailing Stop", from_entry="Sell", trail_points=trailing_distance_points * syminfo.mintick, trail_offset=trailing_distance_points * syminfo.mintick)
    sell_payload = '{"symbol":"' + syminfo.ticker + '","action":"sell","price":' + str.tostring(close) + '}'
    alert(sell_payload, alert.freq_once_per_bar_close)