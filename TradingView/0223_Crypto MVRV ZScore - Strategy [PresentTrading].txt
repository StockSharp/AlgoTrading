// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© PresentTrading

// The strategy hinges on the Market Value to Realized Value (MVRV) Z-Score, a financial metric tailored for cryptocurrencies, specifically Bitcoin in this context.
// This score helps identify whether Bitcoin is undervalued or overvalued relative to its 'realized' price.

//@version=5
strategy("Crypto MVRV ZScore - Strategy [PresentTrading]",shorttitle = "Crypto MVRV ZScore - Strategy [PresentTrading]" , overlay = false, precision=3,
 commission_value= 0.1, commission_type=strategy.commission.percent, slippage= 1,
  currency=currency.USD, default_qty_type = strategy.percent_of_equity, default_qty_value = 10, initial_capital= 10000)

// The setting of input
tradeDirection = input.string(title="Trade Direction", defval="Both", options=["Both", "Long", "Short"])
zscoreCalculationPeriod = input.int(252, "Z-Score Calculation Period")
longEntryThreshold = input.float(0.382, "Long Entry Threshold")
shortEntryThreshold = input.float(-0.382, "Short Entry Threshold")

// Market Capitalization Data Queries
bitcoinMarketCap = request.security("GLASSNODE:BTC_MARKETCAP", "D", close)
realMarketCap = request.security("COINMETRICS:BTC_MARKETCAPREAL", "D", close)

// Initialize variables for calculation
var marketCapArray = array.new<float>()
var mvrvRatio = 0.0
var marketZscore = 0.0

// Updating market cap data and calculating MVRV and Z-Score
array.push(marketCapArray, bitcoinMarketCap)
marketCapStdDev = array.stdev(marketCapArray)
mvrvRatio := bitcoinMarketCap / realMarketCap
marketZscore := (bitcoinMarketCap - realMarketCap) / marketCapStdDev


// Calculating the spread Z-Score for trading signals
spreadZScoreRaw = (marketZscore - mvrvRatio - ta.sma(marketZscore - mvrvRatio, zscoreCalculationPeriod)) / ta.stdev(marketZscore - mvrvRatio, zscoreCalculationPeriod)
spreadZScore = ta.sma(spreadZScoreRaw,2)

// Horizontal lines for visual reference points
hline(3, color=color.blue)
hline(longEntryThreshold, color=color.green)
hline(0, color=color.white)
hline(shortEntryThreshold, color=color.red)
hline(-3, color=color.blue)
plot(spreadZScore, "Market Z-Score", color=color.yellow, linewidth=1)

// Defining trade entry and exit conditions based on Z-Score spread
longEntryCondition = ta.crossover(spreadZScore, longEntryThreshold)
longExitCondition = ta.crossunder(spreadZScore, shortEntryThreshold)
shortEntryCondition = ta.crossunder(spreadZScore, shortEntryThreshold)
shortExitCondition = ta.crossover(spreadZScore, longEntryThreshold)


// Executing trades based on defined conditions and user input
if longEntryCondition and (tradeDirection == "Long" or tradeDirection == "Both")
    strategy.entry("Long", strategy.long)
if longExitCondition and (tradeDirection == "Long" or tradeDirection == "Both")
    strategy.close("Long")

if shortEntryCondition and (tradeDirection == "Short" or tradeDirection == "Both")
    strategy.entry("Short", strategy.short)
if shortExitCondition and (tradeDirection == "Short" or tradeDirection == "Both")
    strategy.close("Short")