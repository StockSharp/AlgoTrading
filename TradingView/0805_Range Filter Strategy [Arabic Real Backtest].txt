//@version=5
strategy(title="Range Filter Strategy [Real Backtest]", shorttitle="RF Strategy", overlay=true,
         process_orders_on_close = false,     // حل التأخير
         calc_on_every_tick = true,           // حل التأخير
         use_bar_magnifier = true,            // حل التأخير
         fill_orders_on_standard_ohlc = false, // حل التأخير
         max_lines_count = 500, max_labels_count = 500, max_boxes_count = 500)

// ═══════════════════════════════════════════════════════════════════════════════
// 🎛️ CORE RANGE FILTER SETTINGS
// ═══════════════════════════════════════════════════════════════════════════════
var g_CORE = "🎯 Range Filter Core"
src = input(defval=close, title="المصدر", group = g_CORE)
per = input.int(defval=100, minval=1, title="فترة العينة", tooltip="100 للبتكوين 5د، عدل للأسواق الأخرى", group = g_CORE)
mult = input.float(defval=3.0, minval=0.1, title="مضاعف المدى", tooltip="3.0 للبتكوين، قلل للأسواق أقل تقلباً", group = g_CORE)

// ═══════════════════════════════════════════════════════════════════════════════
// 🎯 REALISTIC EXECUTION SETTINGS
// ═══════════════════════════════════════════════════════════════════════════════
var g_REAL = "🎯 التنفيذ الواقعي"

// Entry Execution
use_realistic_entry = input.bool(true, "استخدام دخول واقعي", tooltip="استخدام HL2 بدلاً من Close", group = g_REAL)
spread_buffer = input.float(2.0, "هامش السبريد (نقاط)", minval=0, tooltip="سبريد إضافي لمحاكاة التكلفة الحقيقية", group = g_REAL)
enable_slippage = input.bool(true, "انزلاق عشوائي", tooltip="إضافة انزلاق عشوائي للواقعية", group = g_REAL)
max_slippage = input.float(1.0, "أقصى انزلاق (نقاط)", minval=0, group = g_REAL)

// Market Conditions
enable_volume_filter = input.bool(false, "فلتر الحجم", group = g_REAL)
min_volume_ratio = input.float(1.2, "نسبة الحجم الأدنى", tooltip="الحجم يجب أن يكون أعلى من المتوسط", group = g_REAL)

// Confirmation
require_confirmation = input.bool(false, "تأكيد الإشارة", group = g_REAL)
confirmation_bars = input.int(1, "شموع التأكيد", minval=0, maxval=3, group = g_REAL)

// ═══════════════════════════════════════════════════════════════════════════════
// 🔔 ALERT SETTINGS
// ═══════════════════════════════════════════════════════════════════════════════
var g_ALERTS = "🔔 التنبيهات"
enable_alerts = input.bool(true, "تفعيل التنبيهات", group = g_ALERTS)
enable_entry_alerts = input.bool(true, "تنبيهات الدخول", group = g_ALERTS)
enable_setup_alerts = input.bool(false, "تنبيهات الإعداد", tooltip="تنبيه عند ظهور إشارة قبل التأكيد", group = g_ALERTS)
enable_exit_alerts = input.bool(true, "تنبيهات الخروج", group = g_ALERTS)
enable_status_alerts = input.bool(false, "تنبيهات الحالة", tooltip="تنبيهات تغيير اتجاه المرشح", group = g_ALERTS)

// Alert message customization
custom_symbol = input.string("", "رمز مخصص", tooltip="اتركه فارغ لاستخدام الرمز الحالي", group = g_ALERTS)
include_price = input.bool(true, "تضمين السعر", group = g_ALERTS)
include_time = input.bool(true, "تضمين الوقت", group = g_ALERTS)
// ═══════════════════════════════════════════════════════════════════════════════
// 💰 RISK MANAGEMENT
// ═══════════════════════════════════════════════════════════════════════════════
var g_RISK = "💰 إدارة المخاطر"
use_fixed_rr = input.bool(true, "استخدام نسبة ثابتة", group = g_RISK)
risk_points = input.float(50, "وقف الخسارة (نقاط)", group = g_RISK)
reward_points = input.float(100, "هدف الربح (نقاط)", group = g_RISK)
max_trades_per_day = input.int(5, "أقصى صفقات في اليوم", minval=1, group = g_RISK)

// ═══════════════════════════════════════════════════════════════════════════════
// 🎨 VISUAL SETTINGS
// ═══════════════════════════════════════════════════════════════════════════════
var g_VIS = "🎨 الإعدادات المرئية"
show_filter = input.bool(true, "عرض Range Filter", group = g_VIS)
show_bands = input.bool(true, "عرض النطاقات", group = g_VIS)
show_signals = input.bool(true, "عرض إشارات الدخول", group = g_VIS)
show_dashboard = input.bool(true, "عرض لوحة الإعدادات", group = g_VIS)

// Enhanced Colors - تعريف الألوان هنا قبل الاستخدام
upColor = color.new(#00ff88, 0)          // أخضر فاتح مميز
downColor = color.new(#ff4444, 0)        // أحمر جذاب
midColor = color.new(#4a90e2, 50)        // أزرق متوسط
signal_up_color = color.new(#00ff88, 20)     // أخضر فاتح للإشارات
signal_down_color = color.new(#ff4444, 20)   // أحمر للإشارات
band_up_color = color.new(#00ff88, 70)       // أخضر شفاف للنطاق العلوي
band_down_color = color.new(#ff4444, 70)     // أحمر شفاف للنطاق السفلي
fill_up_color = color.new(#00ff88, 90)       // تعبئة خضراء
fill_down_color = color.new(#ff4444, 90)     // تعبئة حمراء

// ═══════════════════════════════════════════════════════════════════════════════
// 🧮 RANGE FILTER CALCULATIONS
// ═══════════════════════════════════════════════════════════════════════════════

// Smooth Average Range
smoothrng(x, t, m) =>
    wper = t * 2 - 1
    avrng = ta.ema(math.abs(x - x[1]), t)
    smoothrng = ta.ema(avrng, wper) * m
    smoothrng

smrng = smoothrng(src, per, mult)

// Range Filter
rngfilt(x, r) =>
    rngfilt = x
    rngfilt := x > nz(rngfilt[1]) ? x - r < nz(rngfilt[1]) ? nz(rngfilt[1]) : x - r :
       x + r > nz(rngfilt[1]) ? nz(rngfilt[1]) : x + r
    rngfilt

filt = rngfilt(src, smrng)

// Filter Direction
upward = 0.0
upward := filt > filt[1] ? nz(upward[1]) + 1 : filt < filt[1] ? 0 : nz(upward[1])
downward = 0.0
downward := filt < filt[1] ? nz(downward[1]) + 1 : filt > filt[1] ? 0 : nz(downward[1])

// Target Bands
hband = filt + smrng
lband = filt - smrng

// ═══════════════════════════════════════════════════════════════════════════════
// 🎯 REALISTIC ENTRY PRICE CALCULATION
// ═══════════════════════════════════════════════════════════════════════════════

get_realistic_price(is_long, signal_price) =>
    // Use HL2 if enabled, otherwise use signal price
    base_price = use_realistic_entry ? (high + low) / 2 : signal_price

    // Add spread
    spread_adj = spread_buffer

    // Add random slippage if enabled
    if enable_slippage
        random_slip = math.random(0, max_slippage)
        spread_adj += random_slip

    // Apply adjustment
    final_price = is_long ? base_price + spread_adj : base_price - spread_adj
    final_price

// ═══════════════════════════════════════════════════════════════════════════════
// 📊 SIGNAL GENERATION
// ═══════════════════════════════════════════════════════════════════════════════

// Basic Conditions
longCond = src > filt and src > src[1] and upward > 0 or src > filt and src < src[1] and upward > 0
shortCond = src < filt and src < src[1] and downward > 0 or src < filt and src > src[1] and downward > 0

// State Management
CondIni = 0
CondIni := longCond ? 1 : shortCond ? -1 : CondIni[1]

// Base Signals
longSignal = longCond and CondIni[1] == -1
shortSignal = shortCond and CondIni[1] == 1

// Volume Filter
volume_ok = not enable_volume_filter or volume > ta.sma(volume, 20) * min_volume_ratio

// Confirmation Filter
var int long_setup_bar = na
var int short_setup_bar = na
var bool long_waiting = false
var bool short_waiting = false

// Reset setup tracking
if not require_confirmation
    long_setup_bar := na
    short_setup_bar := na
    long_waiting := false
    short_waiting := false

// Track setup signals
if longSignal and volume_ok and not long_waiting
    if require_confirmation
        long_setup_bar := bar_index
        long_waiting := true
    else
        long_setup_bar := bar_index  // For immediate execution

if shortSignal and volume_ok and not short_waiting
    if require_confirmation
        short_setup_bar := bar_index
        short_waiting := true
    else
        short_setup_bar := bar_index  // For immediate execution

// Check confirmation
long_confirmed = false
short_confirmed = false

if not na(long_setup_bar)
    if require_confirmation
        if bar_index >= long_setup_bar + confirmation_bars
            long_confirmed := true
            long_waiting := false
    else
        long_confirmed := true

if not na(short_setup_bar)
    if require_confirmation
        if bar_index >= short_setup_bar + confirmation_bars
            short_confirmed := true
            short_waiting := false
    else
        short_confirmed := true

// Daily Trade Limit
var int daily_trades = 0
var int last_trade_day = 0

if dayofweek != dayofweek[1]
    daily_trades := 0
    last_trade_day := dayofweek

can_trade = daily_trades < max_trades_per_day

// ═══════════════════════════════════════════════════════════════════════════════
// 💹 STRATEGY EXECUTION
// ═══════════════════════════════════════════════════════════════════════════════

// Entry Conditions
longCondition = long_confirmed and can_trade and strategy.position_size == 0
shortCondition = short_confirmed and can_trade and strategy.position_size == 0

// ═══════════════════════════════════════════════════════════════════════════════
// 🔔 ALERT SYSTEM
// ═══════════════════════════════════════════════════════════════════════════════

// Helper function to build alert messages
get_alert_message(action, entry_price, sl_price, tp_price) =>
    symbol_name = custom_symbol != "" ? custom_symbol : syminfo.ticker
    price_info = include_price ? " | السعر: " + str.tostring(entry_price, "#.##") : ""
    time_info = include_time ? " | الوقت: " + str.format_time(timenow, "HH:mm") : ""
    sl_info = not na(sl_price) ? " | وقف: " + str.tostring(sl_price, "#.##") : ""
    tp_info = not na(tp_price) ? " | هدف: " + str.tostring(tp_price, "#.##") : ""

    symbol_name + " - " + action + price_info + sl_info + tp_info + time_info

// Track previous states for alerts
var bool prev_upward_state = na
var bool prev_downward_state = na
var float prev_entry_price = na

// Current states
current_upward = upward > 0
current_downward = downward > 0

// ═══════════════════════════════════════════════════════════════════════════════
// 🚨 REAL-TIME ALERTS (No Delay)
// ═══════════════════════════════════════════════════════════════════════════════

// 1. SETUP ALERTS (Before confirmation)
if enable_alerts and enable_setup_alerts
    if longSignal and volume_ok
        setup_price = get_realistic_price(true, close)
        sl_price = setup_price - risk_points
        tp_price = setup_price + reward_points
        message = get_alert_message("🎯 إعداد شراء محتمل", setup_price, sl_price, tp_price)
        alert(message, alert.freq_once_per_bar)

    if shortSignal and volume_ok
        setup_price = get_realistic_price(false, close)
        sl_price = setup_price + risk_points
        tp_price = setup_price - reward_points
        message = get_alert_message("🎯 إعداد بيع محتمل", setup_price, sl_price, tp_price)
        alert(message, alert.freq_once_per_bar)

// 2. ENTRY ALERTS (Exact same logic as strategy)
if enable_alerts and enable_entry_alerts
    if longCondition
        entry_price = get_realistic_price(true, close)
        sl_price = entry_price - risk_points
        tp_price = entry_price + reward_points
        message = get_alert_message("🟢 دخول شراء", entry_price, sl_price, tp_price)
        alert(message, alert.freq_once_per_bar)

    if shortCondition
        entry_price = get_realistic_price(false, close)
        sl_price = entry_price + risk_points
        tp_price = entry_price - reward_points
        message = get_alert_message("🔴 دخول بيع", entry_price, sl_price, tp_price)
        alert(message, alert.freq_once_per_bar)

// 3. EXIT ALERTS
if enable_alerts and enable_exit_alerts and strategy.position_size != 0
    // Track position changes for exit alerts
    if strategy.position_size[1] != 0 and strategy.position_size == 0
        exit_price = close
        if strategy.position_size[1] > 0
            message = get_alert_message("📤 خروج شراء", exit_price, float(na), float(na))
            alert(message, alert.freq_once_per_bar)
        else
            message = get_alert_message("📤 خروج بيع", exit_price, float(na), float(na))
            alert(message, alert.freq_once_per_bar)

// 4. STATUS ALERTS (Filter direction changes)
if enable_alerts and enable_status_alerts
    if current_upward and not prev_upward_state
        message = get_alert_message("📈 المرشح صاعد", filt, float(na), float(na))
        alert(message, alert.freq_once_per_bar)

    if current_downward and not prev_downward_state
        message = get_alert_message("📉 المرشح هابط", filt, float(na), float(na))
        alert(message, alert.freq_once_per_bar)

// Update previous states
prev_upward_state := current_upward
prev_downward_state := current_downward

// ═══════════════════════════════════════════════════════════════════════════════
// 📱 ALERT CONDITIONS (For TradingView Alert System)
// ═══════════════════════════════════════════════════════════════════════════════

// These can be used to create alerts in TradingView alert panel
alertcondition(longCondition, title="🟢 Range Filter - شراء", message="إشارة شراء من Range Filter")
alertcondition(shortCondition, title="🔴 Range Filter - بيع", message="إشارة بيع من Range Filter")
alertcondition(longCondition or shortCondition, title="🎯 Range Filter - أي إشارة", message="إشارة دخول من Range Filter")

// Setup alerts (before confirmation)
alertcondition(longSignal and volume_ok, title="🎯 Range Filter - إعداد شراء", message="إعداد شراء محتمل")
alertcondition(shortSignal and volume_ok, title="🎯 Range Filter - إعداد بيع", message="إعداد بيع محتمل")

// Filter direction alerts
alertcondition(current_upward and not prev_upward_state, title="📈 Range Filter - اتجاه صاعد", message="المرشح أصبح صاعد")
alertcondition(current_downward and not prev_downward_state, title="📉 Range Filter - اتجاه هابط", message="المرشح أصبح هابط")

// Execute Trades
if longCondition
    real_entry_price = get_realistic_price(true, close)
    strategy.entry("Long", strategy.long, comment="Long @ " + str.tostring(real_entry_price, "#.##"))
    daily_trades += 1
    // Reset setup tracking after entry
    long_setup_bar := na
    long_waiting := false

if shortCondition
    real_entry_price = get_realistic_price(false, close)
    strategy.entry("Short", strategy.short, comment="Short @ " + str.tostring(real_entry_price, "#.##"))
    daily_trades += 1
    // Reset setup tracking after entry
    short_setup_bar := na
    short_waiting := false

// Exit Strategy
if use_fixed_rr and strategy.position_size != 0
    if strategy.position_size > 0
        strategy.exit("Long Exit", "Long", profit=reward_points, loss=risk_points, comment="Long Exit")
    if strategy.position_size < 0
        strategy.exit("Short Exit", "Short", profit=reward_points, loss=risk_points, comment="Short Exit")

// ═══════════════════════════════════════════════════════════════════════════════
// 🎨 VISUAL ELEMENTS
// ═══════════════════════════════════════════════════════════════════════════════

// Colors
filtcolor = upward > 0 ? upColor : downward > 0 ? downColor : midColor

// Plots
filtplot = plot(show_filter ? filt : na, color=filtcolor, linewidth=3, title="Range Filter")
hbandplot = plot(show_bands ? hband : na, color=band_up_color, linewidth=1, title="High Target")
lbandplot = plot(show_bands ? lband : na, color=band_down_color, linewidth=1, title="Low Target")

// Fills
fill(hbandplot, filtplot, color=fill_up_color, title="High Target Range")
fill(lbandplot, filtplot, color=fill_down_color, title="Low Target Range")

// Signals
plotshape(show_signals and longCondition, title="Buy Signal", text="BUY", textcolor=color.white,
         style=shape.labelup, size=size.normal, location=location.belowbar, color=signal_up_color)
plotshape(show_signals and shortCondition, title="Sell Signal", text="SELL", textcolor=color.white,
         style=shape.labeldown, size=size.normal, location=location.abovebar, color=signal_down_color)

// ═══════════════════════════════════════════════════════════════════════════════
// 📊 DASHBOARD
// ═══════════════════════════════════════════════════════════════════════════════

if show_dashboard and barstate.islast
    var table dashboard = table.new(position.top_right, 3, 15, bgcolor = color.new(color.white, 5), border_width = 2, frame_color = color.new(#4a90e2, 0))

    // Header
    table.cell(dashboard, 0, 0, "🎛️ Range Filter Strategy", text_color = color.white, bgcolor = color.new(#4a90e2, 0), text_size = size.small)
    table.cell(dashboard, 1, 0, "الحالة", text_color = color.white, bgcolor = color.new(#4a90e2, 0), text_size = size.small)
    table.cell(dashboard, 2, 0, "القيمة", text_color = color.white, bgcolor = color.new(#4a90e2, 0), text_size = size.small)

    row = 1

    // Timing Settings
    table.cell(dashboard, 0, row, "⚡ تنفيذ فوري", text_color = color.black, text_size = size.small)
    table.cell(dashboard, 1, row, "✅", text_color = #00ff88, text_size = size.small)
    table.cell(dashboard, 2, row, "نشط", text_color = color.black, text_size = size.small)
    row += 1

    // Core Settings
    table.cell(dashboard, 0, row, "📊 فترة العينة", text_color = color.black, text_size = size.small)
    table.cell(dashboard, 1, row, "✅", text_color = color.green, text_size = size.small)
    table.cell(dashboard, 2, row, str.tostring(per), text_color = color.black, text_size = size.small)
    row += 1

    table.cell(dashboard, 0, row, "⚖️ مضاعف المدى", text_color = color.black, text_size = size.small)
    table.cell(dashboard, 1, row, "✅", text_color = color.green, text_size = size.small)
    table.cell(dashboard, 2, row, str.tostring(mult), text_color = color.black, text_size = size.small)
    row += 1

    // Realistic Settings
    table.cell(dashboard, 0, row, "🎯 دخول واقعي", text_color = color.black, text_size = size.small)
    table.cell(dashboard, 1, row, use_realistic_entry ? "✅" : "❌", text_color = use_realistic_entry ? color.green : color.red, text_size = size.small)
    table.cell(dashboard, 2, row, use_realistic_entry ? "HL2" : "Close", text_color = color.black, text_size = size.small)
    row += 1

    table.cell(dashboard, 0, row, "💰 السبريد", text_color = color.black, text_size = size.small)
    table.cell(dashboard, 1, row, "✅", text_color = color.green, text_size = size.small)
    table.cell(dashboard, 2, row, str.tostring(spread_buffer) + " نقطة", text_color = color.black, text_size = size.small)
    row += 1

    table.cell(dashboard, 0, row, "📈 الانزلاق", text_color = color.black, text_size = size.small)
    table.cell(dashboard, 1, row, enable_slippage ? "✅" : "❌", text_color = enable_slippage ? color.green : color.red, text_size = size.small)
    table.cell(dashboard, 2, row, enable_slippage ? "0-" + str.tostring(max_slippage) : "بدون", text_color = color.black, text_size = size.small)
    row += 1

    table.cell(dashboard, 0, row, "🌊 فلتر الحجم", text_color = color.black, text_size = size.small)
    table.cell(dashboard, 1, row, enable_volume_filter ? "✅" : "❌", text_color = enable_volume_filter ? color.green : color.red, text_size = size.small)
    table.cell(dashboard, 2, row, enable_volume_filter ? str.tostring(min_volume_ratio) + "x" : "معطل", text_color = color.black, text_size = size.small)
    row += 1

    table.cell(dashboard, 0, row, "🔄 تأكيد الإشارة", text_color = color.black, text_size = size.small)
    table.cell(dashboard, 1, row, require_confirmation ? "✅" : "❌", text_color = require_confirmation ? color.green : color.red, text_size = size.small)
    table.cell(dashboard, 2, row, require_confirmation ? str.tostring(confirmation_bars) + " شمعة" : "فوري", text_color = color.black, text_size = size.small)
    row += 1

    table.cell(dashboard, 0, row, "⏳ انتظار تأكيد", text_color = color.black, text_size = size.small)
    table.cell(dashboard, 1, row, (long_waiting or short_waiting) ? "⏳" : "✅", text_color = (long_waiting or short_waiting) ? color.orange : color.green, text_size = size.small)
    table.cell(dashboard, 2, row, long_waiting ? "شراء" : short_waiting ? "بيع" : "جاهز", text_color = color.black, text_size = size.small)
    row += 1

    // Risk Management
    table.cell(dashboard, 0, row, "💰 نسبة المخاطرة", text_color = color.black, text_size = size.small)
    table.cell(dashboard, 1, row, use_fixed_rr ? "✅" : "❌", text_color = use_fixed_rr ? color.green : color.red, text_size = size.small)
    table.cell(dashboard, 2, row, use_fixed_rr ? str.tostring(risk_points) + ":" + str.tostring(reward_points) : "يدوي", text_color = color.black, text_size = size.small)
    row += 1

    // Current Status
    table.cell(dashboard, 0, row, "📊 اتجاه المرشح", text_color = color.black, text_size = size.small)
    table.cell(dashboard, 1, row, upward > 0 ? "📈" : downward > 0 ? "📉" : "➡️", text_color = upward > 0 ? color.green : downward > 0 ? color.red : color.gray, text_size = size.small)
    table.cell(dashboard, 2, row, upward > 0 ? "صاعد" : downward > 0 ? "هابط" : "جانبي", text_color = color.black, text_size = size.small)
    row += 1

    table.cell(dashboard, 0, row, "🔔 التنبيهات", text_color = color.black, text_size = size.small)
    table.cell(dashboard, 1, row, enable_alerts ? "✅" : "❌", text_color = enable_alerts ? color.green : color.red, text_size = size.small)
    table.cell(dashboard, 2, row, enable_alerts ? "نشط" : "معطل", text_color = color.black, text_size = size.small)
    row += 1

    table.cell(dashboard, 0, row, "🔢 صفقات اليوم", text_color = color.black, text_size = size.small)
    table.cell(dashboard, 1, row, daily_trades < max_trades_per_day ? "✅" : "⚠️", text_color = daily_trades < max_trades_per_day ? color.green : color.orange, text_size = size.small)
    table.cell(dashboard, 2, row, str.tostring(daily_trades) + "/" + str.tostring(max_trades_per_day), text_color = color.black, text_size = size.small)