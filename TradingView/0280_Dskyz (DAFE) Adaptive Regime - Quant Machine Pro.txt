//@version=6
strategy("Dskyz (DAFE) Adaptive Regime - Quant Machine Pro", overlay=true, default_qty_type=strategy.fixed, default_qty_value=1, calc_on_order_fills=true, calc_on_every_tick=true)

// 1. ATR SETTINGS
group_atr = "⚡ ATR Settings"
atr_period     = input.int(14, "ATR Period", minval=1, group=group_atr)
atr_multiplier = input.float(1.5, "ATR Multiplier", minval=0.1, step=0.1, group=group_atr)
atr_val        = ta.atr(atr_period)
atr_avg        = ta.sma(atr_val, 50)

// 2. MOVING AVERAGE (MA) SETTINGS
group_ma = "📊 Moving Averages"
fast_ma_length        = input.int(20, "Fast MA Length", minval=1, group=group_ma)
slow_ma_length        = input.int(50, "Slow MA Length", minval=1, group=group_ma)
ma_fast               = ta.ema(close, fast_ma_length)
ma_slow               = ta.ema(close, slow_ma_length)
ma_strength_threshold = input.float(0.5, "MA Strength Threshold", minval=0.0, step=0.1, group=group_ma)
trend_dir = ma_fast > ma_slow + (atr_val * ma_strength_threshold) ? 1 : ma_fast < ma_slow - (atr_val * ma_strength_threshold) ? -1 : 0

// 3. MULTI-TIMEFRAME (HTF) SETTINGS
group_MTA = "⏱️ Multi-Timeframe Inputs"
htf = input.timeframe("D", "HTF for RSI & MACD", group=group_MTA)
htf_rsi_raw = request.security(syminfo.tickerid, htf, ta.rsi(close, 14))
htf_rsi = htf_rsi_raw[1]
[htf_macd_line_raw, htf_macd_signal_raw, htf_macd_hist_raw] = request.security(syminfo.tickerid, htf, ta.macd(close, 12, 26, 9))
htf_macd_line = htf_macd_line_raw[1]
htf_macd_signal = htf_macd_signal_raw[1]
htf_macd_hist = htf_macd_hist_raw[1]
htf_trend_bull = htf_macd_line > htf_macd_signal and htf_rsi > 50
htf_trend_bear = htf_macd_line < htf_macd_signal and htf_rsi < 50

// 4. TRADE/RISK SETTINGS (Futures $-Based, User Friendly)
group_trade = "⚙️ Futures Trade & Risk Settings"
contract_note = "For CME ES: Tick=$12.5, Ticks/Point=4, Multiplier=1. For MES: Tick=$1.25, Ticks/Point=4, Multiplier=0.1, etc."
tick_value      = input.float(12.5, "Tick Value ($)", minval=0.01, group=group_trade, tooltip=contract_note)
ticks_per_point = input.int(4,      "Ticks Per Point", minval=1, group=group_trade, tooltip=contract_note)
contract_mult   = input.float(1,    "Contract Multiplier [Std=1, Micro=0.1]", minval=0.01, step=0.01, group=group_trade, tooltip="Adjust for product size: 1=Standard (ES, NQ), 0.1=Micro (MES, MNQ)")
risk_note = "How much real $ you'll risk per position. Contracts auto-calculated."
risk_per_trade = input.float(300, "Max Risk Per Trade ($)", minval=10, group=group_trade, tooltip=risk_note)
max_contracts  = input.int(5, "Max Number of Contracts", minval=1, group=group_trade, tooltip="Your desk/prop or personal cap. Position size cannot exceed this.")
stop_note = "Default/fixed stop (pts). Turn ON 'ATR-Based Stops' for dynamic adaptation to volatility."
default_stop_points   = input.float(8.0,  "Default Stop (Points)",  minval=0.1, group=group_trade, tooltip=stop_note)
default_target_points = input.float(16.0, "Default Target (Points)", minval=0.1, group=group_trade, tooltip="Set your usual profit target in points.")
use_atr_for_stops     = input.bool(true, "ATR-Based Dynamic Stops/Targets?", group=group_trade, tooltip="ON uses current volatility for stop/target distances.")
atr_stop_mult         = input.float(1.5, "ATR Multiplier (Stop)", minval=0.1, group=group_trade)

// -- Derived for internal use --
point_value = tick_value * ticks_per_point * contract_mult

// 5. ADVANCED INDICATOR CALCULATIONS
adx_len   = 14
up        = ta.change(high)
down      = -ta.change(low)
plus_dm   = na(up) ? na : (up > down and up > 0 ? up : 0)
minus_dm  = na(down) ? na : (down > up and down > 0 ? down : 0)
trur      = ta.rma(ta.tr, adx_len)
plus_di   = 100 * ta.rma(plus_dm, adx_len) / trur
minus_di  = 100 * ta.rma(minus_dm, adx_len) / trur
adx_val   = 100 * ta.rma(math.abs(plus_di - minus_di) / (plus_di + minus_di), adx_len)

bb_basis     = ta.sma(close, 20)
bb_dev       = 2 * ta.stdev(close, 20)
bb_upper     = bb_basis + bb_dev
bb_lower     = bb_basis - bb_dev
bb_width     = (bb_upper - bb_lower) / bb_basis
bb_width_avg = ta.sma(bb_width, 50)

price_range = ta.highest(high, 20) - ta.lowest(low, 20)
range_ratio = price_range / close

// 6. REGIME ASSIGNMENT & PATTERN RECOGNITION
is_trending = adx_val > 20 and math.abs(ma_fast - ma_slow) > atr_val * 0.3 and (htf_trend_bull or htf_trend_bear)
is_range    = adx_val < 25 and range_ratio < 0.03 and not htf_trend_bull and not htf_trend_bear
is_volatile = bb_width > bb_width_avg * 1.5 and atr_val > atr_avg * 1.2 and (htf_rsi > 70 or htf_rsi < 30)
is_quiet    = bb_width < bb_width_avg * 0.8 and atr_val < atr_avg * 0.9
regime      = is_trending ? 1 : is_range ? 2 : is_volatile ? 3 : is_quiet ? 4 : 5
regime_name = regime == 1 ? "Trending" : regime == 2 ? "Range" : regime == 3 ? "Volatile" : regime == 4 ? "Quiet" : "Other"

vol_avg       = ta.sma(volume, 20)
vol_spike     = volume > vol_avg * 1.5
recent_low    = ta.lowest(low, 20)
recent_high   = ta.highest(high, 20)
is_near_support    = low <= recent_low * 1.01
is_near_resistance = high >= recent_high * 0.99

bullish_engulfing = close[1] < open[1] and close > open and close > open[1] and open < close[1] and is_near_support and vol_spike
hammer            = high - low > 3 * math.abs(open - close) and (close - low) / (0.001 + high - low) > 0.6 and is_near_support and vol_spike
morning_star      = close[2] < open[2] and math.abs(close[1] - open[1]) < 0.2 * (high[1] - low[1]) and close > open and close > (open[2] + close[2]) / 2 and is_near_support and vol_spike
piercing          = close[1] < open[1] and close > open and close > (open[1] + close[1]) / 2 and open < close[1] and is_near_support and vol_spike
double_bottom     = low < low[1] and low[1] > low[2] and low[2] < low[3] and close > open and is_near_support and vol_spike

bearish_engulfing = close[1] > open[1] and close < open and close < open[1] and open > close[1] and is_near_resistance and vol_spike
shooting_star     = high - low > 3 * math.abs(open - close) and (high - close) / (0.001 + high - low) > 0.6 and is_near_resistance and vol_spike
evening_star      = close[2] > open[2] and math.abs(close[1] - open[1]) < 0.2 * (high[1] - low[1]) and close < open and close < (open[2] + close[2]) / 2 and is_near_resistance and vol_spike
dark_cloud        = close[1] > open[1] and close < open and close < (open[1] + close[1]) / 2 and open > close[1] and is_near_resistance and vol_spike
double_top        = high > high[1] and high[1] < high[2] and high[2] > high[3] and close < open and is_near_resistance and vol_spike

bull_signal = (bullish_engulfing ? 0.5 : 0.0) +
              (hammer ? (regime == 2 ? 0.4 : 0.2) : 0.0) +
              (morning_star ? 0.2 : 0.0) +
              (piercing ? 0.2 : 0.0) +
              (double_bottom ? (regime == 3 ? 0.3 : 0.15) : 0.0)

bear_signal = (bearish_engulfing ? 0.5 : 0.0) +
              (shooting_star ? (regime == 2 ? 0.4 : 0.2) : 0.0) +
              (evening_star ? 0.2 : 0.0) +
              (dark_cloud ? 0.2 : 0.0) +
              (double_top ? (regime == 3 ? 0.3 : 0.15) : 0.0)

// Multi-Factor Confirmation with HTF
rsi_val   = ta.rsi(close, 14)
[macd_line, macd_signal, macd_hist] = ta.macd(close, 12, 26, 9)
trend_bull = ma_fast > ma_slow
trend_bear = ma_fast < ma_slow
rsi_bull   = rsi_val < 30
rsi_bear   = rsi_val > 70
macd_bull  = macd_line > macd_signal
macd_bear  = macd_line < macd_signal
vol_expansion = atr_val > atr_avg * 1.2
htf_bull_confirm = htf_trend_bull and htf_rsi < 70
htf_bear_confirm = htf_trend_bear and htf_rsi > 30

bull_score = bull_signal + (trend_bull ? 0.2 : 0) + (rsi_bull ? 0.15 : 0) + (macd_bull ? 0.15 : 0) + (vol_expansion ? 0.1 : 0) + (htf_bull_confirm ? 0.2 : 0)
bear_score = bear_signal + (trend_bear ? 0.2 : 0) + (rsi_bear ? 0.15 : 0) + (macd_bear ? 0.15 : 0) + (vol_expansion ? 0.1 : 0) + (htf_bear_confirm ? 0.2 : 0)

// 7. PERFORMANCE TRACKING & ADAPTIVE THRESHOLDS
var float[] regime_pnl_long  = array.new_float(5, 0)
var float[] regime_pnl_short = array.new_float(5, 0)
var int[] regime_win_long    = array.new_int(5, 0)
var int[] regime_loss_long   = array.new_int(5, 0)
var int[] regime_win_short   = array.new_int(5, 0)
var int[] regime_loss_short  = array.new_int(5, 0)
var int entry_regime = na

if barstate.isconfirmed and strategy.closedtrades > 0 and not na(entry_regime)
    last_trade_profit = strategy.closedtrades.profit(strategy.closedtrades - 1)
    last_trade_entry_id = strategy.closedtrades.entry_id(strategy.closedtrades - 1)
    idx = entry_regime - 1
    if last_trade_entry_id == "Long"
        array.set(regime_pnl_long, idx, array.get(regime_pnl_long, idx) + last_trade_profit)
        if last_trade_profit > 0
            array.set(regime_win_long, idx, array.get(regime_win_long, idx) + 1)
        else
            array.set(regime_loss_long, idx, array.get(regime_loss_long, idx) + 1)
    else if last_trade_entry_id == "Short"
        array.set(regime_pnl_short, idx, array.get(regime_pnl_short, idx) + last_trade_profit)
        if last_trade_profit > 0
            array.set(regime_win_short, idx, array.get(regime_win_short, idx) + 1)
        else
            array.set(regime_loss_short, idx, array.get(regime_loss_short, idx) + 1)
    entry_regime := na

// 8. DRAWDOWN & CIRCUIT BREAKER
var float max_equity = strategy.equity
if strategy.equity > max_equity
    max_equity := strategy.equity
daily_drawdown = (max_equity - strategy.equity) / max_equity
pause_trading  = daily_drawdown > 0.05  // Or: use max_daily_drawdown input if you wish

// 9. ENTRY & EXIT LOGIC WITH DYNAMIC STOPS & TRAILING STOPS
swing_low  = ta.lowest(low, 5)
swing_high = ta.highest(high, 5)
long_condition  = bull_score >= 1.0 and not pause_trading
short_condition = bear_score >= 1.0 and not pause_trading
var float trail_stop_long  = na
var float trail_stop_short = na
var float long_stop_price  = na
var float long_limit_price = na
var float short_stop_price = na
var float short_limit_price = na

// -- Calculate stops for today
stop_points  = use_atr_for_stops ? atr_stop_mult * atr_val : default_stop_points
target_points = use_atr_for_stops ? 2 * atr_stop_mult * atr_val : default_target_points

if long_condition and strategy.position_size <= 0
    intended_stop = swing_low - stop_points
    stop_distance_points = close - intended_stop
    risk_per_contract = stop_distance_points * point_value
    contracts = math.floor(risk_per_trade / risk_per_contract)
    contracts := contracts > 0 ? contracts : 1
    contracts := math.min(contracts, max_contracts)
    long_limit = close + stop_distance_points * 2
    strategy.entry("Long", strategy.long, qty = contracts)
    strategy.exit("Exit", from_entry = "Long", stop = intended_stop, limit = long_limit)
    long_stop_price  := intended_stop
    long_limit_price := long_limit
    trail_stop_long  := intended_stop
    entry_regime     := regime

if short_condition and strategy.position_size >= 0
    intended_stop = swing_high + stop_points
    stop_distance_points = intended_stop - close
    risk_per_contract = stop_distance_points * point_value
    contracts = math.floor(risk_per_trade / risk_per_contract)
    contracts := contracts > 0 ? contracts : 1
    contracts := math.min(contracts, max_contracts)
    short_limit = close - stop_distance_points * 2
    strategy.entry("Short", strategy.short, qty = contracts)
    strategy.exit("Exit", from_entry = "Short", stop = intended_stop, limit = short_limit)
    short_stop_price  := intended_stop
    short_limit_price := short_limit
    trail_stop_short  := intended_stop
    entry_regime      := regime

if strategy.position_size > 0
    if close > long_limit_price * 0.5
        trail_stop_long := math.max(trail_stop_long, close - atr_val * atr_multiplier)
    strategy.exit("Long Trailing Stop", from_entry = "Long", stop = trail_stop_long)

if strategy.position_size < 0
    if close < short_limit_price * 0.5
        trail_stop_short := math.min(trail_stop_short, close + atr_val * atr_multiplier)
    strategy.exit("Short Trailing Stop", from_entry = "Short", stop = trail_stop_short)

if strategy.position_size == 0
    long_stop_price  := na
    long_limit_price := na
    short_stop_price := na
    short_limit_price := na
// === 10. VISUALIZATION & DASHBOARDS ===

// --- Regime Gradient Background ---
bgcolor(regime == 1 ? color.new(color.green, 85) : regime == 2 ? color.new(color.orange, 85) : regime == 3 ? color.new(color.red, 85) : regime == 4 ? color.new(color.gray, 85) : color.new(color.navy, 85))

// --- Signal Plots & Overlay Visuals ---
plotshape(long_condition, style=shape.triangleup, location=location.belowbar, color=color.green, size=size.small, title="Long Signal")
plotshape(short_condition, style=shape.triangledown, location=location.abovebar, color=color.red, size=size.small, title="Short Signal")
plot(ma_fast, "Fast MA", color=color.new(color.blue, 0), linewidth=2)
plot(ma_slow, "Slow MA", color=color.new(color.red, 0), linewidth=2)

// --- Dynamic Regime + Energy SL/TP Lines ---
pulse_alpha = 80 + 20 * math.abs(math.sin(bar_index / 2))
sl_color = regime == 1 ? color.rgb(255, 32, 32, pulse_alpha) : regime == 2 ? color.rgb(255, 200, 40, pulse_alpha) : regime == 3 ? color.rgb(255, 0, 80, pulse_alpha) : color.rgb(100, 100, 190, pulse_alpha)
tp_color = regime == 1 ? color.rgb(0, 255, 100, pulse_alpha) : regime == 2 ? color.rgb(40, 240, 255, pulse_alpha) : regime == 3 ? color.rgb(0, 200, 255, pulse_alpha) : color.rgb(180, 255, 170, pulse_alpha)

plot(strategy.position_size > 0 ? long_stop_price  : na, "Long Stop", color=sl_color, style=plot.style_linebr, linewidth=3)
plot(strategy.position_size > 0 ? long_limit_price : na, "Long TP", color=tp_color, style=plot.style_linebr, linewidth=3)
plot(strategy.position_size < 0 ? short_stop_price  : na, "Short Stop", color=sl_color, style=plot.style_linebr, linewidth=3)
plot(strategy.position_size < 0 ? short_limit_price : na, "Short TP", color=tp_color, style=plot.style_linebr, linewidth=3)

// --- Shimmering, Glow-Active Bollinger Band Fill ---
near_upper = close >= bb_upper * 0.995
near_lower = close <= bb_lower * 1.005
glow_pulse_alpha = 60 + 35 * math.abs(math.sin(bar_index / 2))
base_bb_alpha    = 30 + 20 * math.abs(math.sin(bar_index / 5))
highlight_color = near_upper ? color.rgb(255, 30, 75, glow_pulse_alpha) : near_lower ? color.rgb(40, 255, 40, glow_pulse_alpha) : regime == 1 ? color.rgb(46, 255, 96, base_bb_alpha) : regime == 2 ? color.rgb(255, 202, 30, base_bb_alpha) : regime == 3 ? color.rgb(255, 40, 140, base_bb_alpha) : color.rgb(110, 160, 255, base_bb_alpha)
p_bb_basis = plot(bb_basis, title="BB Basis", color=color.new(#ffffff, 50), linewidth=1)
p_bb_upper = plot(bb_upper, title="BB Upper", color=color.new(#4caf4f, 45), linewidth=2)
p_bb_lower = plot(bb_lower, title="BB Lower", color=color.new(#ff5252, 45), linewidth=2)
fill(p_bb_upper, p_bb_lower, color=highlight_color, title="BB Regime Glow Fill")

// --- Live Metrics Dashboard (Bottom-Left) ---
var table dashboard = table.new(position.bottom_left, 2, 13, bgcolor=color.new(#000000, 29), border_color=color.rgb(80,80,80), border_width=1)
if barstate.islast
    table.cell(dashboard, 0, 0, "⚡Regime Machine - Pro", text_color=color.rgb(200, 200, 255), text_size=size.small)
    modeStr = pause_trading ? "Paused" : "Active"
    table.cell(dashboard, 0, 1, "Mode:", text_color=color.white, text_size=size.small)
    table.cell(dashboard, 1, 1, modeStr, text_color=color.white, text_size=size.small)
    trendText = trend_dir == 1 ? "Bullish" : trend_dir == -1 ? "Bearish" : "Neutral"
    table.cell(dashboard, 0, 2, "Trend:", text_color=color.white, text_size=size.small)
    table.cell(dashboard, 1, 2, trendText, text_color=trendText == "Bullish" ? color.green : trendText == "Bearish" ? color.red : color.gray, text_size=size.small)
    table.cell(dashboard, 0, 3, "ATR:", text_color=color.white, text_size=size.small)
    table.cell(dashboard, 1, 3, str.tostring(atr_val, "#.##"), text_color=color.white, text_size=size.small)
    table.cell(dashboard, 0, 4, "ATR Avg:", text_color=color.white, text_size=size.small)
    table.cell(dashboard, 1, 4, str.tostring(atr_avg, "#.##"), text_color=color.white, text_size=size.small)
    table.cell(dashboard, 0, 5, "Volume Spike:", text_color=color.white, text_size=size.small)
    table.cell(dashboard, 1, 5, vol_spike ? "YES" : "NO", text_color=vol_spike ? color.green : color.red, text_size=size.small)
    table.cell(dashboard, 0, 6, "RSI:", text_color=color.white, text_size=size.small)
    table.cell(dashboard, 1, 6, str.tostring(rsi_val, "#.##"), text_color=color.white, text_size=size.small)
    rsiCondText = rsi_val < 30 ? "Oversold" : rsi_val > 70 ? "Overbought" : "Neutral"
    table.cell(dashboard, 0, 7, "RSI Cond:", text_color=color.white, text_size=size.small)
    table.cell(dashboard, 1, 7, rsiCondText, text_color=color.white, text_size=size.small)
    table.cell(dashboard, 0, 8, "HTF RSI:", text_color=color.white, text_size=size.small)
    table.cell(dashboard, 1, 8, str.tostring(htf_rsi, "#.##"), text_color=color.white, text_size=size.small)
    htfTrendText = htf_trend_bull ? "Bullish" : htf_trend_bear ? "Bearish" : "Neutral"
    table.cell(dashboard, 0, 9, "HTF Trend:", text_color=color.white, text_size=size.small)
    table.cell(dashboard, 1, 9, htfTrendText, text_color=htf_trend_bull ? color.green : htf_trend_bear ? color.red : color.gray, text_size=size.small)
    lastSignal = long_condition ? "Buy" : short_condition ? "Sell" : "None"
    table.cell(dashboard, 0, 10, "Last Signal:", text_color=color.white, text_size=size.small)
    table.cell(dashboard, 1, 10, lastSignal, text_color=long_condition ? color.green : short_condition ? color.red : color.white, text_size=size.small)
    table.cell(dashboard, 0, 11, "Regime:", text_color=color.white, text_size=size.small)
    table.cell(dashboard, 1, 11, regime_name, text_color=color.white, text_size=size.small)
    table.cell(dashboard, 0, 12, "Bull Score:", text_color=color.white, text_size=size.small)
    table.cell(dashboard, 1, 12, str.tostring(bull_score, "#.##"), text_color=color.white, text_size=size.small)

// --- Live Regime & Position Table (Top-Right) ---
var table position_table = table.new(position.top_right, 2, 7, bgcolor=color.new(#000000, 29), border_color=color.new(color.silver, 50), border_width=1)
pos_size = strategy.position_size
entry_price = strategy.position_avg_price
pos_side = pos_size == 0 ? "None" : pos_size > 0 ? "Long" : "Short"
// Live PnL math:
pos_pnl = pos_size != 0 ? (close - entry_price) * pos_size * point_value : 0
pos_sl = pos_size > 0 ? long_stop_price : pos_size < 0 ? short_stop_price : na
pos_tp = pos_size > 0 ? long_limit_price : pos_size < 0 ? short_limit_price : na
var float day_start_equity = na
if na(day_start_equity)
    day_start_equity := strategy.equity
if not na(ta.change(time("D")))
    day_start_equity := strategy.equity
daily_pnl = strategy.equity - day_start_equity
if barstate.islast
    table.cell(position_table, 0, 0, "Regime/Position Live", text_color=color.rgb(200, 200, 255), text_size=size.small)
    table.cell(position_table, 0, 1, "Regime:", text_color=color.white, text_size=size.small)
    table.cell(position_table, 1, 1, regime_name, text_color=color.white, text_size=size.small)
    table.cell(position_table, 0, 2, "Pos Side:", text_color=color.white, text_size=size.small)
    table.cell(position_table, 1, 2, pos_side, text_color=pos_side == "Long" ? color.lime : pos_side == "Short" ? color.red : color.gray, text_size=size.small)
    table.cell(position_table, 0, 3, "Pos P&L ($):", text_color=color.white, text_size=size.small)
    table.cell(position_table, 1, 3, str.tostring(pos_pnl, "#,###.##"), text_color=pos_pnl > 0 ? color.green : pos_pnl < 0 ? color.red : color.gray, text_size=size.small)
    table.cell(position_table, 0, 4, "SL:", text_color=color.white, text_size=size.small)
    table.cell(position_table, 1, 4, na(pos_sl) ? "-" : str.tostring(pos_sl, "#.##"), text_color=color.red, text_size=size.small)
    table.cell(position_table, 0, 5, "TP:", text_color=color.white, text_size=size.small)
    table.cell(position_table, 1, 5, na(pos_tp) ? "-" : str.tostring(pos_tp, "#.##"), text_color=color.lime, text_size=size.small)
    table.cell(position_table, 0, 6, "Day P&L ($):", text_color=color.yellow, text_size=size.small)
    table.cell(position_table, 1, 6, str.tostring(daily_pnl, "#,###.##"), text_color=daily_pnl > 0 ? color.green : daily_pnl < 0 ? color.red : color.gray, text_size=size.small)

// --- Branding Watermark (Bottom-Right) ---
var table watermarkTable = table.new(position.bottom_right, 1, 1, bgcolor=color.rgb(0, 0, 0, 77), border_color=color.rgb(0,50,137), border_width=1)
if barstate.islast
    table.cell(watermarkTable, 0, 0, "⚡ Dskyz (DAFE) Trading Systems", text_color=color.rgb(200, 200, 255), text_size=size.normal)

// --- Alerts ---
alertcondition(long_condition, title="Long Signal Alert", message="Regime Machine Long Signal")
alertcondition(short_condition, title="Short Signal Alert", message="Regime Machine Short Signal")

// --- Emergency Exit: Close Position if Breach
if not na(long_stop_price) and close < long_stop_price
    strategy.close("Long", comment="Emergency Market Exit")
if not na(short_stop_price) and close > short_stop_price
    strategy.close("Short", comment="Emergency Market Exit")