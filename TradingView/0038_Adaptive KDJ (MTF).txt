// Dieses Pine Script™ unterliegt der Mozilla Public License 2.0 (https://mozilla.org/MPL/2.0/)
// © Lausekopf

//@version=5
strategy("Adaptive KDJ (MTF) v1.1", overlay=false)

// Dropdown for calculation method of the Swinglength
method = input.int(1, title="Method", options=[1, 2, 3], tooltip="1: Volatility-based\n2: Volatility-based (reversed)\n3: Static length")

// Static length for method 3
fixedLength = input.int(9, title="Static KDJ length", minval=3, maxval=150)

// Timeframes
tf1 = input.timeframe("1", title="Timeframe 1")
tf2 = input.timeframe("3", title="Timeframe 2")
tf3 = input.timeframe("15", title="Timeframe 3")

// Timeframe-weighting
weightOption = input.int(1, title="Timeframe-weighting", options=[1, 2, 3, 4, 5], tooltip="1: TF1:50%, TF2:33%, TF3:17%\n2: TF1:40%, TF2:33%, TF3:27%\n3: TF1:33%, TF2:33%, TF3:33%\n4: TF1:20%, TF2:33%, TF3:47%\n5: TF1:10%, TF2:33%, TF3:57%")
weightTF1 = weightOption == 1 ? 0.5 : weightOption == 2 ? 0.4 : weightOption == 3 ? 0.33 : weightOption == 4 ? 0.2 : 0.1
weightTF2 = 0.33
weightTF3 = 1.0 - (weightTF1 + weightTF2)

// EMA-Smoothinglength
smoothingLength = input.int(5, title="EMA-smoothing length", minval=1, maxval=50)

// Trend definition
trendLength = input.int(40, title="Trend definition over X periods", minval=5, maxval=50)

// KDJ-function
f_kdj(len, srcHigh, srcLow, srcClose) =>
    roundedLen = int(math.round(len))
    high_max = ta.highest(srcHigh, roundedLen)
    low_min = ta.lowest(srcLow, roundedLen)
    rsv = 100 * (srcClose - low_min) / (high_max - low_min)
    k = ta.sma(rsv, 3)
    d = ta.sma(k, 3)
    j = 3 * k - 2 * d
    [k, d, j]

// Swinglength function
f_swingLength(tf) =>
    atrLen = 14
    volatility = request.security(syminfo.tickerid, tf, ta.atr(atrLen) / close)
    var float length = na
    if method == 1
        length := volatility > 0.03 ? 3 : volatility < 0.002 ? 15 : math.round(3 + (15 - 3) * ((0.03 - nz(volatility)) / (0.03 - 0.002)))
    if method == 2
        length := volatility > 0.03 ? 15 : volatility < 0.002 ? 3 : math.round(15 - (15 - 3) * ((0.03 - nz(volatility)) / (0.03 - 0.002)))
    if method == 3
        length := fixedLength
    length

// Swinglengths
swingLength1 = f_swingLength(tf1)
swingLength2 = f_swingLength(tf2)
swingLength3 = f_swingLength(tf3)

// KDJ-Values
[k1, d1, j1] = f_kdj(swingLength1, request.security(syminfo.tickerid, tf1, high), request.security(syminfo.tickerid, tf1, low), request.security(syminfo.tickerid, tf1, close))
[k2, d2, j2] = f_kdj(swingLength2, request.security(syminfo.tickerid, tf2, high), request.security(syminfo.tickerid, tf2, low), request.security(syminfo.tickerid, tf2, close))
[k3, d3, j3] = f_kdj(swingLength3, request.security(syminfo.tickerid, tf3, high), request.security(syminfo.tickerid, tf3, low), request.security(syminfo.tickerid, tf3, close))

// Weighted averages
avgK = (k1 * weightTF1 + k2 * weightTF2 + k3 * weightTF3)
avgD = (d1 * weightTF1 + d2 * weightTF2 + d3 * weightTF3)
avgJ = (j1 * weightTF1 + j2 * weightTF2 + j3 * weightTF3)
smoothAvgK = ta.ema(avgK, smoothingLength)
smoothAvgD = ta.ema(avgD, smoothingLength)
smoothAvgJ = ta.ema(avgJ, smoothingLength)
smoothAvgTotal = ta.ema((avgK + avgD + avgJ) / 3, smoothingLength)

// Trend definition
trendAvg = ta.sma(smoothAvgTotal, trendLength)
isUptrend = trendAvg > 60
isDowntrend = trendAvg < 40

// Dynamic signal thresholds
buyLevel = isUptrend ? 40 : isDowntrend ? 15 : 25
sellLevel = isUptrend ? 85 : isDowntrend ? 60 : 75

// Buy-/Sellsignals
buySignal = smoothAvgJ < buyLevel and ta.crossover(smoothAvgK, smoothAvgD)
sellSignal = smoothAvgJ > sellLevel and ta.crossunder(smoothAvgK, smoothAvgD)

// Antizipate signals
anticipateBuy = (smoothAvgK - smoothAvgK[1]) > 0 and (smoothAvgD - smoothAvgD[1]) < 0 and math.abs(smoothAvgK - smoothAvgD) < 5 and smoothAvgTotal < 30
anticipateSell = (smoothAvgK - smoothAvgK[1]) < 0 and (smoothAvgD - smoothAvgD[1]) > 0 and math.abs(smoothAvgK - smoothAvgD) < 5 and smoothAvgTotal > 70

// Entry-Conditions
longEntryCondition = buySignal //(and smoothAvgTotal < 22)
shortEntryCondition = sellSignal //(and smoothAvgTotal > 78)

// Entry-Orders
//strategy.entry("Long", strategy.long, when=longEntryCondition)
//strategy.entry("Short", strategy.short, when=shortEntryCondition)

// Trailing Stop-Loss
//atrMultiplierTSL = 1.1
//atrValueTSL = ta.atr(12) * atrMultiplierTSL
//strategy.exit("TSL Long", from_entry="Long", limit=open * 1.00025, stop=open * 0.99)
//strategy.exit("TSL Short", from_entry="Short", limit=open * 0.99975, stop=open * 1.01)

// Buy-/Sellareas
hline_80 = hline(80,"Overbought", color=color.rgb(100, 100, 100, 100))
hline_20 = hline(20,"Oversold", color=color.rgb(100, 100, 100, 100))
hline_100 = hline(100,"Overbought2", color=color.rgb(100, 100, 100, 100))
hline_0 = hline(0,"Oversold2", color=color.rgb(100, 100, 100, 100))
fill(hline_80, hline_100, color=color.red, transp=90)
fill(hline_20, hline_0, color=color.green, transp=90)

// Signal plots oscillator
plotshape(series=buySignal, title="buySignal oscillator", location=location.bottom, style=shape.triangleup, color=color.green, size=size.small)
plotshape(series=sellSignal, title="sellSignal oscillator", location=location.top, style=shape.triangledown, color=color.red, size=size.small)
plotshape(series=anticipateBuy, title="buySignal oscillator", location=location.bottom, style=shape.triangleup, color=color.blue, size=size.tiny, offset=-1)
plotshape(series=anticipateSell, title="sellSignal oscillator", location=location.top, style=shape.triangledown, color=color.orange, size=size.tiny, offset=-1)

// Signal plots chart
//plotshape(series=buySignal, title="buySignal chart", location=location.belowbar, style=shape.triangleup, color=color.green, size=size.small)
//plotshape(series=sellSignal, title="sellSignal chart", location=location.abovebar, style=shape.triangledown, color=color.red, size=size.small)
//plotshape(series=anticipateBuy, title="anticipateBuy chart", location=location.belowbar, style=shape.triangleup, color=color.blue, size=size.tiny, offset=-1)
//plotshape(series=anticipateSell, title="anticipateSell chart", location=location.abovebar, style=shape.triangledown, color=color.orange, size=size.tiny, offset=-1)

// KDJ-Lines (average)
plot(smoothAvgK, color=color.blue, linewidth=1)
plot(smoothAvgD, color=color.orange, linewidth=1)
plot(smoothAvgJ, color=color.purple, linewidth=1)
plot(smoothAvgTotal, color=color.white, linewidth=1)

// Alert for possible crossings
alertcondition(anticipateBuy or anticipateSell, title='possible KDJ-crossing', message='possible KDJ-crossing!')// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © Lausekopf