// REUSING THIS CODE: You are welcome to reuse this code without permission. Credits are appreciated.
//@version=4
//@author=LucF, for PineCoders

// Color Gradient Framework
//  v4, 2021.06.07 15:36 — LucF

// Provides a suite of functions to help coders build gradients using bull and bear colors.

// This code was written using:
//  • PineCoders Coding Conventions for Pine: http://www.pinecoders.com/coding_conventions/
//  • Base colors from midtownsk8rguy's "Pine Color Magic and Chart Theme Simulator": https://www.tradingview.com/script/yyDYIrRQ-Pine-Color-Magic-and-Chart-Theme-Simulator/

// PineCoders FAQ & Code question linking here    : http://www.pinecoders.com/faq_and_code/#how-can-i-plot-color-gradients
// This indicator's TradingView page              : https://www.tradingview.com/script/EjLGV9qg-Color-Gradient-16-colors-Framework-PineCoders-FAQ/
// PineCoders, Tools and ideas for all Pine coders: pinecoders.com

study("Color Gradient Framework [PineCoders]", max_labels_count = 500)


// ———————————————————— Constants
// {

// Color constants.
var color C_AQUA    = #0080FFff
var color C_BLACK   = #000000ff
var color C_BLUE    = #013BCAff
var color C_CORAL   = #FF8080ff
var color C_GOLD    = #CCCC00ff
var color C_GRAY    = #808080ff
var color C_GREEN   = #008000ff
var color C_LIME    = #00FF00ff
var color C_MAROON  = #800000ff
var color C_ORANGE  = #FF8000ff
var color C_PINK    = #FF0080ff
var color C_RED     = #FF0000ff
var color C_VIOLET  = #AA00FFff
var color C_YELLOW  = #FFFF00ff
var color C_WHITE   = #FFFFFFff

// Gradients demonstrated in the script.
var string MD1 = "1. Advance/Decline gradient on two MAs • Uses `f_c_gradientAdvDec(ma1a, ma1b, i_c_bear, i_c_bull)`"
var string MD2 = "2. Advance/Decline gradient on the MACD histogram • Uses `f_c_gradientAdvDec(histLine, 0, i_c_bear, i_c_bull)`"
var string MD3 = "3. Relative gradient on RSI • Uses `f_c_gradientRelative(r3, 20, 80, i_c_bear, i_c_bull)`"
var string MD4 = "4. Three gradients (one for the line, one for the fill, one for the background)"
var string MD5 = "5. Relative gradient on CCI • Uses `f_c_gradientRelative(c5, -300, 300, i_c_bear, i_c_bull)`"
var string MD6 = "6. Pro Advance/Decline gradient on a calibration line • Uses `f_c_gradientAdvDecPro(s6, 0, i_g67Steps, f_colorNew(i_c_bear, i_g67Transp), i_c_bear, f_colorNew(i_c_bull, i_g67Transp), i_c_bull)`"
var string MD7 = "7. Pro Advance/Decline gradient on a two MAs • Uses `f_c_gradientAdvDecPro(ma7a, ma7b, i_g67Steps, f_colorNew(i_c_bear, i_g67Transp), i_c_bear, f_colorNew(i_c_bull, i_g67Transp), i_c_bull)`"
var string MD8 = "8. Pro Relative gradient on RSI • Uses `f_c_gradientRelativePro(r8, 0, 100, f_colorNew(i_c_bear, i_g8Transp), i_c_bear, f_colorNew(i_c_bull, i_g8Transp), i_c_bull)`"
var string MD9 = "9. RGBA color tuner"

// Input groups.
var string GP1 = "Display                                                        Bull Color"
var string GP2 = "            Bear Color"
var string GP3 = "Calibration of Pro gradients"
var string GP4 = "Gradient #4 Background colors"
var string GP7 = "Gradients #6 and #7 calibration"
var string GP8 = "Gradient #8 calibration"
var string GP9 = "RGBA color tuner (displays in the background)"
// }



// ———————————————————— Inputs
// {
color  i_c_01       = input(C_LIME,     "", inline = "10", group = GP1, tooltip = "Pick only one. These are preset colors, but you can modify anyone of them.")
bool   i_01         = input(true,       "", inline = "10", group = GP1)
color  i_c_02       = input(C_AQUA,     "", inline = "10", group = GP1)
bool   i_02         = input(false,      "", inline = "10", group = GP1)
color  i_c_03       = input(C_GOLD,     "", inline = "10", group = GP1)
bool   i_03         = input(false,      "", inline = "10", group = GP1)
color  i_c_04       = input(C_WHITE,    "", inline = "10", group = GP1)
bool   i_04         = input(false,      "", inline = "10", group = GP1)
color  i_c_05       = input(C_ORANGE,   "", inline = "10", group = GP1)
bool   i_05         = input(false,      "", inline = "10", group = GP1)

color  i_c_06       = input(C_RED,      "", inline = "20", group = GP2, tooltip = "Pick only one. These are preset colors, but you can modify anyone of them.")
bool   i_06         = input(true,       "", inline = "20", group = GP2)
color  i_c_07       = input(C_PINK,     "", inline = "20", group = GP2)
bool   i_07         = input(false,      "", inline = "20", group = GP2)
color  i_c_08       = input(C_VIOLET,   "", inline = "20", group = GP2)
bool   i_08         = input(false,      "", inline = "20", group = GP2)
color  i_c_09       = input(C_BLUE,     "", inline = "20", group = GP2)
bool   i_09         = input(false,      "", inline = "20", group = GP2)
color  i_c_10       = input(C_GRAY,     "", inline = "20", group = GP2)
bool   i_10         = input(false,      "", inline = "20", group = GP2)
string i_gradient   = input(MD8,        "Gradient", options = [MD1, MD2, MD3, MD4, MD5, MD6, MD7, MD8], group = GP2, tooltip = "Gradient #1 uses MAs on price. You can move the indicator in overlay mode for this gradient, to better appreciate it.")

color  i_c_bull4    = input(C_GRAY,     "Bull", inline = "40", group = GP4)
color  i_c_bear4    = input(C_BLUE,     "Bear", inline = "40", group = GP4)

int    i_g67Steps   = input(25,         "Steps in gradient", minval = 2, maxval = 256, group = GP7, tooltip = "The maximum is 256.")
float  i_g67Transp  = input(95.,        "Transparency of weak bull/bear levels", input.float, minval = 0., maxval = 100., step = 5., group = GP7)

float  i_g8Transp   = input(80.,        "Transparency of weak bull/bear levels", input.float, minval = 0., maxval = 100., step = 5., group = GP8)

float  i_g9R        = input(128,        "Red",      minval = 0, maxval = 255, step = 8, inline = "90", group = GP9, tooltip = "0-255")
float  i_g9G        = input(128,        "Green",    minval = 0, maxval = 255, step = 8, inline = "90", group = GP9, tooltip = "0-255")
float  i_g9B        = input(128,        "Blue",     minval = 0, maxval = 255, step = 8, inline = "90", group = GP9, tooltip = "0-255")
float  i_g9T        = input(100,        "Transparency (Alpha channel)", minval = 0, maxval = 100, step = 0.3, group = GP9, tooltip = "0-100. 0 is brightest. 100 is invisible. You can use a float value to access the underlying 256 values of the alpha channel.")

// Determine base bull/bear colors as per user selection.
var color i_c_bull = i_01 ? i_c_01 : i_02 ? i_c_02 : i_03 ? i_c_03 : i_04 ? i_c_04 : i_05 ? i_c_05 : i_c_01
var color i_c_bear = i_06 ? i_c_06 : i_07 ? i_c_07 : i_08 ? i_c_08 : i_09 ? i_c_09 : i_10 ? i_c_10 : i_c_06

// Detect which gradient was selected in inputs.
var bool  i_gradient1 = i_gradient == MD1
var bool  i_gradient2 = i_gradient == MD2
var bool  i_gradient3 = i_gradient == MD3
var bool  i_gradient4 = i_gradient == MD4
var bool  i_gradient5 = i_gradient == MD5
var bool  i_gradient6 = i_gradient == MD6
var bool  i_gradient7 = i_gradient == MD7
var bool  i_gradient8 = i_gradient == MD8
// }



// ———————————————————— Functions
// {

// —————————————————————————————————————————
// ————— Relative Gradient
// —————————————————————————————————————————
// ————— Function returns a color determined by:
//       1. A selection between bull/bear colors depending on whether the source signal is above/below the centerline (the mid-point between `_min` and `_max`).
//       2. For bull colors, the color is determined using a gradient between no color at the centerline and `_c_bull` at `_max` level.
//          For bear colors, the color is determined using a gradient between no color at the centerline and `_c_bear` at `_min` level.
f_c_gradientRelative(_source, _min, _max, _c_bear, _c_bull) =>
    // float _source: input signal
    // float _min   : minimum range of input signal.
    // float _max   : maximum range of input signal.
    // color _c_bear: bear color at `_min` level.
    // color _c_bull: bull color at `_max` level.
    // Dependency: `f_colorNew()`
    var float _center = _min + (_max - _min) / 2
    color _return = _source >= _center ?
      color.from_gradient(_source, _center, _max, color.new(_c_bull, 100), color.new(_c_bull, 0)) :
      color.from_gradient(_source, _min, _center, color.new(_c_bear, 0), color.new(_c_bear, 100))

// —————————————————————————————————————————
// ————— Pro Relative Gradient
// —————————————————————————————————————————
// ————— Function returns a color determined by:
//       1. A gradient between two bull or two bear colors, depending on whether the source signal is above/below the centerline.
//       2. For bull colors, the color is determined using a gradient between `_c_bullWeak` at the centerline and `_c_bullStrong` at `_max` level.
//          For bear colors, the color is determined using a gradient between `_c_bearWeak` at the centerline and `_c_bearStrong` at `_min` level.
f_c_gradientRelativePro(_source, _min, _max, _c_bearWeak, _c_bearStrong, _c_bullWeak, _c_bullStrong) =>
    // float _source      : input signal
    // float _min         : minimum range of input signal.
    // float _max         : maximum range of input signal.
    // color _c_bearWeak  : bear color at mid-level between `_min` and `_max` levels.
    // color _c_bearStrong: bear color at `_min` level.
    // color _c_bullWeak  : bull color at mid-level between `_min` and `_max` levels.
    // color _c_bullStrong: bull color at `_max` level.
    var float _center = _min + (_max - _min) / 2
    color _return = _source >= _center ?
      color.from_gradient(_source, _center, _max, _c_bullWeak, _c_bullStrong) :
      color.from_gradient(_source, _min, _center, _c_bearStrong, _c_bearWeak)

// —————————————————————————————————————————
// ————— Advance/Decline Gradient
// —————————————————————————————————————————
// ————— Function returning one of the bull/bear colors in a transparency proportional to the current qty of advances/declines
//       relative to the historical max qty of adv/dec for this `_source`.
f_c_gradientAdvDec(_source, _center, _c_bear, _c_bull) =>
    // float _source: input signal.
    // float _center: centerline used to determine if signal is bull/bear.
    // color _c_bear: most bearish color.
    // color _c_bull: most bullish color.
    // Dependency: `f_colorNew()`
    var float _maxAdvDec = 0.
    var float _qtyAdvDec = 0.
    bool  _xUp     = crossover(_source, _center)
    bool  _xDn     = crossunder(_source, _center)
    float _chg     = change(_source)
    bool  _up      = _chg > 0
    bool  _dn      = _chg < 0
    bool  _srcBull = _source > _center
    bool  _srcBear = _source < _center
    _qtyAdvDec :=
      _srcBull ? _xUp ? 1 : _up ? _qtyAdvDec + 1 : _dn ? max(1, _qtyAdvDec - 1) : _qtyAdvDec :
      _srcBear ? _xDn ? 1 : _dn ? _qtyAdvDec + 1 : _up ? max(1, _qtyAdvDec - 1) : _qtyAdvDec : _qtyAdvDec
    // Keep track of max qty of advances/declines.
    _maxAdvDec := max(_maxAdvDec, _qtyAdvDec)
    // Calculate transparency from the current qty of advances/declines relative to the historical max qty of adv/dec for this `_source`.
    float _transp = 100 - (_qtyAdvDec * 100 / _maxAdvDec)
    var color _return = na
    _return := _srcBull ? color.new(_c_bull, _transp) : _srcBear ? color.new(_c_bear, _transp) : _return

// —————————————————————————————————————————
// ————— Pro Advance/Decline Gradient
// —————————————————————————————————————————
// ————— Function returning a gradient between two bull or two bear colors, depending on whether the source signal is above/below the centerline.
//       The gradient is proportional to the current qty of advances/declines of the `_source`.
//       The count of advances/declines resets to one when the `_source` crosses the `_center` and is limited by `_steps`.
f_c_gradientAdvDecPro(_source, _center, _steps, _c_bearWeak, _c_bearStrong, _c_bullWeak, _c_bullStrong) =>
    // float _source      : input signal.
    // float _center      : (- ∞ to ∞) centerline used to determine if signal is bullish/bearish.
    // float _steps       : Maximum number of steps in the gradient from the weak color to the strong color.
    // color _c_bearWeak  : bear color at adv/dec qty of 1.
    // color _c_bearStrong: bear color at adv/dec qty of `_steps`.
    // color _c_bullWeak  : bull color at adv/dec qty of 1.
    // color _c_bullStrong: bull color at adv/dec qty of `_steps`.
    var float _qtyAdvDec = 0.
    var float _maxSteps  = max(1, _steps)
    bool  _xUp     = crossover(_source, _center)
    bool  _xDn     = crossunder(_source, _center)
    float _chg     = change(_source)
    bool  _up      = _chg > 0
    bool  _dn      = _chg < 0
    bool  _srcBull = _source > _center
    bool  _srcBear = _source < _center
    _qtyAdvDec :=
      _srcBull ? _xUp ? 1 : _up ? min(_maxSteps, _qtyAdvDec + 1) : _dn ? max(1, _qtyAdvDec - 1) : _qtyAdvDec :
      _srcBear ? _xDn ? 1 : _dn ? min(_maxSteps, _qtyAdvDec + 1) : _up ? max(1, _qtyAdvDec - 1) : _qtyAdvDec : _qtyAdvDec
    var color _return = na
    _return :=
      _srcBull ? color.from_gradient(_qtyAdvDec, 1, _maxSteps, _c_bullWeak, _c_bullStrong) :
      _srcBear ? color.from_gradient(_qtyAdvDec, 1, _maxSteps, _c_bearWeak, _c_bearStrong) : _return
// }



// ———————————————————— Demonstration of gradients 1 - 8
// {

// ——————————————————————————————————————————————————
// ————— Gradient 1: Adv/Dec gradient mode on 2 MAs
// ——————————————————————————————————————————————————
float ma1a = sma(close, 10)
float ma1b = sma(close, 50)
p_1a = plot(i_gradient1 ? ma1a : na, "1. Fast MA")
p_1b = plot(i_gradient1 ? ma1b : na, "1. Slow MA")
// Note how the slow MA acts as the centerline here.
color c_1 = f_c_gradientAdvDec(ma1a, ma1b, i_c_bear, i_c_bull)
fill(p_1a, p_1b, c_1, title = "1. Adv/Dec MA fill")


// ——————————————————————————————————————————————————
// ————— Gradient 2: Adv/Dec gradient mode on the MACD histogram
// ——————————————————————————————————————————————————
[macdLine, signalLine, histLine] = macd(close, 12, 26, 9)
plot(i_gradient2 ? macdLine   : na, "2. MACD",        color.aqua)
plot(i_gradient2 ? signalLine : na, "2. MACD Signal", color.red)
p_2a = plot(i_gradient2 ? histLine : na, "2. MACD Histo", #FFFFFF00)
p_2b = plot(i_gradient2 ? 0        : na, "2. MACD Zero",  color.gray, style = plot.style_circles)
color c_2 = f_c_gradientAdvDec(histLine, 0, i_c_bear, i_c_bull)
fill(p_2a, p_2b, c_2, title = "2. Adv/Dec MACD fill")


// ——————————————————————————————————————————————————
// ————— Gradient 3: Relative gradient on RSI
// ——————————————————————————————————————————————————
float r3 = rsi(close, 20)
p_3a = plot(i_gradient3 ? r3 : na, "3. RSI",     color.gray)
p_3b = plot(i_gradient3 ? 50 : na, "3. Center",  color.gray, style = plot.style_circles)
// Note how we compress the gradient's range by specifying a 20-80 range for the signal. This way, we reach the more saturated bull/bear color more quickly.
color c_3 = f_c_gradientRelative(r3, 20, 80, i_c_bear, i_c_bull)
fill(p_3a, p_3b, c_3, title = "3. Relative fill")


// ——————————————————————————————————————————————————
// ————— Gradient 4: Two gradients on one line and one on the background, all calculated from different signals.
// ——————————————————————————————————————————————————
float r4a = rsi(close, 20)
float r4b = rsi(close, 60)
float r4c = rsi(close, 200)
float c4  = cci(close, 20)
// We use the `color.from_gradient()` built-in to color the RSI with a longer period RSI.
p_4a = plot(i_gradient4 ? r4a : na, "4. RSI",     color.from_gradient(r4b, 20, 80, i_c_bear, i_c_bull), 2)
p_4b = plot(i_gradient4 ? 50  : na, "4. Center",  color.gray, style = plot.style_circles)
// We color the fill using our relative gradient on a CCI with the same period as the line RSI.
color c_4a = f_c_gradientRelative(c4, -300, 300, i_c_bear, i_c_bull)
fill(p_4a, p_4b, c_4a, title = "4. Relative fill")
// We color the background on a very long period RSI.
color c_4b = f_c_gradientRelative(r4c, 20, 80, i_c_bear4, i_c_bull4)
bgcolor(i_gradient4 ? c_4b : na)


// ——————————————————————————————————————————————————
// ————— Gradient 5: Relative gradient on CCI
// ——————————————————————————————————————————————————
float c5 = cci(close, 20)
p_5a = plot(i_gradient5 ? c5 : na, "5. CCI",     color.gray)
p_5b = plot(i_gradient5 ? 0  : na, "5. Center",  color.gray, style = plot.style_circles)
// Note how we can use a relative gradient for certain unbounded signals like CCI, when they range between more or less known values most of the time.
// We simply use a fairly low/high value below/above which the gradient will always be at maximum intensity.
color c_5 = f_c_gradientRelative(c5, -300, 300, i_c_bear, i_c_bull)
fill(p_5a, p_5b, c_5, title = "5. Relative fill")
hline(i_gradient5 ? -300 : na)
hline(i_gradient5 ?  300 : na)


// ——————————————————————————————————————————————————
// ————— Gradient 6: Adv/Dec Pro gradient for calibration.
// ——————————————————————————————————————————————————
// Up and down test signal.
var float step6 = -1
step6 := bar_index % (i_g67Steps + 1) == 0 ? step6 * -1 : step6
float s6 = 0
s6 := step6 * bar_index % (i_g67Steps + 1)
p_6a = plot(i_gradient6 ? s6 : na, "6. Stepped line", color.gray)
p_6b = plot(i_gradient6 ? 0  : na, "6. Center",       color.gray, style = plot.style_circles)
color c_6 = f_c_gradientAdvDecPro(s6, 0, i_g67Steps, color.new(i_c_bear, i_g67Transp), i_c_bear, color.new(i_c_bull, i_g67Transp), i_c_bull)
fill(p_6a, p_6b, c_6, title = "6. Pro Adv/Dec fill")
if i_gradient6
    label.new(bar_index, s6, tostring(s6), yloc = yloc.price, color = #00000000, style = s6 >= 0 ? label.style_label_down : label.style_label_up, textcolor = color.silver, size = size.tiny)


// ——————————————————————————————————————————————————
// ————— Gradient 7: Pro Adv/Dec gradient mode on 2 MAs
// ——————————————————————————————————————————————————
float ma7a = sma(close, 10)
float ma7b = sma(close, 50)
p_7a = plot(i_gradient7 ? ma7a : na, "7. Fast MA", #00000000)
p_7b = plot(i_gradient7 ? ma7b : na, "7. Slow MA", #00000000)
color c_7 = f_c_gradientAdvDecPro(ma7a, ma7b, i_g67Steps, color.new(i_c_bear, i_g67Transp), i_c_bear, color.new(i_c_bull, i_g67Transp), i_c_bull)
fill(p_7a, p_7b, c_7, title = "7. Adv/Dec MA fill")


// ——————————————————————————————————————————————————
// ————— Gradient 8: Pro relative gradient on RSI
// ——————————————————————————————————————————————————
float r8 = rsi(close, 20)
p_8a = plot(i_gradient8 ? r8 : na, "8. RSI",     color.gray)
p_8b = plot(i_gradient8 ? 50 : na, "8. Center",  color.gray, style = plot.style_circles)
// Note how we compress the gradient's range by using the Pro version of the function,
// and starting bull/bear colors with a user-selected transparency instead of 100 which would normally be used without the Pro version.
// When `i_g8Transp` is < 100, this makes the color of weaker RSI levels stronger.
color c_8 = f_c_gradientRelativePro(r8, 0, 100, color.new(i_c_bear, i_g8Transp), i_c_bear, color.new(i_c_bull, i_g8Transp), i_c_bull)
fill(p_8a, p_8b, c_8, title = "8. Pro Relative fill")

// ——————————————————————————————————————————————————
// ————— #9 RGBA Color tuner.
// ——————————————————————————————————————————————————
bgcolor(color.rgb(i_g9R, i_g9G, i_g9B, i_g9T))
//}