// This Pine Script® code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © wujiayuan
//@version=5
strategy("Martin Strategy - No Loss Exit v3", overlay=true, default_qty_type=strategy.fixed, default_qty_value=100)

// === 参数 ===
initial_cash     = input.float(100, "初始买入金额（USD）")
max_orders       = input.int(20, "最大加仓次数（含首单）")
price_step_pct   = input.float(1.5, "每次加仓下跌幅度（%）") / 100
take_profit_pct  = input.float(1.0, "止盈百分比（%）") / 100
increase_factor  = input.float(1.05, "每次加仓金额倍数")

// === 状态变量 ===
var float entry_price = na          // 第一笔买入价格
var float total_cost  = 0.0         // 累计总投入 USD
var float total_qty   = 0.0         // 累计总买入数量
var float last_cash   = na          // 上一笔投入金额
var int   order_count = 0           // 加仓次数
var bool  in_position = false       // 是否持仓中
var bool  waiting_close = false     // 等待下一根K线再建仓，避免同K线立即重新建仓

// === 当前价格 ===
cur_price = close
avg_price = total_qty > 0 ? total_cost / total_qty : na
take_profit_price = avg_price * (1 + take_profit_pct)

// === 加仓价格阈值 ===
next_entry_price = entry_price * (1 - price_step_pct * order_count)
can_add = in_position and order_count < max_orders and cur_price <= next_entry_price

// === 止盈逻辑：如果 high >= 止盈价，则立即市价平仓 ===
if in_position and high >= take_profit_price
    strategy.close_all(comment="TP by High Touch")
    in_position := false
    waiting_close := true  // 避免同根K线重新进场

// === 重置状态，等待下根K线建仓 ===
if not in_position and waiting_close
    if bar_index != bar_index[1]
        entry_price := na
        total_cost := 0.0
        total_qty := 0.0
        last_cash := na
        order_count := 0
        waiting_close := false

// === 初始化第一单（前一轮已平仓）===
if not in_position and not waiting_close
    qty = initial_cash / cur_price
    strategy.entry("Cycle", strategy.long, qty=qty)
    entry_price := cur_price
    total_cost := initial_cash
    total_qty := qty
    last_cash := initial_cash
    order_count := 1
    in_position := true

// === 加仓逻辑 ===
else if can_add and not waiting_close
    new_cash = last_cash * increase_factor
    qty = new_cash / cur_price
    strategy.entry("Cycle", strategy.long, qty=qty)
    total_cost += new_cash
    total_qty += qty
    last_cash := new_cash
    order_count += 1

// === 可视化辅助 ===
plot(in_position ? avg_price : na, title="平均成本", color=color.orange, linewidth=2)
plot(in_position ? entry_price : na, title="第一笔价格", color=color.blue)
plot(in_position ? take_profit_price : na, title="止盈价格", color=color.green, style=plot.style_linebr)