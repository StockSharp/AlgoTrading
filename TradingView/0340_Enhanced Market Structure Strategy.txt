// Enhanced Market Structure Swing Trading Strategy with ATR & Filters
// Based on CHoCH, BOS, IDM, and Sweeps Analysis with RSI and Volume Filters
// This work is licensed under Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)

//@version=5
strategy("Enhanced Market Structure Strategy", "EMS-Strategy", overlay=true, default_qty_type=strategy.percent_of_equity, default_qty_value=10, max_lines_count=500, max_labels_count=500)

// ============================================================================
// INPUTS
// ============================================================================
// Market Structure Settings
len = input.int(50, 'CHoCH Detection Period', minval=10, maxval=200, group='Market Structure')
shortLen = input.int(3, 'IDM Detection Period', minval=2, maxval=20, group='Market Structure')

// ATR Risk Management
atrLength = input.int(14, 'ATR Length', minval=5, maxval=50, group='Risk Management')
stopLossATR = input.float(2.0, 'Stop Loss (ATR Multiplier)', minval=1.0, maxval=5.0, step=0.1, group='Risk Management')
takeProfitATR = input.float(3.0, 'Take Profit (ATR Multiplier)', minval=1.5, maxval=8.0, step=0.1, group='Risk Management')
maxRiskPercent = input.float(2.0, 'Max Risk Per Trade (%)', minval=0.5, maxval=5.0, step=0.1, group='Risk Management')

// Strategy Settings
enableLongs = input.bool(true, 'Enable Long Trades', group='Strategy')
enableShorts = input.bool(true, 'Enable Short Trades', group='Strategy')
filterTrend = input.bool(true, 'Filter by Higher Timeframe Trend', group='Strategy')

// Signal Filters
useRSIFilter = input.bool(true, 'Use RSI Filter', group='Filters')
rsiLength = input.int(14, 'RSI Length', minval=5, maxval=50, group='Filters')
rsiOverbought = input.float(70.0, 'RSI Overbought Level', minval=60.0, maxval=90.0, step=1.0, group='Filters')
rsiOversold = input.float(30.0, 'RSI Oversold Level', minval=10.0, maxval=40.0, step=1.0, group='Filters')

useVolumeFilter = input.bool(true, 'Use Volume Filter', group='Filters')
volumeLength = input.int(20, 'Volume MA Length', minval=10, maxval=50, group='Filters')
volumeThreshold = input.float(1.2, 'Volume Threshold Multiplier', minval=1.0, maxval=3.0, step=0.1, group='Filters')

useMACDFilter = input.bool(false, 'Use MACD Filter', group='Filters')
macdFast = input.int(12, 'MACD Fast Length', minval=5, maxval=25, group='Filters')
macdSlow = input.int(26, 'MACD Slow Length', minval=15, maxval=50, group='Filters')
macdSignal = input.int(9, 'MACD Signal Length', minval=5, maxval=20, group='Filters')

useEMAFilter = input.bool(true, 'Use EMA Trend Filter', group='Filters')
emaLength = input.int(50, 'EMA Length', minval=20, maxval=200, group='Filters')

// Styling
bullCss = input.color(color.new(#00ff88, 0), 'Bullish Elements', group='Style')
bearCss = input.color(color.new(#ff4444, 0), 'Bearish Elements', group='Style')
showLabels = input.bool(true, "Show Entry/Exit Labels", group='Style')
showLevels = input.bool(true, "Show SL/TP Lines", group='Style')

// ============================================================================
// TECHNICAL INDICATORS & FILTERS
// ============================================================================
// ATR for dynamic stops and targets
atr = ta.atr(atrLength)

// RSI Filter
rsi = ta.rsi(close, rsiLength)
rsiLongFilter = useRSIFilter ? (rsi < rsiOverbought and rsi > 40) : true
rsiShortFilter = useRSIFilter ? (rsi > rsiOversold and rsi < 60) : true

// Volume Filter
volumeMA = ta.sma(volume, volumeLength)
highVolume = useVolumeFilter ? (volume > volumeMA * volumeThreshold) : true

// MACD Filter
[macdLine, signalLine, _] = ta.macd(close, macdFast, macdSlow, macdSignal)
macdBullish = useMACDFilter ? (macdLine > signalLine and macdLine > macdLine[1]) : true
macdBearish = useMACDFilter ? (macdLine < signalLine and macdLine < macdLine[1]) : true

// EMA Trend Filter
ema = ta.ema(close, emaLength)
emaBullish = useEMAFilter ? (close > ema and ema > ema[1]) : true
emaBearish = useEMAFilter ? (close < ema and ema < ema[1]) : true

// Higher timeframe trend filter
htfTrend = request.security(syminfo.tickerid, timeframe.in_seconds() > 3600 ? "1D" : "4H", ta.ema(close, 50))
htfBullish = filterTrend ? (close > htfTrend) : true
htfBearish = filterTrend ? (close < htfTrend) : true

// ============================================================================
// MARKET STRUCTURE FUNCTIONS
// ============================================================================
n = bar_index

// Swing detection function
swings(length) =>
    var os = 0
    var int topx = na
    var int btmx = na

    upper = ta.highest(length)
    lower = ta.lowest(length)

    os := high[length] > upper ? 0 : low[length] < lower ? 1 : os[1]

    top = os == 0 and os[1] != 0 ? high[length] : na
    topx := os == 0 and os[1] != 0 ? n[length] : topx

    btm = os == 1 and os[1] != 1 ? low[length] : na
    btmx := os == 1 and os[1] != 1 ? n[length] : btmx

    [top, topx, btm, btmx]

// ============================================================================
// MARKET STRUCTURE DETECTION
// ============================================================================
[top, topx, btm, btmx] = swings(len)
[stop, stopx, sbtm, sbtmx] = swings(shortLen)

var os = 0
var top_crossed = false
var btm_crossed = false
var float max = na
var float min = na
var int max_x1 = na
var int min_x1 = na
var float topy = na
var float btmy = na
var stop_crossed = false
var sbtm_crossed = false

// CHoCH Detection Logic
if top
    topy := top
    top_crossed := false
if btm
    btmy := btm
    btm_crossed := false

if close > topy and not top_crossed
    os := 1
    top_crossed := true
if close < btmy and not btm_crossed
    os := 0
    btm_crossed := true

// Initialize structure tracking
if os != os[1]
    max := high
    min := low
    max_x1 := n
    min_x1 := n
    stop_crossed := false
    sbtm_crossed := false

stopy = fixnan(stop)
sbtmy = fixnan(sbtm)

// ============================================================================
// SIGNAL DETECTION WITH FILTERS
// ============================================================================
var bool longSetup = false
var bool shortSetup = false
var bool idmTriggered = false

// Bullish IDM Detection with Filters
bullishIDM = low < sbtmy and not sbtm_crossed and os == 1 and sbtmy != btmy
if bullishIDM and rsiLongFilter and highVolume and macdBullish and emaBullish and htfBullish
    sbtm_crossed := true
    longSetup := true

// Bearish IDM Detection with Filters
bearishIDM = high > stopy and not stop_crossed and os == 0 and stopy != topy
if bearishIDM and rsiShortFilter and highVolume and macdBearish and emaBearish and htfBearish
    stop_crossed := true
    shortSetup := true

// BOS Confirmation for Long Trades
longBOS = close > max and sbtm_crossed and os == 1
if longBOS
    sbtm_crossed := false

// BOS Confirmation for Short Trades
shortBOS = close < min and stop_crossed and os == 0
if shortBOS
    stop_crossed := false

// Sweep Detection (Failed Breakouts) with Filters
longSweep = high > max and close < max and os == 1 and n - max_x1 > 1 and rsiLongFilter and highVolume
shortSweep = low < min and close > min and os == 0 and n - min_x1 > 1 and rsiShortFilter and highVolume

// Update max/min levels
max := math.max(high, max)
min := math.min(low, min)
if max > max[1]
    max_x1 := n
if min < min[1]
    min_x1 := n

// ============================================================================
// ENHANCED ENTRY CONDITIONS
// ============================================================================
// Combine all filters for high-probability entries
longFiltersPassed = rsiLongFilter and highVolume and macdBullish and emaBullish and htfBullish
shortFiltersPassed = rsiShortFilter and highVolume and macdBearish and emaBearish and htfBearish

// Long Entry: IDM hit + BOS confirmation + all filters
longCondition = longSetup and longBOS and enableLongs and longFiltersPassed and strategy.position_size == 0
longSweepEntry = longSweep and enableLongs and longFiltersPassed and strategy.position_size == 0

// Short Entry: IDM hit + BOS confirmation + all filters
shortCondition = shortSetup and shortBOS and enableShorts and shortFiltersPassed and strategy.position_size == 0
shortSweepEntry = shortSweep and enableShorts and shortFiltersPassed and strategy.position_size == 0

// Reset setups after entry attempts
if longCondition or shortCondition
    longSetup := false
    shortSetup := false

// ============================================================================
// POSITION MANAGEMENT WITH ATR
// ============================================================================
// Calculate position size based on ATR stop loss
calculatePositionSize(entryPrice, stopPrice) =>
    stopDistance = math.abs(entryPrice - stopPrice)
    riskAmount = strategy.equity * maxRiskPercent / 100
    positionSize = riskAmount / (stopDistance * syminfo.pointvalue)
    positionSize

// Variables for tracking levels
var line slLine = na
var line tpLine = na
var label entryLabel = na

// Long Trade Management with ATR
if longCondition
    entryPrice = close
    stopPrice = entryPrice - (atr * stopLossATR)
    targetPrice = entryPrice + (atr * takeProfitATR)
    posSize = calculatePositionSize(entryPrice, stopPrice)

    strategy.entry("Long", strategy.long, qty=posSize)
    strategy.exit("Long Exit", "Long", stop=stopPrice, limit=targetPrice)

    // Visual elements
    if showLevels
        slLine := line.new(n, stopPrice, n+10, stopPrice, color=color.red, style=line.style_dashed, width=2)
        tpLine := line.new(n, targetPrice, n+10, targetPrice, color=color.green, style=line.style_dashed, width=2)

    if showLabels
        entryLabel := label.new(n, low - atr*0.5,
             "ðŸŸ¢ LONG ENTRY\n" +
             "Entry: " + str.tostring(entryPrice, "#.####") + "\n" +
             "SL: " + str.tostring(stopPrice, "#.####") + " (-" + str.tostring(stopLossATR, "#.#") + " ATR)\n" +
             "TP: " + str.tostring(targetPrice, "#.####") + " (+" + str.tostring(takeProfitATR, "#.#") + " ATR)\n" +
             "Risk: " + str.tostring((entryPrice - stopPrice) / entryPrice * 100, "#.##") + "%",
             color=color.new(bullCss, 10), style=label.style_label_up, textcolor=color.white, size=size.normal)

// Long Sweep Entry with ATR
if longSweepEntry
    entryPrice = close
    stopPrice = entryPrice - (atr * stopLossATR * 0.8)  // Tighter stop for sweeps
    targetPrice = entryPrice + (atr * takeProfitATR)
    posSize = calculatePositionSize(entryPrice, stopPrice)

    strategy.entry("Long Sweep", strategy.long, qty=posSize)
    strategy.exit("Long Sweep Exit", "Long Sweep", stop=stopPrice, limit=targetPrice)

    if showLevels
        slLine := line.new(n, stopPrice, n+10, stopPrice, color=color.red, style=line.style_dotted, width=2)
        tpLine := line.new(n, targetPrice, n+10, targetPrice, color=color.green, style=line.style_dotted, width=2)

    if showLabels
        entryLabel := label.new(n, low - atr*0.5,
             "ðŸ”„ SWEEP LONG\n" +
             "Entry: " + str.tostring(entryPrice, "#.####") + "\n" +
             "SL: " + str.tostring(stopPrice, "#.####") + "\n" +
             "TP: " + str.tostring(targetPrice, "#.####"),
             color=color.new(color.orange, 10), style=label.style_label_up, textcolor=color.white, size=size.normal)

// Short Trade Management with ATR
if shortCondition
    entryPrice = close
    stopPrice = entryPrice + (atr * stopLossATR)
    targetPrice = entryPrice - (atr * takeProfitATR)
    posSize = calculatePositionSize(entryPrice, stopPrice)

    strategy.entry("Short", strategy.short, qty=posSize)
    strategy.exit("Short Exit", "Short", stop=stopPrice, limit=targetPrice)

    if showLevels
        slLine := line.new(n, stopPrice, n+10, stopPrice, color=color.red, style=line.style_dashed, width=2)
        tpLine := line.new(n, targetPrice, n+10, targetPrice, color=color.green, style=line.style_dashed, width=2)

    if showLabels
        entryLabel := label.new(n, high + atr*0.5,
             "ðŸ”´ SHORT ENTRY\n" +
             "Entry: " + str.tostring(entryPrice, "#.####") + "\n" +
             "SL: " + str.tostring(stopPrice, "#.####") + " (+" + str.tostring(stopLossATR, "#.#") + " ATR)\n" +
             "TP: " + str.tostring(targetPrice, "#.####") + " (-" + str.tostring(takeProfitATR, "#.#") + " ATR)\n" +
             "Risk: " + str.tostring((stopPrice - entryPrice) / entryPrice * 100, "#.##") + "%",
             color=color.new(bearCss, 10), style=label.style_label_down, textcolor=color.white, size=size.normal)

// Short Sweep Entry with ATR
if shortSweepEntry
    entryPrice = close
    stopPrice = entryPrice + (atr * stopLossATR * 0.8)  // Tighter stop for sweeps
    targetPrice = entryPrice - (atr * takeProfitATR)
    posSize = calculatePositionSize(entryPrice, stopPrice)

    strategy.entry("Short Sweep", strategy.short, qty=posSize)
    strategy.exit("Short Sweep Exit", "Short Sweep", stop=stopPrice, limit=targetPrice)

    if showLevels
        slLine := line.new(n, stopPrice, n+10, stopPrice, color=color.red, style=line.style_dotted, width=2)
        tpLine := line.new(n, targetPrice, n+10, targetPrice, color=color.green, style=line.style_dotted, width=2)

    if showLabels
        entryLabel := label.new(n, high + atr*0.5,
             "ðŸ”„ SWEEP SHORT\n" +
             "Entry: " + str.tostring(entryPrice, "#.####") + "\n" +
             "SL: " + str.tostring(stopPrice, "#.####") + "\n" +
             "TP: " + str.tostring(targetPrice, "#.####"),
             color=color.new(color.orange, 10), style=label.style_label_down, textcolor=color.white, size=size.normal)

// ============================================================================
// VISUALIZATION & PLOTS
// ============================================================================
// Plot swing highs and lows
plot(top, 'Swing High', color.new(bearCss, 50), 3, plot.style_circles, offset=-len)
plot(btm, 'Swing Low', color.new(bullCss, 50), 3, plot.style_circles, offset=-len)

// Plot EMA trend line
plot(ema, 'EMA Trend', color=color.new(color.blue, 30), linewidth=2)

// Plot market structure signals
plotshape(longBOS and longFiltersPassed, "Long BOS", shape.triangleup, location.belowbar, bullCss, size=size.small)
plotshape(shortBOS and shortFiltersPassed, "Short BOS", shape.triangledown, location.abovebar, bearCss, size=size.small)
plotshape(longSweep, "Long Sweep", shape.xcross, location.abovebar, color.orange, size=size.small)
plotshape(shortSweep, "Short Sweep", shape.xcross, location.belowbar, color.orange, size=size.small)

// Background color for market structure bias
bgcolor(os == 1 ? color.new(bullCss, 95) : color.new(bearCss, 95), title="Market Structure Bias")

// Filter status colors
barcolor(longFiltersPassed and os == 1 ? color.new(bullCss, 70) :
         shortFiltersPassed and os == 0 ? color.new(bearCss, 70) : na, title="Filter Status")

// ============================================================================
// STRATEGY STATISTICS TABLE
// ============================================================================
if barstate.islast
    var table infoTable = table.new(position.top_right, 2, 10, bgcolor=color.new(color.white, 80), border_width=1)

    // Headers
    table.cell(infoTable, 0, 0, "ðŸ“Š Strategy Stats", text_color=color.black, bgcolor=color.new(color.gray, 50), text_size=size.normal)
    table.cell(infoTable, 1, 0, "Value", text_color=color.black, bgcolor=color.new(color.gray, 50), text_size=size.normal)

    // Performance Metrics
    winRate = strategy.wintrades / math.max(strategy.closedtrades, 1) * 100
    profitFactor = strategy.grossprofit / math.max(strategy.grossloss, 1)
    avgWin = strategy.grossprofit / math.max(strategy.wintrades, 1)
    avgLoss = strategy.grossloss / math.max(strategy.losstrades, 1)

    table.cell(infoTable, 0, 1, "Win Rate", text_color=color.black)
    table.cell(infoTable, 1, 1, str.tostring(winRate, "#.##") + "%", text_color=winRate >= 50 ? color.green : color.red)

    table.cell(infoTable, 0, 2, "Profit Factor", text_color=color.black)
    table.cell(infoTable, 1, 2, str.tostring(profitFactor, "#.##"), text_color=profitFactor >= 1.5 ? color.green : color.red)

    table.cell(infoTable, 0, 3, "Total Trades", text_color=color.black)
    table.cell(infoTable, 1, 3, str.tostring(strategy.closedtrades), text_color=color.black)

    table.cell(infoTable, 0, 4, "Net Profit", text_color=color.black)
    table.cell(infoTable, 1, 4, str.tostring(strategy.netprofit, "#.##"), text_color=strategy.netprofit > 0 ? color.green : color.red)

    table.cell(infoTable, 0, 5, "Max Drawdown", text_color=color.black)
    table.cell(infoTable, 1, 5, str.tostring(strategy.max_drawdown, "#.##"), text_color=color.red)

    table.cell(infoTable, 0, 6, "Avg Win/Loss", text_color=color.black)
    table.cell(infoTable, 1, 6, str.tostring(avgWin/avgLoss, "#.##"), text_color=color.black)

    // Current Market Conditions
    table.cell(infoTable, 0, 7, "RSI", text_color=color.black)
    table.cell(infoTable, 1, 7, str.tostring(rsi, "#.##"), text_color=rsi > 70 ? color.red : rsi < 30 ? color.green : color.black)

    table.cell(infoTable, 0, 8, "ATR", text_color=color.black)
    table.cell(infoTable, 1, 8, str.tostring(atr, "#.####"), text_color=color.black)

    table.cell(infoTable, 0, 9, "Market Bias", text_color=color.black)
    table.cell(infoTable, 1, 9, os == 1 ? "Bullish" : "Bearish", text_color=os == 1 ? bullCss : bearCss)