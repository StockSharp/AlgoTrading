//@version=4
study("Session Volume",overlay = false, format=format.volume)

make_colour(temp_col_sess, dark_screen, show_high_low_bars)=>



    col_sess_dark = if temp_col_sess == "aqua"
        show_high_low_bars?   close>open ?color.new(color.aqua,0):color.new(color.aqua,50):color.new(color.aqua,0)
    else if temp_col_sess == "black"
        show_high_low_bars?   close>open ?color.new(color.black,0):color.new(color.black,50):color.new(color.black,0)
    else if temp_col_sess ==  "blue"
        show_high_low_bars?   close>open ?color.new(color.blue,0):color.new(color.blue,50):color.new(color.blue,0)
    else if temp_col_sess ==  "fuchsia"
        show_high_low_bars?   close>open ?color.new(color.fuchsia,0):color.new(color.fuchsia,50):color.new(color.fuchsia,0)
    else if temp_col_sess ==  "gray"
        show_high_low_bars?   close>open ?color.new(color.gray,0):color.new(color.gray,50):color.new(color.gray,0)
    else if temp_col_sess ==  "green"
        show_high_low_bars?   close>open ?color.new(color.green,0):color.new(color.green,50):color.new(color.green,0)
    else if temp_col_sess ==  "lime"
        show_high_low_bars?   close>open ?color.new(color.lime,0):color.new(color.lime,50):color.new(color.lime,0)
    else if temp_col_sess ==  "maroon"
        show_high_low_bars?   close>open ?color.new(color.maroon,0):color.new(color.maroon,50):color.new(color.maroon,0)
    else if temp_col_sess ==  "olive"
        show_high_low_bars?   close>open ?color.new(color.olive,0):color.new(color.olive,50):color.new(color.olive,0)
    else if temp_col_sess ==  "orange"
        show_high_low_bars?   close>open ?color.new(color.orange,0):color.new(color.orange,50):color.new(color.orange,0)
    else if temp_col_sess ==  "purple"
        show_high_low_bars?   close>open ?color.new(color.purple,0):color.new(color.purple,50):color.new(color.purple,0)
    else if temp_col_sess ==  "red"
        show_high_low_bars?   close>open ?color.new(color.red,0):color.new(color.red,50):color.new(color.red,0)
    else if temp_col_sess == "silver"
        show_high_low_bars?   close>open ?color.new(color.silver,0):color.new(color.silver,50):color.new(color.silver,0)
    else if temp_col_sess == "teal"
        show_high_low_bars?   close>open ?color.new(color.teal,0):color.new(color.teal,50):color.new(color.teal,0)
    else if temp_col_sess == "white"
        show_high_low_bars?   close>open ?color.new(color.white,0):color.new(color.white,50):color.new(color.white,0)
    else if temp_col_sess == "yellow"
        show_high_low_bars?   close>open ?color.new(color.yellow,0):color.new(color.yellow,50):color.new(color.yellow,0)


    col_sess_light = if temp_col_sess == "aqua"
        show_high_low_bars?   close<open ?color.new(color.aqua,0):color.new(color.aqua,50):color.new(color.aqua,0)
    else if temp_col_sess == "black"
        show_high_low_bars?   close<open ?color.new(color.black,0):color.new(color.black,50):color.new(color.black,0)
    else if temp_col_sess ==  "blue"
        show_high_low_bars?   close<open ?color.new(color.blue,0):color.new(color.blue,50):color.new(color.blue,0)
    else if temp_col_sess ==  "fuchsia"
        show_high_low_bars?   close<open ?color.new(color.fuchsia,0):color.new(color.fuchsia,50):color.new(color.fuchsia,0)
    else if temp_col_sess ==  "gray"
        show_high_low_bars?   close<open ?color.new(color.gray,0):color.new(color.gray,50):color.new(color.gray,0)
    else if temp_col_sess ==  "green"
        show_high_low_bars?   close<open ?color.new(color.green,0):color.new(color.green,50):color.new(color.green,0)
    else if temp_col_sess ==  "lime"
        show_high_low_bars?   close<open ?color.new(color.lime,0):color.new(color.lime,50):color.new(color.lime,0)
    else if temp_col_sess ==  "maroon"
        show_high_low_bars?   close<open ?color.new(color.maroon,0):color.new(color.maroon,50):color.new(color.maroon,0)
    else if temp_col_sess ==  "olive"
        show_high_low_bars?   close<open ?color.new(color.olive,0):color.new(color.olive,50):color.new(color.olive,0)
    else if temp_col_sess ==  "orange"
        show_high_low_bars?   close<open ?color.new(color.orange,0):color.new(color.orange,50):color.new(color.orange,0)
    else if temp_col_sess ==  "purple"
        show_high_low_bars?   close<open ?color.new(color.purple,0):color.new(color.purple,50):color.new(color.purple,0)
    else if temp_col_sess ==  "red"
        show_high_low_bars?   close<open ?color.new(color.red,0):color.new(color.red,50):color.new(color.red,0)
    else if temp_col_sess == "silver"
        show_high_low_bars?   close<open ?color.new(color.silver,0):color.new(color.silver,50):color.new(color.silver,0)
    else if temp_col_sess == "teal"
        show_high_low_bars?   close<open ?color.new(color.teal,0):color.new(color.teal,50):color.new(color.teal,0)
    else if temp_col_sess == "white"
        show_high_low_bars?   close<open ?color.new(color.white,0):color.new(color.white,50):color.new(color.white,0)
    else if temp_col_sess == "yellow"
        show_high_low_bars?   close<open ?color.new(color.yellow,0):color.new(color.yellow,50):color.new(color.yellow,0)




    col_sess = dark_screen?col_sess_dark:col_sess_light


//==================================================

make_string(num)=>
    a = num<10?   "0"+tostring(num):    tostring(num)


//==================================================

make_session(s_h2, f_h2, s_m2, f_m2, time_zone_dif)=>




    one_candle_more = 1//timeframe.multiplier==60?1:   timeframe.multiplier==30?2:    timeframe.multiplier==15?4:     timeframe.multiplier==10?6:     timeframe.multiplier==5?12:  timeframe.multiplier==3?20:0



    f_h = 0
    f_m = 0
    s_h = 0
    s_m = 0


    if timeframe.multiplier >=60
        f_h := f_m2 == 30? f_h2:f_h2
        f_m := 0
        s_h := s_h2
        s_m := 0

    else
        f_h := f_h2
        f_m := f_m2
        s_h := s_h2
        s_m := s_m2


    s_h := s_h
    f_h := f_h


    start = s_h+time_zone_dif
    if start<0
        start:=24-abs(start)

    f2=f_h+one_candle_more

    finish = f2+time_zone_dif
    if finish<0
        finish:=24-abs(finish)


    session_title = make_string(s_h)   +":"+   make_string(s_m)   +" to "+    make_string(f_h)  +":"+   make_string(f_m)
    session       = make_string(start)   +   make_string(s_m)   +"-"+    make_string(finish-1)  +   make_string(f_m)



    session_duration = timeframe.multiplier==60?    f2-s_h:   timeframe.multiplier==30?  (f2-s_h) * 2:    timeframe.multiplier==15?  (f2-s_h) * 4:      timeframe.multiplier==5?  (f2-s_h) * 12:    timeframe.multiplier==3?  (f2-s_h) * 20 :na


    extra_half_hour = f_m-s_m == 30?1:  f_m-s_m == 0?0:     f_m-s_m == -30?-1:0

    session_duration := session_duration+extra_half_hour







    [session,session_title,session_duration]







get_ave(vol, is_sess, length)=>

    sum_vol = 0.0
    e = 0

    for i = 0 to 250
        if e >= length
            break

        if is_sess[i]
            sum_vol := sum_vol + vol[i]
            e := e+1
    length2 = length<e?length:e
    ave = sum_vol/length2


//================================================


get_session_duration(sess_period)=>

    sess_current = not na(time("D", sess_period))
    a = barssince(sess_current[1] and not sess_current)
    b = barssince(not sess_current[1] and sess_current)
    count = a>b?true:false

    duration = 0
    for e = 0 to 999
        if not count[e] and count[e+1]
            for i = 0 to 999
                duration := i
                if count[i+e] and not count[i+e+1]
                    break
        if duration>0
            break

    duration

//================================================



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//GLOBAL default values////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
time_zone_dif = input(title="Time zone difference to exchange", type = input.integer, minval=-23, maxval = 23, defval = -5)
show_high_low_bars = input(title="Show Higher/Lower Price in Volume Colour",type=input.bool, defval=true)
show_session_1 = input(title="Show Session 1 Range",type=input.bool, defval=true)
show_session_2 = input(title="Show Session 2 Range",type=input.bool, defval=true)
show_session_3 = input(title="Show Session 3 Range",type=input.bool, defval=true)
show_session_4 = input(title="Show Session 4 Range",type=input.bool, defval=true)
no_sess_ave =   input(title="Number of Entire Sessions a Calculate Average Line",type=input.integer, defval=5)
show_sess_ave =  input(title="Show Aveage Ranges by Session",type=input.bool, defval=true)


show_gen_sma = input(title="Show a generic simple moving average",type=input.bool, defval=true)
sma_ave =  input(title="Length of simple moving average",type=input.integer, defval=20)



dark_screen =   input(title="Dark Background",type=input.bool, defval=false)

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//make the volume
vol = security(syminfo.tickerid, timeframe.period, volume)
vol_ave_len = 100

//make the no session colour
no_sess_color_temp = dark_screen?"white":"black"
no_sess_color = make_colour(no_sess_color_temp, dark_screen, show_high_low_bars)


//-------------------------------------------------------
//SESSION 1
//-------------------------------------------------------

//make the session

start_session_1_hour = input(title="Session 1 start hour", type = input.integer, minval=0, maxval = 23, defval = 0)
start_session_1_min = input(title="Session 1 start minute (0 or 30)", type = input.integer, minval=0, maxval = 30, defval = 0, step = 30)
finish_session_1_hour = input(title="Session 1 finish hour", type = input.integer, minval=0, maxval = 23, defval = 8)
finish_session_1_min = input(title="Session 1 finish minute (0 or 30)", type = input.integer, minval=0, maxval = 30, defval = 0, step = 30)
[period_session_1,title_session_1,duration_sess_1]=make_session(start_session_1_hour, finish_session_1_hour, start_session_1_min, finish_session_1_min, time_zone_dif)


//make the session colours
temp_col_sess_1 = input(title="Session 1 colour", defval = "blue", options=["aqua", "black", "blue","fuchsia", "gray" ,"green", "lime", "maroon", "navy", "olive", "orange", "purple", "red", "silver", "teal", "white", "yellow"])
col_sess_1 = make_colour(temp_col_sess_1, dark_screen, show_high_low_bars)
col_sess_1 := show_session_1?col_sess_1:no_sess_color

//sess current?
current_sess_1 = not na(time("D", period_session_1))
sess_1_ave = get_ave(vol, current_sess_1, duration_sess_1*no_sess_ave)
sess_1_ave_col = current_sess_1?dark_screen?color.white:color.black:na


//-------------------------------------------------------
//SESSION 2
//-------------------------------------------------------

//make the session

start_session_2_hour = input(title="Session 2 start hour", type = input.integer, minval=0, maxval = 23, defval = 8)
start_session_2_min = input(title="Session 2 start minute (0 or 30)", type = input.integer, minval=0, maxval = 30, defval = 0, step = 30)
finish_session_2_hour = input(title="Session 2 finish hour", type = input.integer, minval=0, maxval = 23, defval = 13)
finish_session_2_min = input(title="Session 2 finish minute (0 or 30)", type = input.integer, minval=0, maxval = 30, defval = 30, step = 30)
[period_session_2,title_session_2,duration_sess_2]=make_session(start_session_2_hour, finish_session_2_hour, start_session_2_min, finish_session_2_min, time_zone_dif)


//make the session colours
temp_col_sess_2 = input(title="Session 2 colour", defval = "green", options=["aqua", "black", "blue","fuchsia", "gray" ,"green", "lime", "maroon", "navy", "olive", "orange", "purple", "red", "silver", "teal", "white", "yellow"])
col_sess_2 = make_colour(temp_col_sess_2, dark_screen, show_high_low_bars)
col_sess_2 := show_session_2?col_sess_2:no_sess_color

//sess current?
current_sess_2 = not na(time("D", period_session_2))
sess_2_ave = get_ave(vol, current_sess_2, duration_sess_2*no_sess_ave)
sess_2_ave_col = current_sess_2?dark_screen?color.white:color.black:na



//-------------------------------------------------------
//SESSION 3
//-------------------------------------------------------

//make the session

start_session_3_hour = input(title="Session 3 start hour", type = input.integer, minval=0, maxval = 23, defval = 13)
start_session_3_min = input(title="Session 3 start minute (0 or 30)", type = input.integer, minval=0, maxval = 30, defval = 30, step = 30)
finish_session_3_hour = input(title="Session 3 finish hour", type = input.integer, minval=0, maxval = 23, defval = 16)
finish_session_3_min = input(title="Session 3 finish minute (0 or 30)", type = input.integer, minval=0, maxval = 30, defval = 30, step = 30)
[period_session_3,title_session_3,duration_sess_3]=make_session(start_session_3_hour, finish_session_3_hour, start_session_3_min, finish_session_3_min, time_zone_dif)


//make the session colours
temp_col_sess_3 = input(title="Session 3 colour", defval = "red", options=["aqua", "black", "blue","fuchsia", "gray" ,"green", "lime", "maroon", "navy", "olive", "orange", "purple", "red", "silver", "teal", "white", "yellow"])
col_sess_3 = make_colour(temp_col_sess_3, dark_screen, show_high_low_bars)
col_sess_3 := show_session_3?col_sess_3:no_sess_color

//sess current?
current_sess_3 = not na(time("D", period_session_3))
sess_3_ave = get_ave(vol, current_sess_3, duration_sess_3*no_sess_ave)
sess_3_ave_col = current_sess_3?dark_screen?color.white:color.black:na

////////////////////////////////////////////


//-------------------------------------------------------
//SESSION 4
//-------------------------------------------------------

//make the session

start_session_4_hour = input(title="Session 4 start hour", type = input.integer, minval=0, maxval = 23, defval = 16)
start_session_4_min = input(title="Session 4 start minute (0 or 30)", type = input.integer, minval=0, maxval = 30, defval = 30, step = 30)
finish_session_4_hour = input(title="Session 4 finish hour", type = input.integer, minval=0, maxval = 23, defval = 22)
finish_session_4_min = input(title="Session 4 finish minute (0 or 30)", type = input.integer, minval=0, maxval = 30, defval = 0, step = 30)
[period_session_4,title_session_4,duration_sess_4]=make_session(start_session_4_hour, finish_session_4_hour, start_session_4_min, finish_session_4_min, time_zone_dif)


//make the session colours
temp_col_sess_4 = input(title="Session 4 colour", defval = "purple", options=["aqua", "black", "blue","fuchsia", "gray" ,"green", "lime", "maroon", "navy", "olive", "orange", "purple", "red", "silver", "teal", "white", "yellow"])
col_sess_4 = make_colour(temp_col_sess_4, dark_screen, show_high_low_bars)
col_sess_4 := show_session_4?col_sess_4:no_sess_color

//sess current?
current_sess_4 = not na(time("D", period_session_4))
sess_4_ave = get_ave(vol, current_sess_4, duration_sess_4*no_sess_ave)
sess_4_ave_col = current_sess_4?dark_screen?color.white:color.black:na

////////////////////////////////////////////



vol_col = current_sess_1?col_sess_1     :       current_sess_2?col_sess_2       :       current_sess_3?col_sess_3       :        current_sess_4?col_sess_4:      no_sess_color


plot(vol,color = vol_col, style=plot.style_columns,  title="Volume", linewidth = 1)


vol_ave = sma(vol,sma_ave)
vol_ave := show_gen_sma?vol_ave:na
plot(vol_ave, color = color.gray)

sess_1_ave_col := timeframe.multiplier <5   or not show_sess_ave?        na:     sess_1_ave_col
sess_2_ave_col := timeframe.multiplier <5   or not show_sess_ave?        na:     sess_2_ave_col
sess_3_ave_col := timeframe.multiplier <5   or not show_sess_ave?        na:     sess_3_ave_col
sess_4_ave_col := timeframe.multiplier <5   or not show_sess_ave?        na:     sess_4_ave_col

plot(sess_1_ave, color = sess_1_ave_col)
plot(sess_2_ave, color = sess_2_ave_col)
plot(sess_3_ave, color = sess_3_ave_col)
plot(sess_4_ave, color = sess_4_ave_col)