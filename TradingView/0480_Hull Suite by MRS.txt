//@version=6
// Converted to Strategy by MRS
strategy('Hull Suite by MRS', overlay=true, pyramiding=1, default_qty_type=strategy.percent_of_equity, default_qty_value=100, calc_on_order_fills=false, slippage=0, commission_type=strategy.commission.percent, commission_value=0)

// Input for strategy direction
strat_dir_input = input.string(title='Strategy Direction', defval='long', options=['long', 'short', 'all'])
strat_dir_value = strat_dir_input == 'long' ? strategy.direction.long : strat_dir_input == 'short' ? strategy.direction.short : strategy.direction.all
strategy.risk.allow_entry_in(strat_dir_value)

//////////////////////////////////////////////////////////////////////
// Testing Start dates
testStartYear = input.int(2016, title='Backtest Start Year')
testStartMonth = input.int(1, title='Backtest Start Month')
testStartDay = input.int(1, title='Backtest Start Day')
testPeriodStart = timestamp(testStartYear, testStartMonth, testStartDay, 0, 0)

// Stop date if you want to use a specific range of dates
testStopYear = input.int(2030, title='Backtest Stop Year')
testStopMonth = input.int(12, title='Backtest Stop Month')
testStopDay = input.int(30, title='Backtest Stop Day')
testPeriodStop = timestamp(testStopYear, testStopMonth, testStopDay, 0, 0)

testPeriod() =>
    time >= testPeriodStart and time <= testPeriodStop

// Component Code Stop
//////////////////////////////////////////////////////////////////////

// INPUTS
src = input(close, title='Source')
modeSwitch = input.string('Hma', title='Hull Variation', options=['Hma', 'Thma', 'Ehma'])
length = input.int(55, title='Length (180-200 for floating S/R, 55 for swing entry)')
switchColor = input.bool(true, title='Color Hull according to trend?')
candleCol = input.bool(false, title='Color candles based on Hull\'s Trend?')
visualSwitch = input.bool(true, title='Show as a Band?')
thicknesSwitch = input.int(1, title='Line Thickness')
transpSwitch = input.int(40, title='Band Transparency', step=5)

// FUNCTIONS
// HMA
HMA(_src, _length) =>
    ta.wma(2 * ta.wma(_src, _length / 2) - ta.wma(_src, _length), math.round(math.sqrt(_length)))

// EHMA
EHMA(_src, _length) =>
    ta.ema(2 * ta.ema(_src, _length / 2) - ta.ema(_src, _length), math.round(math.sqrt(_length)))

// THMA
THMA(_src, _length) =>
    ta.wma(ta.wma(_src, _length / 3) * 3 - ta.wma(_src, _length / 2) - ta.wma(_src, _length), _length)

// SWITCH
Mode(modeSwitch, src, len) =>
    modeSwitch == 'Hma' ? HMA(src, len) : modeSwitch == 'Ehma' ? EHMA(src, len) : modeSwitch == 'Thma' ? THMA(src, len / 2) : na

// OUT
HULL = Mode(modeSwitch, src, length)
MHULL = HULL[0]
SHULL = HULL[2]

// COLOR
hullColor = switchColor ? HULL > HULL[2] ? #00ff00 : #ff0000 : #ff9800

// Create transparent colors using color.new()
hullColorTransparent = color.new(hullColor, transpSwitch)

// PLOT
///< Frame
Fi1 = plot(MHULL, title='MHULL', color=hullColorTransparent, linewidth=thicknesSwitch)
Fi2 = plot(visualSwitch ? SHULL : na, title='SHULL', color=hullColorTransparent, linewidth=thicknesSwitch)
///< Ending Filler
fill(Fi1, Fi2, title='Band Filler', color=hullColorTransparent)

/// BARCOLOR
barcolor(color=candleCol ? switchColor ? hullColor : na : na)

// STRATEGY LOGIC
if HULL[0] > HULL[2] and testPeriod()
    strategy.entry('buy', strategy.long)
if HULL[0] < HULL[2] and testPeriod()
    strategy.entry('sell', strategy.short)