//@version=6
strategy('Energy Advanced Policy Strategy', overlay = true, default_qty_type = strategy.percent_of_equity, default_qty_value = 10, pyramiding = 0)

// News Sentiment Parameters
news_sentiment = input.string('positive', 'Manual News Sentiment', options = ['positive', 'negative', 'neutral'], group = 'News Analysis')
news_impact_days = input.int(7, 'News Impact Duration (Days)', minval = 1, maxval = 30, group = 'News Analysis')
enable_news_filter = input.bool(true, 'Enable News Sentiment Filter', group = 'News Analysis')

// Policy Event Detection
enable_policy_detection = input.bool(true, 'Enable Policy Event Detection', group = 'Policy Analysis')
policy_volume_threshold = input.float(2.0, 'Policy Event Volume Threshold', minval = 1.0, step = 0.1, group = 'Policy Analysis')
policy_price_threshold = input.float(3.0, 'Policy Event Price Threshold (%)', minval = 1.0, step = 0.1, group = 'Policy Analysis')

// Technical Analysis Parameters
rsi_length = input.int(14, 'RSI Length', minval = 1, group = 'Technical Analysis')
rsi_overbought = input.int(75, 'RSI Overbought Level', minval = 50, maxval = 100, group = 'Technical Analysis')
rsi_oversold = input.int(25, 'RSI Oversold Level', minval = 0, maxval = 50, group = 'Technical Analysis')

// Moving Average Parameters
fast_ma_length = input.int(21, 'Fast MA Length', minval = 1, group = 'Moving Averages')
slow_ma_length = input.int(55, 'Slow MA Length', minval = 1, group = 'Moving Averages')
trend_ma_length = input.int(200, 'Trend MA Length', minval = 50, group = 'Moving Averages')

// MACD Parameters
macd_fast = input.int(12, 'MACD Fast Length', minval = 1, group = 'MACD')
macd_slow = input.int(26, 'MACD Slow Length', minval = 1, group = 'MACD')
macd_signal = input.int(9, 'MACD Signal Length', minval = 1, group = 'MACD')

// Bollinger Bands
bb_length = input.int(20, 'Bollinger Bands Length', minval = 1, group = 'Bollinger Bands')
bb_mult = input.float(2.0, 'Bollinger Bands Multiplier', minval = 0.1, step = 0.1, group = 'Bollinger Bands')

// Risk Management
stop_loss_pct = input.float(4.0, 'Stop Loss (%)', minval = 0.1, step = 0.1, group = 'Risk Management')
take_profit_pct = input.float(12.0, 'Take Profit (%)', minval = 0.1, step = 0.1, group = 'Risk Management')
max_position_days = input.int(21, 'Max Position Duration (Days)', minval = 1, group = 'Risk Management')
trailing_stop_pct = input.float(2.0, 'Trailing Stop (%)', minval = 0.1, step = 0.1, group = 'Risk Management')

// RSI
rsi = ta.rsi(close, rsi_length)

// Moving Averages
fast_ma = ta.ema(close, fast_ma_length)
slow_ma = ta.ema(close, slow_ma_length)
trend_ma = ta.sma(close, trend_ma_length)

ma_bullish = fast_ma > slow_ma
ma_bearish = fast_ma < slow_ma
trend_bullish = close > trend_ma
trend_bearish = close < trend_ma

// MACD
[macd_line, signal_line, hist] = ta.macd(close, macd_fast, macd_slow, macd_signal)
macd_bullish = macd_line > signal_line
macd_bearish = macd_line < signal_line

// Bollinger Bands
[bb_upper, bb_middle, bb_lower] = ta.bb(close, bb_length, bb_mult)
bb_position = (close - bb_lower) / (bb_upper - bb_lower)
bb_squeeze = (bb_upper - bb_lower) / bb_middle < 0.1

// Volume Analysis
volume_ma = ta.sma(volume, 20)
high_volume = volume > volume_ma * 1.5
very_high_volume = volume > volume_ma * policy_volume_threshold

// Price Action
price_change = (close - close[1]) / close[1] * 100
price_momentum = ta.change(close, 5)
price_acceleration = ta.change(price_momentum, 1)

// Detect potential policy events based on unusual price and volume activity
policy_event_bullish = false
policy_event_bearish = false

if enable_policy_detection
    // Bullish policy event: high volume + significant price increase
    if very_high_volume and price_change > policy_price_threshold and rsi < 80
        policy_event_bullish := true
        policy_event_bullish

    // Bearish policy event: high volume + significant price decrease
    if very_high_volume and price_change < -policy_price_threshold and rsi > 20
        policy_event_bearish := true
        policy_event_bearish

// Policy event impact tracking
var int bullish_policy_count = 0
var int bearish_policy_count = 0

if policy_event_bullish
    bullish_policy_count := bullish_policy_count + 1
    if bullish_policy_count > 5
        bullish_policy_count := 5
        bullish_policy_count

if policy_event_bearish
    bearish_policy_count := bearish_policy_count + 1
    if bearish_policy_count > 5
        bearish_policy_count := 5
        bearish_policy_count

// Decay policy events over time
if bar_index % 5 == 0
    bullish_policy_count := math.max(0, bullish_policy_count - 1)
    bearish_policy_count := math.max(0, bearish_policy_count - 1)
    bearish_policy_count

// Combine manual sentiment with detected policy events
effective_sentiment = news_sentiment

if enable_news_filter
    if bullish_policy_count > bearish_policy_count and bullish_policy_count >= 2
        effective_sentiment := 'positive'
        effective_sentiment
    else if bearish_policy_count > bullish_policy_count and bearish_policy_count >= 2
        effective_sentiment := 'negative'
        effective_sentiment
    else if bullish_policy_count == bearish_policy_count
        effective_sentiment := 'neutral'
        effective_sentiment

// Sentiment strength based on policy event frequency
sentiment_strength = math.abs(bullish_policy_count - bearish_policy_count) / 5.0

// Long Entry Conditions
long_conditions = (effective_sentiment == 'positive' or bullish_policy_count >= 2) and ma_bullish and trend_bullish and rsi < rsi_overbought and macd_bullish and price_momentum > 0 and not bb_squeeze

// Strong Long Entry (multiple confirmations)
strong_long_conditions = long_conditions and sentiment_strength > 0.4 and high_volume and bb_position > 0.5

// Exit Conditions
exit_long = rsi > rsi_overbought or ma_bearish or trend_bearish or macd_bearish or effective_sentiment == 'negative' or bearish_policy_count >= 2 or price_momentum < -2.0

// Entry Logic
if strong_long_conditions and strategy.position_size == 0
    strategy.entry('Strong Long', strategy.long)
    strategy.exit('Strong Long Exit', 'Strong Long', stop = strategy.position_avg_price * (1 - stop_loss_pct / 100), limit = strategy.position_avg_price * (1 + take_profit_pct / 100))
else if long_conditions and strategy.position_size == 0
    strategy.entry('Long', strategy.long)
    strategy.exit('Long Exit', 'Long', stop = strategy.position_avg_price * (1 - stop_loss_pct / 100), limit = strategy.position_avg_price * (1 + take_profit_pct / 100))

// Exit Logic
if exit_long and strategy.position_size > 0
    strategy.close_all()

// Stop
if strategy.position_size > 0
    strategy.exit('Stop Loss', 'Long', stop = strategy.position_avg_price * (1 - stop_loss_pct / 100))

// Position Duration Management
if strategy.position_size != 0
    entry_time = strategy.opentrades.entry_time(strategy.opentrades - 1)
    if bar_index - entry_time > max_position_days * 24 * 60 / timeframe.multiplier
        strategy.close_all()

// Plot moving averages
plot(fast_ma, 'Fast EMA', color = color.blue, linewidth = 2)
plot(slow_ma, 'Slow EMA', color = color.red, linewidth = 2)
plot(trend_ma, 'Trend MA', color = color.orange, linewidth = 3)

// Plot Bollinger Bands
plot(bb_upper, 'BB Upper', color = color.gray, linewidth = 1)
plot(bb_lower, 'BB Lower', color = color.gray, linewidth = 1)

// Plot entry/exit points
plotshape(strong_long_conditions and strategy.position_size == 0, 'Strong Long Entry', shape.triangleup, location.belowbar, color.green, size = size.normal)
plotshape(long_conditions and strategy.position_size == 0 and not strong_long_conditions, 'Long Entry', shape.triangleup, location.belowbar, color.lime, size = size.small)
plotshape(exit_long and strategy.position_size > 0, 'Exit', shape.triangledown, location.abovebar, color.red, size = size.small)

// Plot policy events
plotshape(policy_event_bullish, 'Bullish Policy Event', shape.circle, location.belowbar, color.green, size = size.tiny)
plotshape(policy_event_bearish, 'Bearish Policy Event', shape.circle, location.abovebar, color.red, size = size.tiny)

// ALERTS
alertcondition(strong_long_conditions and strategy.position_size == 0, 'Strong Long Entry', 'Amundi New Energy ETF - Strong long entry signal with multiple confirmations')
alertcondition(long_conditions and strategy.position_size == 0 and not strong_long_conditions, 'Long Entry', 'Amundi New Energy ETF - Long entry signal')
alertcondition(exit_long and strategy.position_size > 0, 'Exit Signal', 'Amundi New Energy ETF - Exit signal')

// STRATEGY INFO TABLE
var table info_table = table.new(position.top_right, 2, 8, bgcolor = color.white, border_width = 1)
if barstate.islast
    table.cell(info_table, 0, 0, 'Strategy', text_color = color.black, bgcolor = color.gray)
    table.cell(info_table, 1, 0, 'Amundi New Energy ETF', text_color = color.black, bgcolor = color.gray)

    table.cell(info_table, 0, 1, 'Sentiment', text_color = color.black)
    table.cell(info_table, 1, 1, effective_sentiment, text_color = effective_sentiment == 'positive' ? color.green : effective_sentiment == 'negative' ? color.red : color.gray)

    table.cell(info_table, 0, 2, 'Sentiment Strength', text_color = color.black)
    table.cell(info_table, 1, 2, str.tostring(sentiment_strength, '#.##'), text_color = color.black)

    table.cell(info_table, 0, 3, 'Bullish Events', text_color = color.black)
    table.cell(info_table, 1, 3, str.tostring(bullish_policy_count), text_color = color.green)

    table.cell(info_table, 0, 4, 'Bearish Events', text_color = color.black)
    table.cell(info_table, 1, 4, str.tostring(bearish_policy_count), text_color = color.red)

    table.cell(info_table, 0, 5, 'RSI', text_color = color.black)
    table.cell(info_table, 1, 5, str.tostring(rsi, '#.##'), text_color = rsi > rsi_overbought ? color.red : rsi < rsi_oversold ? color.green : color.black)

    table.cell(info_table, 0, 6, 'Trend', text_color = color.black)
    table.cell(info_table, 1, 6, trend_bullish ? 'Bullish' : 'Bearish', text_color = trend_bullish ? color.green : color.red)

    table.cell(info_table, 0, 7, 'Position', text_color = color.black)
    table.cell(info_table, 1, 7, strategy.position_size > 0 ? 'Long' : 'Flat', text_color = strategy.position_size > 0 ? color.green : color.gray)

ma_len = input.int(2, "MA Length")
stop_perc = input.float(1.0, "Stop Loss (%)", minval=0.1, step=0.1)
ma = ta.sma(close, ma_len)
long_condition  = ta.crossover(close, ma)
if (long_condition)
    strategy.entry("Long", strategy.long)
if (strategy.position_size > 0)
    strategy.exit("Long SL", "Long", stop=strategy.position_avg_price * (1 - stop_perc / 100))
plot(ma, color=color.orange)