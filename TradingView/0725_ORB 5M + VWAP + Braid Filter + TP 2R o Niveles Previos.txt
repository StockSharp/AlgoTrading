//@version=5
strategy("ORB 5M + VWAP + Braid Filter + TP 2R o Niveles Previos", overlay=true, default_qty_type=strategy.percent_of_equity, default_qty_value=10)

// === PARÁMETROS DE USUARIO ===
startHour   = 9
startMinute = 35
endHour     = 11
endMinute   = 0
riskReward  = 2.0

// === HORARIO DE OPERACIÓN (NY) ===
inTime = (hour(time, "America/New_York") * 60 + minute(time, "America/New_York")) >= (startHour * 60 + startMinute) and
         (hour(time, "America/New_York") * 60 + minute(time, "America/New_York")) <= (endHour * 60 + endMinute)

// === RANGO DE APERTURA 5 MIN ===
var float orbHigh = na
var float orbLow  = na

if (hour(time, "America/New_York") == 9 and minute(time, "America/New_York") == 30)
    orbHigh := high
    orbLow := low
else if (hour(time, "America/New_York") == 9 and minute(time, "America/New_York") < 35)
    orbHigh := math.max(orbHigh, high)
    orbLow := math.min(orbLow, low)

// === VWAP ===
vwapVal = ta.vwap

// === BRAID FILTER ===
braidMA(src, len) => ta.ema(src, len)
ma1 = braidMA(close, 3)
ma2 = braidMA(open, 7)
ma3 = braidMA(close, 14)

braidMax = math.max(math.max(ma1, ma2), ma3)
braidMin = math.min(math.min(ma1, ma2), ma3)
braidDif = braidMax - braidMin
filter = ta.atr(14) * 0.4

braidBull = ma1 > ma2 and braidDif > filter
braidBear = ma2 > ma1 and braidDif > filter

// === NIVELES PREVIOS ===
prevHigh = request.security(syminfo.tickerid, "D", high[1])
prevLow = request.security(syminfo.tickerid, "D", low[1])
preMarketHigh = request.security(syminfo.tickerid, "30", high, lookahead=barmerge.lookahead_on)
preMarketLow = request.security(syminfo.tickerid, "30", low, lookahead=barmerge.lookahead_on)

// === BANDERA: 1 OPERACIÓN POR DÍA ===
var bool hasTradedToday = false
if ta.change(time("D"))
    hasTradedToday := false

// === CONDICIONES DE ENTRADA ===
longCond = not hasTradedToday and inTime and close > orbHigh and close > vwapVal and braidBull
shortCond = not hasTradedToday and inTime and close < orbLow and close < vwapVal and braidBear

// === STOP Y TAKE PROFIT ===
var float longSL = na
var float longTP = na
var float shortSL = na
var float shortTP = na

if longCond
    longSL := orbLow
    r = close - longSL
    tpBase = close + r * riskReward
    longTP := math.min(tpBase, prevHigh, preMarketHigh)
    strategy.entry("Long", strategy.long)
    strategy.exit("TP/SL Long", from_entry="Long", stop=longSL, limit=longTP)
    hasTradedToday := true

if shortCond
    shortSL := orbHigh
    r = shortSL - close
    tpBase = close - r * riskReward
    shortTP := math.max(tpBase, prevLow, preMarketLow)
    strategy.entry("Short", strategy.short)
    strategy.exit("TP/SL Short", from_entry="Short", stop=shortSL, limit=shortTP)
    hasTradedToday := true

// === PLOT RANGO ORB ===
plot(orbHigh, "ORB High", color=color.green, linewidth=1)
plot(orbLow, "ORB Low", color=color.red, linewidth=1)