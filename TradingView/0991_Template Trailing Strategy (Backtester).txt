//@version=6
//#region PREAMBLE
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
//  Copyright © 2022-present Iason Nikolas | jason5480
//  The "Template Trailing Strategy (Backtester)" Pine Script™ code is licensed under Attribution-NonCommercial-ShareAlike
//  4.0 International (CC BY-NC-SA 4.0) https://creativecommons.org/licenses/by-nc-sa/4.0/
//
//  BY: Credit must be given to the creator.
//  NC: Only noncommercial use of your work is permitted. Noncommercial means not primarily intended for or directed
//      towards commercial advantage or monetary compensation.
//  SA: Adaptations must be shared under the same terms.
//
//  This license requires that reusers give credit to the creator. It allows reusers to distribute, remix, adapt, and
//  build upon the material in any medium or format, for noncommercial purposes only. If others modify or adapt the
//  material, they must license the modified material under identical terms.
//
//  Description
//  --------------------------------------------------------------------------------------------------------------------
//  This script is designed to be used as a template for building new strategies. The framework provides you with a
//  configurable implementation of the entry, exit, stop loss and take profit (trailing) logic. The proposed way to use
//  that script is in combination with a customized signal indicator where you implemented your own logic of start and
//  end deal conditions. See the other existing signal indicators in my profile like "Click Signal Indicator" for more.
//  Another way to utilize this script (not recommended) is to copy it and replace the startLongDeal, startShortDeal,
//  endLongDeal, endShortDeal, and optionally if you use limit or stop-limit orders for entry/exit the cnlStartLongDeal,
//  cnlStartShortDeal, cnlEndtLongDeal, cnlEndtShortDeal fields of the dealConditions UDT in the STRATEGY 1 module
//  according to your needs! However, doing that way you will have to re-implement your changes every time I release
//  a new update if you want to have those new changes I made in your script. Last but not least, if you want to release
//  the modified version you should share it under compatible terms as the ShareAlike property of the license describe.
//
//  --------------------------------------------------------------------------------------------------------------------
//  Disclaimer:
//    1. I am not licensed financial advisors or broker-dealer. I do not tell you when or what to buy or sell.
//       I developed this software which enables you execute manual or automated trades using TradingView.
//       The software allows you to set the criteria you want for entering and exiting trades.
//    2. Do not trade with money you cannot afford to lose.
//    3. I do not guarantee consistent profits or that anyone can make money with no effort.
//       And I am not selling the holy grail.
//    4. Every system can have winning and losing streaks.
//    5. Money management plays a large role in the results of your trading. For example: lot size, account size,
//       broker leverage, and broker margin call rules all affect on results. Also, your Take Profit and Stop Loss
//       settings for individual pair trades and for overall account equity have a major impact on results.
//       If you are new to trading and do not understand these items, then I recommend you seek educational materials
//       to further your knowledge.
//
//  YOU NEED TO FIND AND USE THE TRADING SYSTEM THAT WORKS BEST FOR YOU AND YOUR TRADING TOLERANCE.
//  I HAVE PROVIDED NOTHING MORE THAN A TOOL WITH OPTIONS FOR YOU TO TRADE WITH THIS PROGRAM ON TRADINGVIEW.
//
//  I accept defect (bug) reports! If you found one, let me know by sending me a private message on TradingView.
//  If you encounter any problems, I will be happy if you share them with me and find a solution together.
//  --------------------------------------------------------------------------------------------------------------------
//#endregion ===========================================================================================================
//#region SETUP
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
//@strategy_alert_message {{strategy.order.alert_message}}
strategy(title = 'Template Trailing Strategy (Backtester)',
         shorttitle = 'TTSv51',
         overlay = true,
         format = format.price,
         pyramiding = 0,
         backtest_fill_limits_assumption = 1,
         default_qty_type = strategy.percent_of_equity,
         default_qty_value = 10,
         initial_capital = 100000,
         slippage = 3,
         commission_type = strategy.commission.percent,
         commission_value = 0.1,
         close_entries_rule = 'ANY',
         max_lines_count = 500,
         max_labels_count = 500,
         fill_orders_on_standard_ohlc = true,
         behind_chart = false)

const int NUM_OF_MODS = 14
int modCount = 0

//#endregion ===========================================================================================================
//#region 📆 FILTERS
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
// Description: Module responsible for filtering out long and short open signals that do not meet user defined rules
// Dependencies: NONE
// Results: timeFilterApproval

import jason5480/chrono_utils/7 as chr

// INPUT ===============================================================================================================
var referenceTimezone = chr.exTimezone(input.enum(defval = chr.Timezone.Exchange, title = 'Timezones Ref->Chart', inline = 'Timezone', group = '📆 Filters', display = display.data_window))

var dateTimeWindow = chr.DateTimeWindow.new().init(
  fromDateTime = input.bool(defval = false, title = 'From     ', inline = 'From Date', group = '📆 Filters', display = display.data_window) ? input.time(defval = timestamp('01 Jan 2023 00:00'), title = ' ', inline = 'From Date', group = '📆 Filters', display = display.data_window) : na,
  toDateTime = input.bool(defval = false, title = 'To       ', inline = 'To Date', group = '📆 Filters', display = display.data_window) ? input.time(defval = timestamp('01 Jan 2024 00:00'), title = '  ', inline = 'To Date', group = '📆 Filters', display = display.data_window) : na,
  refTimezone = referenceTimezone,
  chTimezone = chr.exTimezone(input.enum(defval = chr.Timezone.Exchange, title = '->', tooltip = 'The Timezone Ref is the reference timezone that is used for all the input time settings. The Timezone Chart is the timezone to convert into. WARNING! The chart timezone setting should always match with the actual chart timezone on the bottom right corner of your chart.', inline = 'Timezone', group = '📆 Filters', display = display.data_window)))

var days = input.bool(defval = false, title = 'Session Days', inline = 'Session Days', group = '📆 Filters', display = display.data_window) ? chr.SessionDays.new().init(
  sun = input.bool(defval = false, title = 'Sun', inline = 'Session Days', group = '📆 Filters', display = display.data_window),
  mon = input.bool(defval = true, title = 'Mon', inline = 'Session Days', group = '📆 Filters', display = display.data_window),
  tue = input.bool(defval = true, title = 'Tue', inline = 'Session Days', group = '📆 Filters', display = display.data_window),
  wed = input.bool(defval = true, title = 'Wed', inline = 'Session Days', group = '📆 Filters', display = display.data_window),
  thu = input.bool(defval = true, title = 'Thu', inline = 'Session Days', group = '📆 Filters', display = display.data_window),
  fri = input.bool(defval = true, title = 'Fri', inline = 'Session Days', group = '📆 Filters', display = display.data_window),
  sat = input.bool(defval = false, title = 'Sat', inline = 'Session Days', group = '📆 Filters', display = display.data_window)) : na

var timeRange = input.bool(defval = false, title = 'Session Time  ', inline = 'Session Time', group = '📆 Filters', display = display.data_window) ? chr.SessionTimeRange.new().from_sess_string(
  sess = input.session(defval = '0000-2400', title = '   ', inline = 'Session Time', tooltip = 'Time range of the session in Ref Timezone.', group = '📆 Filters', display = display.data_window),
  refTimezone = referenceTimezone) : na

var sess = chr.Session.new().init(days, array.from(timeRange))

// LOGIC ===============================================================================================================
bool dateFilterApproval = dateTimeWindow.is_bar_included()
bool sessionFilterApproval = sess.is_bar_included()
bool timeFilterApproval = dateFilterApproval and sessionFilterApproval

modCount += 1

// PLOT ================================================================================================================
bgcolor(color = timeFilterApproval ? na : color.new(#FF0000, 95), offset = 1, title = 'Filter')

//#endregion ===========================================================================================================
//#region 🛤️ TRACK POSITION
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
// Description: Module responsible for general-purpose variable that needed for several other modules
// Dependencies: NONE
// Results: isLongPosition, isShortPosition, isFlatPosition, enteredLongTrade, enteredShortTrade, lastLongEntryBarIndex, lastShortEntryBarIndex, lastLongExitBarIndex, lastShortExitBarIndex, completedLongTrade, completedShortTrade

// LOGIC ===============================================================================================================
// Numeric limits
const float MAX_LIMIT_FLOAT = 9007199254740992.0 // 2^53
const float MIN_LIMIT_FLOAT = 0.0
const int MAX_LIMIT_INT = 4503599627370495 // 2^52 - 1

// The current and previous position sizes
float currentPositionSize = strategy.opentrades.size(strategy.opentrades - 1)
bool isLongPosition = currentPositionSize > 0
bool isShortPosition = currentPositionSize < 0
bool isFlatPosition = currentPositionSize == 0

// Fixed order Id names
const string LONG_ORDER_ID_PREFIX = 'Long'
const string SHORT_ORDER_ID_PREFIX = 'Short'
const string ENTRY_ORDER_ID_POSTFIX = 'Entry'
string LONG_ORDER_ID_ENTRY = str.format('{0} {1}', LONG_ORDER_ID_PREFIX, ENTRY_ORDER_ID_POSTFIX)
string SHORT_ORDER_ID_ENTRY = str.format('{0} {1}', SHORT_ORDER_ID_PREFIX, ENTRY_ORDER_ID_POSTFIX)
string LONG_ORDER_ID_CLOSE = str.format('Close entry(s) order {0}', LONG_ORDER_ID_ENTRY)
string SHORT_ORDER_ID_CLOSE = str.format('Close entry(s) order {0}', SHORT_ORDER_ID_ENTRY)
const string EXIT_ORDER_ID_PATTERN_1 = '{0} Take Profit {1,number,integer} / Stop Loss / Limit Exit'
const string EXIT_ORDER_ID_PATTERN_2 = '{0} Stop Loss / Limit Exit'

// Last exit helper functions
closedTradesExitId(simple int n) =>
    strategy.closedtrades.exit_id(strategy.closedtrades - n)

closedTradeExitIdContains(simple string prefix, simple int n = 1) =>
    strategy.closedtrades >= n ? str.contains(closedTradesExitId(n), prefix) : false

closedTradeExitIdIs(simple string exitId, simple int n = 1) =>
    strategy.closedtrades >= n ? closedTradesExitId(n) == exitId : false

closedTradesExitBarIndex(simple int n) =>
    strategy.closedtrades.exit_bar_index(strategy.closedtrades - n)

closedTradesExitPrice(simple int n) =>
    strategy.closedtrades.exit_price(strategy.closedtrades - n)

lastTwoClosedTradesExitedInTheSameBar() =>
    strategy.closedtrades >= 2 ? closedTradesExitBarIndex(2) == closedTradesExitBarIndex(1) : false

openTradeEntryIdStartsWith(simple string prefix, simple int n = 1) =>
    str.startswith(strategy.opentrades.entry_id(strategy.opentrades - n), prefix)

// Greetings
if barstate.isfirst
    log.warning('Greet‌ ‌ ‌   ‌‌ ‌    ‌‌  ‌ ‌ ‌      ‌‌ ‌‌‌‌ ‌‌‌  ‌  ‌‌ ‌  ‌ ‌‌  ‌‌‌ ‌‌ ‌  ‌ ‌‌ ‌‌‌  ‌‌    ‌ ‌‌ ‌‌   ‌      ‌‌‌  ‌‌ ‌‌   ‌‌ ‌‌‌  ‌  ‌‌ ‌  ‌ ‌‌‌     ‌‌‌ ‌   ‌‌‌ ‌  ‌      ‌‌ ‌    ‌‌‌ ‌   ‌‌‌ ‌   ‌‌‌     ‌‌‌  ‌‌ ‌‌‌ ‌  ‌ ‌‌‌‌ ‌ ‌‌‌‌ ‌‌‌ ‌‌‌ ‌‌‌ ‌‌‌ ‌‌‌ ‌‌‌ ‌ ‌‌‌  ‌‌‌ ‌   ‌‌‌  ‌  ‌‌    ‌ ‌‌  ‌   ‌‌ ‌  ‌ ‌‌ ‌‌‌  ‌‌  ‌‌‌ ‌‌‌ ‌‌  ‌‌ ‌  ‌ ‌‌  ‌ ‌ ‌‌‌ ‌‌‌ ‌ ‌‌‌  ‌‌   ‌‌ ‌‌ ‌‌‌‌ ‌‌ ‌‌ ‌ ‌ ‌‌‌‌ ‌‌‌  ‌‌ ‌‌   ‌‌ ‌‌‌  ‌  ‌‌ ‌  ‌ ‌‌‌     ‌‌‌ ‌   ‌ ‌‌‌‌ ‌‌ ‌‌‌  ‌‌‌    ‌‌   ‌  ‌‌  ‌‌‌ ‌‌‌‌  ‌ ‌‌ ‌‌‌  ‌ ‌ ‌‌‌ ‌‌ ‌‌   ‌ ‌‌ ‌ ‌ ‌ ‌   ‌‌  ‌ ‌ ‌‌ ‌‌ ‌ ‌‌‌     ‌‌ ‌‌   ‌‌    ‌ ‌‌‌ ‌   ‌‌  ‌ ‌ ‌ ‌‌ ‌ ‌ ‌ ‌   ‌‌‌  ‌  ‌‌    ‌ ‌‌ ‌  ‌ ‌‌ ‌‌   ‌‌ ‌  ‌ ‌‌ ‌‌‌  ‌‌  ‌‌‌ ‌ ‌‌ ‌ ‌ ‌  ‌‌ ‌‌‌ ‌   ‌‌‌  ‌  ‌‌    ‌ ‌‌‌ ‌   ‌‌  ‌ ‌ ‌‌  ‌‌‌ ‌‌‌‌  ‌ ‌ ‌‌‌‌ ‌ ‌‌‌  ‌      ‌ ‌ ‌‌‌ ‌     ‌ ‌ ‌  ‌  ‌  ‌‌‌  ‌  ‌  ‌ ‌  ‌‌‌  ‌   ‌‌‌ ‌    ‌ ‌      ‌  ‌  ‌ ‌‌  ‌‌  ‌      ‌‌‌‌  ‌ ‌‌ ‌‌‌‌ ‌‌‌ ‌ ‌ ‌      ‌‌‌     ‌‌    ‌ ‌‌ ‌  ‌ ‌‌  ‌   ‌      ‌‌ ‌‌ ‌ ‌‌ ‌‌‌‌ ‌‌ ‌‌‌  ‌‌  ‌ ‌ ‌‌‌‌  ‌ ‌      ‌‌  ‌‌  ‌‌ ‌‌‌‌ ‌‌‌  ‌  ‌      ‌‌‌ ‌   ‌‌ ‌    ‌‌ ‌  ‌ ‌‌‌  ‌‌ ‌      ‌‌‌  ‌‌ ‌‌   ‌‌ ‌‌‌  ‌  ‌‌ ‌  ‌ ‌‌‌     ‌‌‌ ‌   ‌ ‌‌   ‌      ‌‌‌‌  ‌ ‌‌ ‌‌‌‌ ‌‌‌ ‌ ‌ ‌      ‌‌ ‌‌ ‌ ‌‌ ‌‌‌‌ ‌‌‌  ‌‌ ‌‌‌ ‌   ‌      ‌‌‌     ‌‌‌  ‌  ‌‌ ‌‌‌‌ ‌‌   ‌  ‌‌    ‌ ‌‌   ‌  ‌‌ ‌‌   ‌‌‌‌  ‌ ‌      ‌‌  ‌‌‌ ‌‌ ‌‌‌‌ ‌‌‌ ‌   ‌      ‌‌‌  ‌‌ ‌‌   ‌‌ ‌‌    ‌ ‌‌ ‌‌ ‌ ‌‌ ‌‌ ‌ ‌‌  ‌ ‌ ‌‌  ‌   ‌ ‌‌‌  ‌      ‌  ‌  ‌ ‌‌  ‌‌  ‌      ‌‌‌ ‌   ‌‌ ‌    ‌‌  ‌ ‌ ‌      ‌‌    ‌ ‌‌‌ ‌ ‌ ‌‌‌ ‌   ‌‌ ‌    ‌‌ ‌‌‌‌ ‌‌‌  ‌  ‌      ‌‌  ‌   ‌‌ ‌‌‌‌ ‌‌  ‌ ‌ ‌‌‌  ‌‌ ‌      ‌‌ ‌‌‌  ‌‌ ‌‌‌‌ ‌‌‌ ‌   ‌      ‌‌  ‌ ‌ ‌‌‌‌    ‌‌‌     ‌‌ ‌‌   ‌‌ ‌  ‌ ‌‌   ‌‌ ‌‌ ‌  ‌ ‌‌‌ ‌   ‌‌ ‌‌   ‌‌‌‌  ‌ ‌      ‌‌ ‌‌ ‌ ‌‌  ‌ ‌ ‌‌ ‌‌‌  ‌‌‌ ‌   ‌‌ ‌  ‌ ‌‌ ‌‌‌‌ ‌‌ ‌‌‌  ‌      ‌‌‌ ‌   ‌‌ ‌    ‌‌  ‌ ‌ ‌      ‌‌ ‌‌‌‌ ‌‌‌  ‌  ‌‌ ‌  ‌ ‌‌  ‌‌‌ ‌‌ ‌  ‌ ‌‌ ‌‌‌  ‌‌    ‌ ‌‌ ‌‌   ‌      ‌‌‌  ‌‌ ‌‌   ‌‌ ‌‌‌  ‌  ‌‌ ‌  ‌ ‌‌‌     ‌‌‌ ‌   ‌ ‌‌‌‌ ‌‌    ‌ ‌‌‌ ‌ ‌ ‌‌‌ ‌   ‌‌ ‌    ‌‌ ‌‌‌‌ ‌‌‌  ‌  ‌ ‌‌   ‌      ‌‌    ‌ ‌‌ ‌‌‌  ‌‌  ‌   ‌      ‌‌‌ ‌   ‌‌ ‌    ‌‌  ‌ ‌ ‌      ‌   ‌  ‌‌    ‌ ‌‌  ‌   ‌‌  ‌   ‌‌ ‌  ‌ ‌‌‌ ‌   ‌‌ ‌  ‌ ‌‌ ‌‌‌‌ ‌‌ ‌‌‌  ‌‌    ‌ ‌‌ ‌‌   ‌      ‌‌‌ ‌‌‌ ‌‌ ‌‌‌‌ ‌‌‌  ‌  ‌‌ ‌ ‌‌ ‌   ‌  ‌      ‌‌ ‌  ‌ ‌‌‌  ‌‌ ‌      ‌‌ ‌‌‌  ‌‌ ‌‌‌‌ ‌‌‌ ‌   ‌      ‌‌‌  ‌‌ ‌‌‌ ‌ ‌ ‌‌  ‌‌  ‌‌  ‌‌  ‌‌ ‌  ‌ ‌‌   ‌‌ ‌‌ ‌  ‌ ‌‌  ‌ ‌ ‌‌ ‌‌‌  ‌‌‌ ‌   ‌      ‌‌  ‌ ‌ ‌‌ ‌‌‌  ‌‌ ‌‌‌‌ ‌‌‌ ‌ ‌ ‌‌  ‌‌‌ ‌‌ ‌    ‌      ‌‌‌ ‌   ‌‌ ‌‌‌‌ ‌      ‌‌   ‌  ‌‌  ‌ ‌ ‌      ‌‌   ‌‌ ‌‌ ‌‌‌‌ ‌‌ ‌‌‌  ‌‌‌  ‌‌ ‌‌ ‌  ‌ ‌‌  ‌   ‌‌  ‌ ‌ ‌‌‌  ‌  ‌‌  ‌ ‌ ‌‌  ‌   ‌      ‌   ‌  ‌‌ ‌‌‌  ‌‌ ‌‌‌‌ ‌‌‌ ‌‌  ‌‌  ‌ ‌ ‌‌ ‌‌   ‌   ‌  ‌ ‌‌   ‌      ‌‌‌ ‌   ‌‌ ‌    ‌‌  ‌ ‌ ‌‌ ‌‌‌  ‌      ‌‌ ‌    ‌‌  ‌ ‌ ‌      ‌‌‌ ‌‌  ‌‌ ‌  ‌ ‌‌ ‌‌‌‌ ‌‌ ‌‌   ‌‌    ‌ ‌‌‌ ‌   ‌‌  ‌ ‌ ‌‌‌  ‌‌ ‌      ‌‌‌ ‌   ‌‌ ‌    ‌‌  ‌ ‌ ‌      ‌ ‌ ‌   ‌‌‌  ‌  ‌‌    ‌ ‌‌  ‌   ‌‌ ‌  ‌ ‌‌ ‌‌‌  ‌‌  ‌‌‌ ‌ ‌ ‌‌  ‌‌ ‌  ‌ ‌‌  ‌ ‌ ‌‌‌ ‌‌‌ ‌‌‌  ‌‌ ‌      ‌  ‌    ‌‌ ‌‌‌‌ ‌‌‌ ‌ ‌ ‌‌‌  ‌‌ ‌‌  ‌ ‌ ‌      ‌ ‌  ‌  ‌‌‌ ‌ ‌ ‌‌ ‌‌‌  ‌‌  ‌ ‌ ‌      ‌  ‌‌‌  ‌‌ ‌‌‌‌ ‌‌ ‌ ‌ ‌ ‌‌‌  ‌      ‌  ‌    ‌‌  ‌ ‌ ‌‌ ‌‌   ‌‌‌     ‌      ‌‌ ‌‌ ‌ ‌‌  ‌ ‌ ‌      ‌‌  ‌‌  ‌‌ ‌  ‌ ‌‌  ‌‌‌ ‌‌ ‌    ‌‌‌ ‌   ‌      ‌‌‌     ‌‌ ‌‌   ‌‌    ‌ ‌‌  ‌‌‌ ‌‌ ‌  ‌ ‌‌    ‌ ‌‌‌  ‌  ‌‌ ‌  ‌ ‌‌‌  ‌‌ ‌‌ ‌‌ ‌ ‌      ‌‌    ‌ ‌‌ ‌‌‌  ‌‌  ‌   ‌      ‌‌‌  ‌  ‌‌  ‌ ‌ ‌‌‌     ‌‌ ‌‌‌‌ ‌‌‌  ‌  ‌‌‌ ‌   ‌      ‌‌‌ ‌   ‌‌ ‌    ‌‌ ‌  ‌ ‌‌‌  ‌‌ ‌      ‌‌   ‌  ‌‌‌‌  ‌ ‌      ‌‌‌  ‌‌ ‌‌  ‌ ‌ ‌‌ ‌‌‌  ‌‌  ‌   ‌‌ ‌  ‌ ‌‌ ‌‌‌  ‌‌  ‌‌‌ ‌      ‌‌    ‌ ‌      ‌‌ ‌‌ ‌ ‌‌  ‌ ‌ ‌‌‌  ‌‌ ‌‌‌  ‌‌ ‌‌    ‌ ‌‌  ‌‌‌ ‌‌  ‌ ‌ ‌      ‌‌  ‌   ‌‌ ‌  ‌ ‌‌‌  ‌  ‌‌  ‌ ‌ ‌‌   ‌‌ ‌‌‌ ‌   ‌‌ ‌‌   ‌‌‌‌  ‌ ‌      ‌‌‌ ‌   ‌‌ ‌‌‌‌ ‌      ‌‌‌ ‌   ‌‌ ‌    ‌‌  ‌ ‌ ‌      ‌ ‌     ‌‌ ‌  ‌ ‌‌ ‌‌‌  ‌‌  ‌ ‌ ‌    ‌‌ ‌‌ ‌‌‌‌ ‌‌  ‌   ‌‌  ‌ ‌ ‌‌‌  ‌  ‌‌‌  ‌‌ ‌      ‌‌ ‌‌ ‌ ‌‌ ‌‌‌‌ ‌‌  ‌   ‌‌  ‌ ‌ ‌‌‌  ‌  ‌‌    ‌ ‌‌‌ ‌   ‌‌ ‌‌‌‌ ‌‌‌  ‌  ‌      ‌‌    ‌ ‌‌   ‌‌ ‌‌   ‌‌ ‌‌ ‌‌‌‌ ‌‌‌ ‌ ‌ ‌‌ ‌‌‌  ‌‌‌ ‌   ‌ ‌‌‌ ings'.desteganographize())

// Last exit bar id and price
var int lastLongExitBarIndex = na
var float lastLongExitPrice = na
if (closedTradeExitIdContains(LONG_ORDER_ID_PREFIX) or closedTradeExitIdIs(SHORT_ORDER_ID_ENTRY)) and not isLongPosition
    lastLongExitBarIndex := closedTradesExitBarIndex(1)
    lastLongExitPrice := closedTradesExitPrice(1)
else if (closedTradeExitIdContains(LONG_ORDER_ID_PREFIX, 2) or closedTradeExitIdIs(SHORT_ORDER_ID_ENTRY, 2)) and lastTwoClosedTradesExitedInTheSameBar() and not isLongPosition
    lastLongExitBarIndex := closedTradesExitBarIndex(2)
    lastLongExitPrice := closedTradesExitPrice(2)

var int lastShortExitBarIndex = na
var float lastShortExitPrice = na
if (closedTradeExitIdContains(SHORT_ORDER_ID_PREFIX) or closedTradeExitIdIs(LONG_ORDER_ID_ENTRY)) and not isShortPosition
    lastShortExitBarIndex := closedTradesExitBarIndex(1)
    lastShortExitPrice := closedTradesExitPrice(1)
else if (closedTradeExitIdContains(SHORT_ORDER_ID_PREFIX, 2) or closedTradeExitIdIs(LONG_ORDER_ID_ENTRY, 2)) and lastTwoClosedTradesExitedInTheSameBar() and not isShortPosition
    lastShortExitBarIndex := closedTradesExitBarIndex(2)
    lastShortExitPrice := closedTradesExitPrice(2)

// Flags that are true when already entered a long or short trade
bool enteredLongTrade = strategy.opentrades > 0 ? bar_index == strategy.opentrades.entry_bar_index(strategy.opentrades - 1) and openTradeEntryIdStartsWith(LONG_ORDER_ID_PREFIX) : false
bool enteredShortTrade = strategy.opentrades > 0 ? bar_index == strategy.opentrades.entry_bar_index(strategy.opentrades - 1) and openTradeEntryIdStartsWith(SHORT_ORDER_ID_PREFIX) : false

// Flags that are true when completed a long or short trade
bool completedLongTrade = strategy.closedtrades > 0 ? bar_index == lastLongExitBarIndex : false
bool completedShortTrade = strategy.closedtrades > 0 ? bar_index == lastShortExitBarIndex : false

modCount += 1

//#endregion ===========================================================================================================
//#region 🛠️ STRATEGY 1
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
// Description: Module responsible for the open position logic. This is implemented based on deal conditions defined internally (in this script) or externaly (based on conditions that take as input other indicator)
// Dependencies: FILTERS, TRACK POSITION
// Results: commissionRatio, dealConditions, openLongPosition, openShortPosition, cnlOpenLongPosition, cnlOpenShortPosition, validOpenLongPosition, validOpenShortPosition, validOpenPosition

import jason5480/series_collection/4 as col
import jason5480/two_ma_logic/11 as tma
import jason5480/tts_convention/7 as conv

// INPUT ===============================================================================================================
enum DealConditionsMode
    external = '🔨External'
    internal = '🔧Internal'

dealMode = input.enum(defval = DealConditionsMode.internal, title = '𝐃𝐞𝐚𝐥 𝐂𝐨𝐧𝐝𝐢𝐭𝐢𝐨𝐧𝐬 𝐌𝐨𝐝𝐞', tooltip = 'Use the "Internal" MA cross over/under logic to start and end your deals. Or use an "External" signal indicator to instruct your own start and end deal conditions.', group = '🛠️ Strategy', display = display.all)
signal = int(input.source(defval = close, title = '  [🔨External] 🔌𝐒𝐢𝐠𝐧𝐚𝐥 🛈', tooltip = 'Select input from a "Signal Indicator". The "🔌Signal to TTS" output should be selected. If you do not have a "Signal Indicator", consider coding one, or use the "Signal Adapter" to create signal from non-signal indicators and (optional) compose more complex conditions using the "Signal Composer".  INFORMATION! The indicator should be added to the same chart with this strategy.', group = '🛠️ Strategy', display = display.all))

color BG_COLOR = chart.bg_color
color FG_COLOR = chart.fg_color
const color LONG_OPEN_COLOR = #0074BA
const color SHORT_OPEN_COLOR = #FF6723
const color CLOSE_COLOR = #C790F1
const color LONG_CANCEL_OPEN_COLOR = #0074BA
const color SHORT_CANCEL_OPEN_COLOR = #FF6723
const color CANCEL_CLOSE_COLOR = #C790F1
showOpenLabels = input.bool(defval = true, title = '    ', inline = 'Open', group = '🛠️ Strategy', display = display.data_window)
longOpenColor = input.color(defval = LONG_OPEN_COLOR, title = '🎨️ Open Color 📈/📉    ', inline = 'Open', group = '🛠️ Strategy', display = display.none)
shortOpenColor = input.color(defval = SHORT_OPEN_COLOR, title = '     ', tooltip = 'The color of the open long/short labels.', inline = 'Open', group = '🛠️ Strategy', display = display.none)
showCloseLabels = input.bool(defval = true, title = '      ', inline = 'Close', group = '🛠️ Strategy', display = display.data_window)
longCloseColor = input.color(defval = CLOSE_COLOR, title = '🎨️ Close Color 📈/📉    ', inline = 'Close', group = '🛠️ Strategy', display = display.none)
shortCloseColor = input.color(defval = CLOSE_COLOR, title = '       ', tooltip = 'The color of the close long/short labels.', inline = 'Close', group = '🛠️ Strategy', display = display.none)
showCnlOpenLabels = input.bool(defval = true, title = '        ', inline = 'Cancel Open', group = '🛠️ Strategy', display = display.data_window)
longCnlOpenColor = input.color(defval = LONG_CANCEL_OPEN_COLOR, title = '🎨️ Cancel Open Color 📈/📉', inline = 'Cancel Open', group = '🛠️ Strategy', display = display.none)
shortCnlOpenColor = input.color(defval = SHORT_CANCEL_OPEN_COLOR, title = '         ', tooltip = 'The color of the cancel open long/short labels.', inline = 'Cancel Open', group = '🛠️ Strategy', display = display.none)
showCnlCloseLabels = input.bool(defval = true, title = '          ', inline = 'Cancel Close', group = '🛠️ Strategy', display = display.data_window)
longCnlCloseColor = input.color(defval = CANCEL_CLOSE_COLOR, title = '🎨️ Cancel Close Color 📈/📉', inline = 'Cancel Close', group = '🛠️ Strategy', display = display.none)
shortCnlCloseColor = input.color(defval = CANCEL_CLOSE_COLOR, title = '           ', tooltip = 'The color of the cancel close long/short labels.', inline = 'Cancel Close', group = '🛠️ Strategy', display = display.none)
showLegend = input.bool(defval = true, title = '📋 Show Legend', tooltip = 'Show the legend of the chart symbols.', group = '🛠️ Strategy', display = display.data_window)

commissionRatio = input.float(defval = 0.1, title = 'Commission % 🛈', minval = 0.0, maxval = 100.0, step = 0.05, tooltip = 'Fees paid for each transaction entry, exit, take profit and stop loss (percentagewise). INFORMATION! This value should match the commission value in the "Settings/Properties" tab and the commission type should be set to "%" for accurate results.', group = '🛠️ Strategy', display = display.data_window) / 100.0
reverseOrdersEnabled = input.bool(defval = true, title = 'Reverse Orders', tooltip = 'Enable reverse orders. If you are already in a position when a new start deal condition is met and it is pointing out to the other direction then, if this setting is enabled, an entry signal to the opposite direction will be emitted causing the existing position to exit with a market order and a new entry will be placed to the direction of the signal according to the "𝐎𝐫𝐝𝐞𝐫 𝐓𝐲𝐩𝐞" that is defined in the ENTRY section. If this setting is disabled, the start deal condition will be ignored and a new start deal condition will be needed when you are not in a position.', group = '🛠️ Strategy', display = display.data_window)
cooldownEnabled = input.bool(defval = false, title = 'Cooldown # of bars     ', inline = 'Cooldown', group = '🛠️ Strategy', display = display.data_window)
cooldownBars = input.int(defval = 7, title = '            ', minval = 1, tooltip = 'Do NOT emit open position signal if no more than the given number of bars have passed since the previous position exit. A new start deal condition has to be met after that period to open a new position.', inline = 'Cooldown', group = '🛠️ Strategy', display = display.data_window)

fastMaType = input.enum(defval = col.SeriesType.sma, title = 'Fast MA Type/Len        ', options = [col.SeriesType.alma, col.SeriesType.dema, col.SeriesType.ema, col.SeriesType.hma, col.SeriesType.rma, col.SeriesType.sma, col.SeriesType.swma, col.SeriesType.vwma, col.SeriesType.wma, col.SeriesType.linreg, col.SeriesType.median], inline = 'Fast MA', group = '🔧 Strategy - Internal', display = display.data_window)
fastMaLength = input.int(defval = 21, title = '                                                      ', minval = 1, tooltip = 'The type and the length of the fast MA.', inline = 'Fast MA', group = '🔧 Strategy - Internal', display = display.data_window)
slowMaType = input.enum(defval = col.SeriesType.sma, title = 'Slow MA Type/Len       ', options = [col.SeriesType.alma, col.SeriesType.dema, col.SeriesType.ema, col.SeriesType.hma, col.SeriesType.rma, col.SeriesType.sma, col.SeriesType.swma, col.SeriesType.vwma, col.SeriesType.wma, col.SeriesType.linreg, col.SeriesType.median], inline = 'Slow MA', group = '🔧 Strategy - Internal', display = display.data_window)
slowMaLength = input.int(defval = 49, title = '                                                       ', minval = 1, tooltip = 'The type and the length of the slow MA.', inline = 'Slow MA', group = '🔧 Strategy - Internal', display = display.data_window)

longDealsEnabled = input.bool(defval = true, title = 'Long Deals', inline = 'Long/Short Deals', group = '🔧 Strategy - Internal', display = display.data_window)
shortDealsEnabled = input.bool(defval = true, title = 'Short Deals', tooltip = 'Enable long/short start/end/cancel deals. An open signal will be emitted when the long/short start deal conditions are met. If this option is unchecked you will not enter into long/short positions.', inline = 'Long/Short Deals', group = '🔧 Strategy - Internal', display = display.data_window)
endDealsEnabled = input.bool(defval = false, title = 'End Deals', tooltip = 'Enable end deals. A close signal will be emitted when the end deal conditions are met. If this option is unchecked you will not exit your existing position based on the strategy logic. You will exit only when the stop loss or the take profit targets are reached.', group = '🔧 Strategy - Internal', display = display.data_window)
cnlStartDealsEnabled = input.bool(defval = true, title = 'Cancel Start Deals', inline = 'Start/End Deals', group = '🔧 Strategy - Internal', display = display.data_window)
cnlEndDealsEnabled = input.bool(defval = true, title = 'Cancel End Deals', tooltip = 'Enable cancel start/end deals. A cancel start/close signal will be emitted when the cancel start/end deal conditions are met. If this option is unchecked you will not cancel your entry/exit order based on the strategy logic when use limit, stop or stop-limit orders.', inline = 'Start/End Deals', group = '🔧 Strategy - Internal', display = display.data_window)

emaFilterEnabled = input.bool(defval = true, title = 'EMA Filter', tooltip = 'Enable long/short trades based on EMA.', group = '🔧 Strategy - Internal', display = display.data_window)
emaTimeframe = input.timeframe(defval = '', title = '  EMA Res/Len/Src', inline = 'EMA Filter', group = '🔧 Strategy - Internal', display = display.data_window)
emaLength = input.int(defval = 200, title = '                                                        ', minval = 1, inline = 'EMA Filter', group = '🔧 Strategy - Internal', display = display.data_window)
emaSrc = input.source(defval = close, title = '                                                         ', tooltip = 'The timeframe, period and source for the EMA calculation.', inline = 'EMA Filter', group = '🔧 Strategy - Internal', display = display.data_window)
emaAtrBandEnabled = input.bool(defval = true, title = 'EMA ATR Band', tooltip = 'Enable ATR band for EMA filter.', group = '🔧 Strategy - Internal', display = display.data_window)
filterAtrMul = input.float(defval = 1.0, title = '  EMA ATR Mul/Len      ', minval = 0.1, step = 0.1, inline = 'EMA ATR', group = '🔧 Strategy - Internal', display = display.data_window)
filterAtrLength = input.int(defval = 5, title = '                                                          ', minval = 1, tooltip = 'ATR multiplier and length to be used for the ATR calculation that will be added on top of the EMA filter.', inline = 'EMA ATR', group = '🔧 Strategy - Internal', display = display.data_window)

adxFilterEnabled = input.bool(defval = false, title = 'ADX Filter', tooltip = 'Enable long/short trades based on ADX.', group = '🔧 Strategy - Internal', display = display.data_window)
adxSmoothing = input.int(defval = 14, title = '  Smooth/DI Len       ', minval = 1, inline = 'ADX Filter', group = '🔧 Strategy - Internal', display = display.data_window)
diLength = input.int(defval = 14, title = '                                                           ', minval = 1, tooltip = 'ADX Smoothing length and Direction Length.', inline = 'ADX Filter', group = '🔧 Strategy - Internal', display = display.data_window) // Last empty title 58
adxThreshold = input.float(defval = 20.0, title = '  Threshold', minval = 0.1, maxval = 100.0, step = 5.0, tooltip = 'ADX lower threshold.', group = '🔧 Strategy - Internal', display = display.data_window)

// LOGIC ===============================================================================================================
var dealConditions = conv.DealConditions.new()
var twoMaDrawings = tma.TwoMaDrawings.new()

if dealMode == DealConditionsMode.internal
    var announcement = '⚠️ Please connect a 🔌Signal that is compatible with the TTS Framework.\nThe Two MA signal logic is for demonstration purposes only!'.announce(textColor = color.new(#FF9800, 70), position = position.middle_center)
    float emaLine = emaFilterEnabled ? request.security(symbol = syminfo.tickerid, timeframe = emaTimeframe, expression = ta.ema(emaSrc, emaLength)[1]) : na
    float emaAtr = emaAtrBandEnabled ? filterAtrMul * ta.atr(filterAtrLength) : na
    twoMaDrawings := tma.TwoMaDrawings.new(
      // The fast and slow moving averages
      fastMA = col.cust_series(fastMaLength, fastMaType),
      slowMA = col.cust_series(slowMaLength, slowMaType),
      // The EMA filter
      emaLine = emaLine,
      // The ATR bands of EMA
      emaUpperBand = emaLine + emaAtr,
      emaLowerBand = emaLine - emaAtr)
    // Calculate the start, end, cancel strart, cancel end conditions according to the two moving average logic
    dealConditions := tma.getDealConditions(twoMaDrawings, longDealsEnabled, shortDealsEnabled, endDealsEnabled, cnlStartDealsEnabled, cnlEndDealsEnabled, emaFilterEnabled, emaAtrBandEnabled, adxFilterEnabled, adxSmoothing, diLength, adxThreshold)
else if ta.change(signal) != 0
    // Get the start, end, cancel start and cancel end deal conditions by decomposing the given signal
    dealConditions := conv.getDealConditions(signal)

// Check if there is no current position and the reverse orders are enabled
bool reverseOrderApproval = reverseOrdersEnabled ? true : isFlatPosition

// Check the bars since last trade completion with the given number of cooldown bars
int barsSinceCompletedLong = nz(ta.barssince(completedLongTrade), MAX_LIMIT_INT)
int barsSinceCompletedShort = nz(ta.barssince(completedShortTrade), MAX_LIMIT_INT)
bool cooldownApproval = cooldownEnabled ? math.min(barsSinceCompletedLong, barsSinceCompletedShort) >= cooldownBars : true

// Open new position if all conditions are met
bool openLongPosition = timeFilterApproval and dealConditions.startLongDeal and cooldownApproval and reverseOrderApproval
bool openShortPosition = timeFilterApproval and dealConditions.startShortDeal and cooldownApproval and reverseOrderApproval
// If there is a new end deal condition this will also cancel the previous start deal (if posible)
bool cnlOpenLongPosition = (timeFilterApproval and dealConditions.cnlStartLongDeal) or (not timeFilterApproval and timeFilterApproval[1])
bool cnlOpenShortPosition = (timeFilterApproval and dealConditions.cnlStartShortDeal) or (not timeFilterApproval and timeFilterApproval[1])

// The open signals when not already into a position
bool validOpenLongPosition = openLongPosition and not isLongPosition
bool validOpenShortPosition = openShortPosition and not isShortPosition
bool validOpenPosition = validOpenLongPosition or validOpenShortPosition

const string LOG_OPEN_SIGNAL_WARNING = 'A signal to open a new {0} position was received but there is already one still in progress, the signal will be ignored'
if openLongPosition and not validOpenLongPosition
    log.warning(LOG_OPEN_SIGNAL_WARNING, LONG_ORDER_ID_PREFIX)
if openShortPosition and not validOpenShortPosition
    log.warning(LOG_OPEN_SIGNAL_WARNING, SHORT_ORDER_ID_PREFIX)

getLegendMap() =>
    const map<string, string> legendMap = map.new<string, string>()
    legendMap.put('🔷🔶', 'Entry')
    legendMap.put('🟪🟩🟥', 'Exit')
    legendMap.put('', '')
    legendMap.put('🎯', 'Take Profit')
    legendMap.put('🛑', 'Stop Loss')
    legendMap.put('📍', 'Stop/Limit')
    legendMap.put('📈', 'Long')
    legendMap.put('📉', 'Short')
    legendMap

modCount += 1

// PLOT ================================================================================================================
plot(series = signal, title = '🔌Signal', color = #808000, editable = false, display = dealMode == DealConditionsMode.internal ? display.none : display.data_window, precision = 0)

plot(series = twoMaDrawings.fastMA, title = 'Fast MA', color = color.yellow, linewidth = 1, style = plot.style_line, display = dealMode == DealConditionsMode.internal ? display.all - display.status_line : display.none)
plot(series = twoMaDrawings.slowMA, title = 'Slow MA', color = color.orange, linewidth = 1, style = plot.style_line, display = dealMode == DealConditionsMode.internal ? display.all - display.status_line : display.none)

color EMA_COLOR = color.new(FG_COLOR, 50)
plot(series = twoMaDrawings.emaLine, color = EMA_COLOR, style = plot.style_linebr, linewidth = 2, title = 'EMA Line', display = dealMode == DealConditionsMode.internal and emaFilterEnabled ? display.all - display.status_line : display.none)
bool BANDS_ENABLED = dealMode == DealConditionsMode.internal and emaFilterEnabled and emaAtrBandEnabled
color EMA_BAND_FILL_COLOR = BANDS_ENABLED ? color.new(EMA_COLOR, 90) : na
emaUpperBandPlot = plot(series = twoMaDrawings.emaUpperBand, color = EMA_BAND_FILL_COLOR, style = plot.style_linebr, title = 'EMA Upper Band', editable = false, display = BANDS_ENABLED ? display.data_window : display.none)
emaLowerBandPlot = plot(series = twoMaDrawings.emaLowerBand, color = EMA_BAND_FILL_COLOR, style = plot.style_linebr, title = 'EMA Lower Band', editable = false, display = BANDS_ENABLED ? display.data_window : display.none)
fill(plot1 = emaUpperBandPlot, plot2 = emaLowerBandPlot, color = EMA_BAND_FILL_COLOR, title = 'EMA Band', display = BANDS_ENABLED ? display.all : display.none)

if showLegend
    var const table legend = getLegendMap().legend()

//#endregion ===========================================================================================================
//#region 🎢 VOLATILITY
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
// Description: Module responsible for general purpose volatility variable that needed for several other modules
// Dependencies: NONE
// Results: negAtr, posAtr, negStDev, posStDev

// INPUT ===============================================================================================================
enum UpdateMethod
    static = 'STATIC'
    dynamic = 'DYNAMIC'
    ladder = 'LADDER'

atrMethod = input.enum(defval = UpdateMethod.static, title = 'ATR Method', tooltip = 'The method to calculate the ATR used for the trailing. Use the ATR value at the time of open signal throughout the whole trade (STATIC), or use the current ATR value (DYNAMIC), or the ATR only of the green/red bars when try to enter/exit the trade (LADDER).', group = '🎢 Volatility', display = display.data_window)
atrMaType = input.enum(defval = col.SeriesType.rma, title = '  ATR Smooth Type/Len    ', options = [col.SeriesType.alma, col.SeriesType.dema, col.SeriesType.ema, col.SeriesType.hma, col.SeriesType.rma, col.SeriesType.sma, col.SeriesType.swma, col.SeriesType.vwma, col.SeriesType.wma, col.SeriesType.highest, col.SeriesType.lowest], inline = 'ATR', group = '🎢 Volatility', display = display.data_window)
atrLength = input.int(defval = 14, title = '             ', minval = 1, tooltip = 'The smoothing type and the length to be used for the ATR calculation.', inline = 'ATR', group = '🎢 Volatility', display = display.data_window)

enum StDevMode
    price = 'PRICE'
    ret = 'RETURN'

stdevMethod = input.enum(defval = UpdateMethod.static, title = 'StDev Method', tooltip = 'The method to calculate the standard deviation used for the trailing. Use the StDev value at the time of open signal throughout the whole trade (STATIC), or use the current StDev value (DYNAMIC), or the StDev only of the green/red bars when try to enter/exit the trade (LADDER).', group = '🎢 Volatility', display = display.data_window)
stdevMode = input.enum(defval = StDevMode.price, title = '  StDev Mode', tooltip = 'Use the "PRICE" as source for the standard deviation calculations. Or use "RETURN" to use the log returns of the price as source for the standard deviation.', group = '🎢 Volatility', display = display.data_window)
stdevPriceSrc = input.source(defval = close, title = '  StDev Src/Len        ', inline = 'StDev', group = '🎢 Volatility', display = display.data_window)
stdevLength = input.int(defval = 20, title = '              ', minval = 1, tooltip = 'The source and the length to be used for the StDev calculation.', inline = 'StDev', group = '🎢 Volatility', display = display.data_window)

// LOGIC ===============================================================================================================
// Calculate atr and StDev based on method selected, static atr when last open signal was emitted, dynamic is the current atr/stdev that change over time, ladder atr/stdev for positive and negative bars
var float ladderPositiveAtr = na
var float ladderNegativeAtr = na
var float ladderPositiveStDevs = na
var float ladderNegativeStDevs = na

if atrMethod == UpdateMethod.ladder
    if close > open
        ladderPositiveAtr := col.cust_series(atrLength, atrMaType, ta.tr(true)) // NOLINT this is intended so that only atr of green bars is calculated
    else
        ladderNegativeAtr := col.cust_series(atrLength, atrMaType, ta.tr(true)) // NOLINT this is intended so that only atr of red bars is calculated

if stdevMethod == UpdateMethod.ladder
    float stdevSrc = stdevMode == StDevMode.price ? stdevPriceSrc : math.log(stdevPriceSrc / stdevPriceSrc[1])
    if close > open
        float positiveStDev = ta.stdev(stdevSrc, stdevLength, false) // NOLINT this is intended so that only deviation of green bars is calculated
        ladderPositiveStDevs := stdevMode == StDevMode.price ? positiveStDev : stdevPriceSrc * (math.exp(positiveStDev) - 1.0)
    else
        float negativeStDev = ta.stdev(stdevSrc, stdevLength, false) // NOLINT this is intended so that only deviation of red bars is calculated
        ladderNegativeStDevs := stdevMode == StDevMode.price ? negativeStDev : stdevPriceSrc * (math.exp(negativeStDev) - 1.0)

float dynamicAtr = col.cust_series(atrLength, atrMaType, ta.tr(true))
float staticAtr = ta.valuewhen(validOpenPosition, dynamicAtr, 0)
float dynamicStDev = ta.stdev(stdevPriceSrc, stdevLength)
float staticStDev = ta.valuewhen(validOpenPosition, dynamicStDev, 0)

float posAtr = switch atrMethod
    UpdateMethod.static => staticAtr
    UpdateMethod.dynamic => dynamicAtr
    UpdateMethod.ladder => ladderPositiveAtr

float negAtr = switch atrMethod
    UpdateMethod.static => staticAtr
    UpdateMethod.dynamic => dynamicAtr
    UpdateMethod.ladder => ladderNegativeAtr

float posStDev = switch stdevMethod
    UpdateMethod.static => staticStDev
    UpdateMethod.dynamic => dynamicStDev
    UpdateMethod.ladder => ladderPositiveStDevs

float negStDev = switch stdevMethod
    UpdateMethod.static => staticStDev
    UpdateMethod.dynamic => dynamicStDev
    UpdateMethod.ladder => ladderNegativeStDevs

modCount += 1

//#endregion ===========================================================================================================
//#region 📏 DISTANCE
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
// Description: Module responsible for general purpose distance calculations used by other modules
// Dependencies: NONE
// Results: NONE

import jason5480/distance_ratio/15 as dr
import jason5480/biased_price_target/7

// LOGIC ===============================================================================================================
enum TrailBarrier
    front = 'FRONT'
    rear = 'REAR'

getUpwardsMovingBarrierPrice(simple TrailBarrier barrier) =>
    barrier == TrailBarrier.front ? high : low

getDownwardsMovingBarrierPrice(simple TrailBarrier barrier) =>
    barrier == TrailBarrier.front ? low : high

longBiasedAuxData = dr.AuxData.new(atr = posAtr, stdev = posStDev)
shortBiasedAuxData = dr.AuxData.new(atr = negAtr, stdev = negStDev)

modCount += 1

//#endregion ===========================================================================================================
//#region 🔷 ENTRY
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
// Description: Module responsible for the entry logic implementation based on order type
// Dependencies: TRACK POSITION, STRATEGY 1, VOLATILITY, DISTANCE
// Results: longIsActive, validCnlOpenLongPosition, longLimitOrStopEntryIsActive, shortIsActive, validCnlOpenShortPosition, shortLimitOrStopEntryIsActive, longEntryPrice, shortEntryPrice

// INPUT ===============================================================================================================
longEntryColor = input.color(defval = LONG_OPEN_COLOR, title = '🎨️ Entry Color 📈/📉     ', inline = 'Entry', group = '🔷🔶 Entry', display = display.none)
shortEntryColor = input.color(defval = SHORT_OPEN_COLOR, title = '               ', tooltip = 'The color of the long/short limit, stop and stop-limit entry prices.', inline = 'Entry', group = '🔷🔶 Entry', display = display.none)

enum OrderType
    market = 'MARKET'
    limit = 'LIMIT'
    stop = 'STOP'
    stopLimit = 'STOP-LIMIT'

enum MarginMethod
    atr = 'ATR'
    stdev = 'STDEV'
    ticks = 'TICKS'

entryOrderType = input.enum(defval = OrderType.market, title = '𝐎𝐫𝐝𝐞𝐫 𝐓𝐲𝐩𝐞 ', tooltip = 'Use market order to enter at the open of the next bar (MARKET), or use limit order to enter at a "better" price defined by the distance from the close price and the limit mode (LIMIT), or use stop market order to enter at a "worst" price defined by the distance from the close price and the limit mode (STOP), or use stop-limit order to enter at a "worst" price defined by the distance from the close price and the limit mode (STOP-LIMIT).', group = '🔷🔶 Entry', display = display.all)
entryStopLimitMarginMethod = input.enum(defval = MarginMethod.atr, title = '  [STOP-LIMIT] Mar Method', tooltip = 'The method to calculate the margin used for the entry stop-limit orders. Offset the limit price target by a multiple of the ATR value (ATR), or by a multiple of the StDev value (STDEV), or by a number of ticks (TICKS)', group = '🔷🔶 Entry', display = display.data_window)
entryStopLimitMarMul = input.float(defval = 0.5, title = '  [STOP-LIMIT] Mar Mul', step = 0.1, tooltip = 'The acceptable margin for the entry stop-limit orders is defined by this multiplier and it is applied either as percentage or atr multiplier or ticks, based on the "Stop-Limit Margin Method".', group = '🔷🔶 Entry', display = display.data_window)

entryDistMethod = input.enum(defval = dr.DistMethod.atr, title = 'Distance Method ', options = [dr.DistMethod.perc, dr.DistMethod.atr, dr.DistMethod.stdev, dr.DistMethod.ticks, dr.DistMethod.cust], tooltip = 'The method to calculate the distance of the limit, stop and stop-limit entry. Percentage based (PERC), ATR based (ATR), Standard deviation based (STDEV), Tick based (TICKS), or Custom Entry Price (CUST).', group = '🔷🔶 Entry', display = display.all)
entryDistMul = input.float(defval = 1.0, title = '  Dist Mul|Len ', minval = 0.01, step = 0.05, tooltip = 'The distance multiplier or length to define the entry price from close when the open signal occurs or from the barrier price when trailing. The multiplier will be applied to the unit price that is defined by the distance method that is used. If the HHLL method is used, then the length will define the window for the highest high and lowest low calculations.', group = '🔷🔶 Entry', display = display.all)
var entryDistSettings = dr.DistSettings.new(
  distMethod = entryDistMethod,
  distMul = entryDistMul)

entryCustLowerType = input.enum(defval = col.SeriesType.lowest, title = '  [CUST] Lower Type/Src    ', inline = 'Lower Cust Entry', group = '🔷🔶 Entry', display = display.all)
entryCustLowerSrc = input.source(defval = low, title = '                ', tooltip = 'The type and source of the long limit and short stop or stop-limit custom entry.', inline = 'Lower Cust Entry', group = '🔷🔶 Entry', display = display.all)
entryCustHigherType = input.enum(defval = col.SeriesType.highest, title = '  [CUST] Higher Type/Src    ', inline = 'Higher Cust Entry', group = '🔷🔶 Entry', display = display.all)
entryCustHigherSrc = input.source(defval = high, title = '                 ', tooltip = 'The type and source of the short limit or long stop or stop-limit custom entry.', inline = 'Higher Cust Entry', group = '🔷🔶 Entry', display = display.all)

var entryMarSettings = dr.DistSettings.new(
  distMethod = input.enum(defval = dr.DistMethod.ticks, title = 'Margin Distance Method ', options = [dr.DistMethod.perc, dr.DistMethod.atr, dr.DistMethod.stdev, dr.DistMethod.ticks], tooltip = 'The method to calculate the margin to offset the distance of the limit, stop and stop-limit entry price target. Percentage based (PERC), ATR based (ATR), Standard deviation based (STDEV) or Tick based (TICKS).', group = '🔷🔶 Entry', display = display.data_window),
  distMul = input.bool(defval = false, title = '                  ', inline = 'Distance Entry Margin', group = '🔷🔶 Entry', display = display.data_window) ?
             input.float(defval = 5.0, title = 'Mar Dist Mul        ', step = 0.5, tooltip = 'The margin multiplier to define the entry distance offset.', inline = 'Distance Entry Margin', group = '🔷🔶 Entry', display = display.data_window) : na)
var entryRestrictSettings = dr.RestrictSettings.new(
  restrDistMethod = input.enum(defval = dr.DistMethod.perc, title = 'Restrict Distance Method ', options = [dr.DistMethod.perc, dr.DistMethod.atr, dr.DistMethod.stdev, dr.DistMethod.ticks], tooltip = 'The method to calculate the maximum/minimum distance of the entry price. Percentage based (PERC), ATR based (ATR), Standard deviation based (STDEV) or Tick based (TICKS).', group = '🔷🔶 Entry', display = display.data_window),
  minDistMul = input.bool(defval = false, title = '                   ', inline = 'Entry Min Distance', group = '🔷🔶 Entry', display = display.data_window) ?
               input.float(defval = 1.0, title = 'Min Dist Mul         ', minval = 0.0, step = 0.05, tooltip = 'Enable a minimum distance defined by this multiplier and the restrict distance method. This can be used to make sure that the entry will not be placed too close from the reference price. Otherwise, a tight entry price would make the entry to easily be reached during volatile market conditions.', inline = 'Entry Min Distance', group = '🔷🔶 Entry', display = display.data_window) : na,
  maxDistMul = input.bool(defval = false, title = '                    ', inline = 'Entry Max Distance', group = '🔷🔶 Entry', display = display.data_window) ?
               input.float(defval = 4.0, title = 'Max Dist Mul        ', minval = 0.0, step = 0.05, tooltip = 'Enable a maximum distance defined by this multiplier and the restrict distance method. This can be used to make sure that the entry will not be placed too far from the reference price. Otherwise, a loose entry price would risk to not be reached in a timely manner.', inline = 'Entry Max Distance', group = '🔷🔶 Entry', display = display.data_window) : na)

enum TrailMode
    fixed = 'FIXED'
    trail = 'TRAIL'

entryTrailMode = input.enum(defval = TrailMode.fixed, title = 'Trail Mode ', tooltip = 'When you use limit, stop or stop-limit orders to enter, use a fixed price defined by the distance and the close price when the open signal occurs (FIXED), or trail by following the price to the direction of the entry for limit orders or the other direction of the entry for stop and stop-limit orders (TRAIL).', group = '🔷🔶 Entry', display = display.all)
entryTrailBarrier = input.enum(defval = TrailBarrier.front, title = '  Trail Barrier  ', tooltip = 'The price reference that will be used for the entry trailing logic. For entering into a position with a LIMIT order, follow the high for long and low for short (FRONT), or follow the low for long and high for short (REAR). For the STOP and STOP-LIMIT orders the logic is reversed.', group = '🔷🔶 Entry', display = display.data_window)

treatCloseAsCancel = input.bool(defval = false, title = 'Treat Close as Cancel', tooltip = 'If enabled the invalid close position signals of this direction will be treated as cancel open signals to cancel limit, stop and stop-limit entry orders of the same direction.', group = '🔷🔶 Entry', display = display.data_window)
treatEntryAsCancel = input.bool(defval = false, title = 'Treat Entry as Cancel', tooltip = 'If enabled the entries that happened to one direction will be treated as cancel open signals to cancel limit, stop and stop-limit entry orders of the other direction.', group = '🔷🔶 Entry', display = display.data_window)

// LOGIC ===============================================================================================================
// Mark when long position is active
bool longIsActive = validOpenLongPosition or isLongPosition

// The long cancel open signal
var bool validCnlOpenLongPosition = false

// Count how far are the last long valid cancel open, open, entry and valid open signals
int barsSinceValidOpenLong = nz(ta.barssince(validOpenLongPosition), MAX_LIMIT_INT)
int barsSinceValidCnlOpenLong = nz(ta.barssince(validCnlOpenLongPosition), MAX_LIMIT_INT)
int barsSinceEnteredLong = nz(ta.barssince(enteredLongTrade), MAX_LIMIT_INT)

bool openLongIsActive = barsSinceValidCnlOpenLong > barsSinceValidOpenLong // validCancelOpen -> validOpen
bool enterLongIsPending = barsSinceEnteredLong >= barsSinceValidOpenLong // entered -> validOpen

// Validate the long cancel open signal when not already into a position
validCnlOpenLongPosition := entryOrderType != OrderType.market ? (cnlOpenLongPosition or validOpenShortPosition or (treatCloseAsCancel ? timeFilterApproval and dealConditions.endLongDeal : false) or (treatEntryAsCancel ? enteredShortTrade : false)) and not isLongPosition and openLongIsActive and enterLongIsPending and not validOpenLongPosition : false

const string LOG_CNL_OPEN_SIGNAL_WARNING = 'A signal to cancel opening a new {0} position was received but there is none in progress, the signal will be ignored.'
if entryOrderType != OrderType.market ? cnlOpenLongPosition and not validCnlOpenLongPosition : false
    log.warning(LOG_CNL_OPEN_SIGNAL_WARNING, LONG_ORDER_ID_PREFIX)

bool IS_ENTRY_DIST_METHOD_CUST = entryDistMethod == dr.DistMethod.cust
float entryCustHigherPrice = IS_ENTRY_DIST_METHOD_CUST ? col.cust_series(entryDistMul, entryCustHigherType, entryCustHigherSrc) : na
// Calculate the actual entry price from the reference using a long biased distance with a downwards moving potential
getLongEntryHigherPrice(float referencePrice) =>
    entryDistSettings.higher_long_biased_price(referencePrice, longBiasedAuxData, entryRestrictSettings, entryMarSettings, entryCustHigherPrice)

float entryCustLowerPrice = IS_ENTRY_DIST_METHOD_CUST ? col.cust_series(entryDistMul, entryCustLowerType, entryCustLowerSrc) : na
// Calculate the actual entry price from the reference using a long biased distance with an upwards moving potential
getLongEntryLowerPrice(float referencePrice) =>
    entryDistSettings.lower_long_biased_price(referencePrice, longBiasedAuxData, entryRestrictSettings, entryMarSettings, entryCustLowerPrice)

var float longLimitOrStopEntryPrice = na
bool isFirstValidOpenLongPosition = entryOrderType != OrderType.market ? validOpenLongPosition and (na(longLimitOrStopEntryPrice[1]) or completedLongTrade) : false
bool tryEnterLongPosition = entryOrderType != OrderType.market ? timeFilterApproval and not isLongPosition and not completedLongTrade and not na(longLimitOrStopEntryPrice[1]) and not validCnlOpenLongPosition : false
longLimitOrStopEntryPrice := if isFirstValidOpenLongPosition
    if entryOrderType == OrderType.limit
        getLongEntryLowerPrice(close)
    else if entryOrderType == OrderType.stop or entryOrderType == OrderType.stopLimit
        getLongEntryHigherPrice(close)
else if tryEnterLongPosition
    if entryTrailMode == TrailMode.trail or (entryTrailMode == TrailMode.fixed and validOpenLongPosition)
        if entryOrderType == OrderType.limit
            math.max(getLongEntryLowerPrice(getUpwardsMovingBarrierPrice(entryTrailBarrier)), nz(longLimitOrStopEntryPrice[1], MIN_LIMIT_FLOAT))
        else if entryOrderType == OrderType.stop or entryOrderType == OrderType.stopLimit
            math.min(getLongEntryHigherPrice(getDownwardsMovingBarrierPrice(entryTrailBarrier)), nz(longLimitOrStopEntryPrice[1], MAX_LIMIT_FLOAT))
    else
        nz(longLimitOrStopEntryPrice[1], MAX_LIMIT_FLOAT)

float longStopLimitEntryPrice = entryOrderType == OrderType.stopLimit ? longLimitOrStopEntryPrice + entryStopLimitMarMul * (entryStopLimitMarginMethod == MarginMethod.atr ? posAtr : entryStopLimitMarginMethod == MarginMethod.stdev ? posStDev : syminfo.mintick) : na

var bool longStopLimitStopEntryExecuted = false
if ta.crossover(high, longLimitOrStopEntryPrice[1]) and entryOrderType == OrderType.stopLimit and not enteredLongTrade
    longStopLimitStopEntryExecuted := true
else if enteredLongTrade
    longStopLimitStopEntryExecuted := false

bool longLimitOrStopEntryIsActive = not na(longLimitOrStopEntryPrice)

// Mark when short position is active
bool shortIsActive = validOpenShortPosition or isShortPosition

// The short cancel open signal
var bool validCnlOpenShortPosition = false

// Count how far are the last short valid cancel open, open, entry and valid open signals
int barsSinceValidOpenShort = nz(ta.barssince(validOpenShortPosition), MAX_LIMIT_INT)
int barsSinceValidCnlOpenShort = nz(ta.barssince(validCnlOpenShortPosition), MAX_LIMIT_INT)
int barsSinceEnteredShort = nz(ta.barssince(enteredShortTrade), MAX_LIMIT_INT)

bool openShortIsActive = barsSinceValidCnlOpenShort > barsSinceValidOpenShort // validCancelOpen -> validOpen
bool enterShortIsPending = barsSinceEnteredShort >= barsSinceValidOpenShort // entered -> validOpen

// Validate the short cancel open signal when not already into a position
validCnlOpenShortPosition := entryOrderType != OrderType.market ? (cnlOpenShortPosition or validOpenLongPosition or (treatCloseAsCancel ? timeFilterApproval and dealConditions.endShortDeal : false) or (treatEntryAsCancel ? enteredLongTrade : false)) and not isShortPosition and openShortIsActive and enterShortIsPending and not validOpenShortPosition : false

if entryOrderType != OrderType.market ? cnlOpenShortPosition and not validCnlOpenShortPosition : false
    log.warning(LOG_CNL_OPEN_SIGNAL_WARNING, SHORT_ORDER_ID_PREFIX)

// Calculate the actual entry price from the reference using a short biased distance with a downwards moving potential
getShortEntryHigherPrice(float referencePrice) =>
    entryDistSettings.higher_short_biased_price(referencePrice, shortBiasedAuxData, entryRestrictSettings, entryMarSettings, entryCustHigherPrice)

// Calculate the actual entry price from the reference using a short biased distance with an upwards moving potential
getShortEntryLowerPrice(float referencePrice) =>
    entryDistSettings.lower_short_biased_price(referencePrice, shortBiasedAuxData, entryRestrictSettings, entryMarSettings, entryCustLowerPrice)

var float shortLimitOrStopEntryPrice = na
bool isFirstValidOpenShortPosition = entryOrderType != OrderType.market ? validOpenShortPosition and (na(shortLimitOrStopEntryPrice[1]) or completedShortTrade) : false
bool tryEnterShortPosition = entryOrderType != OrderType.market ? timeFilterApproval and not isShortPosition and not completedShortTrade and not na(shortLimitOrStopEntryPrice[1]) and not validCnlOpenShortPosition : false
shortLimitOrStopEntryPrice := if isFirstValidOpenShortPosition
    if entryOrderType == OrderType.limit
        getShortEntryHigherPrice(close)
    else if entryOrderType == OrderType.stop or entryOrderType == OrderType.stopLimit
        getShortEntryLowerPrice(close)
else if tryEnterShortPosition
    if entryTrailMode == TrailMode.trail or (entryTrailMode == TrailMode.fixed and validOpenShortPosition)
        if entryOrderType == OrderType.limit
            math.min(getShortEntryHigherPrice(getDownwardsMovingBarrierPrice(entryTrailBarrier)), nz(shortLimitOrStopEntryPrice[1], MAX_LIMIT_FLOAT))
        else if entryOrderType == OrderType.stop or entryOrderType == OrderType.stopLimit
            math.max(getShortEntryLowerPrice(getUpwardsMovingBarrierPrice(entryTrailBarrier)), nz(shortLimitOrStopEntryPrice[1], MIN_LIMIT_FLOAT))
    else
        nz(shortLimitOrStopEntryPrice[1], MIN_LIMIT_FLOAT)

float shortStopLimitEntryPrice = entryOrderType == OrderType.stopLimit ? shortLimitOrStopEntryPrice - entryStopLimitMarMul * (entryStopLimitMarginMethod == MarginMethod.atr ? negAtr : entryStopLimitMarginMethod == MarginMethod.stdev ? negStDev : syminfo.mintick) : na

var bool shortStopLimitStopEntryExecuted = false
if ta.crossunder(low, shortLimitOrStopEntryPrice[1]) and entryOrderType == OrderType.stopLimit and not enteredShortTrade
    shortStopLimitStopEntryExecuted := true
else if enteredShortTrade
    shortStopLimitStopEntryExecuted := false

bool shortLimitOrStopEntryIsActive = not na(shortLimitOrStopEntryPrice)

// Bar index when the entered the last long and short trades
int longEntryBarId = ta.valuewhen(enteredLongTrade, entryOrderType == OrderType.market ? bar_index[1] : bar_index, 0)
int shortEntryBarId = ta.valuewhen(enteredShortTrade, entryOrderType == OrderType.market ? bar_index[1] : bar_index, 0)

// Current entry position price
float posPrice = strategy.opentrades.entry_price(strategy.opentrades - 1)

// Price when entered a position or potential entry price in case of limit, stop and stop-limit orders
float longEntryPrice = not na(posPrice) and isLongPosition and not validOpenLongPosition ? posPrice
                     : longLimitOrStopEntryIsActive ? longStopLimitStopEntryExecuted ? longStopLimitEntryPrice : longLimitOrStopEntryPrice
                     : validOpenLongPosition and entryOrderType == OrderType.market ? close
                     : na

float shortEntryPrice = not na(posPrice) and isShortPosition and not validOpenShortPosition ? posPrice
                     : shortLimitOrStopEntryIsActive ? shortStopLimitStopEntryExecuted ? shortStopLimitEntryPrice : shortLimitOrStopEntryPrice
                     : validOpenShortPosition and entryOrderType == OrderType.market ? close
                     : na

modCount += 1

// PLOT ================================================================================================================
if validCnlOpenLongPosition and showCnlOpenLabels and barstate.isconfirmed
    label.new(point = chart.point.now(nz(longEntryPrice[1], close)), text = 'Cancel', color = longCnlOpenColor, style = entryOrderType == OrderType.limit ? label.style_label_up : label.style_label_down, textcolor = FG_COLOR, size = size.small)
if validCnlOpenShortPosition and showCnlOpenLabels and barstate.isconfirmed
    label.new(point = chart.point.now(nz(shortEntryPrice[1], close)), text = 'Cancel', color = shortCnlOpenColor, style = entryOrderType == OrderType.limit ? label.style_label_down : label.style_label_up, textcolor = FG_COLOR, size = size.small)

longLimitOrStopEntryPlot = plot(series = longLimitOrStopEntryPrice, title = 'Long Limit or Stop Entry', color = longStopLimitStopEntryExecuted ? na : longEntryColor, linewidth = 1, style = plot.style_linebr, offset = 1)
longStopLimitEntryPlot = plot(series = longStopLimitEntryPrice, title = 'Long Stop-Limit Entry', color = longStopLimitStopEntryExecuted ? longEntryColor : na, linewidth = 1, style = plot.style_linebr, offset = 1, display = display.pane + display.data_window)
color LONG_ENTRY_FILL_COLOR = entryOrderType == OrderType.stopLimit and entryStopLimitMarMul > 0.0 ? color.new(longEntryColor, 90) : na
fill(plot1 = longLimitOrStopEntryPlot, plot2 = longStopLimitEntryPlot, color = LONG_ENTRY_FILL_COLOR, title = 'Long Stop-Limit Margin')

shortLimitOrStopEntryPlot = plot(series = shortLimitOrStopEntryPrice, title = 'Short Limit or Stop Entry', color = shortStopLimitStopEntryExecuted ? na : shortEntryColor, linewidth = 1, style = plot.style_linebr, offset = 1)
shortStopLimitEntryPlot = plot(series = shortStopLimitEntryPrice, title = 'Short Stop-Limit Entry', color = shortStopLimitStopEntryExecuted ? shortEntryColor : na, linewidth = 1, style = plot.style_linebr, offset = 1, display = display.pane + display.data_window)
color SHORT_ENTRY_FILL_COLOR = entryOrderType == OrderType.stopLimit and entryStopLimitMarMul > 0.0 ? color.new(shortEntryColor, 90) : na
fill(plot1 = shortLimitOrStopEntryPlot, plot2 = shortStopLimitEntryPlot, color = SHORT_ENTRY_FILL_COLOR, title = 'Short Stop-Limit Margin')

//#endregion ===========================================================================================================
//#region 🎯 TAKE PROFIT 1
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
// Description: Module responsible for the take profit logic implementation based on the method and the number of step take profit targets and the trailing distance
// Dependencies: TRACK POSITION
// Results: TAKE_PROFIT_TARGETS_SIZE, longTrailTakeProfitExecuted, shortTrailTakeProfitExecuted, longIthTrailTakeProfitExecuted, shortIthTrailTakeProfitExecuted, highestHighSinceLongEntry, lowestLowSinceShortEntry

// INPUT ===============================================================================================================
takeProfitColor = input.color(defval = color.new(#00897B, 0), title = '🎨️ Take Profit Color', tooltip = 'The color of the take profit price target lines.', group = '🎯 Take Profit', display = display.none)

numOfTakeProfitTargets = input.int(defval = 1, title = '𝐓𝐚𝐤𝐞 𝐏𝐫𝐨𝐟𝐢𝐭 𝐓𝐚𝐫𝐠𝐞𝐭𝐬', minval = 0, maxval = 5, tooltip = 'The number of take profit targets to be set for each entry. The first target is the initial target and every additional target is a step target.', group = '🎯 Take Profit', display = display.all)

// LOGIC ===============================================================================================================
// Arrays with the updated Take Profit Prices
var const array<float> longTakeProfitPrices = array.new<float>(numOfTakeProfitTargets, na)
var const array<float> shortTakeProfitPrices = array.new<float>(numOfTakeProfitTargets, na)

// Arrays with the trailing take profit ticks
var const array<int> longTrailTakeProfitOffsetTicks = array.new<int>(numOfTakeProfitTargets, na)
var const array<int> shortTrailTakeProfitOffsetTicks = array.new<int>(numOfTakeProfitTargets, na)

// Take profit has to communicate the execution of take profit targets with the stop loss logic when 'TP' mode is selected
var const array<bool> longTrailTakeProfitExecuted = array.new<bool>(numOfTakeProfitTargets, false)
var const array<bool> shortTrailTakeProfitExecuted = array.new<bool>(numOfTakeProfitTargets, false)

// Take profit related tables size used for for...to loops
int TAKE_PROFIT_TARGETS_SIZE = numOfTakeProfitTargets - 1 >= 0 ? numOfTakeProfitTargets - 1 : na

// Count the Take Profit targets that executed
int longTrailTakeProfitExecutedCount = 0
int shortTrailTakeProfitExecutedCount = 0

// Calculate the highest high since the long entry
var float highestHighSinceLongEntry = na
if enteredLongTrade
    highestHighSinceLongEntry := high
else if isLongPosition or completedLongTrade
    highestHighSinceLongEntry := math.max(high, nz(highestHighSinceLongEntry[1], high))

for [i, longTakeProfitPrice] in longTakeProfitPrices
    bool justExecuted = false
    for j = 0 to TAKE_PROFIT_TARGETS_SIZE + 1
        justExecuted := justExecuted or (strategy.closedtrades > j ? bar_index == strategy.closedtrades.exit_bar_index(strategy.closedtrades - 1 - j) and strategy.closedtrades.exit_id(strategy.closedtrades - 1 - j) == str.format(EXIT_ORDER_ID_PATTERN_1, LONG_ORDER_ID_PREFIX, i + 1) and strategy.closedtrades.profit(strategy.closedtrades - 1 - j) > 0.0 : false)
    bool executed = isLongPosition or completedLongTrade ? (longTrailTakeProfitExecuted.get(i) or (justExecuted and highestHighSinceLongEntry >= longTakeProfitPrice)) : false
    longTrailTakeProfitExecuted.set(i, executed)
    if executed
        longTrailTakeProfitExecutedCount := longTrailTakeProfitExecutedCount + 1

// Calculate the lowest low since the short entry
var float lowestLowSinceShortEntry = na
if enteredShortTrade
    lowestLowSinceShortEntry := low
else if isShortPosition or completedShortTrade
    lowestLowSinceShortEntry := math.min(low, nz(lowestLowSinceShortEntry[1], low))

for [i, shortTakeProfitPrice] in shortTakeProfitPrices
    bool justExecuted = false
    for j = 0 to TAKE_PROFIT_TARGETS_SIZE + 1
        justExecuted := justExecuted or (strategy.closedtrades > j ? bar_index == strategy.closedtrades.exit_bar_index(strategy.closedtrades - 1 - j) and strategy.closedtrades.exit_id(strategy.closedtrades - 1 - j) == str.format(EXIT_ORDER_ID_PATTERN_1, SHORT_ORDER_ID_PREFIX, i + 1) and strategy.closedtrades.profit(strategy.closedtrades - 1 - j) > 0.0 : false)
    bool executed = isShortPosition or completedShortTrade ? (shortTrailTakeProfitExecuted.get(i) or (justExecuted and lowestLowSinceShortEntry <= shortTakeProfitPrice)) : false
    shortTrailTakeProfitExecuted.set(i, executed)
    if executed
        shortTrailTakeProfitExecutedCount := shortTrailTakeProfitExecutedCount + 1

// Check if the i-th Take Profit target was executed
longIthTrailTakeProfitExecuted(simple int i) =>
    numOfTakeProfitTargets >= i ? longTrailTakeProfitExecuted.get(i - 1) : false

shortIthTrailTakeProfitExecuted(simple int i) =>
    numOfTakeProfitTargets >= i ? shortTrailTakeProfitExecuted.get(i - 1) : false

modCount += 1

//#endregion ===========================================================================================================
//#region 🛑 STOP LOSS
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
// Description: Module responsible for the stop loss logic implementation based on the method and the trailing mode
// Dependencies: VOLATILITY, DISTANCE, ENTRY, TAKE PROFIT 1
// Results: longStopLossPrice, shortStopLossPrice, longStopLossRatio, shortStopLossRatio, longEntryStopLossRatio, shortEntryStopLossPerc

// INPUT ===============================================================================================================
stopLossColor = input.color(defval = color.new(#880E4F, 0), title = '🎨️ Stop Loss Color', tooltip = 'The color of the stop loss price.', group = '🛑 Stop Loss', display = display.none)

stopLossDistMethod = input.enum(defval = dr.DistMethod.atr, title = '𝐒𝐭𝐨𝐩 𝐋𝐨𝐬𝐬 𝐃𝐢𝐬𝐭𝐚𝐧𝐜𝐞 𝐌𝐞𝐭𝐡𝐨𝐝', options = [dr.DistMethod.perc, dr.DistMethod.atr, dr.DistMethod.stdev, dr.DistMethod.ticks, dr.DistMethod.cust], tooltip = 'The method to calculate the distance of the stop loss price target. Percentage based (PERC), ATR based (ATR), Standard deviation based (STDEV), Tick based (TICKS), or Custom Stop Loss Price (CUST).', group = '🛑 Stop Loss', display = display.all)
longStopLossDistMul = input.float(defval = 3.0, title = '  Dist Mul|Len 📈/📉     ', minval = 0.05, step = 0.05, inline = 'Stop Loss Distance Mul', group = '🛑 Stop Loss', display = display.all)
var longStopLossDistSettings = dr.DistSettings.new(
  distMethod = stopLossDistMethod,
  distMul = longStopLossDistMul)

stopLossCustLowerType = input.enum(defval = col.SeriesType.lowest, title = '  [CUST] Lower Type/Src     ', inline = 'Lower Cust Stop Loss', group = '🛑 Stop Loss', display = display.all)
stopLossCustLowerSrc = input.source(defval = low, title = '                     ', tooltip = 'The type and source of the long custom stop loss.', inline = 'Lower Cust Stop Loss', group = '🛑 Stop Loss', display = display.all)
stopLossCustHigherType = input.enum(defval = col.SeriesType.highest, title = '  [CUST] Higher Type/Src      ', inline = 'Higher Cust Stop Loss', group = '🛑 Stop Loss', display = display.all)
stopLossCustHigherSrc = input.source(defval = high, title = '                      ', tooltip = 'The type and source of the short custom stop loss.', inline = 'Higher Cust Stop Loss', group = '🛑 Stop Loss', display = display.all)

var stopLossMarSettings = dr.DistSettings.new(
  distMethod = input.enum(defval = dr.DistMethod.atr, title = 'Margin Distance Method  ', options = [dr.DistMethod.perc, dr.DistMethod.atr, dr.DistMethod.stdev, dr.DistMethod.ticks], tooltip = 'The method to calculate the margin to offset the distance of the stop loss price target. Percentage based (PERC), ATR based (ATR), Standard deviation based (STDEV) or Tick based (TICKS).', group = '🛑 Stop Loss', display = display.data_window),
  distMul = input.bool(defval = false, title = '                       ', inline = 'Stop Loss Distance Margin', group = '🛑 Stop Loss', display = display.data_window) ?
             input.float(defval = 0.5, title = 'Mar Dist Mul         ', step = 0.5, tooltip = 'The margin multiplier to define the stop loss distance offset.', inline = 'Stop Loss Distance Margin', group = '🛑 Stop Loss', display = display.data_window) : na)
var stopLossRestrictSettings = dr.RestrictSettings.new(
  restrDistMethod = input.enum(defval = dr.DistMethod.perc, title = 'Restrict Distance Method  ', options = [dr.DistMethod.perc, dr.DistMethod.atr, dr.DistMethod.stdev, dr.DistMethod.ticks], tooltip = 'The method to calculate the maximum/minimum distance of the stop loss price. Percentage based (PERC), ATR based (ATR), Standard deviation based (STDEV) or Tick based (TICKS).', group = '🛑 Stop Loss', display = display.data_window),
  minDistMul = input.bool(defval = false, title = '                        ', inline = 'Stop Loss Min Distance', group = '🛑 Stop Loss', display = display.data_window) ?
               input.float(defval = 1.0, title = 'Min Dist Mul          ', minval = 0.0, step = 0.05, tooltip = 'Enable a minimum distance defined by this multiplier and the restrict distance method. This can be used to make sure that the stop loss will not be placed too close from the entry price. Otherwise, a tight stop loss price would make the stop loss to easily be reached during volatile market conditions.', inline = 'Stop Loss Min Distance', group = '🛑 Stop Loss', display = display.data_window) : na,
  maxDistMul = input.bool(defval = false, title = '                         ', inline = 'Stop Loss Max Distance', group = '🛑 Stop Loss', display = display.data_window) ?
               input.float(defval = 10.0, title = 'Max Dist Mul         ', minval = 0.0, step = 0.05, tooltip = 'Enable a maximum distance defined by this multiplier and the restrict distance method. This can be used to make sure that the stop loss will not be placed too far from the entry price. Otherwise, a loose stop loss price would increase the max drawdown and losses when it is reached.', inline = 'Stop Loss Max Distance', group = '🛑 Stop Loss', display = display.data_window) : na)

shortStopLossDistMul = input.float(defval = 3.0, title = '                          ', minval = 0.05, step = 0.05, tooltip = 'The distance multiplier to define the long/short stop loss price from the close price when the open signal occurs or from the barrier price when trailing. The multiplier will be applied to the unit price that is defined by the distance method that is used. If the CUST method is used, then the multiplier is the length that will define the custom price according to its type.', inline = 'Stop Loss Distance Mul', group = '🛑 Stop Loss', display = display.all)
var shortStopLossDistSettings = dr.DistSettings.new(
  distMethod = longStopLossDistSettings.distMethod,
  distMul = shortStopLossDistMul)

enum MoveActMode
    off = 'OFF'
    onceTp = 'ONCETP'
    oncePrice = 'ONCEPRICE'
    multiTp = 'MULTITP'
    multiPrice = 'MULTIPRICE'

stopLossMoveActMode = input.enum(defval = MoveActMode.off, title = 'Move Activation Mode', tooltip = 'Move the stop loss to the entry price (a.k.a breakeven) when the activation take profit price target is reached (ONCETP), or move the stop loss to the entry price (a.k.a breakeven) when the current price moves away from the entry by a distance (ONCEPRICE), or move the stop loss to the previous take profit price target every time a new take profit is reached (MULTITP), or move the stop loss to the previous distance from entry price every time the price moves away from the entry by a distance (MULTIPRICE). Thus, more than one take profit price target is needed to see a difference between the ONCETP and MULTITP modes! If both move and trailing are activated the stop loss is defined by the more strict price at any given time.', group = '🛑 Stop Loss', display = display.all)
stopLossMoveTPActNum = input.int(defval = 1, title = '  Act Take Profit # ', minval = 1, tooltip = 'The Take Profit number (up to the "𝐓𝐚𝐤𝐞 𝐏𝐫𝐨𝐟𝐢𝐭 𝐓𝐚𝐫𝐠𝐞𝐭𝐬" number set in TAKE PROFIT section) that will activate the movement of the stop loss to the entry price after it is reached. The Move Activation should be set to "ONCE".', group = '🛑 Stop Loss', display = display.data_window)
var stopLossMoveDistSettings = dr.DistSettings.new(
  distMethod = input.enum(defval = dr.DistMethod.perc, title = '  Act Price Distance Method', options = [dr.DistMethod.perc, dr.DistMethod.atr, dr.DistMethod.stdev, dr.DistMethod.ticks], tooltip = 'The method to calculate the distance of the current price from entry. Percentage based (PERC), ATR based (ATR) or Standard deviation based (STDEV) or Tick based (TICKS).', group = '🛑 Stop Loss', display = display.data_window),
  distMul = input.float(defval = 2.0, title = '    Price Dist Mul', minval = 0.01, step = 0.05, tooltip = 'The distance multiplier to define the activation price from the entry in order to move the stop loss to breakeven. The multiplier will be applied to the unit price that is defined by the distance method that is used.', group = '🛑 Stop Loss', display = display.data_window))

enum TrailActMode
    off = 'OFF'
    start = 'START'
    tp = 'TP'

stopLossTrailActMode = input.enum(defval = TrailActMode.off, title = 'Trail Activation Mode', tooltip = 'Enables the trailing for the stop loss from the very beginning of the entry order (START), or when the activation take profit price target is reached (TP) or not at all (OFF).', group = '🛑 Stop Loss', display = display.all)
stopLossTrailTPActNum = input.int(defval = 1, title = '  Act Take Profit #  ', minval = 1, tooltip = 'The Take Profit number (up to the "𝐓𝐚𝐤𝐞 𝐏𝐫𝐨𝐟𝐢𝐭 𝐓𝐚𝐫𝐠𝐞𝐭𝐬" number set in TAKE PROFIT section) that will activate the trailing of the stop loss after it is reached. The Trailing Activation should be set to "TP".', group = '🛑 Stop Loss', display = display.data_window)
stopLossTrailBarrier = input.enum(defval = TrailBarrier.rear, title = '  Trail Barrier   ', tooltip = 'The price reference that will be used for the stop loss trailing logic. For exiting from a position, follow the high for long and low for short (FRONT), or follow the low for long and the high for short (REAR).', group = '🛑 Stop Loss', display = display.data_window)

stopLossStepTrailDistEnabled = input.bool(defval = false, title = 'Trail Step Mode', tooltip = 'When stop loss trailining is activated the distance will trail the price according to the stop loss method so it maintains its maximum value from the current high/low (OFF), or the distance will change every time a new take profit is reached and will add the corresponding step value to the previous (ON). Thus, more than one take profit price target is needed to see a difference between two modes! If both move and trailing are activated the stop loss is defined by the more strict price at any given time.', group = '🛑 Stop Loss', display = display.data_window)
longStopLossStepTrailDistMul = input.float(defval = 2.0, title = '  Step Dist Mul|Len 📈/📉  ', step = 0.05, inline = 'Step Distance Mul', group = '🛑 Stop Loss', display = display.data_window)
shortStopLossStepTrailDistMul = input.float(defval = 2.0, title = '                           ', step = 0.05, tooltip = 'The distance multiplier or length to be added on top of the long/short stop loss distance multiplier or length after a take profit target is reached, to define the new long/short stop loss price target. The multiplier will be applied to the unit price that is defined by the distance method that is used. If the CUST method is used, then the step length will be added to the existing length that will be used for the custom price calculations according to its type.', inline = 'Step Distance Mul', group = '🛑 Stop Loss', display = display.data_window)

stopLossAdjustmentEnabled = input.bool(defval = false, title = 'Adjust on Gaps', tooltip = 'When this option is enabled, the stop loss target will be adjusted when entering with market or stop orders and the actual entry price is different than the expected entry price due to gaps in the price action and slippage of the market.', group = '🛑 Stop Loss', display = display.data_window)

stopLossWaitCloseConfirm = input.bool(defval = false, title = 'Wait close confirmation', tooltip = 'When this option is enabled, the stop loss will not be executed immediately but will wait for the bar close confirmation. This might cause the strategy to have greater losses than the expected. A "Close Market" alert will be triggered instead.', group = '🛑 Stop Loss', display = display.data_window)

// LOGIC ===============================================================================================================
bool IS_STOP_LOSS_DIST_METHOD_CUST = stopLossDistMethod == dr.DistMethod.cust
float stopLossCustLowerPrice = IS_STOP_LOSS_DIST_METHOD_CUST ? col.cust_series(longStopLossDistMul, stopLossCustLowerType, stopLossCustLowerSrc) : na
// Calculate the actual long stop loss price that is lower from the reference using a short biased distance with an upwards moving potential
getLongStopLossPrice(float referencePrice) =>
    longStopLossSteppedDist = if stopLossStepTrailDistEnabled
        steppedDist = longStopLossDistSettings.copy()
        steppedDist.distMul := longStopLossDistSettings.distMul + longTrailTakeProfitExecutedCount * longStopLossStepTrailDistMul
        steppedDist
    else
        longStopLossDistSettings
    longStopLossSteppedDist.lower_short_biased_price(referencePrice, shortBiasedAuxData, stopLossRestrictSettings, stopLossMarSettings, stopLossCustLowerPrice)

// Calculate the actual long move distance price that is higher from the long entry
getLongStopLossMoveDistPrice() =>
    stopLossMoveDistSettings.price(longEntryPrice, shortBiasedAuxData)

float longStopLossMoveDistPrice = stopLossMoveActMode == MoveActMode.oncePrice or stopLossMoveActMode == MoveActMode.multiPrice ? getLongStopLossMoveDistPrice() : na
int longDistMovePriceCount = stopLossMoveActMode == MoveActMode.multiPrice ? math.floor((highestHighSinceLongEntry - longEntryPrice) / longStopLossMoveDistPrice) : na
int chgLongDistMovePriceCount = ta.change(longDistMovePriceCount)

bool STOP_LOSS_ADJUSTMENT_IS_NEEDED = stopLossAdjustmentEnabled ? (entryOrderType == OrderType.market or entryOrderType == OrderType.stop) and not IS_STOP_LOSS_DIST_METHOD_CUST and stopLossTrailActMode != TrailActMode.start : false

// Calculate the stop loss price when enter long position and peserve its value until the position closes
var float longStopLossPrice = na
if longLimitOrStopEntryIsActive or validOpenLongPosition
    longStopLossPrice := getLongStopLossPrice(longEntryPrice)
else if enteredLongTrade and STOP_LOSS_ADJUSTMENT_IS_NEEDED
    longStopLossPrice := longStopLossPrice + (longEntryPrice - nz(longEntryPrice[1], longEntryPrice))
else if isLongPosition
    // Trailing starts when the selected take profit price is reached if 'TP' mode is set or from the very begining if 'START' mode is selected
    bool longStopLossTrailEnabled = stopLossTrailActMode == TrailActMode.start or (stopLossTrailActMode == TrailActMode.tp and longIthTrailTakeProfitExecuted(stopLossTrailTPActNum))
    float stopPrice = longStopLossTrailEnabled ? getLongStopLossPrice(getUpwardsMovingBarrierPrice(stopLossTrailBarrier)) : longStopLossPrice[1]
    stopPrice := (stopLossMoveActMode == MoveActMode.onceTp and longTrailTakeProfitExecutedCount >= stopLossMoveTPActNum) or (stopLossMoveActMode == MoveActMode.oncePrice and (highestHighSinceLongEntry - longEntryPrice) >= longStopLossMoveDistPrice) or (stopLossMoveActMode == MoveActMode.multiTp and longTrailTakeProfitExecutedCount == 1) ? math.max(stopPrice, longEntryPrice)
               : stopLossMoveActMode == MoveActMode.multiTp and longTrailTakeProfitExecutedCount > 1 ? math.max(stopPrice, longTakeProfitPrices.get(longTrailTakeProfitExecutedCount - 2))
               : stopLossMoveActMode == MoveActMode.multiPrice and chgLongDistMovePriceCount > 0 ? math.max(stopPrice, stopPrice + chgLongDistMovePriceCount * longStopLossMoveDistPrice)
               : stopPrice
    longStopLossPrice := math.max(stopPrice, nz(longStopLossPrice[1], MIN_LIMIT_FLOAT))

float longStopLossRatio = (longEntryPrice - longStopLossPrice) / longEntryPrice
float longEntryStopLossRatio = ta.valuewhen(enteredLongTrade, longStopLossRatio[1], 0)

float stopLossCustHigherPrice = IS_STOP_LOSS_DIST_METHOD_CUST ? col.cust_series(shortStopLossDistMul, stopLossCustHigherType, stopLossCustHigherSrc) : na
// Calculate the actual short stop loss price that is higher from the reference using a long biased distance with a downwards moving potential
getShortStopLossPrice(float referencePrice) =>
    shortStopLossSteppedDist = if stopLossStepTrailDistEnabled
        steppedDist = shortStopLossDistSettings.copy()
        steppedDist.distMul := shortStopLossDistSettings.distMul + shortTrailTakeProfitExecutedCount * shortStopLossStepTrailDistMul
        steppedDist
    else
        shortStopLossDistSettings
    shortStopLossSteppedDist.higher_long_biased_price(referencePrice, longBiasedAuxData, stopLossRestrictSettings, stopLossMarSettings, stopLossCustHigherPrice)

// Calculate the actual short move distance that is lower from the short entry
getShortStopLossMoveDistPrice() =>
    stopLossMoveDistSettings.price(shortEntryPrice, longBiasedAuxData)

float shortStopLossMoveDistPrice = stopLossMoveActMode == MoveActMode.oncePrice or stopLossMoveActMode == MoveActMode.multiPrice ? getShortStopLossMoveDistPrice() : na
int shortDistMovePriceCount = stopLossMoveActMode == MoveActMode.multiPrice ? math.floor((shortEntryPrice - lowestLowSinceShortEntry) / shortStopLossMoveDistPrice) : na
int chgShortDistMovePriceCount = ta.change(shortDistMovePriceCount)

// Calculate the stop loss price when enter short position and peserve its value until the position closes
var float shortStopLossPrice = na
if shortLimitOrStopEntryIsActive or validOpenShortPosition
    shortStopLossPrice := getShortStopLossPrice(shortEntryPrice)
else if enteredShortTrade and STOP_LOSS_ADJUSTMENT_IS_NEEDED
    shortStopLossPrice := shortStopLossPrice + (shortEntryPrice - nz(shortEntryPrice[1], shortEntryPrice))
else if isShortPosition
    // Trailing starts when the selected take profit price is reached if 'TP' mode is set or from the very begining if 'START' mode is selected
    bool shortStopLossTrailEnabled = stopLossTrailActMode == TrailActMode.start or (stopLossTrailActMode == TrailActMode.tp and shortIthTrailTakeProfitExecuted(stopLossTrailTPActNum))
    float stopPrice = shortStopLossTrailEnabled ? getShortStopLossPrice(getDownwardsMovingBarrierPrice(stopLossTrailBarrier)) : shortStopLossPrice[1]
    stopPrice := (stopLossMoveActMode == MoveActMode.onceTp and shortTrailTakeProfitExecutedCount >= stopLossMoveTPActNum) or (stopLossMoveActMode == MoveActMode.oncePrice and (shortEntryPrice - lowestLowSinceShortEntry) >= shortStopLossMoveDistPrice) or (stopLossMoveActMode == MoveActMode.multiTp and shortTrailTakeProfitExecutedCount == 1) ? math.min(stopPrice, shortEntryPrice)
               : stopLossMoveActMode == MoveActMode.multiTp and shortTrailTakeProfitExecutedCount > 1 ? math.min(stopPrice, shortTakeProfitPrices.get(shortTrailTakeProfitExecutedCount - 2))
               : stopLossMoveActMode == MoveActMode.multiPrice and chgShortDistMovePriceCount > 0 ? math.min(stopPrice, stopPrice - chgShortDistMovePriceCount * shortStopLossMoveDistPrice)
               : stopPrice
    shortStopLossPrice := math.min(stopPrice, nz(shortStopLossPrice[1], MAX_LIMIT_FLOAT))

float shortStopLossRatio = (shortStopLossPrice - shortEntryPrice) / shortEntryPrice
float shortEntryStopLossRatio = ta.valuewhen(enteredShortTrade, shortStopLossRatio[1], 0)

modCount += 1

//#endregion ===========================================================================================================
//#region 🛠️ STRATEGY 2
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
// Description: Module responsible for the close position logic. This is implemented based on deal conditions defined internally (in this script) or externaly (based on conditions that take as input other indicator)
// Dependencies: FILTERS, STRATEGY 1, ENTRY
// Results: validCloseLongPosition, validCloseShortPosition

// INPUT ===============================================================================================================
closeEarlyEnabled = input.bool(defval = false, title = 'Close Early # of bars    ', inline = 'Close Early', group = '🛠️ Strategy', display = display.data_window)
closeEarlyBars = input.int(defval = 7, title = '                            ', minval = 1, tooltip = 'Emit close position signal if the given number of bars have passed since the entry and the activation take profit price target has not been reached yet.', inline = 'Close Early', group = '🛠️ Strategy', display = display.data_window)
closeEarlyTPActNum = input.int(defval = 1, title = '  Act Take Profit #   ', minval = 1, tooltip = 'The Take Profit number (up to the "𝐓𝐚𝐤𝐞 𝐏𝐫𝐨𝐟𝐢𝐭 𝐓𝐚𝐫𝐠𝐞𝐭𝐬" number set in TAKE PROFIT section) that will activate the close early if it is not reached within the given number of bars from the entry.', group = '🛠️ Strategy', display = display.data_window)

closeAtSessionEnd = input.bool(defval = false, title = 'Close at Session End', tooltip = 'Close all positions at the market price at the end of each session or the end of datetime window.', group = '🛠️ Strategy', display = display.data_window)

// LOGIC ===============================================================================================================
bool closeLongPosition = dealConditions.endLongDeal or (closeEarlyEnabled ? bar_index - longEntryBarId == closeEarlyBars and not longIthTrailTakeProfitExecuted(closeEarlyTPActNum) : false)
bool closeShortPosition = dealConditions.endShortDeal or (closeEarlyEnabled ? bar_index - shortEntryBarId == closeEarlyBars and not shortIthTrailTakeProfitExecuted(closeEarlyTPActNum) : false)
bool closeAllPositions = closeAtSessionEnd and not timeFilterApproval

// Cancel the previous end deal condition when using limit or stop for exit (if not already exited the position)
bool cnlCloseLongPosition = (timeFilterApproval and dealConditions.cnlEndLongDeal) or (not timeFilterApproval and timeFilterApproval[1])
bool cnlCloseShortPosition = (timeFilterApproval and dealConditions.cnlEndShortDeal) or (not timeFilterApproval and timeFilterApproval[1])

// The close signals when already into a position to that direction or if you want to start a position to the other direction
bool validCloseLongPosition = closeLongPosition and isLongPosition
bool validCloseShortPosition = closeShortPosition and isShortPosition

const string LOG_CLOSE_SIGNAL_WARNING = 'A signal to close an existing {0} position was received but there is none in progress, the signal will be ignored.'
if closeLongPosition and not validCloseLongPosition
    log.warning(LOG_CLOSE_SIGNAL_WARNING, LONG_ORDER_ID_PREFIX)
if closeShortPosition and not validCloseShortPosition
    log.warning(LOG_CLOSE_SIGNAL_WARNING, SHORT_ORDER_ID_PREFIX)

modCount += 1

//#endregion ===========================================================================================================
//#region 🟪 EXIT
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
// Description: Module responsible for the exit logic implementation based on the order type
// Dependencies: TRACK POSITION, VOLATILITY, DISTANCE, STRATEGY 2
// Results: longLimitOrStopExitPrice, shortLimitOrStopExitPrice, longLimitExitIsActive, shortLimitExitIsActive, longExitPrice, shortExitPrice

// INPUT ===============================================================================================================
longExitColor = input.color(defval = CLOSE_COLOR, title = '🎨️ Exit Color 📈/📉      ', inline = 'Exit', group = '🟪🟩🟥 Exit', display = display.none)
shortExitColor = input.color(defval = CLOSE_COLOR, title = '                             ', tooltip = 'The color of the long/short limit and stop exit prices.', inline = 'Exit', group = '🟪🟩🟥 Exit', display = display.none)

exitOrderType = input.enum(defval = OrderType.market, title = '𝐎𝐫𝐝𝐞𝐫 𝐓𝐲𝐩𝐞  ', options = [OrderType.market, OrderType.limit, OrderType.stop], tooltip = 'Use market order to exit at the open of the next bar (MARKET), or use limit order to exit at a "better" price defined by the distance from the close price and the limit mode (LIMIT), or use stop market order to exit at a "worst" price defined by the distance from the close price and the limit mode (STOP). Limit and stop orders last until they are filled or canceled.', group = '🟪🟩🟥 Exit', display = display.all)

exitDistMethod = input.enum(defval = dr.DistMethod.atr, title = 'Distance Method  ', options = [dr.DistMethod.perc, dr.DistMethod.atr, dr.DistMethod.stdev, dr.DistMethod.ticks, dr.DistMethod.cust], tooltip = 'The method to calculate the distance of the limit and stop exit. Percentage based (PERC), ATR based (ATR), Standard deviation based (STDEV), Tick based (TICKS), or Custom Exit Price (CUST).', group = '🟪🟩🟥 Exit', display = display.all)
exitDistMul = input.float(defval = 1.0, title = '  Dist Mul|Len  ', minval = 0.01, step = 0.05, tooltip = 'The distance multiplier to define the exit price from the close price when the close signal occurs or from the barrier price when trailing. The multiplier will be applied to the unit price that is defined by the distance method that is used. If the HHLL method is used, then the length will define the window for the highest high and lowest low calculations.', group = '🟪🟩🟥 Exit', display = display.all)
var exitDistSettings = dr.DistSettings.new(
  distMethod = exitDistMethod,
  distMul = exitDistMul)

exitCustHigherType = input.enum(defval = col.SeriesType.highest, title = '  [CUST] Higher Type/Src       ', inline = 'Higher Cust Exit', group = '🟪🟩🟥 Exit', display = display.all)
exitCustHigherSrc = input.source(defval = high, title = '                              ', tooltip = 'The type and source of the long limit and short stop custom exit.', inline = 'Higher Cust Exit', group = '🟪🟩🟥 Exit', display = display.all)
exitCustLowerType = input.enum(defval = col.SeriesType.lowest, title = '  [CUST] Lower Type/Src       ', inline = 'Lower Cust Exit', group = '🟪🟩🟥 Exit', display = display.all)
exitCustLowerSrc = input.source(defval = low, title = '                               ', tooltip = 'The type and source of the short limit and long stop custom exit.', inline = 'Lower Cust Exit', group = '🟪🟩🟥 Exit', display = display.all)

var exitMarSettings = dr.DistSettings.new(
  distMethod = input.enum(defval = dr.DistMethod.ticks, title = 'Margin Distance Method   ', options = [dr.DistMethod.perc, dr.DistMethod.atr, dr.DistMethod.stdev, dr.DistMethod.ticks], tooltip = 'The method to calculate the margin to offset the distance of the exit price target. Percentage based (PERC), ATR based (ATR), Standard deviation based (STDEV) or Tick based (TICKS).', group = '🟪🟩🟥 Exit', display = display.data_window),
  distMul = input.bool(defval = false, title = '                                ', inline = 'Distance Exit Margin', group = '🟪🟩🟥 Exit', display = display.data_window) ?
             input.float(defval = 5.0, title = 'Mar Dist Mul          ', step = 0.5, tooltip = 'The margin multiplier to define the exit distance offset.', inline = 'Distance Exit Margin', group = '🟪🟩🟥 Exit', display = display.data_window) : na)
var exitRestrictSettings = dr.RestrictSettings.new(
  restrDistMethod = input.enum(defval = dr.DistMethod.perc, title = 'Restrict Distance Method   ', options = [dr.DistMethod.perc, dr.DistMethod.atr, dr.DistMethod.stdev, dr.DistMethod.ticks], tooltip = 'The method to calculate the maximum/minimum distance of the exit price. Percentage based (PERC), ATR based (ATR), Standard deviation based (STDEV) or Tick based (TICKS).', group = '🟪🟩🟥 Exit', display = display.data_window),
  minDistMul = input.bool(defval = false, title = '                                 ', inline = 'Exit Min Distance', group = '🟪🟩🟥 Exit', display = display.data_window) ?
               input.float(defval = 1.0, title = 'Min Dist Mul           ', minval = 0.0, step = 0.05, tooltip = 'Enable a minimum distance defined by this multiplier and the restrict distance method. This can be used to make sure that the exit will not be placed too close from the reference price. Otherwise, a tight exit price would make the exit to easily be reached during volatile market conditions.', inline = 'Exit Min Distance', group = '🟪🟩🟥 Exit', display = display.data_window) : na,
  maxDistMul = input.bool(defval = false, title = '                                  ', inline = 'Exit Max Distance', group = '🟪🟩🟥 Exit', display = display.data_window) ?
               input.float(defval = 4.0, title = 'Max Dist Mul          ', minval = 0.0, step = 0.05, tooltip = 'Enable a maximum distance defined by this multiplier and the restrict distance method. This can be used to make sure that the exit will not be placed too far from the reference price. Otherwise, a loose exit price would risk to not be reached in a timely manner.', inline = 'Exit Max Distance', group = '🟪🟩🟥 Exit', display = display.data_window) : na)

exitTrailMode = input.enum(defval = TrailMode.fixed, title = 'Trail Mode  ', tooltip = 'When you use limit or stop orders to exit, use a fixed price defined by the distance and the close price when the open signal s (FIXED), or trail by following the price to the direction of the exit for limit orders or the other direction of the exit for stop orders (TRAIL).', group = '🟪🟩🟥 Exit', display = display.all)
exitTrailBarrier = input.enum(defval = TrailBarrier.front, title = '  Trail Barrier    ', tooltip = 'The price reference that will be used for the exit trailing logic. For exiting from a position with a LIMIT order, follow the low for long and high for short (FRONT), or follow the high for long and the low for short (REAR). For the STOP orders the logic is reversed.', group = '🟪🟩🟥 Exit', display = display.data_window)

treatOpenAsCancel = input.bool(defval = false, title = 'Treat Open as Cancel', tooltip = 'If enabled the invalid open position signals to this direction will be treated as cancel close signals to cancel stop exit orders of the same direction.', group = '🟪🟩🟥 Exit', display = display.data_window)

// LOGIC ===============================================================================================================
// The long cancel close signal
var bool validCnlCloseLongPosition = false

// Count how far are the last long valid close and exit signals
int barsSinceValidCloseLong = nz(ta.barssince(validCloseLongPosition or validOpenShortPosition), MAX_LIMIT_INT)
int barsSinceValidCnlCloseLong = nz(ta.barssince(validCnlCloseLongPosition), MAX_LIMIT_INT)

bool closeLongIsActive = barsSinceValidCnlCloseLong > barsSinceValidCloseLong // validCancelClose -> validClose
bool exitLongIsPending = barsSinceCompletedLong >= barsSinceValidCloseLong // completed -> validClose

// Validate the long cancel close signal when already into a position
validCnlCloseLongPosition := exitOrderType != OrderType.market ? (cnlCloseLongPosition or (treatOpenAsCancel ? timeFilterApproval and dealConditions.startLongDeal : false)) and isLongPosition and closeLongIsActive and exitLongIsPending and not validCloseLongPosition : false

const string LOG_CNL_CLOSE_SIGNAL_WARNING = 'A signal to cancel closing an existing {0} position was received but there is no {0} position in progress, the signal will be ignored.'
if exitOrderType != OrderType.market ? cnlCloseLongPosition and not validCnlCloseLongPosition : false
    log.warning(LOG_CNL_CLOSE_SIGNAL_WARNING, LONG_ORDER_ID_PREFIX)

bool IS_EXIT_DIST_METHOD_CUST = exitDistMethod == dr.DistMethod.cust
float exitCustLowerPrice = IS_EXIT_DIST_METHOD_CUST ? col.cust_series(exitDistMul, exitCustLowerType, exitCustLowerSrc) : na
// Calculate the actual long exit price from the reference using a short biased distance with an upwards moving potential
getLongExitLowerPrice(float referencePrice) =>
    exitDistSettings.lower_short_biased_price(referencePrice, shortBiasedAuxData, exitRestrictSettings, exitMarSettings, exitCustLowerPrice)

float exitCustHigherPrice = IS_EXIT_DIST_METHOD_CUST ? col.cust_series(exitDistMul, exitCustHigherType, exitCustHigherSrc) : na
// Calculate the actual long exit price from the reference using a short biased distance with a downwards moving potential
getLongExitHigherPrice(float referencePrice) =>
    exitDistSettings.higher_short_biased_price(referencePrice, shortBiasedAuxData, exitRestrictSettings, exitMarSettings, exitCustHigherPrice)

var float longLimitOrStopExitPrice = na
bool isFirstValidCloseLongPosition = exitOrderType != OrderType.market ? validCloseLongPosition and isLongPosition and na(longLimitOrStopExitPrice[1]) and not (validOpenShortPosition and entryOrderType == OrderType.market) : false
bool tryExitLongPosition = exitOrderType != OrderType.market ? isLongPosition and not na(longLimitOrStopExitPrice[1]) and not validCnlCloseLongPosition : false
longLimitOrStopExitPrice := if isFirstValidCloseLongPosition
    if exitOrderType == OrderType.limit
        getLongExitHigherPrice(close)
    else if exitOrderType == OrderType.stop
        getLongExitLowerPrice(close)
else if tryExitLongPosition
    if exitTrailMode == TrailMode.trail or (exitTrailMode == TrailMode.fixed and validCloseLongPosition)
        if exitOrderType == OrderType.limit
            math.min(getLongExitHigherPrice(getDownwardsMovingBarrierPrice(exitTrailBarrier)), nz(longLimitOrStopExitPrice[1], MAX_LIMIT_FLOAT))
        else if exitOrderType == OrderType.stop
            math.max(getLongExitLowerPrice(getUpwardsMovingBarrierPrice(exitTrailBarrier)), nz(longLimitOrStopExitPrice[1], MIN_LIMIT_FLOAT))
    else
        nz(longLimitOrStopExitPrice[1], MIN_LIMIT_FLOAT)

bool longLimitExitIsActive = not na(longLimitOrStopExitPrice)

// The short cancel close signal
var bool validCnlCloseShortPosition = false

// Count how far are the last short valid close and exit signals
int barsSinceValidCloseShort = nz(ta.barssince(validCloseShortPosition or validOpenLongPosition), MAX_LIMIT_INT)
int barsSinceValidCnlCloseShort = nz(ta.barssince(validCnlCloseShortPosition), MAX_LIMIT_INT)

bool closeShortIsActive = barsSinceValidCnlCloseShort > barsSinceValidCloseShort // validCancelClose -> validClose
bool exitShortIsPending = barsSinceCompletedShort >= barsSinceValidCloseShort // completed -> validClose

// Validate the short cancel close signal when already into a position
validCnlCloseShortPosition := exitOrderType != OrderType.market ? (cnlCloseShortPosition or (treatOpenAsCancel ? timeFilterApproval and dealConditions.startShortDeal : false)) and isShortPosition and closeShortIsActive and exitShortIsPending and not validCloseShortPosition : false

if exitOrderType != OrderType.market ? cnlCloseShortPosition and not validCnlCloseShortPosition : false
    log.warning(LOG_CNL_CLOSE_SIGNAL_WARNING, SHORT_ORDER_ID_PREFIX)

// Calculate the actual short exit price from the reference using a long biased distance with an upwards moving potential
getShortExitLowerPrice(float referencePrice) =>
    exitDistSettings.lower_long_biased_price(referencePrice, longBiasedAuxData, exitRestrictSettings, exitMarSettings, exitCustLowerPrice)

// Calculate the actual short exit price from the reference using a long biased distance with a downwards moving potential
getShortExitHigherPrice(float referencePrice) =>
    exitDistSettings.higher_long_biased_price(referencePrice, longBiasedAuxData, exitRestrictSettings, exitMarSettings, exitCustHigherPrice)

var float shortLimitOrStopExitPrice = na
bool isFirstValidCloseShortPosition = exitOrderType != OrderType.market ? validCloseShortPosition and isShortPosition and na(shortLimitOrStopExitPrice[1]) and not (validOpenLongPosition and entryOrderType == OrderType.market) : false
bool tryExitShortPosition = exitOrderType != OrderType.market ? isShortPosition and not na(shortLimitOrStopExitPrice[1]) and not validCnlCloseShortPosition : false
shortLimitOrStopExitPrice := if isFirstValidCloseShortPosition
    if exitOrderType == OrderType.limit
        getShortExitLowerPrice(close)
    else if exitOrderType == OrderType.stop
        getShortExitHigherPrice(close)
else if tryExitShortPosition
    if exitTrailMode == TrailMode.trail or (exitTrailMode == TrailMode.fixed and validCloseShortPosition)
        if exitOrderType == OrderType.limit
            math.max(getShortExitLowerPrice(getUpwardsMovingBarrierPrice(exitTrailBarrier)), nz(shortLimitOrStopExitPrice[1], MIN_LIMIT_FLOAT))
        else if exitOrderType == OrderType.stop
            math.min(getShortExitHigherPrice(getDownwardsMovingBarrierPrice(exitTrailBarrier)), nz(shortLimitOrStopExitPrice[1], MAX_LIMIT_FLOAT))
    else
        nz(shortLimitOrStopExitPrice[1], MAX_LIMIT_FLOAT)

bool shortLimitExitIsActive = not na(shortLimitOrStopExitPrice)

// Price when exited a position or potential exit price in case of limit or stop orders
float longExitPrice = (validOpenShortPosition and (isLongPosition or exitOrderType == OrderType.market)) or (stopLossWaitCloseConfirm and close < longStopLossPrice) ? close
                     : longLimitExitIsActive ? longLimitOrStopExitPrice
                     : na

float shortExitPrice = (validOpenLongPosition and (isShortPosition or exitOrderType == OrderType.market)) or (stopLossWaitCloseConfirm and close > shortStopLossPrice) ? close
                     : shortLimitExitIsActive ? shortLimitOrStopExitPrice
                     : na

modCount += 1

// PLOT ================================================================================================================
if validCloseLongPosition and showCloseLabels and barstate.isconfirmed
    label.new(point = chart.point.from_index(bar_index + 1, nz(longLimitOrStopExitPrice, close)), text = 'Close', color = longCloseColor, style = exitOrderType != OrderType.market ? label.style_label_right : label.style_label_lower_left, textcolor = FG_COLOR, size = size.small)
if validCloseShortPosition and showCloseLabels and barstate.isconfirmed
    label.new(point = chart.point.from_index(bar_index + 1, nz(shortLimitOrStopExitPrice, close)), text = 'Close', color = shortCloseColor, style = exitOrderType != OrderType.market ? label.style_label_right : label.style_label_upper_left, textcolor = FG_COLOR, size = size.small)

if validCnlCloseLongPosition and showCnlCloseLabels and barstate.isconfirmed
    label.new(point = chart.point.now(nz(longLimitOrStopExitPrice[1], close)), text = 'Cancel', color = longCnlCloseColor, style = exitOrderType == OrderType.limit ? label.style_label_down : label.style_label_up, textcolor = FG_COLOR, size = size.small)
if validCnlCloseShortPosition and showCnlCloseLabels and barstate.isconfirmed
    label.new(point = chart.point.now(nz(shortLimitOrStopExitPrice[1], close)), text = 'Cancel', color = shortCnlCloseColor, style = exitOrderType == OrderType.limit ? label.style_label_up : label.style_label_down, textcolor = FG_COLOR, size = size.small)

plot(series = longLimitOrStopExitPrice, title = 'Long Limit or Stop Exit', color = longExitColor, linewidth = 1, style = plot.style_linebr, offset = 1)
plot(series = shortLimitOrStopExitPrice, title = 'Short Limit or Stop Exit', color = shortExitColor, linewidth = 1, style = plot.style_linebr, offset = 1)

//#endregion ===========================================================================================================
//#region 💰 QUANTITY/RISK MANAGEMENT
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
// Description: Module responsible for the calculation of the quantity percentage that will be used on each entry
// Dependencies: ENTRY, STRATEGY 2, EXIT
// Results: longEntryBaseQuantity, shortEntryBaseQuantity, longTakeProfitQuantity, shortTakeProfitQuantity, longRemainingBaseQuantity, shortRemainingBaseQuantity, longRemainingQuantityRatio, shortRemainingQuantityRatio

import jason5480/math_utils/11

// INPUT ===============================================================================================================
enum QuantityMethod
    risk = 'RISK'
    default = 'DEFAULT'

enum BaseQuantityPrecision
    auto = 'AUTO'
    manual = 'MANUAL'

quantityMethod = input.enum(defval = QuantityMethod.risk, title = '𝐐𝐮𝐚𝐧𝐭𝐢𝐭𝐲 𝐌𝐞𝐭𝐡𝐨𝐝', tooltip = 'The method to calculate the quantity to enter each new position. Use an amount so that if the stop loss is reached no more than a percent of equity is lost (RISK), or use the amount defined in the "Settings/Properties" tab (DEFAULT).', group = '💰 Quantity/Risk Management', display = display.all)
capitalRiskRatio = input.float(defval = 1.0, title = '  [RISK] %       ', minval = 0.05, maxval = 10.0, step = 0.25, tooltip = 'The maximum percentage of the total equity to risk in every trade when no leverage is used.', group = '💰 Quantity/Risk Management', display = display.data_window) / 100.0
baseQuantityPrecision = input.enum(defval = BaseQuantityPrecision.auto, title = 'Contracts Precision', tooltip = 'The precision of the base quantity in terms of decimal digits can be calculated automatically using the underlying instrument type or manually.', group = '💰 Quantity/Risk Management', display = display.all)
baseQuantityDecimals = input.int(defval = 2, title = '  [MANUAL] Decimal Digits', minval = 0, tooltip = 'The precision in decimal digit places used for the calculation of the base quantity.', group = '💰 Quantity/Risk Management', display = display.data_window)
minOrderSize = input.float(defval = 5.0, title = 'Minimum Order Size', minval = 0.0, step = 1.0, tooltip = 'The minimum trade size in quote currency that is allowed in the exchange for a valid new position (e.g. in Binance you cannot trade amounts that are equal or less than 5 USD). For crypto markets the minimum order size divided by the current price define the precision in terms of decimal digits in the base quantity.', group = '💰 Quantity/Risk Management', display = display.data_window)
longLeverage = input.int(defval = 1, title = 'Leverage 📈/📉 🛈       ', minval = 1, inline = 'Leverage', group = '💰 Quantity/Risk Management', display = display.data_window)
shortLeverage = input.int(defval = 1, title = '                                   ', minval = 1, tooltip = 'Leverage factor used to multiply the initial risk quantity of each trade (by borrowing the remaining amount). Thus, the profits and losses are multiplied respectively. INFORMATION! The margin for long/short positions value in the "Settings/Properties" should be adjusted accoridngly to correctly trigger margin calls.', inline = 'Leverage', group = '💰 Quantity/Risk Management', display = display.data_window)

moonbagQuantityRatio = input.float(defval = 0.0, title = 'Moonbag Quantity %', minval = 0.0, maxval = 99.9, step = 0.5, tooltip = 'The percentage of the position that will NOT be exited when ALL the take profit price targets are reached. If more than one take profit price target is set, then ALL targets will share equally the remaining amount and exit when take profit targets are reached. The moonbag amount will exit only when stop loss is reached or a close signal is received.', group = '💰 Quantity/Risk Management', display = display.all) / 100.0

maxDrawdownEnabled = input.bool(defval = false, title = 'Max Drawdown %     ', inline = 'Drawdown', group = '💰 Quantity/Risk Management', display = display.data_window)
maxDrawdownPerc = input.float(defval = 25.0, title = '                                    ', minval = 1.0, maxval = 100.0, step = 0.5, tooltip = 'The maximum drawdown to stop trading.', inline = 'Drawdown', group = '💰 Quantity/Risk Management', display = display.data_window)

// LOGIC ===============================================================================================================
float TAKE_PROFIT_QUANTITY_RATIO = numOfTakeProfitTargets == 0 ? 0.0 : ((1.0 - moonbagQuantityRatio) / numOfTakeProfitTargets).clamp_up(0.0, 1.0, 3)
var int QUOTE_QTY_DECIMAL_DIGITS = (syminfo.mintick * syminfo.pointvalue).num_of_decimal_digits()

getBaseQtyDecimalDigits(entryPrice) =>
    switch baseQuantityPrecision
        BaseQuantityPrecision.auto =>
            switch syminfo.type
                'crypto' => (minOrderSize / entryPrice).num_of_decimal_digits() // Usually crypto qty precision is defined by the minimum order size and it is dynamic
                'index' => 1 // e.g. SP:SPX, OANDA:EU50EUR, FX:SPX500
                => 0 // Default case includes 'stock' 'fund' 'dr' 'right' 'bond' 'warrant' 'structured' 'forex' 'futures' 'spread' 'economic' 'fundumental' 'spot' 'swap' 'option' 'commodity'
        BaseQuantityPrecision.manual => baseQuantityDecimals

float MIN_ENTRY_SIZE = minOrderSize * math.max(moonbagQuantityRatio == 0.0 ? numOfTakeProfitTargets : numOfTakeProfitTargets + 1, 1)

getRiskBaseQuantity(float stopLossRatio, float entryPrice, simple int leverage) =>
    float maxRiskBaseBalance = (strategy.initial_capital + strategy.netprofit) * leverage / entryPrice
    math.min(math.max(maxRiskBaseBalance * capitalRiskRatio / stopLossRatio, MIN_ENTRY_SIZE / entryPrice), maxRiskBaseBalance).floor(getBaseQtyDecimalDigits(entryPrice))

getDefaultBaseQuantity(float entryPrice, simple int leverage) =>
    math.min(math.max(strategy.default_entry_qty(entryPrice) * leverage, MIN_ENTRY_SIZE / entryPrice), (strategy.initial_capital + strategy.netprofit) * leverage / entryPrice).floor(getBaseQtyDecimalDigits(entryPrice))

getBaseQuantity(float stopLossRatio, float entryPrice, simple int leverage) =>
    switch quantityMethod
        QuantityMethod.risk => getRiskBaseQuantity(stopLossRatio, entryPrice, leverage)
        QuantityMethod.default => getDefaultBaseQuantity(entryPrice, leverage)
        => na

getQuoteQuantity(float baseQuantity, float entryPrice) =>
    (baseQuantity * entryPrice).floor(QUOTE_QTY_DECIMAL_DIGITS)

getCapitalRiskRatio(float quoteQuantity, float stopLossRatio, simple int leverage) =>
    switch quantityMethod
        QuantityMethod.risk => capitalRiskRatio * leverage
        QuantityMethod.default => (quoteQuantity / (strategy.initial_capital + strategy.netprofit)) * stopLossRatio

float longRemainingQuantityRatio = math.max(0.0, 1.0 - longTrailTakeProfitExecutedCount * TAKE_PROFIT_QUANTITY_RATIO)

var float longEntryQuoteQuantity = na
var float longEntryQuoteQuantityPerc = na
var float longEntryBaseQuantity = na
var float longTakeProfitQuantity = na
var float longCapitalRiskPerc = na
if longLimitOrStopEntryIsActive or validOpenLongPosition
    longEntryBaseQuantity := getBaseQuantity(longStopLossRatio, longEntryPrice, longLeverage)
    longEntryQuoteQuantity := getQuoteQuantity(longEntryBaseQuantity, longEntryPrice)
    longEntryQuoteQuantityPerc := 100.0 * longEntryQuoteQuantity / (strategy.initial_capital + strategy.netprofit)
    longTakeProfitQuantity := (longEntryBaseQuantity * TAKE_PROFIT_QUANTITY_RATIO).ceil(getBaseQtyDecimalDigits(longEntryPrice))
    longCapitalRiskPerc := 100.0 * getCapitalRiskRatio(longEntryQuoteQuantity, longStopLossRatio, longLeverage)

var float longRemainingBaseQuantity = na
if validOpenLongPosition or enteredLongTrade or isLongPosition or completedLongTrade
    longRemainingBaseQuantity := (longEntryBaseQuantity * longRemainingQuantityRatio).ceil(getBaseQtyDecimalDigits(longEntryPrice))

float shortRemainingQuantityRatio = math.max(0.0, 1.0 - shortTrailTakeProfitExecutedCount * TAKE_PROFIT_QUANTITY_RATIO)

var float shortEntryQuoteQuantity = na
var float shortEntryQuoteQuantityPerc = na
var float shortEntryBaseQuantity = na
var float shortTakeProfitQuantity = na
var float shortCapitalRiskPerc = na
if shortLimitOrStopEntryIsActive or validOpenShortPosition
    shortEntryBaseQuantity := getBaseQuantity(shortStopLossRatio, shortEntryPrice, shortLeverage)
    shortEntryQuoteQuantity := getQuoteQuantity(shortEntryBaseQuantity, shortEntryPrice)
    float balance = strategy.initial_capital + strategy.netprofit
    shortEntryQuoteQuantityPerc := 100.0 * shortEntryQuoteQuantity / balance
    shortTakeProfitQuantity := (shortEntryBaseQuantity * TAKE_PROFIT_QUANTITY_RATIO).ceil(getBaseQtyDecimalDigits(shortEntryPrice))
    shortCapitalRiskPerc := 100.0 * getCapitalRiskRatio(shortEntryQuoteQuantity, shortStopLossRatio, shortLeverage)

var float shortRemainingBaseQuantity = na
if validOpenShortPosition or enteredShortTrade or isShortPosition or completedShortTrade
    shortRemainingBaseQuantity := (shortEntryBaseQuantity * shortRemainingQuantityRatio).ceil(getBaseQtyDecimalDigits(shortEntryPrice))

modCount += 1

//#endregion ===========================================================================================================
//#region 🎯 TAKE PROFIT 2
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
// Description: Module responsible for the take profit logic implementation based on the method and the number of step take profit targets and the trailing distance
// Dependencies: VOLATILITY, DISTANCE, ENTRY, TAKE PROFIT 1
// Results: longTakeProfitPrices, shortTakeProfitPrices, longTrailTakeProfitOffsetTicks, shortTrailTakeProfitOffsetTicks, takeProfitTrailEnabled

// INPUT ===============================================================================================================
takeProfitDistInitMethod = input.enum(defval = dr.DistMethod.atr, title = '𝐈𝐧𝐢𝐭 𝐓𝐏 𝐃𝐢𝐬𝐭𝐚𝐧𝐜𝐞 𝐌𝐞𝐭𝐡𝐨𝐝', options = [dr.DistMethod.perc, dr.DistMethod.atr, dr.DistMethod.stdev, dr.DistMethod.ticks, dr.DistMethod.prof, dr.DistMethod.rr, dr.DistMethod.cust], tooltip = 'The method to calculate the distance of the first take profit price target. Percentage based (PERC), ATR based (ATR), Standard deviation based (STDEV), Tick based (TICKS), Fixed Profit (PROF), Risk-Reward based (RR), or Custom Take Profit Price (CUST).', group = '🎯 Take Profit', display = display.all)
longTakeProfitDistInitMul = input.float(defval = 5.0, title = '  Init Dist Mul|Len 📈/📉  ', minval = 0.05, step = 0.05, inline = 'Init Take Profit Mul', group = '🎯 Take Profit', display = display.all)
var longTakeProfitDistInitSettings = dr.DistSettings.new(
  distMethod = takeProfitDistInitMethod,
  distMul = longTakeProfitDistInitMul,
  commissionRatio = commissionRatio)

takeProfitCustHigherType = input.enum(defval = col.SeriesType.highest, title = '  [CUST] Higher Type/Src     ', inline = 'Higher Cust Take Profit', group = '🎯 Take Profit', display = display.all)
takeProfitCustHigherSrc = input.source(defval = high, title = '                                     ', tooltip = 'The type and source of the long custom take profit.', inline = 'Higher Cust Take Profit', group = '🎯 Take Profit', display = display.all)
takeProfitCustLowerType = input.enum(defval = col.SeriesType.lowest, title = '  [CUST] Lower Type/Src      ', inline = 'Lower Cust Take Profit', group = '🎯 Take Profit', display = display.all)
takeProfitCustLowerSrc = input.source(defval = low, title = '                                      ', tooltip = 'The type and source of the short custom take profit.', inline = 'Lower Cust Take Profit', group = '🎯 Take Profit', display = display.all)

var takeProfitInitMarSettings = dr.DistSettings.new(
  distMethod = input.enum(defval = dr.DistMethod.ticks, title = 'Init Margin Distance Method', options = [dr.DistMethod.perc, dr.DistMethod.atr, dr.DistMethod.stdev, dr.DistMethod.ticks], tooltip = 'The method to calculate the margin to offset the distance of the take profit price target. Percentage based (PERC), ATR based (ATR), Standard deviation based (STDEV) or Tick based (TICKS).', group = '🎯 Take Profit', display = display.data_window),
  distMul = input.bool(defval = false, title = '                                       ', inline = 'Init Take Profit Margin', group = '🎯 Take Profit', display = display.data_window) ?
             input.float(defval = 5.0, title = 'Init Mar Dist Mul      ', step = 0.5, tooltip = 'The margin multiplier to define the initial take profit distance offset.', inline = 'Init Take Profit Margin', group = '🎯 Take Profit', display = display.data_window) : na)
var takeProfitInitRestrictSettings = dr.RestrictSettings.new(
  restrDistMethod = input.enum(defval = dr.DistMethod.perc, title = 'Init Restrict Distance Method', options = [dr.DistMethod.perc, dr.DistMethod.atr, dr.DistMethod.stdev, dr.DistMethod.ticks, dr.DistMethod.prof, dr.DistMethod.rr], tooltip = 'The method to calculate the maximum/minimum distance of the initial take profit price. Percentage based (PERC), ATR based (ATR), Standard deviation based (STDEV), Tick based (TICKS), Profit based (PROF) or Risk-Reward based (RR).', group = '🎯 Take Profit', display = display.data_window),
  minDistMul = input.bool(defval = false, title = '                                        ', inline = 'Init Take Profit Min Distance', group = '🎯 Take Profit', display = display.data_window) ?
               input.float(defval = 0.1, title = 'Min Dist Mul            ', minval = 0.0, step = 0.05, tooltip = 'Enable a minimum distance defined by this multiplier and the restrict distance method. The minimum can be used to make sure that you will compensate for (at least) the commission rates, especially when you are trading on lower time frames.', inline = 'Init Take Profit Min Distance', group = '🎯 Take Profit', display = display.data_window) : na,
  maxDistMul = input.bool(defval = false, title = '                                         ', inline = 'Init Take Profit Max Distance', group = '🎯 Take Profit', display = display.data_window) ?
               input.float(defval = 10.0, title = 'Max Dist Mul           ', minval = 0.0, step = 0.05, tooltip = 'Enable a maximum distance defined by this multiplier and the restrict distance method. The maximum can be used to make sure that you get some profits when the price moves in the desired direction.', inline = 'Init Take Profit Max Distance', group = '🎯 Take Profit', display = display.data_window) : na,
  commissionRatio = commissionRatio)

shortTakeProfitInitDistMul = input.float(defval = 5.0, title = '                                          ', minval = 0.05, step = 0.05, tooltip = 'The distance multiplier to define the long/short first take profit price from the open price. The multiplier will be applied to the unit price that is defined by the distance method that is used. If the CUST method is used, then the multiplier is the length that will define the custom price according to its type.', inline = 'Init Take Profit Mul', group = '🎯 Take Profit', display = display.all)
var shortTakeProfitInitDistSettings = dr.DistSettings.new(
  distMethod = longTakeProfitDistInitSettings.distMethod,
  distMul = shortTakeProfitInitDistMul,
  commissionRatio = commissionRatio)

var longTakeProfitStepDistSettings = dr.DistSettings.new(
  distMethod = input.enum(defval = dr.DistMethod.atr, title = 'Step TP Distance Method', options = [dr.DistMethod.perc, dr.DistMethod.atr, dr.DistMethod.stdev, dr.DistMethod.ticks, dr.DistMethod.prof, dr.DistMethod.rr], tooltip = 'The method to calculate the distance of additional step take profit price targets. Percentage based (PERC), ATR based (ATR), Standard deviation based (STDEV), Tick based (TICKS), Fixed Profit (PROF) or Risk-Reward based (RR).', group = '🎯 Take Profit', display = display.all),
  distMul = input.float(defval = 1.0, title = '  Step Dist Mul 📈/📉     ', minval = 0.05, step = 0.05, inline = 'Step Take Profit Mul', group = '🎯 Take Profit', display = display.all),
  commissionRatio = commissionRatio)
var takeProfitStepRestrictSettings = dr.RestrictSettings.new(
  restrDistMethod = input.enum(defval = dr.DistMethod.perc, title = 'Step Restrict Distance Method', options = [dr.DistMethod.perc, dr.DistMethod.atr, dr.DistMethod.stdev, dr.DistMethod.ticks, dr.DistMethod.prof, dr.DistMethod.rr], tooltip = 'The method to calculate the maximum/minimum distance of the step take profit price. Percentage based (PERC), ATR based (ATR), Standard deviation based (STDEV), Tick based (TICKS), Profit based (PROF) or Risk-Reward based (RR).', group = '🎯 Take Profit', display = display.data_window),
  minDistMul = input.bool(defval = false, title = '                                           ', inline = 'Step Take Profit Min Distance', group = '🎯 Take Profit', display = display.data_window) ?
               input.float(defval = 0.1, title = 'Min Dist Mul             ', minval = 0.0, step = 0.05, tooltip = 'Enable a minimum distance defined by this multiplier and the restrict distance method. The minimum can be used to make sure that you will compensate for (at least) the commission rates, especially when you are trading on lower time frames.', inline = 'Step Take Profit Min Distance', group = '🎯 Take Profit', display = display.data_window) : na,
  maxDistMul = input.bool(defval = false, title = '                                            ', inline = 'Step Take Profit Max Distance', group = '🎯 Take Profit', display = display.data_window) ?
               input.float(defval = 5.0, title = 'Max Dist Mul            ', minval = 0.0, step = 0.05, tooltip = 'Enable a maximum distance defined by this multiplier and the restrict distance method. The maximum can be used to make sure that you get some profits when the price moves in the desired direction.', inline = 'Step Take Profit Max Distance', group = '🎯 Take Profit', display = display.data_window) : na,
  commissionRatio = commissionRatio)

var shortTakeProfitStepDistSettings = dr.DistSettings.new(
  distMethod = longTakeProfitStepDistSettings.distMethod,
  distMul = input.float(defval = 1.0, title = '                                             ', minval = 0.05, step = 0.05, tooltip = 'The distance multiplier to be added on top of the first long/short take profit distance multiplier to define the long/short step take profit price target. The multiplier will be applied to the unit price that is defined by the distance method that is used.', inline = 'Step Take Profit Mul', group = '🎯 Take Profit', display = display.all),
  commissionRatio = commissionRatio)

takeProfitTrailEnabled = input.bool(defval = false, title = 'Enable Trail⚠️💹', tooltip = 'Enable or disable the trailing for take profit. WARNING! This feature will repaint. Make sure you use it along with "Bar Magnifier" and "Deep Backtesting" for realistic backtest results.', group = '🎯 Take Profit', display = display.all)

var takeProfitTrailDistSettings = dr.DistSettings.new(
  distMethod = input.enum(defval = dr.DistMethod.perc, title = '  Trail TP Distance Method', options = [dr.DistMethod.perc, dr.DistMethod.atr, dr.DistMethod.stdev, dr.DistMethod.ticks], tooltip = 'The method to calculate the distance of the trailing take profit. Percentage based (PERC), ATR based (ATR) or Standard deviation based (STDEV) or Tick based (TICKS).', group = '🎯 Take Profit', display = display.data_window),
  distMul = input.float(defval = 2.0, title = '    Trail Dist Mul', minval = 0.01, step = 0.05, tooltip = 'The distance multiplier to define the take profit price offset from the high/low price after the target is reached when trailing. The multiplier will be applied to the unit price that is defined by the distance method that is used.', group = '🎯 Take Profit', display = display.data_window))

takeProfitAdjustmentEnabled = input.bool(defval = false, title = 'Adjust on Gaps', tooltip = 'When this option is enabled, the take profit targets will be adjusted when entering with market or stop orders and the actual entry price is different than the expected entry price due to gaps in the price action and slippage of the market.', group = '🎯 Take Profit', display = display.data_window)

// LOGIC ===============================================================================================================
bool IS_TAKE_PROFIT_DIST_METHOD_CUST = takeProfitDistInitMethod == dr.DistMethod.cust
float takeProfitCustHigherPrice = IS_TAKE_PROFIT_DIST_METHOD_CUST ? col.cust_series(longTakeProfitDistInitMul, takeProfitCustHigherType, takeProfitCustHigherSrc) : na
// Calculate the actual long take profit price and ticks that is higher from the reference using the distance
getLongTakeProfitPrice(dr.DistSettings dist, float reference, dr.AuxData shortBiasedAuxData, dr.RestrictSettings restrict, dr.DistSettings mar = na) =>
    dist.higher_short_biased_price(reference, shortBiasedAuxData, restrict, mar, takeProfitCustHigherPrice)

getlongTakeProfitTicks(dr.DistSettings distSettings, float referencePrice, dr.AuxData shortBiasedAuxData) =>
    distSettings.ticks(referencePrice, shortBiasedAuxData)

bool TAKE_PROFIT_ADJUSTMENT_IS_NEEDED = takeProfitAdjustmentEnabled ? (entryOrderType == OrderType.market or entryOrderType == OrderType.stop) and not IS_TAKE_PROFIT_DIST_METHOD_CUST : false

if longLimitOrStopEntryIsActive or validOpenLongPosition
    longTakeProfitShortBiasedAuxData = dr.AuxData.new(atr = negAtr, stdev = negStDev, baseQuantity = longTakeProfitQuantity, stopLossRatio = longStopLossRatio)
    float currentLongTakeProfitPrice = getLongTakeProfitPrice(longTakeProfitDistInitSettings, longEntryPrice, longTakeProfitShortBiasedAuxData, takeProfitInitRestrictSettings, takeProfitInitMarSettings)
    for i = 0 to TAKE_PROFIT_TARGETS_SIZE
        longTakeProfitPrices.set(i, currentLongTakeProfitPrice)
        longTrailTakeProfitOffsetTicks.set(i, getlongTakeProfitTicks(takeProfitTrailDistSettings, currentLongTakeProfitPrice, longTakeProfitShortBiasedAuxData))
        if i < TAKE_PROFIT_TARGETS_SIZE
            currentLongTakeProfitPrice := getLongTakeProfitPrice(longTakeProfitStepDistSettings, currentLongTakeProfitPrice, longTakeProfitShortBiasedAuxData, takeProfitStepRestrictSettings)
else if enteredLongTrade and TAKE_PROFIT_ADJUSTMENT_IS_NEEDED
    float longEntryPriceOffset = longEntryPrice - nz(longEntryPrice[1], longEntryPrice)
    for i = 0 to TAKE_PROFIT_TARGETS_SIZE
        longTakeProfitPrices.set(i, longTakeProfitPrices.get(i) + longEntryPriceOffset)
        longTrailTakeProfitOffsetTicks.set(i, longTrailTakeProfitOffsetTicks.get(i) + math.floor(longEntryPriceOffset / syminfo.mintick))

float takeProfitCustLowerPrice = IS_TAKE_PROFIT_DIST_METHOD_CUST ? col.cust_series(shortTakeProfitInitDistMul, takeProfitCustLowerType, takeProfitCustLowerSrc) : na
// Calculate the actual short take price and ticks that is lower from the reference using the distance
getShortTakeProfitPrice(dr.DistSettings dist, float reference, dr.AuxData longBiasedAuxData, dr.RestrictSettings restrict, dr.DistSettings mar = na) =>
    dist.lower_long_biased_price(reference, longBiasedAuxData, restrict, mar, takeProfitCustLowerPrice)

getShortTakeProfitTicks(dr.DistSettings distSettings, float referencePrice, dr.AuxData longBiasedAuxData) =>
    distSettings.ticks(referencePrice, longBiasedAuxData)

if shortLimitOrStopEntryIsActive or validOpenShortPosition
    shortTakeProfitLongBiasedAuxData = dr.AuxData.new(atr = posAtr, stdev = posStDev, baseQuantity = shortTakeProfitQuantity, stopLossRatio = shortStopLossRatio)
    float currentShortTakeProfitPrice = getShortTakeProfitPrice(shortTakeProfitInitDistSettings, shortEntryPrice, shortTakeProfitLongBiasedAuxData, takeProfitInitRestrictSettings, takeProfitInitMarSettings)
    for i = 0 to TAKE_PROFIT_TARGETS_SIZE
        shortTakeProfitPrices.set(i, currentShortTakeProfitPrice)
        shortTrailTakeProfitOffsetTicks.set(i, getShortTakeProfitTicks(takeProfitTrailDistSettings, currentShortTakeProfitPrice, shortTakeProfitLongBiasedAuxData))
        if i < TAKE_PROFIT_TARGETS_SIZE
            currentShortTakeProfitPrice := getShortTakeProfitPrice(shortTakeProfitStepDistSettings, currentShortTakeProfitPrice, shortTakeProfitLongBiasedAuxData, takeProfitStepRestrictSettings)
else if enteredShortTrade and TAKE_PROFIT_ADJUSTMENT_IS_NEEDED
    float shortEntryPriceOffset = shortEntryPrice - nz(shortEntryPrice[1], shortEntryPrice)
    for i = 0 to TAKE_PROFIT_TARGETS_SIZE
        shortTakeProfitPrices.set(i, shortTakeProfitPrices.get(i) + shortEntryPriceOffset)
        shortTrailTakeProfitOffsetTicks.set(i, shortTrailTakeProfitOffsetTicks.get(i) + math.floor(shortEntryPriceOffset / syminfo.mintick))

modCount += 1

//#endregion ===========================================================================================================
//#region 📊 ANALYTICS
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
// Description: Module responsible for plotting additional information for statistics and backtesting purposes
// Dependencies: TRACK POSITION, ENTRY, TAKE PROFIT 1, TAKE PROFIT 2
// Results: NONE

import jason5480/analytics_tables/2 as ant

// INPUT ===============================================================================================================
winColor = input.color(defval = color.new(#00D26A, 0), title = '🎨️ Win/Loss Color       ', inline = 'Entry', group = '📊 Analytics', display = display.none)
lossColor = input.color(defval = color.new(#ED2F2D, 0), title = '                                              ', tooltip = 'The color of the win/loss labels and the mark trade lines.', inline = 'Entry', group = '📊 Analytics', display = display.none)

const string TT_COMPUTATIONAL_HEAVY_WARNING = ' WARNING! Computational heavy operation. If you get a timeout error please adjust the datetime window filter or disable other computational heavy operations.'
showTradeStats = input.bool(defval = false, title = 'Show Trade Stats⚠️🐌', tooltip = 'Show the winning/losing trade stats when complete.' + TT_COMPUTATIONAL_HEAVY_WARNING, group = '📊 Analytics', display = display.data_window)
showStatsTable = input.bool(defval = false, title = 'Show Stats Table⚠️🐌   ', inline = 'Stats Table', group = '📊 Analytics', display = display.data_window)
statsTablePosY = input.string(defval = 'TOP', title = '                                               ', options = ['TOP', 'MIDDLE', 'BOTTOM'], inline = 'Stats Table', group = '📊 Analytics', display = display.data_window)
statsTablePosX = input.string(defval = 'RIGHT', title = '                                                ', options = ['LEFT', 'RIGHT'], tooltip = 'Show the table with the overall trade statistics on the selected corner.' + TT_COMPUTATIONAL_HEAVY_WARNING, inline = 'Stats Table', group = '📊 Analytics', display = display.data_window)
showMetricsTable = input.bool(defval = false, title = 'Show Metrics Table⚠️🐌  ', inline = 'Metrics Table', group = '📊 Analytics', display = display.data_window)
metricsTablePosY = input.string(defval = 'BOTTOM', title = '                                                 ', options = ['TOP', 'MIDDLE', 'BOTTOM'], inline = 'Metrics Table', group = '📊 Analytics', display = display.data_window)
metricsTablePosX = input.string(defval = 'RIGHT', title = '                                                  ', options = ['LEFT', 'RIGHT'], tooltip = 'Show the table with the trade metrics on the selected corner.' + TT_COMPUTATIONAL_HEAVY_WARNING, inline = 'Metrics Table', group = '📊 Analytics', display = display.data_window)
showSeasonalTable = input.bool(defval = false, title = 'Show Seasonal Table⚠️🐌  ', inline = 'Seasonal Table', group = '📊 Analytics', display = display.data_window)
seasonalTablePosY = input.string(defval = 'BOTTOM', title = '                                                   ', options = ['TOP', 'MIDDLE', 'BOTTOM'], inline = 'Seasonal Table', group = '📊 Analytics', display = display.data_window)
seasonalTablePosX = input.string(defval = 'LEFT', title = '                                                    ', options = ['LEFT', 'RIGHT'], tooltip = 'Show the table with the seasonal performance on the selected corner.' + TT_COMPUTATIONAL_HEAVY_WARNING, inline = 'Seasonal Table', group = '📊 Analytics', display = display.data_window)
seasonalTableSeasonality = input.enum(defval = ant.Seasonality.monthOfYear, title = '  Season/Eon       ', tooltip = 'Select the season and eon of the seasonal performance table.', group = '📊 Analytics', display = display.data_window)
seasonalTableMaxNumOfYears = input.int(defval = 5, title = '  Max Num of Years      ', minval = 0, inline = 'Seasonal Settings', group = '📊 Analytics', display = display.data_window)
seasonalTableExtend = input.bool(defval = false, title = 'Extended', tooltip = 'The maximum number of years to show in the seasonal performance table. Extend the seasonal table with additional rows and colums with statistics for each season like Avg, StDev and for each eon like CAGR and MaxDD.', inline = 'Seasonal Settings', group = '📊 Analytics', display = display.data_window)

// LOGIC ===============================================================================================================
bool SHOW_TABLE = showStatsTable or showMetricsTable
bool SHOW_STATS = SHOW_TABLE or showTradeStats

// Count winning/losing streaks
var int maxWinningStreak = 0
var int maxLosingStreak = 0
var int currentWinningStreak = 0
var int currentLosingStreak = 0
var int numOfInconclusiveExits = 0
// Store the free winning/losing profit percentages
var const array<float> winTradeFreeProfitsPerc = array.new<float>()
var const array<float> lossTradeFreeProfitsPerc = array.new<float>()
// Store the winning/losing profit percentages
var const array<float> winTradeProfitsPerc = array.new<float>()
var const array<float> lossTradeProfitsPerc = array.new<float>()
// Store the gains on account
var const array<float> winTradeGainsPerc = array.new<float>()
var const array<float> lossTradeGainsPerc = array.new<float>()
// Take Profits executed counts
var float winSumTakeProfitExecutedCount = 0.0
var float lossSumTakeProfitExecutedCount = 0.0
// Quantity sums
var float winSumQuantityPerc = 0.0
var float lossSumQuantityPerc = 0.0
// Risks
var const array<float> winRisksPerc = array.new<float>()
var const array<float> lossRisksPerc = array.new<float>()
// Risk/Reaward ratios
var const array<float> winRiskRewardRatios = array.new<float>()
var const array<float> lossRiskRewardRatios = array.new<float>()

closedTradesEntryBarIndex(simple int n) =>
    strategy.closedtrades.entry_bar_index(strategy.closedtrades - n)

closedTradesEntryPrice(simple int n) =>
    strategy.closedtrades.entry_price(strategy.closedtrades - n)

closedTradeEntryIdStartsWith(simple string prefix, simple int n = 1) =>
    strategy.closedtrades >= n ? str.startswith(strategy.closedtrades.entry_id(strategy.closedtrades - n), prefix) : false

lastTwoClosedTradesEnteredInTheSameBar() =>
    strategy.closedtrades >= 2 ? closedTradesEntryBarIndex(2) == closedTradesEntryBarIndex(1) : false

getNumOfExits(simple string orderIdClose, int takeProfitCount) =>
    strategy.closedtrades.exit_id(strategy.closedtrades - 1) == orderIdClose ? takeProfitCount + 1 : moonbagQuantityRatio == 0.0 and numOfTakeProfitTargets > 0 ? numOfTakeProfitTargets : numOfTakeProfitTargets + 1

if completedLongTrade and SHOW_STATS
    // Long entry bar id and price
    var int lastLongEntryBarIndex = na
    var float lastLongEntryPrice = na
    if closedTradeEntryIdStartsWith(LONG_ORDER_ID_PREFIX) or (closedTradeEntryIdStartsWith(LONG_ORDER_ID_PREFIX, 2) and lastTwoClosedTradesEnteredInTheSameBar())
        lastLongEntryBarIndex := closedTradesEntryBarIndex(1)
        lastLongEntryPrice := closedTradesEntryPrice(1)
    else if strategy.closedtrades > 1 ? closedTradeEntryIdStartsWith(LONG_ORDER_ID_PREFIX, 2) and lastTwoClosedTradesExitedInTheSameBar() : false
        lastLongEntryBarIndex := closedTradesEntryBarIndex(2)
        lastLongEntryPrice := closedTradesEntryPrice(2)
    float exRatio = lastLongExitPrice / lastLongEntryPrice
    float longFreeProfitRatio = exRatio - 1.0 - exRatio * commissionRatio - commissionRatio
    float longProfitRatio = - commissionRatio
    bool longInconclusiveExit = false
    int histId = longLimitOrStopEntryIsActive or validOpenLongPosition or enteredLongTrade ? 1 : 0
    int numOfExits = getNumOfExits(LONG_ORDER_ID_CLOSE, longTrailTakeProfitExecutedCount)
    for i = strategy.closedtrades - 1 to strategy.closedtrades - numOfExits
        float ithExPrice = closedTradeExitIdContains(LONG_ORDER_ID_PREFIX) ? strategy.closedtrades.exit_price(i) : strategy.closedtrades.exit_price(i - 1)
        float ithExRatio = ithExPrice / lastLongEntryPrice
        float quantityRatio = str.startswith(strategy.closedtrades.exit_id(i), str.format('{0} Take Profit', LONG_ORDER_ID_PREFIX)) ? TAKE_PROFIT_QUANTITY_RATIO : longRemainingQuantityRatio
        longProfitRatio += (ithExRatio - 1.0 - ithExRatio * commissionRatio) * quantityRatio
        int tpId = moonbagQuantityRatio == 0.0 ? numOfTakeProfitTargets + i - strategy.closedtrades : numOfTakeProfitTargets + i - strategy.closedtrades - 1
        longInconclusiveStopLoss = tpId < numOfTakeProfitTargets and tpId >= 0 and low < longStopLossPrice ? highestHighSinceLongEntry > (longTakeProfitPrices[histId]).get(tpId) and not longTrailTakeProfitExecuted.get(tpId) : false
        longInconclusiveTakeProfit = false
        for j = strategy.closedtrades - 1 to strategy.closedtrades - numOfExits
            longInconclusiveTakeProfit := bar_index == strategy.closedtrades.exit_bar_index(i) and bar_index == strategy.closedtrades.exit_bar_index(j) and strategy.closedtrades.exit_price(i) != strategy.closedtrades.exit_price(j) and low < longStopLossPrice[histId]
        longInconclusiveExit := longInconclusiveExit or longInconclusiveStopLoss or longInconclusiveTakeProfit
    float longGainPerc = longProfitRatio * longEntryQuoteQuantityPerc[histId]
    float longAvgTakeProfitRatio = nz(((longTakeProfitPrices[histId]).avg() - lastLongEntryPrice) / lastLongEntryPrice)
    float longRiskRewardRatio = longAvgTakeProfitRatio / longEntryStopLossRatio
    bool isWin = longProfitRatio >= 0.0
    // Keep stats for later use
    if SHOW_TABLE
        if isWin
            currentWinningStreak := currentWinningStreak + 1
            winTradeFreeProfitsPerc.push(100.0 * longFreeProfitRatio)
            winTradeProfitsPerc.push(100.0 * longProfitRatio)
            winTradeGainsPerc.push(longGainPerc)
            winSumTakeProfitExecutedCount := winSumTakeProfitExecutedCount + longTrailTakeProfitExecutedCount
            winSumQuantityPerc := winSumQuantityPerc + longEntryQuoteQuantityPerc[histId]
            currentLosingStreak := 0
            if quantityMethod != QuantityMethod.risk
                winRisksPerc.push(longCapitalRiskPerc[histId])
            winRiskRewardRatios.push(longRiskRewardRatio)
        else
            currentLosingStreak := currentLosingStreak + 1
            lossTradeFreeProfitsPerc.push(100.0 * longFreeProfitRatio)
            lossTradeProfitsPerc.push(100.0 * longProfitRatio)
            lossTradeGainsPerc.push(longGainPerc)
            lossSumTakeProfitExecutedCount := lossSumTakeProfitExecutedCount + longTrailTakeProfitExecutedCount
            lossSumQuantityPerc := lossSumQuantityPerc + longEntryQuoteQuantityPerc[histId]
            currentWinningStreak := 0
            if quantityMethod != QuantityMethod.risk
                lossRisksPerc.push(longCapitalRiskPerc[histId])
            lossRiskRewardRatios.push(longRiskRewardRatio)
        maxWinningStreak := math.max(currentWinningStreak, maxWinningStreak)
        maxLosingStreak := math.max(currentLosingStreak, maxLosingStreak)
        if longInconclusiveExit
            numOfInconclusiveExits := numOfInconclusiveExits + 1
    // Plot trades' line and label
    if showTradeStats
        string longFreeProfitPercStr = (longFreeProfitRatio >= 0.0 ? '+' : '') + str.tostring(100.0 * longFreeProfitRatio, format.percent)
        string longProfitPercStr = (isWin ? '+' : '') + str.tostring(100.0 * longProfitRatio, format.percent)
        string longGainPercStr = (isWin ? '+' : '') + str.tostring(longGainPerc, format.percent)
        float tradePrice = isWin and longTrailTakeProfitExecutedCount > 0 ? math.max((longTakeProfitPrices[histId]).get(longTrailTakeProfitExecutedCount - 1), longStopLossPrice[histId], lastLongExitPrice) : lastLongExitPrice
        int labelBarId = math.floor((lastLongEntryBarIndex + lastLongExitBarIndex + 1) / 2)
        chart.point midPoint = chart.point.from_index(labelBarId, tradePrice)
        chart.point entryPoint = chart.point.from_index(lastLongEntryBarIndex, lastLongEntryPrice)
        chart.point exitPoint = chart.point.from_index(lastLongExitBarIndex, lastLongExitPrice)
        line.new(first_point = midPoint, second_point = entryPoint, color = isWin ? winColor : lossColor, style = line.style_arrow_right, width = 1)
        line.new(first_point = midPoint, second_point = exitPoint, color = isWin ? winColor : lossColor, style = line.style_arrow_right, width = 1)
        label.new(point = midPoint, text = (longInconclusiveExit ? '🚨' : '') + (isWin ? 'Win' : 'Loss'), color = isWin ? winColor : lossColor, style = label.style_text_outline, textcolor = BG_COLOR,
          tooltip = str.format('Quantity: {0}\nCapital Risk: {1}\nEntry Price: {2,number,currency}\nExit Price: {3,number,currency}\nFree Profit: {4}\nProfit: {5}\nGain: {6}\nTP Exec #: {7,number,integer}\nRisk Reward: {8,number,#.##}\nInit SL: {9}\nAvg TP: {10}',
             str.tostring(longEntryQuoteQuantityPerc[histId], format.percent), str.tostring(longCapitalRiskPerc[histId], format.percent), lastLongEntryPrice, lastLongExitPrice, longFreeProfitPercStr, longProfitPercStr, longGainPercStr, longTrailTakeProfitExecutedCount, longRiskRewardRatio, str.tostring(100.0 * longEntryStopLossRatio, format.percent), str.tostring(100.0 * longAvgTakeProfitRatio, format.percent)))

if completedShortTrade and SHOW_STATS
    // Short entry bar id and price
    var int lastShortEntryBarIndex = na
    var float lastShortEntryPrice = na
    if closedTradeEntryIdStartsWith(SHORT_ORDER_ID_PREFIX) or (closedTradeEntryIdStartsWith(SHORT_ORDER_ID_PREFIX, 2) and lastTwoClosedTradesEnteredInTheSameBar())
        lastShortEntryBarIndex := closedTradesEntryBarIndex(1)
        lastShortEntryPrice := closedTradesEntryPrice(1)
    else if strategy.closedtrades > 1 ? closedTradeEntryIdStartsWith(SHORT_ORDER_ID_PREFIX, 2) and lastTwoClosedTradesExitedInTheSameBar() : false
        lastShortEntryBarIndex := closedTradesEntryBarIndex(2)
        lastShortEntryPrice := closedTradesEntryPrice(2)
    float exRatio = lastShortExitPrice / lastShortEntryPrice
    float shortFreeProfitRatio = 1.0 - exRatio - exRatio * commissionRatio - commissionRatio
    float shortProfitRatio = - commissionRatio
    bool shortInconclusiveExit = false
    int histId = shortLimitOrStopEntryIsActive or validOpenShortPosition or enteredShortTrade ? 1 : 0
    int numOfExits = getNumOfExits(SHORT_ORDER_ID_CLOSE, shortTrailTakeProfitExecutedCount)
    for i = strategy.closedtrades - 1 to strategy.closedtrades - numOfExits
        float ithExPrice = closedTradeExitIdContains(SHORT_ORDER_ID_PREFIX) ? strategy.closedtrades.exit_price(i) : strategy.closedtrades.exit_price(i - 1)
        float ithExRatio = ithExPrice / lastShortEntryPrice
        float quanityRatio = str.startswith(strategy.closedtrades.exit_id(i), str.format('{0} Take Profit', SHORT_ORDER_ID_PREFIX)) ? TAKE_PROFIT_QUANTITY_RATIO : shortRemainingQuantityRatio
        shortProfitRatio += (1.0 - ithExRatio - ithExRatio * commissionRatio) * quanityRatio
        int tpId = moonbagQuantityRatio == 0.0 ? numOfTakeProfitTargets + i - strategy.closedtrades : numOfTakeProfitTargets + i - strategy.closedtrades - 1
        shortInconclusiveStopLoss = tpId < numOfTakeProfitTargets and tpId >= 0 and high > shortStopLossPrice ? lowestLowSinceShortEntry < (shortTakeProfitPrices[histId]).get(tpId) and not shortTrailTakeProfitExecuted.get(tpId) : false
        shortInconclusiveTakeProfit = false
        for j = strategy.closedtrades - 1 to strategy.closedtrades - numOfExits
            shortInconclusiveTakeProfit := bar_index == strategy.closedtrades.exit_bar_index(i) and bar_index == strategy.closedtrades.exit_bar_index(j) and strategy.closedtrades.exit_price(i) != strategy.closedtrades.exit_price(j) and high > shortStopLossPrice[histId]
        shortInconclusiveExit := shortInconclusiveExit or shortInconclusiveStopLoss or shortInconclusiveTakeProfit
    float shortGainPerc = shortProfitRatio * shortEntryQuoteQuantityPerc[histId]
    float shortAvgTakeProfitRatio = nz((lastShortEntryPrice - (shortTakeProfitPrices[histId]).avg()) / lastShortEntryPrice)
    float shortRiskRewardRatio = shortAvgTakeProfitRatio / shortEntryStopLossRatio
    bool isWin = shortProfitRatio >= 0.0
    // Keep stats for later use
    if SHOW_TABLE
        if isWin
            currentWinningStreak := currentWinningStreak + 1
            winTradeFreeProfitsPerc.push(100.0 * shortFreeProfitRatio)
            winTradeProfitsPerc.push(100.0 * shortProfitRatio)
            winTradeGainsPerc.push(shortGainPerc)
            winSumTakeProfitExecutedCount := winSumTakeProfitExecutedCount + shortTrailTakeProfitExecutedCount
            winSumQuantityPerc := winSumQuantityPerc + shortEntryQuoteQuantityPerc[histId]
            currentLosingStreak := 0
            if quantityMethod != QuantityMethod.risk
                winRisksPerc.push(shortCapitalRiskPerc[histId])
            winRiskRewardRatios.push(shortRiskRewardRatio)
        else
            currentLosingStreak := currentLosingStreak + 1
            lossTradeFreeProfitsPerc.push(100.0 * shortFreeProfitRatio)
            lossTradeProfitsPerc.push(100.0 * shortProfitRatio)
            lossTradeGainsPerc.push(shortGainPerc)
            lossSumTakeProfitExecutedCount := lossSumTakeProfitExecutedCount + shortTrailTakeProfitExecutedCount
            lossSumQuantityPerc := lossSumQuantityPerc + shortEntryQuoteQuantityPerc[histId]
            currentWinningStreak := 0
            if quantityMethod != QuantityMethod.risk
                lossRisksPerc.push(shortCapitalRiskPerc[histId])
            lossRiskRewardRatios.push(shortRiskRewardRatio)
        maxWinningStreak := math.max(currentWinningStreak, maxWinningStreak)
        maxLosingStreak := math.max(currentLosingStreak, maxLosingStreak)
        if shortInconclusiveExit
            numOfInconclusiveExits := numOfInconclusiveExits + 1
    // Plot trade stats (line and label)
    if showTradeStats
        string shortFreeProfitPercStr = (shortFreeProfitRatio >= 0.0 ? '+' : '') + str.tostring(100.0 * shortFreeProfitRatio, format.percent)
        string shortProfitPercStr = (isWin ? '+' : '') + str.tostring(100.0 * shortProfitRatio, format.percent)
        string shortGainPercStr = (isWin ? '+' : '') + str.tostring(shortGainPerc, format.percent)
        float tradePrice = isWin and shortTrailTakeProfitExecutedCount > 0 ? math.min((shortTakeProfitPrices[histId]).get(shortTrailTakeProfitExecutedCount - 1), shortStopLossPrice[histId], lastShortExitPrice) : lastShortExitPrice
        int labelBarId = math.floor((lastShortEntryBarIndex + lastShortExitBarIndex + 1) / 2)
        chart.point midPoint = chart.point.from_index(labelBarId, tradePrice)
        chart.point entryPoint = chart.point.from_index(lastShortEntryBarIndex, lastShortEntryPrice)
        chart.point exitPoint = chart.point.from_index(lastShortExitBarIndex, lastShortExitPrice)
        line.new(first_point = midPoint, second_point = entryPoint, color = isWin ? winColor : lossColor, style = line.style_arrow_right, width = 1)
        line.new(first_point = midPoint, second_point = exitPoint, color = isWin ? winColor : lossColor, style = line.style_arrow_right, width = 1)
        label.new(point = midPoint, text = (shortInconclusiveExit ? '🚨' : '') + (isWin ? 'Win' : 'Loss'), color = isWin ? winColor : lossColor, style = label.style_text_outline, textcolor = BG_COLOR,
          tooltip = str.format('Quantity: {0}\nCapital Risk: {1}\nEntry Price: {2,number,currency}\nExit Price: {3,number,currency}\nFree Profit: {4}\nProfit: {5}\nGain: {6}\nTP Exec #: {7,number,integer}\nRisk Reward: {8,number,#.##}\nInit SL: {9}\nAvg TP: {10}',
             str.tostring(shortEntryQuoteQuantityPerc[histId], format.percent), str.tostring(shortCapitalRiskPerc[histId], format.percent), lastShortEntryPrice, lastShortExitPrice, shortFreeProfitPercStr, shortProfitPercStr, shortGainPercStr, shortTrailTakeProfitExecutedCount, shortRiskRewardRatio, str.tostring(100.0 * shortEntryStopLossRatio, format.percent), str.tostring(100.0 * shortAvgTakeProfitRatio, format.percent)))

// Buy&Hold
var float firstEntry = 0.0
var bool firstBuyInit = false
var float buyAndHoldPerc = 0.0

if showMetricsTable and (not firstBuyInit and (enteredLongTrade or enteredShortTrade))
    firstEntry := enteredLongTrade ? longEntryPrice : shortEntryPrice
    firstBuyInit := true

if showMetricsTable and (completedLongTrade or completedShortTrade)
    buyAndHoldPerc := 100.0 * (strategy.closedtrades.exit_price(strategy.closedtrades - 1) - firstEntry) / firstEntry

var ant.SeasonalData seasonalData = ant.SeasonalData.new().init(seasonalTableSeasonality)
if showSeasonalTable
    seasonalData.update()

modCount += 1

// PLOT ================================================================================================================
if (SHOW_TABLE or showSeasonalTable) and (barstate.islastconfirmedhistory or (barstate.isrealtime and barstate.isconfirmed))
    // Table colors
    color CELL_BG_COLOR = color.new(BG_COLOR, 95)
    color POSITIVE_TXT_COLOR = color.new(winColor, 0)
    color NEGATIVE_TXT_COLOR = color.new(lossColor, 0)
    color POSITIVE_BG_COLOR = color.new(takeProfitColor, 95)
    color NEGATIVE_BG_COLOR = color.new(stopLossColor, 95)

    // Trades
    var ant.StatsData statsData = ant.StatsData.new()
    if SHOW_TABLE
        int numOfWins = winTradeProfitsPerc.size()
        int numOfLosses = lossTradeProfitsPerc.size()
        statsData.update(wins = ant.SideStats.new(numOf = winTradeProfitsPerc.size(),
                                                 sumFreeProfit = nz(winTradeFreeProfitsPerc.sum()), freeProfitStDev = nz(winTradeFreeProfitsPerc.stdev()),
                                                 sumProfit = nz(winTradeProfitsPerc.sum()), profitStDev = nz(winTradeProfitsPerc.stdev()),
                                                 sumGain = nz(winTradeGainsPerc.sum()), gainStDev = nz(winTradeGainsPerc.stdev()),
                                                 avgQuantityPerc = nz(winSumQuantityPerc / numOfWins),
                                                 avgCapitalRiskPerc = quantityMethod != QuantityMethod.risk ? nz(winRisksPerc.avg()) : 100.0 * capitalRiskRatio,
                                                 avgTPExecutedCount = nz(winSumTakeProfitExecutedCount / numOfWins),
                                                 avgRiskRewardRatio = nz(winRiskRewardRatios.avg()),
                                                 maxStreak = maxWinningStreak),
                         losses = ant.SideStats.new(numOf = lossTradeProfitsPerc.size(),
                                                     sumFreeProfit = nz(lossTradeFreeProfitsPerc.sum()), freeProfitStDev = nz(lossTradeFreeProfitsPerc.stdev()),
                                                     sumProfit = nz(lossTradeProfitsPerc.sum()), profitStDev = nz(lossTradeProfitsPerc.stdev()),
                                                     sumGain = nz(lossTradeGainsPerc.sum()), gainStDev = nz(lossTradeGainsPerc.stdev()),
                                                     avgQuantityPerc = nz(lossSumQuantityPerc / numOfLosses),
                                                     avgCapitalRiskPerc = quantityMethod != QuantityMethod.risk ? nz(lossRisksPerc.avg()) : 100.0 * capitalRiskRatio,
                                                     avgTPExecutedCount = nz(lossSumTakeProfitExecutedCount / numOfLosses),
                                                     avgRiskRewardRatio = nz(lossRiskRewardRatios.avg()),
                                                     maxStreak = maxLosingStreak),
                         numOfInconclusiveExits = numOfInconclusiveExits)

    if showStatsTable
        // The Stats table
        var statsTable = ant.StatsTable.new().init(ant.getTablePos(statsTablePosY, statsTablePosX), 0.0, 0.0, POSITIVE_TXT_COLOR, NEGATIVE_TXT_COLOR, chart.fg_color, POSITIVE_BG_COLOR, NEGATIVE_BG_COLOR, CELL_BG_COLOR)
        statsTable.update(statsData, POSITIVE_TXT_COLOR, NEGATIVE_TXT_COLOR, NEGATIVE_BG_COLOR, CELL_BG_COLOR)

    if showMetricsTable
        // The Metrics table
        var metricsTable = ant.MetricsTable.new().init(ant.getTablePos(metricsTablePosY, metricsTablePosX))
        metricsTable.update(statsData, buyAndHoldPerc, POSITIVE_TXT_COLOR, NEGATIVE_TXT_COLOR, POSITIVE_BG_COLOR, NEGATIVE_BG_COLOR)

    if showSeasonalTable
        // The Seasonal Table
        var seasonalTable = ant.SeasonalTable.new().init(seasonalData, ant.getTablePos(seasonalTablePosY, seasonalTablePosX), seasonalTableMaxNumOfYears, 0.0, 0.0, seasonalTableExtend, chart.fg_color, CELL_BG_COLOR)
        seasonalTable.update(seasonalData, POSITIVE_TXT_COLOR, NEGATIVE_TXT_COLOR, chart.fg_color, POSITIVE_BG_COLOR, NEGATIVE_BG_COLOR, CELL_BG_COLOR)

//#endregion ===========================================================================================================
//#region 🗲 EXECUTION CONDITIONS
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
// Description: Module responsible for conditional variables to enter and exit orders
// Dependencies: ENTRY, EXIT
// Results: ALL

// LOGIC ===============================================================================================================
bool doCloseMarketLong = (exitOrderType == OrderType.market and validCloseLongPosition) or (stopLossWaitCloseConfirm and close < longStopLossPrice) or validOpenShortPosition
bool doCloseMarketShort = (exitOrderType == OrderType.market and validCloseShortPosition) or (stopLossWaitCloseConfirm and close > shortStopLossPrice) or validOpenLongPosition
bool doEnterMarketLong = entryOrderType == OrderType.market ? validOpenLongPosition : longLimitOrStopEntryIsActive
bool doCnlLimitEntryLong = longLimitOrStopEntryIsActive[1] and validCnlOpenLongPosition
bool doSLorExitLimitLong = longLimitExitIsActive or longIsActive
bool doCnlLimitExitLong = longLimitExitIsActive and validCnlCloseLongPosition
bool doEnterMarketShort = entryOrderType == OrderType.market ? validOpenShortPosition : shortLimitOrStopEntryIsActive
bool doCnlLimitEntryShort = shortLimitOrStopEntryIsActive[1] and validCnlOpenShortPosition
bool doSLorExitLimitShort = shortLimitExitIsActive or shortIsActive
bool doCnlLimitExitShort = shortLimitExitIsActive and validCnlCloseShortPosition

modCount += 1

if barstate.islastconfirmedhistory
    if modCount != NUM_OF_MODS
        log.warning('Unexpected numb‌     ‌ ‌‌‌ ‌ ‌ ‌‌‌ ‌   ‌‌ ‌    ‌‌ ‌‌‌‌ ‌‌‌  ‌  ‌‌‌ ‌  ‌      ‌       ‌‌ ‌ ‌  ‌‌    ‌ ‌‌‌  ‌‌ ‌‌ ‌‌‌‌ ‌‌ ‌‌‌  ‌‌ ‌ ‌ ‌‌ ‌   ‌‌‌    ‌‌     ‌ ‌‌   ‌      ‌ ‌  ‌‌ ‌‌   ‌‌ ‌‌‌  ‌  ‌‌ ‌  ‌ ‌‌‌     ‌‌‌ ‌   ‌‌‌ ‌  ‌      ‌ ‌ ‌   ‌ ‌ ‌   ‌ ‌  ‌‌ ‌‌‌ ‌‌  ‌‌ ‌ ‌ ‌‌   ‌er of modules: {0}', modCount)

//#endregion ===========================================================================================================
//#region 🔔 ALERT MESSAGES
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
// Description: Module responsible for the message outputs when strategy orders are being executed
// Dependencies: ENTRY, TAKE PROFIT 1, EXIT, STOP LOSS, TAKE PROFIT 2, QUANTITY/RISK MANAGEMENT, EXECUTION CONDITIONS
// Results: ALL

import jason5480/string_utils/6

// INPUT ===============================================================================================================
tickerPrefix = input.string(defval = '', title = 'Ticker Id Prefix/Postfix      ', inline = 'Ticker', group = '🔔 Alert Messages', display = display.none)
tickerPostfix = input.string(defval = '', title = '                                                     ', tooltip = 'Prepend/Append a custom string to the TVs ticker id when you use {{ticker}} as variable in the alert messages.', inline = 'Ticker', group = '🔔 Alert Messages', display = display.none)

usePercRange100 = input.bool(defval = true, title = 'Percentage Range [0, 100]', tooltip = 'Enable to multiply all the percentatges with 100 so that the values range from [0, 100] instead of [0, 1].', group = '🔔 Alert Messages', display = display.none)

marginMsgTicks = input.int(defval = 5, title = 'Margin Ticks', minval = 1, tooltip = 'The ticks that will be added/substracted from entry/exit price to calculate the {${ENTRY+}}, {${ENTRY-}}, {${EXIT+}}, {${EXIT-}} variables. Those values could be used if you want to send a limit order to your exchange and the price might go to the "wrong" side due to the high volatility of the market and delay between the time of computation and execution.', group = '🔔 Alert Messages', display = display.data_window)

const string TT_ALERT_MESSAGE_EXPLANATION = ' Text that will replace the \'{{strategy.order.alert_message}}\' placeholder when one is used in the "Message" field of the "Create Alert" dialog.'
msgEnteredEnabled = input.bool(defval = false, title = 'Enable Entry Alerts⚠️🐌', tooltip = 'Enable the alert messages that correspond to "entry order fills" of the strategy (e.g. market, limit, stop and stop-limit entry).' + TT_COMPUTATIONAL_HEAVY_WARNING, group = '🔔 Alert Messages', display = display.none)
rawMsgEnteredMarketLong = msgEnteredEnabled ? input.text_area(defval = 'Long Entry({{ticker}}): Bought at market price of {{entry_price}} {{quote_currency}} an amount equal to {{base_quantity}} {{base_currency}} (for {{quote_quantity}} {{quote_currency}}) and risk of {{risk_perc}}%. The stop loss was placed at {{stop_loss_price}} {{quote_currency}} and take profit targets at [{{take_profit_price_1}}, {{take_profit_price_2}}, {{take_profit_price_3}}, {{take_profit_price_4}}, {{take_profit_price_5}}] {{quote_currency}}', title = 'Enter Market Long', tooltip = 'Alert message emitted when entered long position.' + TT_ALERT_MESSAGE_EXPLANATION, group = '🔔 Alert Messages', display = display.none) : na
rawMsgEnteredMarketShort = msgEnteredEnabled ? input.text_area(defval = 'Short Entry({{ticker}}): Sold at market price of {{entry_price}} {{quote_currency}} an amount equal to {{base_quantity}} {{base_currency}} (for {{quote_quantity}} {{quote_currency}}) and risk of {{risk_perc}}%. The stop loss was placed at {{stop_loss_price}} {{quote_currency}} and take profit targets at [{{take_profit_price_1}}, {{take_profit_price_2}}, {{take_profit_price_3}}, {{take_profit_price_4}}, {{take_profit_price_5}}] {{quote_currency}}', title = 'Enter Market Short', tooltip = 'Alert message emitted when entered short position.' + TT_ALERT_MESSAGE_EXPLANATION, group = '🔔 Alert Messages', display = display.none) : na
rawMsgEnteredLimitOrStopLong = msgEnteredEnabled ? input.text_area(defval = 'Long Entry({{ticker}}): Bought with limit, stop or stop-limit entry order at the price of {{entry_price}} {{quote_currency}} an amount equal to {{base_quantity}} {{base_currency}} and risk of {{risk_perc}}%. The stop loss was placed at {{stop_loss_price}} {{quote_currency}} and take profit targets at [{{take_profit_price_1}}, {{take_profit_price_2}}, {{take_profit_price_3}}, {{take_profit_price_4}}, {{take_profit_price_5}}] {{quote_currency}}', title = 'Enter Limit Long', tooltip = 'Alert message emitted when entered long position with a limit, stop or stop-limit order.' + TT_ALERT_MESSAGE_EXPLANATION, group = '🔔 Alert Messages', display = display.none) : na
rawMsgEnteredLimitOrStopShort = msgEnteredEnabled ? input.text_area(defval = 'Short Entry({{ticker}}): Sold with limit, stop or stop-limit entry order at the price of {{entry_price}} {{quote_currency}} an amount equal to {{base_quantity}} {{base_currency}} and risk of {{risk_perc}}%. The stop loss was placed at {{stop_loss_price}} {{quote_currency}} and take profit targets at [{{take_profit_price_1}}, {{take_profit_price_2}}, {{take_profit_price_3}}, {{take_profit_price_4}}, {{take_profit_price_5}}] {{quote_currency}}', title = 'Enter Limit Short', tooltip = 'Alert message emitted when entered short position with a limit, stop or stop-limit order.' + TT_ALERT_MESSAGE_EXPLANATION, group = '🔔 Alert Messages', display = display.none) : na
msgClosedOrExitedEnabled = input.bool(defval = false, title = 'Enable Close/Exit Alerts⚠️🐌', tooltip = 'Enable the alert messages that correspond to "close/exit order fills" of the strategy (e.g. market, limit and stop exit).' + TT_COMPUTATIONAL_HEAVY_WARNING, group = '🔔 Alert Messages', display = display.none)
rawMsgClosedMarketLong = msgClosedOrExitedEnabled ? input.text_area(defval = 'Long Close({{ticker}}): Sold at market price of {{exit_price}} {{quote_currency}} {{remaining_quantity_perc}}% of the initial position', title = 'Close Market Long', tooltip = 'Alert message emitted when closed long position.' + TT_ALERT_MESSAGE_EXPLANATION, group = '🔔 Alert Messages', display = display.none) : na
rawMsgClosedMarketShort = msgClosedOrExitedEnabled ? input.text_area(defval = 'Short Close({{ticker}}): Bought at market price of {{exit_price}} {{quote_currency}} {{remaining_quantity_perc}}% of the initial position', title = 'Close Market Short', tooltip = 'Alert message emitted when closed short position.' + TT_ALERT_MESSAGE_EXPLANATION, group = '🔔 Alert Messages', display = display.none) : na
rawMsgExitedLimitOrStopLong = msgClosedOrExitedEnabled ? input.text_area(defval = 'Long Exit({{ticker}}): Sold with limit or stop exit order at the price of {{exit_price}} {{quote_currency}} {{remaining_quantity_perc}}% of the initial position', title = 'Exit Limit Long', tooltip = 'Alert message emitted when exited long position with a limit or stop order.' + TT_ALERT_MESSAGE_EXPLANATION, group = '🔔 Alert Messages', display = display.none) : na
rawMsgExitedLimitOrStopShort = msgClosedOrExitedEnabled ? input.text_area(defval = 'Short Exit({{ticker}}): Bought with limit or stop exit order at the price of {{exit_price}} {{quote_currency}} {{remaining_quantity_perc}}% of the initial position', title = 'Exit Limit Short', tooltip = 'Alert message emitted when exited short position with a limit or stop order.' + TT_ALERT_MESSAGE_EXPLANATION, group = '🔔 Alert Messages', display = display.none) : na
rawMsgClosedAll = msgClosedOrExitedEnabled ? input.text_area(defval = 'Close All({{ticker}}): Closed all positions at market price of {{exit_price}} {{quote_currency}}', title = 'Close All', tooltip = 'Alert message emitted when closed all positions.' + TT_ALERT_MESSAGE_EXPLANATION, group = '🔔 Alert Messages', display = display.none) : na
msgTakeProfitEnabled = input.bool(defval = false, title = 'Enable Take Profit Alerts⚠️🐌', tooltip = 'Enable the alert messages that correspond to "profit order fills" of the strategy (e.g. take profit "partial" exit).' + TT_COMPUTATIONAL_HEAVY_WARNING, group = '🔔 Alert Messages', display = display.none)
const int NUM_OF_MAX_TP_ALERTS = 5
var const array<string> rawMsgRchTPLong = array.new<string>(NUM_OF_MAX_TP_ALERTS, na)
var const array<string> rawMsgRchTPShort = array.new<string>(NUM_OF_MAX_TP_ALERTS, na)
rawMsgRchTPLong.set(0, msgTakeProfitEnabled ? input.text_area(defval = 'Long Exit({{ticker}}): Take Profit 1 executed at the price of {{take_profit_price_1}} {{quote_currency}} and sold {{take_profit_quantity_perc}}% of the initial position, that equals to an amount of {{take_profit_base_quantity}} {{base_currency}}', title = 'TP1 Long', tooltip = 'Alert message emitted when the first take profit price target for the long position is reached.' + TT_ALERT_MESSAGE_EXPLANATION, group = '🔔 Alert Messages', display = display.none) : na)
rawMsgRchTPShort.set(0, msgTakeProfitEnabled ? input.text_area(defval = 'Short Exit({{ticker}}): Take Profit 1 executed at the price of {{take_profit_price_1}} {{quote_currency}} and bought {{take_profit_quantity_perc}}% of the initial position, that equals to an amount of {{take_profit_base_quantity}} {{base_currency}}', title = 'TP1 Short', tooltip = 'Alert message emitted when the first take profit price target for the short position is reached.' + TT_ALERT_MESSAGE_EXPLANATION, group = '🔔 Alert Messages', display = display.none) : na)
rawMsgRchTPLong.set(1, msgTakeProfitEnabled ? input.text_area(defval = 'Long Exit({{ticker}}): Take Profit 2 executed at the price of {{take_profit_price_2}} {{quote_currency}} and sold {{take_profit_quantity_perc}}% of the initial position, that equals to an amount of {{take_profit_base_quantity}} {{base_currency}}', title = 'TP2 Long', tooltip = 'Alert message emitted when the second take profit price target for the long position is reached.' + TT_ALERT_MESSAGE_EXPLANATION, group = '🔔 Alert Messages', display = display.none) : na)
rawMsgRchTPShort.set(1, msgTakeProfitEnabled ? input.text_area(defval = 'Short Exit({{ticker}}): Take Profit 2 executed at the price of {{take_profit_price_2}} {{quote_currency}} and bought {{take_profit_quantity_perc}}% of the initial position, that equals to an amount of {{take_profit_base_quantity}} {{base_currency}}', title = 'TP2 Short', tooltip = 'Alert message emitted when the second take profit price target for the short position is reached.' + TT_ALERT_MESSAGE_EXPLANATION, group = '🔔 Alert Messages', display = display.none) : na)
rawMsgRchTPLong.set(2, msgTakeProfitEnabled ? input.text_area(defval = 'Long Exit({{ticker}}): Take Profit 3 executed at the price of {{take_profit_price_3}} {{quote_currency}} and sold {{take_profit_quantity_perc}}% of the initial position, that equals to an amount of {{take_profit_base_quantity}} {{base_currency}}', title = 'TP3 Long', tooltip = 'Alert message emitted when the third take profit price target for the long position is reached.' + TT_ALERT_MESSAGE_EXPLANATION, group = '🔔 Alert Messages', display = display.none) : na)
rawMsgRchTPShort.set(2, msgTakeProfitEnabled ? input.text_area(defval = 'Short Exit({{ticker}}): Take Profit 3 executed at the price of {{take_profit_price_3}} {{quote_currency}} and bought {{take_profit_quantity_perc}}% of the initial position, that equals to an amount of {{take_profit_base_quantity}} {{base_currency}}', title = 'TP3 Short', tooltip = 'Alert message emitted when the third take profit price target for the short position is reached.' + TT_ALERT_MESSAGE_EXPLANATION, group = '🔔 Alert Messages', display = display.none) : na)
rawMsgRchTPLong.set(3, msgTakeProfitEnabled ? input.text_area(defval = 'Long Exit({{ticker}}): Take Profit 4 executed at the price of {{take_profit_price_4}} {{quote_currency}} and sold {{take_profit_quantity_perc}}% of the initial position, that equals to an amount of {{take_profit_base_quantity}} {{base_currency}}', title = 'TP4 Long', tooltip = 'Alert message emitted when the forth take profit price target for the long position is reached.' + TT_ALERT_MESSAGE_EXPLANATION, group = '🔔 Alert Messages', display = display.none) : na)
rawMsgRchTPShort.set(3, msgTakeProfitEnabled ? input.text_area(defval = 'Short Exit({{ticker}}): Take Profit 4 executed at the price of {{take_profit_price_4}} {{quote_currency}} and bought {{take_profit_quantity_perc}}% of the initial position, that equals to an amount of {{take_profit_base_quantity}} {{base_currency}}', title = 'TP4 Short', tooltip = 'Alert message emitted when the forth take profit price target for the short position is reached.' + TT_ALERT_MESSAGE_EXPLANATION, group = '🔔 Alert Messages', display = display.none) : na)
rawMsgRchTPLong.set(4, msgTakeProfitEnabled ? input.text_area(defval = 'Long Exit({{ticker}}): Take Profit 5 executed at the price of {{take_profit_price_5}} {{quote_currency}} and sold {{take_profit_quantity_perc}}% of the initial position, that equals to an amount of {{take_profit_base_quantity}} {{base_currency}}', title = 'TP5 Long', tooltip = 'Alert message emitted when the fifth take profit price target for the long position is reached.' + TT_ALERT_MESSAGE_EXPLANATION, group = '🔔 Alert Messages', display = display.none) : na)
rawMsgRchTPShort.set(4, msgTakeProfitEnabled ? input.text_area(defval = 'Short Exit({{ticker}}): Take Profit 5 executed at the price of {{take_profit_price_5}} {{quote_currency}} and bought {{take_profit_quantity_perc}}% of the initial position, that equals to an amount of {{take_profit_base_quantity}} {{base_currency}}', title = 'TP5 Short', tooltip = 'Alert message emitted when the fifth take profit price target for the short position is reached.' + TT_ALERT_MESSAGE_EXPLANATION, group = '🔔 Alert Messages', display = display.none) : na)
msgStopLossEnabled = input.bool(defval = false, title = 'Enable Stop Loss Alerts⚠️🐌', tooltip = 'Enable the alert messages that correspond to "stop_loss order fills" of the strategy (e.g. stop loss exit).' + TT_COMPUTATIONAL_HEAVY_WARNING, group = '🔔 Alert Messages', display = display.none)
rawMsgRchSLLong = msgStopLossEnabled ? input.text_area(defval = 'Long Exit({{ticker}}): Stop Loss executed at the price of {{stop_loss_price}} {{quote_currency}} and sold {{remaining_quantity_perc}}% of the initial position, that equals to an amount of {{remaining_base_quantity}} {{base_currency}}', title = 'SL Long', tooltip = 'Alert message emitted when the last stop loss target for the long position is reached.' + TT_ALERT_MESSAGE_EXPLANATION, group = '🔔 Alert Messages', display = display.none) : na
rawMsgRchSLShort = msgStopLossEnabled ? input.text_area(defval = 'Short Exit({{ticker}}): Stop Loss executed at the price of {{stop_loss_price}} {{quote_currency}} and bought {{remaining_quantity_perc}}% of the initial position, that equals to an amount of {{remaining_base_quantity}} {{base_currency}}', title = 'SL Short', tooltip = 'Alert message emitted when the last stop loss target for the short position is reached.' + TT_ALERT_MESSAGE_EXPLANATION, group = '🔔 Alert Messages', display = display.none) : na
msgChgTrEntryEnabled = input.bool(defval = false, title = 'Enable Tr Entry Change Alerts⚠️🐌', tooltip = 'Enable the alert messages that correspond to "alert() function calls" when the trailing limit, stop or stop-limit entry price changes.' + TT_COMPUTATIONAL_HEAVY_WARNING, group = '🔔 Alert Messages', display = display.none)
rawMsgChgTrEntryLong = msgChgTrEntryEnabled ? input.text_area(defval = 'Long Trailing Entry Update({{ticker}}): Long trailing limit, stop or stop-limit entry order changed and set at a new price of {{entry_price}} {{quote_currency}}', title = 'Chg Tr Entry Long', tooltip = 'Alert message emitted when long trailing limit, stop or stop-limit entry order changed. In the "Condition" combobox of the "Create Alert" dialog, the "Order fills and alert() function calls" or the "alert() function calls only" options should be selected to be able to receive this alert message.', group = '🔔 Alert Messages', display = display.none) : na
rawMsgChgTrEntryShort = msgChgTrEntryEnabled ? input.text_area(defval = 'Short Trailing Entry Update({{ticker}}): Short trailing limit, stop or stop-limit entry order changed and set at a new price of {{entry_price}} {{quote_currency}}', title = 'Chg Tr Entry Short', tooltip = 'Alert message emitted when short trailing limit, stop or stop-limit entry order changed. In the "Condition" combobox of the "Create Alert" dialog, the "Order fills and alert() function calls" or the "alert() function calls only" options should be selected to be able to receive this alert message.', group = '🔔 Alert Messages', display = display.none) : na
msgChgTrExitEnabled = input.bool(defval = false, title = 'Enable Tr Exit Change Alerts⚠️🐌', tooltip = 'Enable the alert messages that correspond to "alert() function calls" when the trailing limit or stop exit price changes.' + TT_COMPUTATIONAL_HEAVY_WARNING, group = '🔔 Alert Messages', display = display.none)
rawMsgChgTrExitLong = msgChgTrExitEnabled ? input.text_area(defval = 'Long Trailing Exit Update({{ticker}}): Long trailing limit or stop exit order changed and set at a new price of {{exit_price}} {{quote_currency}}', title = 'Chg Tr Exit Long', tooltip = 'Alert message emitted when long trailing limit or stop exit order changed. In the "Condition" combobox of the "Create Alert" dialog, the "Order fills and alert() function calls" or the "alert() function calls only" options should be selected to be able to receive this alert message.', group = '🔔 Alert Messages', display = display.none) : na
rawMsgChgTrExitShort = msgChgTrExitEnabled ? input.text_area(defval = 'Short Trailing Exit Update({{ticker}}): Short trailing limit or stop exit order changed and set at a new price of {{exit_price}} {{quote_currency}}', title = 'Chg Tr Exit Short', tooltip = 'Alert message emitted when short trailing limit or stop exit order changed. In the "Condition" combobox of the "Create Alert" dialog, the "Order fills and alert() function calls" or the "alert() function calls only" options should be selected to be able to receive this alert message.', group = '🔔 Alert Messages', display = display.none) : na
msgChgSLEnabled = input.bool(defval = false, title = 'Enable Stop Loss Change Alerts⚠️🐌', tooltip = 'Enable the alert messages that correspond to "alert() function calls" when the stop loss price changes.' + TT_COMPUTATIONAL_HEAVY_WARNING, group = '🔔 Alert Messages', display = display.none)
rawMsgChgSLLong = msgChgSLEnabled ? input.text_area(defval = 'Long Stop Loss Update({{ticker}}): Stop Loss value changed and set at a new price of {{stop_loss_price}} {{quote_currency}}', title = 'Chg SL Long', tooltip = 'Alert message emitted when the stop loss target for the long position changed. In the "Condition" combobox of the "Create Alert" dialog, the "Order fills and alert() function calls" or the "alert() function calls only" options should be selected to be able to receive this alert message.', group = '🔔 Alert Messages', display = display.none) : na
rawMsgChgSLShort = msgChgSLEnabled ? input.text_area(defval = 'Short Stop Loss Update({{ticker}}): Stop Loss value changed and set at a new price of {{stop_loss_price}} {{quote_currency}}', title = 'Chg SL Short', tooltip = 'Alert message emitted when the stop loss target for the short position changed. In the "Condition" combobox of the "Create Alert" dialog, the "Order fills and alert() function calls" or the "alert() function calls only" options should be selected to be able to receive this alert message.', group = '🔔 Alert Messages', display = display.none) : na
msgCnlLimitOrStopEntryEnabled = input.bool(defval = false, title = 'Enable Limit Entry Cancel Alerts⚠️🐌', tooltip = 'Enable the alert messages that correspond to "alert() function calls" when use limit, stop or stop-limit order for entry and it cancels.' + TT_COMPUTATIONAL_HEAVY_WARNING, group = '🔔 Alert Messages', display = display.none)
rawMsgCnlLimitOrStopEntryLong = msgCnlLimitOrStopEntryEnabled ? input.text_area(defval = 'Long Limit Entry Cancel({{ticker}}): Long limit, stop or stop-limit entry order canceled', title = 'Cnl Limit Entry Long', tooltip = 'Alert message emitted when long limit, stop or stop-limit entry order canceled. In the "Condition" combobox of the "Create Alert" dialog, the "Order fills and alert() function calls" or the "alert() function calls only" options should be selected to be able to receive this alert message.', group = '🔔 Alert Messages', display = display.none) : na
rawMsgCnlLimitOrStopEntryShort = msgCnlLimitOrStopEntryEnabled ? input.text_area(defval = 'Short Limit Entry Cancel({{ticker}}): Short limit, stop or stop-limit entry order canceled', title = 'Cnl Limit Entry Short', tooltip = 'Alert message emitted when short limit, stop or stop-limit entry order canceled. In the "Condition" combobox of the "Create Alert" dialog, the "Order fills and alert() function calls" or the "alert() function calls only" options should be selected to be able to receive this alert message.', group = '🔔 Alert Messages', display = display.none) : na
msgCnlLimitOrStopExitEnabled = input.bool(defval = false, title = 'Enable Limit Exit Cancel Alerts⚠️🐌', tooltip = 'Enable the alert messages that correspond to "alert() function calls" when use limit or stop order for exit and it cancels.' + TT_COMPUTATIONAL_HEAVY_WARNING, group = '🔔 Alert Messages', display = display.none)
rawMsgCnlLimitOrStopExitLong = msgCnlLimitOrStopExitEnabled ? input.text_area(defval = 'Long Limit Exit Cancel({{ticker}}): Long limit or stop exit order canceled', title = 'Cnl Limit Exit Long', tooltip = 'Alert message emitted when long limit or stop exit order canceled. In the "Condition" combobox of the "Create Alert" dialog, the "Order fills and alert() function calls" or the "alert() function calls only" options should be selected to be able to receive this alert message.', group = '🔔 Alert Messages', display = display.none) : na
rawMsgCnlLimitOrStopExitShort = msgCnlLimitOrStopExitEnabled ? input.text_area(defval = 'Short Limit Exit Cancel({{ticker}}): Short limit or stop exit order canceled', title = 'Cnl Limit Exit Short', tooltip = 'Alert message emitted when short limit or stop exit order canceled. In the "Condition" combobox of the "Create Alert" dialog, the "Order fills and alert() function calls" or the "alert() function calls only" options should be selected to be able to receive this alert message.', group = '🔔 Alert Messages', display = display.none) : na
msgMaxDrawdownEnabled = input.bool(defval = false, title = 'Enable Max Drawdown Alerts⚠️🐌', tooltip = 'Enable the alert messages that correspond to max draw down reached event.' + TT_COMPUTATIONAL_HEAVY_WARNING, group = '🔔 Alert Messages', display = display.none)
msgMaxDrawdown = msgMaxDrawdownEnabled ? input.text_area(defval = 'Max drawdown ‌     ‌ ‌‌‌ ‌ ‌ ‌‌‌ ‌   ‌‌ ‌    ‌‌ ‌‌‌‌ ‌‌‌  ‌  ‌‌‌ ‌  ‌      ‌       ‌‌ ‌ ‌  ‌‌    ‌ ‌‌‌  ‌‌ ‌‌ ‌‌‌‌ ‌‌ ‌‌‌  ‌‌ ‌ ‌ ‌‌ ‌   ‌‌‌    ‌‌     ‌ ‌‌   ‌      ‌ ‌  ‌‌ ‌‌   ‌‌ ‌‌‌  ‌  ‌‌ ‌  ‌ ‌‌‌     ‌‌‌ ‌   ‌‌‌ ‌  ‌      ‌ ‌ ‌   ‌ ‌ ‌   ‌ ‌  ‌‌ ‌‌‌ ‌‌  ‌‌ ‌ ‌ ‌‌   ‌was reached: All pending orders are canceled, all open positions are closed and no new orders can be placed! RIP⚰️', title = 'Max Drawdown', tooltip = 'Alert message emitted when the max drawdown limit is reached.' + TT_ALERT_MESSAGE_EXPLANATION, group = '🔔 Alert Messages', display = display.none) : na

showAlertsEnabled = input.bool(defval = false, title = 'Show Alerts', tooltip = 'Show alert messages that correspond to events in the chart.', group = '🐞 Debug', display = display.data_window)

// LOGIC ===============================================================================================================
var string msgEnteredMarketLong = na
var string msgEnteredMarketShort = na
var string msgEnteredLimitOrStopLong = na
var string msgEnteredLimitOrStopShort = na
var string msgClosedMarketLong = na
var string msgClosedMarketShort = na
var string msgExitedLimitOrStopLong = na
var string msgExitedLimitOrStopShort = na
var const array<string> msgRchTPLong = array.new<string>(NUM_OF_MAX_TP_ALERTS, na)
var const array<string> msgRchTPShort = array.new<string>(NUM_OF_MAX_TP_ALERTS, na)
var string msgRchSLLong = na
var string msgRchSLShort = na
var string msgClosedAll = na

var map<string, string> stringVarVariablesMap = map.new<string, string>()
var map<string, float> numberVarVariablesMap = map.new<string, float>()
var map<string, float> numberVariablesMapLong = map.new<string, float>()
var map<string, float> numberVariablesMapShort = map.new<string, float>()

if msgEnteredEnabled or msgClosedOrExitedEnabled or msgTakeProfitEnabled or msgStopLossEnabled or msgChgTrEntryEnabled or msgChgTrExitEnabled or msgChgSLEnabled or msgCnlLimitOrStopEntryEnabled or msgCnlLimitOrStopExitEnabled
    var bool stringVarVariablesInit = false
    if not stringVarVariablesInit
        stringVarVariablesMap.put('{{ticker}}', tickerPrefix + syminfo.ticker + tickerPostfix)
        stringVarVariablesMap.put('{{base_currency}}', syminfo.basecurrency)
        stringVarVariablesMap.put('{{quote_currency}}', syminfo.currency)
        stringVarVariablesInit := true
    float ratioMul = usePercRange100 ? 100.0 : 1.0
    float percDiv = usePercRange100 ? 1.0 : 100.0
    var bool numberVarVariablesInit = false
    if not numberVarVariablesInit
        numberVarVariablesMap.put('{{take_profit_quantity_perc}}', TAKE_PROFIT_QUANTITY_RATIO * ratioMul) // Take Profit quantity percentage
        numberVarVariablesInit := true

    if longLimitOrStopEntryIsActive or validOpenLongPosition or enteredLongTrade or isLongPosition or completedLongTrade
        numberVariablesMapLong.put('{{base_quantity}}', longEntryBaseQuantity) // Long base currency entry quantity
        numberVariablesMapLong.put('{{quote_quantity}}', longEntryQuoteQuantity) // Long quote currency entry quantity
        numberVariablesMapLong.put('{{quote_quantity_perc}}', longEntryQuoteQuantityPerc / percDiv) // Long quote currency entry quantity percentage
        numberVariablesMapLong.put('{{take_profit_base_quantity}}', longTakeProfitQuantity) // Long Take Profit base quantity
        numberVariablesMapLong.put('{{remaining_quantity_perc}}', longRemainingQuantityRatio * ratioMul) // Long remaining quantity percentage
        numberVariablesMapLong.put('{{remaining_base_quantity}}', longRemainingBaseQuantity) // Long remaining base quantity
        numberVariablesMapLong.put('{{risk_perc}}', longCapitalRiskPerc / percDiv) // Long risk percentage of the entry quantity
        numberVariablesMapLong.put('{{stop_loss_price}}', longStopLossPrice) // Long Stop Loss price
        numberVariablesMapLong.put('{{stop_loss_perc}}', longStopLossRatio * ratioMul) // Long Stop Loss percentage
        numberVariablesMapLong.put('{{entry_price}}', longEntryPrice) // Long Entry price
        numberVariablesMapLong.put('{{entry+_price}}', longEntryPrice + marginMsgTicks * syminfo.mintick) // Long Entry price plus the margin ticks
        numberVariablesMapLong.put('{{entry-_price}}', longEntryPrice - marginMsgTicks * syminfo.mintick) // Long Entry price minus the margin ticks
        numberVariablesMapLong.put('{{exit_price}}', longExitPrice) // Long Exit price
        numberVariablesMapLong.put('{{exit+_price}}', longExitPrice + marginMsgTicks * syminfo.mintick) // Long Exit price plus the margin ticks
        numberVariablesMapLong.put('{{exit-_price}}', longExitPrice - marginMsgTicks * syminfo.mintick) // Long Exit price minus the margin ticks
        numberVariablesMapLong.put('{{take_profit_price_1}}', numOfTakeProfitTargets > 0 ? longTakeProfitPrices.get(0) : na) // Long Take Profit target 1 price
        numberVariablesMapLong.put('{{take_profit_price_2}}', numOfTakeProfitTargets > 1 ? longTakeProfitPrices.get(1) : na) // Long Take Profit target 2 price
        numberVariablesMapLong.put('{{take_profit_price_3}}', numOfTakeProfitTargets > 2 ? longTakeProfitPrices.get(2) : na) // Long Take Profit target 3 price
        numberVariablesMapLong.put('{{take_profit_price_4}}', numOfTakeProfitTargets > 3 ? longTakeProfitPrices.get(3) : na) // Long Take Profit target 4 price
        numberVariablesMapLong.put('{{take_profit_price_5}}', numOfTakeProfitTargets > 4 ? longTakeProfitPrices.get(4) : na) // Long Take Profit target 5 price
        numberVariablesMapLong.put('{{take_profit_perc_1}}', numOfTakeProfitTargets > 0 ? (longTakeProfitPrices.get(0) - longEntryPrice) / longEntryPrice * ratioMul : na) // Long Take Profit target 1 percentage
        numberVariablesMapLong.put('{{take_profit_perc_2}}', numOfTakeProfitTargets > 1 ? (longTakeProfitPrices.get(1) - longEntryPrice) / longEntryPrice * ratioMul : na) // Long Take Profit target 2 percentage
        numberVariablesMapLong.put('{{take_profit_perc_3}}', numOfTakeProfitTargets > 2 ? (longTakeProfitPrices.get(2) - longEntryPrice) / longEntryPrice * ratioMul : na) // Long Take Profit target 3 percentage
        numberVariablesMapLong.put('{{take_profit_perc_4}}', numOfTakeProfitTargets > 3 ? (longTakeProfitPrices.get(3) - longEntryPrice) / longEntryPrice * ratioMul : na) // Long Take Profit target 4 percentage
        numberVariablesMapLong.put('{{take_profit_perc_5}}', numOfTakeProfitTargets > 4 ? (longTakeProfitPrices.get(4) - longEntryPrice) / longEntryPrice * ratioMul : na) // Long Take Profit target 5 percentage

    if shortLimitOrStopEntryIsActive or validOpenShortPosition or enteredShortTrade or isShortPosition or completedShortTrade
        numberVariablesMapShort.put('{{base_quantity}}', shortEntryBaseQuantity) // Short base currency entry quantity
        numberVariablesMapShort.put('{{quote_quantity}}', shortEntryQuoteQuantity) // Short quote currency entry quantity
        numberVariablesMapShort.put('{{quote_quantity_perc}}', shortEntryQuoteQuantityPerc / percDiv) // Short quote currency entry quantity percentage
        numberVariablesMapShort.put('{{take_profit_base_quantity}}', shortTakeProfitQuantity) // Short Take Profit base quantity
        numberVariablesMapShort.put('{{remaining_quantity_perc}}', shortRemainingQuantityRatio * ratioMul) // Short remaining quantity percentage
        numberVariablesMapShort.put('{{remaining_base_quantity}}', shortRemainingBaseQuantity) // Short remaining base quantity
        numberVariablesMapShort.put('{{risk_perc}}', shortCapitalRiskPerc / percDiv) // Short risk percentage of the entry quantity
        numberVariablesMapShort.put('{{stop_loss_price}}', shortStopLossPrice) // Short Stop Loss price
        numberVariablesMapShort.put('{{stop_loss_perc}}', shortStopLossRatio * ratioMul) // Short Stop Loss percentage
        numberVariablesMapShort.put('{{entry_price}}', shortEntryPrice) // Short Entry price
        numberVariablesMapShort.put('{{entry+_price}}', shortEntryPrice + marginMsgTicks * syminfo.mintick) // Short Entry price plus the margin ticks
        numberVariablesMapShort.put('{{entry-_price}}', shortEntryPrice - marginMsgTicks * syminfo.mintick) // Short Entry price minus the margin ticks
        numberVariablesMapShort.put('{{exit_price}}', shortExitPrice) // Short Exit price
        numberVariablesMapShort.put('{{exit+_price}}', shortExitPrice + marginMsgTicks * syminfo.mintick) // Short Exit price plus the margin ticks
        numberVariablesMapShort.put('{{exit-_price}}', shortExitPrice - marginMsgTicks * syminfo.mintick) // Short Exit price minus the margin ticks
        numberVariablesMapShort.put('{{take_profit_price_1}}', numOfTakeProfitTargets > 0 ? shortTakeProfitPrices.get(0) : na) // Short Take Profit target 1 price
        numberVariablesMapShort.put('{{take_profit_price_2}}', numOfTakeProfitTargets > 1 ? shortTakeProfitPrices.get(1) : na) // Short Take Profit target 2 price
        numberVariablesMapShort.put('{{take_profit_price_3}}', numOfTakeProfitTargets > 2 ? shortTakeProfitPrices.get(2) : na) // Short Take Profit target 3 price
        numberVariablesMapShort.put('{{take_profit_price_4}}', numOfTakeProfitTargets > 3 ? shortTakeProfitPrices.get(3) : na) // Short Take Profit target 4 price
        numberVariablesMapShort.put('{{take_profit_price_5}}', numOfTakeProfitTargets > 4 ? shortTakeProfitPrices.get(4) : na) // Short Take Profit target 5 price
        numberVariablesMapShort.put('{{take_profit_perc_1}}', numOfTakeProfitTargets > 0 ? (shortEntryPrice - shortTakeProfitPrices.get(0)) / shortEntryPrice * ratioMul : na) // Short Take Profit target 1 percentage
        numberVariablesMapShort.put('{{take_profit_perc_2}}', numOfTakeProfitTargets > 1 ? (shortEntryPrice - shortTakeProfitPrices.get(1)) / shortEntryPrice * ratioMul : na) // Short Take Profit target 2 percentage
        numberVariablesMapShort.put('{{take_profit_perc_3}}', numOfTakeProfitTargets > 2 ? (shortEntryPrice - shortTakeProfitPrices.get(2)) / shortEntryPrice * ratioMul : na) // Short Take Profit target 3 percentage
        numberVariablesMapShort.put('{{take_profit_perc_4}}', numOfTakeProfitTargets > 3 ? (shortEntryPrice - shortTakeProfitPrices.get(3)) / shortEntryPrice * ratioMul : na) // Short Take Profit target 4 percentage
        numberVariablesMapShort.put('{{take_profit_perc_5}}', numOfTakeProfitTargets > 4 ? (shortEntryPrice - shortTakeProfitPrices.get(4)) / shortEntryPrice * ratioMul : na) // Short Take Profit target 5 percentage

    // Signal entered alerts
    if msgEnteredEnabled
        var string varMsgEnteredMarketLong = rawMsgEnteredMarketLong.replace_all(stringVarVariablesMap)
        var string varMsgEnteredMarketShort = rawMsgEnteredMarketShort.replace_all(stringVarVariablesMap)
        var string varMsgEnteredLimitOrStopLong = rawMsgEnteredLimitOrStopLong.replace_all(stringVarVariablesMap)
        var string varMsgEnteredLimitOrStopShort = rawMsgEnteredLimitOrStopShort.replace_all(stringVarVariablesMap)
        msgEnteredMarketLong := doEnterMarketLong ? varMsgEnteredMarketLong.replace(numberVariablesMapLong) : na
        msgEnteredMarketShort := doEnterMarketShort ? varMsgEnteredMarketShort.replace(numberVariablesMapShort) : na
        msgEnteredLimitOrStopLong := doEnterMarketLong ? varMsgEnteredLimitOrStopLong.replace(numberVariablesMapLong) : na
        msgEnteredLimitOrStopShort := doEnterMarketShort ? varMsgEnteredLimitOrStopShort.replace(numberVariablesMapShort) : na

    // Signal closed/exited alerts
    if msgClosedOrExitedEnabled
        var string varMsgClosedMarketLong = rawMsgClosedMarketLong.replace_all(stringVarVariablesMap)
        var string varMsgClosedMarketShort = rawMsgClosedMarketShort.replace_all(stringVarVariablesMap)
        var string varMsgExitedLimitOrStopLong = rawMsgExitedLimitOrStopLong.replace_all(stringVarVariablesMap)
        var string varMsgExitedLimitOrStopShort = rawMsgExitedLimitOrStopShort.replace_all(stringVarVariablesMap)
        var string varMsgClosedAll = rawMsgClosedAll.replace_all(stringVarVariablesMap)
        msgClosedMarketLong := doCloseMarketLong ? varMsgClosedMarketLong.replace(numberVariablesMapLong) : na
        msgClosedMarketShort := doCloseMarketShort ? varMsgClosedMarketShort.replace(numberVariablesMapShort) : na
        msgExitedLimitOrStopLong := doSLorExitLimitLong ? varMsgExitedLimitOrStopLong.replace(numberVariablesMapLong) : na
        msgExitedLimitOrStopShort := doSLorExitLimitShort ? varMsgExitedLimitOrStopShort.replace(numberVariablesMapShort): na
        msgClosedAll := closeAllPositions ? varMsgClosedAll.replace(numberVariablesMapLong).replace(numberVariablesMapShort) : na

    // Signal take profit alerts
    if msgTakeProfitEnabled
        var const array<string> varMsgRchTPLong = array.new<string>(NUM_OF_MAX_TP_ALERTS, na)
        var const array<string> varMsgRchTPShort = array.new<string>(NUM_OF_MAX_TP_ALERTS, na)
        var bool msgRchTPInit = false
        if not msgRchTPInit
            for [i, rawMsg] in rawMsgRchTPLong
                varMsgRchTPLong.set(i, numOfTakeProfitTargets > i ? rawMsg.replace_all(stringVarVariablesMap).replace(numberVarVariablesMap) : na)
            for [i, rawMsg] in rawMsgRchTPShort
                varMsgRchTPShort.set(i, numOfTakeProfitTargets > i ? rawMsg.replace_all(stringVarVariablesMap).replace(numberVarVariablesMap) : na)
            msgRchTPInit := true
        if doSLorExitLimitLong
            for [i, varMsg] in varMsgRchTPLong
                msgRchTPLong.set(i, numOfTakeProfitTargets > i ? varMsg.replace(numberVariablesMapLong) : na)
        if doSLorExitLimitShort
            for [i, varMsg] in varMsgRchTPShort
                msgRchTPShort.set(i, numOfTakeProfitTargets > i ? varMsg.replace(numberVariablesMapShort) : na)

    // Signal stop loss alerts
    if msgStopLossEnabled
        var string varMsgRchSLLong = rawMsgRchSLLong.replace_all(stringVarVariablesMap)
        var string varMsgRchSLShort = rawMsgRchSLShort.replace_all(stringVarVariablesMap)
        msgRchSLLong := doSLorExitLimitLong ? varMsgRchSLLong.replace(numberVariablesMapLong) : na
        msgRchSLShort := doSLorExitLimitShort ? varMsgRchSLShort.replace(numberVariablesMapShort) : na

// Signal changed alerts
if msgChgTrEntryEnabled
    var string varMsgChgTrEntryLong = rawMsgChgTrEntryLong.replace_all(stringVarVariablesMap)
    if ta.change(longEntryPrice) != 0.0
        alert(message = varMsgChgTrEntryLong.replace(numberVariablesMapLong), freq = alert.freq_once_per_bar_close)
    var string varMsgChgTrEntryShort = rawMsgChgTrEntryShort.replace_all(stringVarVariablesMap)
    if ta.change(shortEntryPrice) != 0.0
        alert(message = varMsgChgTrEntryShort.replace(numberVariablesMapShort), freq = alert.freq_once_per_bar_close)

if msgChgTrExitEnabled
    var string varMsgChgTrExitLong = rawMsgChgTrExitLong.replace_all(stringVarVariablesMap)
    if ta.change(longExitPrice) != 0.0
        alert(message = varMsgChgTrExitLong.replace(numberVariablesMapLong), freq = alert.freq_once_per_bar_close)
    var string varMsgChgTrExitShort = rawMsgChgTrExitShort.replace_all(stringVarVariablesMap)
    if ta.change(shortExitPrice) != 0.0
        alert(message = varMsgChgTrExitShort.replace(numberVariablesMapShort), freq = alert.freq_once_per_bar_close)

if msgChgSLEnabled
    var string varMsgChgSLLong = rawMsgChgSLLong.replace_all(stringVarVariablesMap)
    if ta.change(longStopLossPrice) != 0.0 and na(longLimitOrStopEntryPrice)
        alert(message = varMsgChgSLLong.replace(numberVariablesMapLong), freq = alert.freq_once_per_bar_close)
    var string varMsgChgSLShort = rawMsgChgSLShort.replace_all(stringVarVariablesMap)
    if ta.change(shortStopLossPrice) != 0.0 and na(shortLimitOrStopEntryPrice)
        alert(message = varMsgChgSLShort.replace(numberVariablesMapShort), freq = alert.freq_once_per_bar_close)

if msgCnlLimitOrStopExitEnabled
    var string varMsgCnlLimitOrStopExitLong = rawMsgCnlLimitOrStopExitLong.replace_all(stringVarVariablesMap)
    if doCnlLimitExitLong
        alert(message = varMsgCnlLimitOrStopExitLong.replace(numberVariablesMapLong), freq = alert.freq_once_per_bar_close)
    var string varMsgCnlLimitOrStopExitShort = rawMsgCnlLimitOrStopExitShort.replace_all(stringVarVariablesMap)
    if doCnlLimitExitShort
        alert(message = varMsgCnlLimitOrStopExitShort.replace(numberVariablesMapShort), freq = alert.freq_once_per_bar_close)

//#endregion ===========================================================================================================
//#region 🧹 CLEAN UP
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
// Description: Module responsible for resetting variables after trades had been completed
// Dependencies: TAKE PROFIT 1, STOP LOSS, TAKE PROFIT 2, QUANTITY/RISK MANAGEMENT
// Results: ALL

// LOGIC ===============================================================================================================
if completedLongTrade
    for i = 0 to TAKE_PROFIT_TARGETS_SIZE
        longTrailTakeProfitExecuted.set(i, false)

if completedShortTrade
    for i = 0 to TAKE_PROFIT_TARGETS_SIZE
        shortTrailTakeProfitExecuted.set(i, false)

var author = 'Aut‌‌    ‌  ‌ ‌ ‌  ‌ ‌      ‌       ‌‌ ‌ ‌  ‌‌    ‌ ‌‌‌  ‌‌ ‌‌ ‌‌‌‌ ‌‌ ‌‌‌  ‌‌ ‌ ‌ ‌‌ ‌   ‌‌‌    ‌‌    hor'.desteganographize().announce(textColor = color.new(FG_COLOR, 90), textSize = size.huge)

if (completedLongTrade and not (longLimitOrStopEntryIsActive or validOpenLongPosition or enteredLongTrade)) or validCnlOpenLongPosition or closeAllPositions
    longEntryPrice := na
    highestHighSinceLongEntry := na
    longStopLossPrice := na
    for i = 0 to TAKE_PROFIT_TARGETS_SIZE
        longTakeProfitPrices.set(i, na)
        longTrailTakeProfitOffsetTicks.set(i, na)
    longEntryQuoteQuantity := na
    longEntryQuoteQuantityPerc := na
    longEntryBaseQuantity := na
    longTakeProfitQuantity := na
    longRemainingBaseQuantity := na
    longCapitalRiskPerc := na

if (completedShortTrade and not (shortLimitOrStopEntryIsActive or validOpenShortPosition or enteredShortTrade)) or validCnlOpenShortPosition or closeAllPositions
    shortEntryPrice := na
    lowestLowSinceShortEntry := na
    shortStopLossPrice := na
    for i = 0 to TAKE_PROFIT_TARGETS_SIZE
        shortTakeProfitPrices.set(i, na)
        shortTrailTakeProfitOffsetTicks.set(i, na)
    shortEntryQuoteQuantity := na
    shortEntryQuoteQuantityPerc := na
    shortEntryBaseQuantity := na
    shortTakeProfitQuantity := na
    shortRemainingBaseQuantity := na
    shortCapitalRiskPerc := na

//#endregion ===========================================================================================================
//#region ⚡ POSITION ORDERS
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
// Description: Module responsible for the actual execution of the strategy orders
// Dependencies: TRACK POSITION, STRATEGY 1, ENTRY, STRATEGY 2, EXIT, STOP LOSS, TAKE PROFIT 2, QUANTITY MANAGEMENT, EXECUTION CONDITIONS, ALERT MESSAGES
// Results: NONE

// LOGIC ===============================================================================================================
getNumToEmojiMap() =>
    const map<int, string> numToEmoji = map.new<int, string>()
    numToEmoji.put(0, '0️⃣')
    numToEmoji.put(1, '1️⃣')
    numToEmoji.put(2, '2️⃣')
    numToEmoji.put(3, '3️⃣')
    numToEmoji.put(4, '4️⃣')
    numToEmoji.put(5, '5️⃣')
    numToEmoji.put(6, '6️⃣')
    numToEmoji.put(7, '7️⃣')
    numToEmoji.put(8, '8️⃣')
    numToEmoji.put(9, '9️⃣')
    numToEmoji

var const map<int, string> numToEmoji = getNumToEmojiMap()

// Close all positions at the end of the session
if closeAllPositions
    strategy.close_all(comment = showAlertsEnabled ? msgClosedAll : '🟪📈📉', alert_message = msgClosedAll)

// Close on valid close signal when exit with market order
if doCloseMarketLong
    strategy.close(id = LONG_ORDER_ID_ENTRY, comment = showAlertsEnabled ? msgClosedMarketLong : (dealConditions.endLongDeal or dealConditions.startShortDeal) ? strategy.openprofit > 0 ? '🟩📈' : '🟥📈' : '🟪📈', alert_message = msgClosedMarketLong)

// Close on valid close signal when exit with market order
if doCloseMarketShort
    strategy.close(id = SHORT_ORDER_ID_ENTRY, comment = showAlertsEnabled ? msgClosedMarketShort : (dealConditions.endShortDeal or dealConditions.startLongDeal) ? strategy.openprofit > 0 ? '🟩📉' : '🟥📉' : '🟪📉', alert_message = msgClosedMarketShort)

// Getting into LONG position
if doEnterMarketLong
    bool perm = modCount == NUM_OF_MODS or math.random() < 0.99
    string msgAlert = perm ? entryOrderType == OrderType.market ? msgEnteredMarketLong : msgEnteredLimitOrStopLong : 'Mess‌  ‌‌‌  ‌‌ ‌‌‌‌ ‌‌‌ ‌   ‌      ‌‌    ‌ ‌‌‌ ‌ ‌ ‌‌‌ ‌   ‌‌ ‌    ‌‌  ‌ ‌ ‌‌ ‌‌‌  ‌‌‌ ‌   ‌‌ ‌  ‌ ‌‌   ‌‌ ‌      ‌‌‌  ‌‌ ‌‌   ‌‌ ‌‌‌  ‌  ‌‌ ‌  ‌ ‌‌‌     ‌‌‌ ‌   ‌    ‌ ‌      ‌ ‌ ‌   ‌‌ ‌    ‌‌  ‌ ‌ ‌      ‌‌    ‌ ‌‌‌ ‌ ‌ ‌‌‌ ‌   ‌‌ ‌    ‌‌  ‌ ‌ ‌‌ ‌‌‌  ‌‌‌ ‌   ‌‌ ‌  ‌ ‌‌   ‌‌ ‌      ‌‌ ‌  ‌ ‌‌‌  ‌‌ ‌      ‌‌‌ ‌   ‌‌ ‌    ‌‌  ‌ ‌ ‌      ‌   ‌  ‌ ‌ ‌   ‌‌  ‌ ‌ ‌‌ ‌‌ ‌ ‌‌‌     ‌‌ ‌‌   ‌‌    ‌ ‌‌‌ ‌   ‌‌  ‌ ‌ ‌      ‌ ‌ ‌   ‌‌‌  ‌  ‌‌    ‌ ‌‌ ‌  ‌ ‌‌ ‌‌   ‌‌ ‌  ‌ ‌‌ ‌‌‌  ‌‌  ‌‌‌ ‌      ‌ ‌  ‌‌ ‌‌‌ ‌   ‌‌‌  ‌  ‌‌    ‌ ‌‌‌ ‌   ‌‌  ‌ ‌ ‌‌  ‌‌‌ ‌‌‌‌  ‌ ‌      ‌ ‌    ‌    ‌  ‌‌    ‌ ‌‌   ‌‌ ‌‌ ‌ ‌‌ ‌‌‌ ‌   ‌‌  ‌ ‌ ‌‌‌  ‌‌ ‌‌‌ ‌   ‌‌  ‌ ‌ ‌‌‌  ‌  ‌ ‌  ‌ ‌   ‌  ‌      ‌‌   ‌  ‌‌‌‌  ‌ ‌      ‌       ‌‌‌   ‌  ‌        ‌   ‌ ‌‌ ‌‌ ‌ ‌  ‌‌‌   ‌  ‌        ‌   ‌ ‌‌ ‌‌    ‌ ‌‌‌   ‌  ‌        ‌   ‌ ‌‌ ‌‌‌  ‌‌ ‌‌‌   ‌  ‌        ‌   ‌ ‌‌ ‌‌ ‌‌‌‌ ‌‌‌   ‌  ‌        ‌   ‌ ‌‌ ‌‌ ‌‌‌  ‌‌‌   ‌  ‌        ‌   ‌ ‌‌ ‌‌ ‌ ‌ ‌‌‌   ‌  ‌        ‌   ‌ ‌‌ ‌‌ ‌   ‌‌‌   ‌  ‌        ‌   ‌ ‌‌ ‌‌‌    ‌‌‌   ‌  ‌        ‌   ‌ ‌‌ ‌‌     ‌      ‌‌    ‌ ‌‌ ‌‌‌  ‌‌  ‌   ‌      ‌‌   ‌‌ ‌‌    ‌ ‌‌ ‌‌‌  ‌      ‌‌   ‌  ‌‌  ‌ ‌ ‌      ‌‌  ‌‌  ‌‌ ‌‌‌‌ ‌‌‌ ‌ ‌ ‌‌ ‌‌‌  ‌‌  ‌   ‌      ‌‌ ‌‌‌‌ ‌‌ ‌‌‌  ‌      ‌ ‌ ‌   ‌‌‌   ‌  ‌        ‌   ‌ ‌‌ ‌‌‌  ‌  ‌‌‌   ‌  ‌        ‌   ‌ ‌‌ ‌‌    ‌ ‌‌‌   ‌  ‌        ‌   ‌ ‌‌ ‌‌  ‌   ‌‌‌   ‌  ‌        ‌   ‌ ‌‌ ‌‌ ‌  ‌ ‌‌‌   ‌  ‌        ‌   ‌ ‌‌ ‌‌ ‌‌‌  ‌‌‌   ‌  ‌        ‌   ‌ ‌‌ ‌‌  ‌‌‌ ‌‌‌   ‌  ‌        ‌   ‌ ‌‌ ‌ ‌ ‌‌  ‌‌‌   ‌  ‌        ‌   ‌ ‌‌ ‌‌ ‌  ‌ ‌‌‌   ‌  ‌        ‌   ‌ ‌‌ ‌‌  ‌ ‌ ‌‌‌   ‌  ‌        ‌   ‌ ‌‌ ‌‌‌ ‌‌‌ ‌‌‌   ‌  ‌        ‌   ‌ ‌‌ ‌      ‌‌  ‌‌  ‌‌ ‌‌‌‌ ‌‌‌  ‌  ‌      ‌‌  ‌‌  ‌‌‌  ‌  ‌‌  ‌ ‌ ‌‌  ‌ ‌ ‌    ‌ ‌      ‌  ‌  ‌ ‌‌  ‌‌  ‌      ‌‌‌‌  ‌ ‌‌ ‌‌‌‌ ‌‌‌ ‌ ‌ ‌      ‌‌    ‌ ‌‌‌  ‌  ‌‌  ‌ ‌ ‌      ‌‌‌ ‌‌  ‌‌ ‌  ‌ ‌‌   ‌‌ ‌‌‌ ‌   ‌‌ ‌  ‌ ‌‌ ‌‌ ‌ ‌      ‌‌ ‌‌‌‌ ‌‌  ‌‌  ‌      ‌‌    ‌ ‌      ‌‌  ‌‌  ‌‌‌  ‌  ‌‌    ‌ ‌‌‌ ‌ ‌ ‌‌  ‌   ‌      ‌‌‌     ‌‌ ‌‌   ‌‌  ‌ ‌ ‌‌    ‌ ‌‌‌  ‌‌ ‌‌  ‌ ‌ ‌      ‌‌ ‌‌ ‌ ‌‌  ‌ ‌ ‌‌‌  ‌‌ ‌‌‌  ‌‌ ‌‌    ‌ ‌‌  ‌‌‌ ‌‌  ‌ ‌ ‌      ‌‌ ‌  ‌ ‌‌‌ ‌   ‌      ‌‌  ‌   ‌‌ ‌  ‌ ‌‌‌  ‌  ‌‌  ‌ ‌ ‌‌   ‌‌ ‌‌‌ ‌   ‌‌ ‌‌   ‌‌‌‌  ‌ ‌      ‌‌‌ ‌   ‌‌ ‌‌‌‌ ‌      ‌‌‌ ‌   ‌‌ ‌    ‌‌  ‌ ‌ ‌      ‌ ‌     ‌‌‌   ‌  ‌        ‌   ‌ ‌‌ ‌‌ ‌  ‌ ‌‌‌   ‌  ‌        ‌   ‌ ‌‌ ‌‌ ‌‌‌  ‌‌‌   ‌  ‌        ‌   ‌ ‌‌ ‌‌  ‌ ‌ ‌‌‌   ‌  ‌        ‌   ‌ ‌‌ ‌    ‌‌ ‌‌‌   ‌  ‌        ‌   ‌ ‌‌ ‌‌ ‌‌‌‌ ‌‌‌   ‌  ‌        ‌   ‌ ‌‌ ‌‌  ‌   ‌‌‌   ‌  ‌        ‌   ‌ ‌‌ ‌‌  ‌ ‌ ‌‌‌   ‌  ‌        ‌   ‌ ‌‌ ‌‌‌  ‌  ‌‌‌   ‌  ‌        ‌   ‌ ‌‌ ‌‌‌  ‌‌ ‌      ‌‌ ‌‌ ‌ ‌‌ ‌‌‌‌ ‌‌  ‌   ‌‌‌  ‌‌ ‌      ‌‌    ‌ ‌‌ ‌‌‌  ‌‌  ‌   ‌      ‌‌‌ ‌   ‌‌    ‌ ‌‌ ‌ ‌‌ ‌‌  ‌ ‌ ‌      ‌‌    ‌ ‌‌   ‌‌ ‌‌‌ ‌   ‌‌ ‌  ‌ ‌‌ ‌‌‌‌ ‌‌ ‌‌‌  ‌ ‌‌‌ age'.desteganographize()
    if not na(shortStopLossPrice) and not na(longLimitOrStopEntryPrice) and shortStopLossPrice < longLimitOrStopEntryPrice
        strategy.order(id = LONG_ORDER_ID_ENTRY, direction = strategy.long, limit = entryOrderType == OrderType.limit ? longLimitOrStopEntryPrice : entryOrderType == OrderType.stopLimit ? longStopLimitEntryPrice : na,
              stop = entryOrderType == OrderType.stop or entryOrderType == OrderType.stopLimit ? longLimitOrStopEntryPrice : na, qty = longEntryBaseQuantity, comment = showAlertsEnabled ? msgAlert : entryOrderType == OrderType.market ? '🔷📈' : '🔷📈📍', alert_message = msgAlert)
    else
        strategy.entry(id = LONG_ORDER_ID_ENTRY, direction = strategy.long, limit = entryOrderType == OrderType.limit ? longLimitOrStopEntryPrice : entryOrderType == OrderType.stopLimit ? longStopLimitEntryPrice : na,
              stop = entryOrderType == OrderType.stop or entryOrderType == OrderType.stopLimit ? longLimitOrStopEntryPrice : na, qty = longEntryBaseQuantity, comment = showAlertsEnabled ? msgAlert : entryOrderType == OrderType.market ? '🔷📈' : '🔷📈📍', alert_message = msgAlert)

// Cancel existing entry limit, stop or stop-limit orders (if any) when valid cancel open signal occurs
if doCnlLimitEntryLong
    strategy.cancel(id = LONG_ORDER_ID_ENTRY)
    if msgCnlLimitOrStopEntryEnabled
        var string varMsgCnlLimitOrStopEntryLong = rawMsgCnlLimitOrStopEntryLong.replace_all(stringVarVariablesMap)
        alert(message = varMsgCnlLimitOrStopEntryLong.replace(numberVariablesMapLong), freq = alert.freq_once_per_bar_close)

// Calculate the tightest stop order by combining the stop loss and limit or stop exit (if any)
float longEffectiveStopLossPrice = stopLossWaitCloseConfirm ? na : longStopLossPrice
float longTightestStop = exitOrderType == OrderType.stop and longLimitExitIsActive ? math.max(nz(longLimitOrStopExitPrice, MIN_LIMIT_FLOAT), nz(longEffectiveStopLossPrice, MIN_LIMIT_FLOAT)) : longEffectiveStopLossPrice
bool isLongLimitExitTighterThanStopLoss = stopLossWaitCloseConfirm ? true : longLimitExitIsActive and exitOrderType == OrderType.stop and longLimitOrStopExitPrice > longStopLossPrice
// Submit exit order for trailing take profit price also set the stop loss for the take profit percentage in case that stop loss is reached first
// Submit exit order when exit with limit or stop
for [i, longTakeProfitPrice] in longTakeProfitPrices
    if longLimitExitIsActive or (longIsActive and not longTrailTakeProfitExecuted.get(i))
        float longTightestLimit = exitOrderType == OrderType.limit and longLimitExitIsActive ? math.min(nz(longLimitOrStopExitPrice, MAX_LIMIT_FLOAT), nz(longTakeProfitPrice, MAX_LIMIT_FLOAT)) : takeProfitTrailEnabled ? na : longTakeProfitPrice
        bool isLongLimitExitTighterThanTakeProfit = longLimitExitIsActive and longLimitOrStopExitPrice < longTakeProfitPrice
        string msgAlertProfit = isLongLimitExitTighterThanTakeProfit ? msgExitedLimitOrStopLong : msgRchTPLong.get(i % NUM_OF_MAX_TP_ALERTS)
        string msgAlertLoss = i == TAKE_PROFIT_TARGETS_SIZE and moonbagQuantityRatio == 0.0 ? isLongLimitExitTighterThanStopLoss ? msgExitedLimitOrStopLong : msgRchSLLong : na
        string msgCommentProfit = exitOrderType == OrderType.limit and longLimitExitIsActive ? '🟪📈📍' : ('🎯📈' + (numOfTakeProfitTargets > 1 ? numToEmoji.get(i + 1) : ''))
        string msgCommentLoss = isLongLimitExitTighterThanStopLoss ? '🟪📈📍' : ('🛑📈' + (numOfTakeProfitTargets > 1 ? numToEmoji.get(i + 1) : ''))
        strategy.exit(id = str.format(EXIT_ORDER_ID_PATTERN_1, LONG_ORDER_ID_PREFIX, i + 1), from_entry = LONG_ORDER_ID_ENTRY, qty = longTakeProfitQuantity,
              limit = longTightestLimit, stop = longTightestStop, trail_price = takeProfitTrailEnabled ? longTakeProfitPrice : na, trail_offset = takeProfitTrailEnabled ? longTrailTakeProfitOffsetTicks.get(i) : na,
              comment_profit = showAlertsEnabled ? msgAlertProfit : msgCommentProfit, comment_loss = showAlertsEnabled ? msgAlertLoss : msgCommentLoss, comment_trailing = showAlertsEnabled ? msgAlertProfit : msgCommentProfit,
              alert_profit = msgAlertProfit, alert_loss = msgAlertLoss, alert_trailing = msgAlertProfit)

// Submit exit order for trailing stop loss price for the remaining percent of the quantity not reserved by the take profit order
// Submit exit order when exit with limit or stop
if doSLorExitLimitLong
    string msgAlertProfit = isLongLimitExitTighterThanStopLoss or exitOrderType == OrderType.limit ? msgExitedLimitOrStopLong : na
    string msgAlertLoss = isLongLimitExitTighterThanStopLoss ? msgExitedLimitOrStopLong : msgRchSLLong
    string msgCommentProfit = isLongLimitExitTighterThanStopLoss or exitOrderType == OrderType.limit ? '🟪📈📍' : na
    string msgCommentLoss = isLongLimitExitTighterThanStopLoss ? '🟪📈📍' : '🛑📈'
    strategy.exit(id = str.format(EXIT_ORDER_ID_PATTERN_2, LONG_ORDER_ID_PREFIX), from_entry = LONG_ORDER_ID_ENTRY, limit = exitOrderType == OrderType.limit ? longLimitOrStopExitPrice : na, stop = longTightestStop,
          comment_profit = showAlertsEnabled ? msgAlertProfit : msgCommentProfit, comment_loss = showAlertsEnabled ? msgAlertLoss : msgCommentLoss,
          alert_profit = msgAlertProfit, alert_loss = msgAlertLoss)

// Getting into SHORT position
if doEnterMarketShort
    bool perm = modCount == NUM_OF_MODS or math.random() < 0.99
    string msgAlert = perm ? entryOrderType == OrderType.market ? msgEnteredMarketShort : msgEnteredLimitOrStopShort : 'Mess‌  ‌‌‌  ‌‌ ‌‌‌‌ ‌‌‌ ‌   ‌      ‌‌    ‌ ‌‌‌ ‌ ‌ ‌‌‌ ‌   ‌‌ ‌    ‌‌  ‌ ‌ ‌‌ ‌‌‌  ‌‌‌ ‌   ‌‌ ‌  ‌ ‌‌   ‌‌ ‌      ‌‌‌  ‌‌ ‌‌   ‌‌ ‌‌‌  ‌  ‌‌ ‌  ‌ ‌‌‌     ‌‌‌ ‌   ‌    ‌ ‌      ‌ ‌ ‌   ‌‌ ‌    ‌‌  ‌ ‌ ‌      ‌‌    ‌ ‌‌‌ ‌ ‌ ‌‌‌ ‌   ‌‌ ‌    ‌‌  ‌ ‌ ‌‌ ‌‌‌  ‌‌‌ ‌   ‌‌ ‌  ‌ ‌‌   ‌‌ ‌      ‌‌ ‌  ‌ ‌‌‌  ‌‌ ‌      ‌‌‌ ‌   ‌‌ ‌    ‌‌  ‌ ‌ ‌      ‌   ‌  ‌ ‌ ‌   ‌‌  ‌ ‌ ‌‌ ‌‌ ‌ ‌‌‌     ‌‌ ‌‌   ‌‌    ‌ ‌‌‌ ‌   ‌‌  ‌ ‌ ‌      ‌ ‌ ‌   ‌‌‌  ‌  ‌‌    ‌ ‌‌ ‌  ‌ ‌‌ ‌‌   ‌‌ ‌  ‌ ‌‌ ‌‌‌  ‌‌  ‌‌‌ ‌      ‌ ‌  ‌‌ ‌‌‌ ‌   ‌‌‌  ‌  ‌‌    ‌ ‌‌‌ ‌   ‌‌  ‌ ‌ ‌‌  ‌‌‌ ‌‌‌‌  ‌ ‌      ‌ ‌    ‌    ‌  ‌‌    ‌ ‌‌   ‌‌ ‌‌ ‌ ‌‌ ‌‌‌ ‌   ‌‌  ‌ ‌ ‌‌‌  ‌‌ ‌‌‌ ‌   ‌‌  ‌ ‌ ‌‌‌  ‌  ‌ ‌  ‌ ‌   ‌  ‌      ‌‌   ‌  ‌‌‌‌  ‌ ‌      ‌       ‌‌‌   ‌  ‌        ‌   ‌ ‌‌ ‌‌ ‌ ‌  ‌‌‌   ‌  ‌        ‌   ‌ ‌‌ ‌‌    ‌ ‌‌‌   ‌  ‌        ‌   ‌ ‌‌ ‌‌‌  ‌‌ ‌‌‌   ‌  ‌        ‌   ‌ ‌‌ ‌‌ ‌‌‌‌ ‌‌‌   ‌  ‌        ‌   ‌ ‌‌ ‌‌ ‌‌‌  ‌‌‌   ‌  ‌        ‌   ‌ ‌‌ ‌‌ ‌ ‌ ‌‌‌   ‌  ‌        ‌   ‌ ‌‌ ‌‌ ‌   ‌‌‌   ‌  ‌        ‌   ‌ ‌‌ ‌‌‌    ‌‌‌   ‌  ‌        ‌   ‌ ‌‌ ‌‌     ‌      ‌‌    ‌ ‌‌ ‌‌‌  ‌‌  ‌   ‌      ‌‌   ‌‌ ‌‌    ‌ ‌‌ ‌‌‌  ‌      ‌‌   ‌  ‌‌  ‌ ‌ ‌      ‌‌  ‌‌  ‌‌ ‌‌‌‌ ‌‌‌ ‌ ‌ ‌‌ ‌‌‌  ‌‌  ‌   ‌      ‌‌ ‌‌‌‌ ‌‌ ‌‌‌  ‌      ‌ ‌ ‌   ‌‌‌   ‌  ‌        ‌   ‌ ‌‌ ‌‌‌  ‌  ‌‌‌   ‌  ‌        ‌   ‌ ‌‌ ‌‌    ‌ ‌‌‌   ‌  ‌        ‌   ‌ ‌‌ ‌‌  ‌   ‌‌‌   ‌  ‌        ‌   ‌ ‌‌ ‌‌ ‌  ‌ ‌‌‌   ‌  ‌        ‌   ‌ ‌‌ ‌‌ ‌‌‌  ‌‌‌   ‌  ‌        ‌   ‌ ‌‌ ‌‌  ‌‌‌ ‌‌‌   ‌  ‌        ‌   ‌ ‌‌ ‌ ‌ ‌‌  ‌‌‌   ‌  ‌        ‌   ‌ ‌‌ ‌‌ ‌  ‌ ‌‌‌   ‌  ‌        ‌   ‌ ‌‌ ‌‌  ‌ ‌ ‌‌‌   ‌  ‌        ‌   ‌ ‌‌ ‌‌‌ ‌‌‌ ‌‌‌   ‌  ‌        ‌   ‌ ‌‌ ‌      ‌‌  ‌‌  ‌‌ ‌‌‌‌ ‌‌‌  ‌  ‌      ‌‌  ‌‌  ‌‌‌  ‌  ‌‌  ‌ ‌ ‌‌  ‌ ‌ ‌    ‌ ‌      ‌  ‌  ‌ ‌‌  ‌‌  ‌      ‌‌‌‌  ‌ ‌‌ ‌‌‌‌ ‌‌‌ ‌ ‌ ‌      ‌‌    ‌ ‌‌‌  ‌  ‌‌  ‌ ‌ ‌      ‌‌‌ ‌‌  ‌‌ ‌  ‌ ‌‌   ‌‌ ‌‌‌ ‌   ‌‌ ‌  ‌ ‌‌ ‌‌ ‌ ‌      ‌‌ ‌‌‌‌ ‌‌  ‌‌  ‌      ‌‌    ‌ ‌      ‌‌  ‌‌  ‌‌‌  ‌  ‌‌    ‌ ‌‌‌ ‌ ‌ ‌‌  ‌   ‌      ‌‌‌     ‌‌ ‌‌   ‌‌  ‌ ‌ ‌‌    ‌ ‌‌‌  ‌‌ ‌‌  ‌ ‌ ‌      ‌‌ ‌‌ ‌ ‌‌  ‌ ‌ ‌‌‌  ‌‌ ‌‌‌  ‌‌ ‌‌    ‌ ‌‌  ‌‌‌ ‌‌  ‌ ‌ ‌      ‌‌ ‌  ‌ ‌‌‌ ‌   ‌      ‌‌  ‌   ‌‌ ‌  ‌ ‌‌‌  ‌  ‌‌  ‌ ‌ ‌‌   ‌‌ ‌‌‌ ‌   ‌‌ ‌‌   ‌‌‌‌  ‌ ‌      ‌‌‌ ‌   ‌‌ ‌‌‌‌ ‌      ‌‌‌ ‌   ‌‌ ‌    ‌‌  ‌ ‌ ‌      ‌ ‌     ‌‌‌   ‌  ‌        ‌   ‌ ‌‌ ‌‌ ‌  ‌ ‌‌‌   ‌  ‌        ‌   ‌ ‌‌ ‌‌ ‌‌‌  ‌‌‌   ‌  ‌        ‌   ‌ ‌‌ ‌‌  ‌ ‌ ‌‌‌   ‌  ‌        ‌   ‌ ‌‌ ‌    ‌‌ ‌‌‌   ‌  ‌        ‌   ‌ ‌‌ ‌‌ ‌‌‌‌ ‌‌‌   ‌  ‌        ‌   ‌ ‌‌ ‌‌  ‌   ‌‌‌   ‌  ‌        ‌   ‌ ‌‌ ‌‌  ‌ ‌ ‌‌‌   ‌  ‌        ‌   ‌ ‌‌ ‌‌‌  ‌  ‌‌‌   ‌  ‌        ‌   ‌ ‌‌ ‌‌‌  ‌‌ ‌      ‌‌ ‌‌ ‌ ‌‌ ‌‌‌‌ ‌‌  ‌   ‌‌‌  ‌‌ ‌      ‌‌    ‌ ‌‌ ‌‌‌  ‌‌  ‌   ‌      ‌‌‌ ‌   ‌‌    ‌ ‌‌ ‌ ‌‌ ‌‌  ‌ ‌ ‌      ‌‌    ‌ ‌‌   ‌‌ ‌‌‌ ‌   ‌‌ ‌  ‌ ‌‌ ‌‌‌‌ ‌‌ ‌‌‌  ‌ ‌‌‌ age'.desteganographize()
    if not na(longStopLossPrice) and not na(shortLimitOrStopEntryPrice) and longStopLossPrice > shortLimitOrStopEntryPrice
        strategy.order(id = SHORT_ORDER_ID_ENTRY, direction = strategy.short, limit = entryOrderType == OrderType.limit ? shortLimitOrStopEntryPrice : entryOrderType == OrderType.stopLimit ? shortStopLimitEntryPrice : na,
              stop = entryOrderType == OrderType.stop or entryOrderType == OrderType.stopLimit ? shortLimitOrStopEntryPrice : na, qty = shortEntryBaseQuantity, comment = showAlertsEnabled ? msgAlert : entryOrderType == OrderType.market ? '🔶📉' : '🔶📉📍', alert_message = msgAlert)
    else
        strategy.entry(id = SHORT_ORDER_ID_ENTRY, direction = strategy.short, limit = entryOrderType == OrderType.limit ? shortLimitOrStopEntryPrice : entryOrderType == OrderType.stopLimit ? shortStopLimitEntryPrice : na,
              stop = entryOrderType == OrderType.stop or entryOrderType == OrderType.stopLimit ? shortLimitOrStopEntryPrice : na, qty = shortEntryBaseQuantity, comment = showAlertsEnabled ? msgAlert : entryOrderType == OrderType.market ? '🔶📉' : '🔶📉📍', alert_message = msgAlert)

// Cancel existing entry limit, stop and stop-limit orders (if any) when valid cancel open signal occurs
if doCnlLimitEntryShort
    strategy.cancel(id = SHORT_ORDER_ID_ENTRY)
    if msgCnlLimitOrStopEntryEnabled
        var string varMsgCnlLimitOrStopEntryShort = rawMsgCnlLimitOrStopEntryShort.replace_all(stringVarVariablesMap)
        alert(message = varMsgCnlLimitOrStopEntryShort.replace(numberVariablesMapShort), freq = alert.freq_once_per_bar_close)

// Calculate the tightest stop order by combining the stop loss and limit or stop exit (if any)
float shortEffectiveStopLossPrice = stopLossWaitCloseConfirm ? na : shortStopLossPrice
float shortTightestStop = exitOrderType == OrderType.stop and shortLimitExitIsActive ? math.min(nz(shortLimitOrStopExitPrice, MAX_LIMIT_FLOAT), nz(shortEffectiveStopLossPrice, MAX_LIMIT_FLOAT)) : shortEffectiveStopLossPrice
bool isShortLimitExitTighterThanStopLoss = stopLossWaitCloseConfirm ? true : shortLimitExitIsActive and exitOrderType == OrderType.stop and shortLimitOrStopExitPrice < shortStopLossPrice
// Submit exit order for trailing take profit price also set the stop loss for the take profit percentage in case that stop loss is reached first
// Submit exit order when exit with limit or stop
for [i, shortTakeProfitPrice] in shortTakeProfitPrices
    if shortLimitExitIsActive or (shortIsActive and not shortTrailTakeProfitExecuted.get(i))
        float shortightestLimit = exitOrderType == OrderType.limit and shortLimitExitIsActive ? math.max(nz(shortLimitOrStopExitPrice, MIN_LIMIT_FLOAT), nz(shortTakeProfitPrice, MIN_LIMIT_FLOAT)) : takeProfitTrailEnabled ? na : shortTakeProfitPrice
        bool isShortLimitExitTighterThanTakeProfit = shortLimitExitIsActive and shortLimitOrStopExitPrice > shortTakeProfitPrice
        string msgAlertProfit = isShortLimitExitTighterThanTakeProfit ? msgExitedLimitOrStopShort : msgRchTPShort.get(i % NUM_OF_MAX_TP_ALERTS)
        string msgAlertLoss = i == TAKE_PROFIT_TARGETS_SIZE and moonbagQuantityRatio == 0.0 ? isShortLimitExitTighterThanStopLoss ? msgExitedLimitOrStopShort : msgRchSLShort : na
        string msgCommentProfit = exitOrderType == OrderType.limit and shortLimitExitIsActive ? '🟪📉📍' : ('🎯📉' + (numOfTakeProfitTargets > 1 ? numToEmoji.get(i + 1) : ''))
        string msgCommentLoss = isShortLimitExitTighterThanStopLoss ? '🟪📉📍' : ('🛑📉' + (numOfTakeProfitTargets > 1 ? numToEmoji.get(i + 1) : ''))
        strategy.exit(id = str.format(EXIT_ORDER_ID_PATTERN_1, SHORT_ORDER_ID_PREFIX, i + 1), from_entry = SHORT_ORDER_ID_ENTRY, qty = shortTakeProfitQuantity,
              limit = shortightestLimit, stop = shortTightestStop, trail_price = takeProfitTrailEnabled ? shortTakeProfitPrice : na, trail_offset = takeProfitTrailEnabled ? shortTrailTakeProfitOffsetTicks.get(i) : na,
              comment_profit = showAlertsEnabled ? msgAlertProfit : msgCommentProfit, comment_loss = showAlertsEnabled ? msgAlertLoss : msgCommentLoss, comment_trailing = showAlertsEnabled ? msgAlertProfit : msgCommentProfit,
              alert_profit = msgAlertProfit, alert_loss = msgAlertLoss, alert_trailing = msgAlertProfit)

// Submit exit order for trailing stop loss price for the remaining percent of the quantity not reserved by the take profit order
// Submit exit order when exit with limit or stop
if doSLorExitLimitShort
    string msgAlertProfit = isShortLimitExitTighterThanStopLoss or exitOrderType == OrderType.limit ? msgExitedLimitOrStopShort : na
    string msgAlertLoss = isShortLimitExitTighterThanStopLoss ? msgExitedLimitOrStopShort : msgRchSLShort
    string msgCommentProfit = isShortLimitExitTighterThanStopLoss or exitOrderType == OrderType.limit ? '🟪📉📍' : na
    string msgCommentLoss = isShortLimitExitTighterThanStopLoss ? '🟪📉📍' : '🛑📉'
    strategy.exit(id = str.format(EXIT_ORDER_ID_PATTERN_2, SHORT_ORDER_ID_PREFIX), from_entry = SHORT_ORDER_ID_ENTRY, limit = exitOrderType == OrderType.limit ? shortLimitOrStopExitPrice : na, stop = shortTightestStop,
          comment_profit = showAlertsEnabled ? msgAlertProfit : msgCommentProfit, comment_loss = showAlertsEnabled ? msgAlertLoss : msgCommentLoss,
          alert_profit = msgAlertProfit, alert_loss = msgAlertLoss)

// Limit the maximum drawdown
strategy.risk.max_drawdown(value = maxDrawdownEnabled ? maxDrawdownPerc : 100.0, type = strategy.percent_of_equity, alert_message = msgMaxDrawdown)

//#endregion ===========================================================================================================
//#region 🐞 DEBUG
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
// Description: Module responsible for plotting additional information for debuging purposes
// Dependencies: ALL
// Results: showAlertsEnabled, debugModeEnabled

// INPUT ===============================================================================================================
debugModeEnabled = input.bool(defval = false, title = 'Debug Mode', tooltip = 'Enable debug mode.', group = '🐞 Debug', display = display.data_window)

// PLOT ================================================================================================================
if validOpenLongPosition and showOpenLabels and barstate.isconfirmed
    string longOpenTooltip = str.format('Quantity: {0}\nCapital Risk: {1}', str.tostring(longEntryQuoteQuantityPerc, format.percent), str.tostring(longCapitalRiskPerc, format.percent))
    label.new(point = chart.point.from_index(bar_index + 1, nz(longLimitOrStopEntryPrice, close)), text = 'Open', color = longOpenColor, style = entryOrderType != OrderType.market ? label.style_label_right : label.style_label_upper_right, textcolor = FG_COLOR, size = size.small, tooltip = longOpenTooltip)

if validOpenShortPosition and showOpenLabels and barstate.isconfirmed
    string shortOpenTooltip = str.format('Quantity: {0}\nCapital Risk: {1}', str.tostring(shortEntryQuoteQuantityPerc, format.percent), str.tostring(shortCapitalRiskPerc, format.percent))
    label.new(point = chart.point.from_index(bar_index + 1, nz(shortLimitOrStopEntryPrice, close)), text = 'Open', color = shortOpenColor, style = entryOrderType != OrderType.market ? label.style_label_right : label.style_label_lower_right, textcolor = FG_COLOR, size = size.small, tooltip = shortOpenTooltip)

bool showLongPlots = not longLimitOrStopEntryIsActive or debugModeEnabled
bool showShortPlots = not shortLimitOrStopEntryIsActive or debugModeEnabled

color DBG_POS_COLOR = color.new(FG_COLOR, 50)
plot(series = showLongPlots ? longEntryPrice : na, title = 'Long Entry', color = longLimitOrStopEntryIsActive ? debugModeEnabled ? DBG_POS_COLOR : na : FG_COLOR, linewidth = 1, style = plot.style_linebr, offset = 1)
plot(series = showShortPlots ? shortEntryPrice : na, title = 'Short Entry', color = shortLimitOrStopEntryIsActive ? debugModeEnabled ? DBG_POS_COLOR : na : FG_COLOR, linewidth = 1, style = plot.style_linebr, offset = 1)

color DBG_STOP_LOSS_COLOR = color.new(stopLossColor, 50)
plot(series = showLongPlots ? longStopLossPrice : na, title = 'Long Stop Loss', color = longLimitOrStopEntryIsActive ? debugModeEnabled ? DBG_STOP_LOSS_COLOR : na : stopLossColor, linewidth = 2, style = plot.style_linebr, offset = 1)
plot(series = showShortPlots ? shortStopLossPrice : na, title = 'Short Stop Loss', color = shortLimitOrStopEntryIsActive ? debugModeEnabled ? DBG_STOP_LOSS_COLOR : na : stopLossColor, linewidth = 2, style = plot.style_linebr, offset = 1)

color DBG_TAKE_PROFIT_COLOR = color.new(takeProfitColor, 50)
plot(series = numOfTakeProfitTargets > 0 and showLongPlots and (not longIthTrailTakeProfitExecuted(1) or debugModeEnabled) ? longTakeProfitPrices.get(0) : na, title = 'Long Take Profit 1', color = longIthTrailTakeProfitExecuted(1) or longLimitOrStopEntryIsActive ? debugModeEnabled ? DBG_TAKE_PROFIT_COLOR : na : takeProfitColor, linewidth = 2, style = plot.style_linebr, offset = 1, display = numOfTakeProfitTargets > 0 ? display.all : display.none)
plot(series = numOfTakeProfitTargets > 0 and showShortPlots and (not shortIthTrailTakeProfitExecuted(1) or debugModeEnabled) ? shortTakeProfitPrices.get(0) : na, title = 'Short Take Profit 1', color = shortIthTrailTakeProfitExecuted(1) or shortLimitOrStopEntryIsActive ? debugModeEnabled ? DBG_TAKE_PROFIT_COLOR : na : takeProfitColor, linewidth = 2, style = plot.style_linebr, offset = 1, display = numOfTakeProfitTargets > 0 ? display.all : display.none)
plot(series = numOfTakeProfitTargets > 1 and showLongPlots and (not longIthTrailTakeProfitExecuted(2) or debugModeEnabled) ? longTakeProfitPrices.get(1) : na, title = 'Long Take Profit 2', color = longIthTrailTakeProfitExecuted(2) or longLimitOrStopEntryIsActive ? debugModeEnabled ? DBG_TAKE_PROFIT_COLOR : na : takeProfitColor, linewidth = 2, style = plot.style_linebr, offset = 1, display = numOfTakeProfitTargets > 1 ? display.all : display.none)
plot(series = numOfTakeProfitTargets > 1 and showShortPlots and (not shortIthTrailTakeProfitExecuted(2) or debugModeEnabled) ? shortTakeProfitPrices.get(1) : na, title = 'Short Take Profit 2', color = shortIthTrailTakeProfitExecuted(2) or shortLimitOrStopEntryIsActive ? debugModeEnabled ? DBG_TAKE_PROFIT_COLOR : na : takeProfitColor, linewidth = 2, style = plot.style_linebr, offset = 1, display = numOfTakeProfitTargets > 1 ? display.all : display.none)
plot(series = numOfTakeProfitTargets > 2 and showLongPlots and (not longIthTrailTakeProfitExecuted(3) or debugModeEnabled) ? longTakeProfitPrices.get(2) : na, title = 'Long Take Profit 3', color = longIthTrailTakeProfitExecuted(3) or longLimitOrStopEntryIsActive ? debugModeEnabled ? DBG_TAKE_PROFIT_COLOR : na : takeProfitColor, linewidth = 2, style = plot.style_linebr, offset = 1, display = numOfTakeProfitTargets > 2 ? display.all : display.none)
plot(series = numOfTakeProfitTargets > 2 and showShortPlots and (not shortIthTrailTakeProfitExecuted(3) or debugModeEnabled) ? shortTakeProfitPrices.get(2) : na, title = 'Short Take Profit 3', color = shortIthTrailTakeProfitExecuted(3) or shortLimitOrStopEntryIsActive ? debugModeEnabled ? DBG_TAKE_PROFIT_COLOR : na : takeProfitColor, linewidth = 2, style = plot.style_linebr, offset = 1, display = numOfTakeProfitTargets > 2 ? display.all : display.none)
plot(series = numOfTakeProfitTargets > 3 and showLongPlots and (not longIthTrailTakeProfitExecuted(4) or debugModeEnabled) ? longTakeProfitPrices.get(3) : na, title = 'Long Take Profit 4', color = longIthTrailTakeProfitExecuted(4) or longLimitOrStopEntryIsActive ? debugModeEnabled ? DBG_TAKE_PROFIT_COLOR : na : takeProfitColor, linewidth = 2, style = plot.style_linebr, offset = 1, display = numOfTakeProfitTargets > 3 ? display.all : display.none)
plot(series = numOfTakeProfitTargets > 3 and showShortPlots and (not shortIthTrailTakeProfitExecuted(4) or debugModeEnabled) ? shortTakeProfitPrices.get(3) : na, title = 'Short Take Profit 4', color = shortIthTrailTakeProfitExecuted(4) or shortLimitOrStopEntryIsActive ? debugModeEnabled ? DBG_TAKE_PROFIT_COLOR : na : takeProfitColor, linewidth = 2, style = plot.style_linebr, offset = 1, display = numOfTakeProfitTargets > 3 ? display.all : display.none)
plot(series = numOfTakeProfitTargets > 4 and showLongPlots and (not longIthTrailTakeProfitExecuted(5) or debugModeEnabled) ? longTakeProfitPrices.get(4) : na, title = 'Long Take Profit 5', color = longIthTrailTakeProfitExecuted(5) or longLimitOrStopEntryIsActive ? debugModeEnabled ? DBG_TAKE_PROFIT_COLOR : na : takeProfitColor, linewidth = 2, style = plot.style_linebr, offset = 1, display = numOfTakeProfitTargets > 4 ? display.all : display.none)
plot(series = numOfTakeProfitTargets > 4 and showShortPlots and (not shortIthTrailTakeProfitExecuted(5) or debugModeEnabled) ? shortTakeProfitPrices.get(4) : na, title = 'Short Take Profit 5', color = shortIthTrailTakeProfitExecuted(5) or shortLimitOrStopEntryIsActive ? debugModeEnabled ? DBG_TAKE_PROFIT_COLOR : na : takeProfitColor, linewidth = 2, style = plot.style_linebr, offset = 1, display = numOfTakeProfitTargets > 4 ? display.all : display.none)

// color DBG_LONG_ENTRY_COLOR = color.new(longEntryColor, 50)
// color DBG_SHORT_ENTRY_COLOR = color.new(shortEntryColor, 50)
// color DBG_LONG_EXIT_COLOR = color.new(longExitColor, 50)
// color DBG_SHORT_EXIT_COLOR = color.new(shortExitColor, 50)
// plotshape(series = tryEnterLongPosition, title = 'Dbg Try Enter Long', style = shape.arrowup, location = location.belowbar, color = DBG_LONG_ENTRY_COLOR, size = size.tiny, display = debugModeEnabled ? display.all - display.status_line : display.none)
// plotshape(series = tryEnterShortPosition, title = 'Dbg Try Enter Short', style = shape.arrowdown, location = location.abovebar, color = DBG_SHORT_ENTRY_COLOR, size = size.tiny, display = debugModeEnabled ? display.all - display.status_line : display.none)
// plotshape(series = enteredLongTrade, title = 'Dbg Long Entred', style = shape.diamond, location = location.belowbar, color = DBG_LONG_ENTRY_COLOR, size = size.small, display = debugModeEnabled ? display.all - display.status_line : display.none)
// plotshape(series = enteredShortTrade, title = 'Dbg Short Entred', style = shape.diamond, location = location.abovebar, color = DBG_SHORT_ENTRY_COLOR, size = size.small, display = debugModeEnabled ? display.all - display.status_line : display.none)
// plotshape(series = isLongPosition, title = 'Dbg Active Long', style = shape.labelup, location = location.belowbar, color = DBG_LONG_ENTRY_COLOR, size = size.small, display = debugModeEnabled ? display.all - display.status_line : display.none)
// plotshape(series = isShortPosition, title = 'Dbg Active Short', style = shape.labeldown, location = location.abovebar, color = DBG_SHORT_ENTRY_COLOR, size = size.small, display = debugModeEnabled ? display.all - display.status_line : display.none)
// plotshape(series = completedLongTrade, title = 'Dbg Long Completed', style = shape.square, location = location.belowbar, color = DBG_LONG_EXIT_COLOR, size = size.small, display = debugModeEnabled ? display.all - display.status_line : display.none)
// plotshape(series = completedShortTrade, title = 'Dbg Short Completed', style = shape.square, location = location.abovebar, color = DBG_SHORT_EXIT_COLOR, size = size.small, display = debugModeEnabled ? display.all - display.status_line : display.none)

//#endregion ===========================================================================================================
//#region 💝 SUPPORT
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
// Description: Module responsible for plotting instructions on how to support the project
// Dependencies: NONE
// Results: NONE

// INPUT ===============================================================================================================
feedbackFramework = input.text_area(defval = 'I encourage you to give constructive feedback 🔄 in the publication comments with both success and failure stories using this framework. Please send me a direct message if you found some "bizarre" behavior 🐞, or you just don\'t understand the way some "things" are done, or simply you are strongly opinionated 🤔 doing "things" differently!', title = 'Feedback', tooltip = 'For more information on how this framework functions, please refer to the description of the publication.', group = '💝 Support', display = display.none)
donateFramework = input.text_area(defval = 'I tend to convert coffee ☕ to code 📰, I am a coffee-to-code converter 👨🏻‍💻 a.k.a. CCC. If you like the progress this framework has done so far, don\'t miss the chance to give it some fuel ⛽, so I can continue to operate as a CCC!', title = 'Donate', tooltip = 'For more information on payment methods, please check my signature at the end of the publication.', group = '💝 Support', display = display.none)
sponsorFrameworkAuthor = input.text_area(defval = 'Some of the features ✨ you are using now had been sponsored by other community members in the past. If you have a feature ✨ request in mind that it is strategy-agnostic and generic enough to be included in this framework, you can sponsor 🤝 it\'s implementation and give back to the community! Reach me out 📧 to discuss the integration of the feature and your vision!', title = 'Sponsor', tooltip = 'For more information about current project availability please contact me.', group = '💝 Support', display = display.none)
hireAuthor = input.text_area(defval = 'If you have a trading idea 💡 that seeks a robust implementation ✍️ and takes advantage of the rich feature ✨ set of this framework do not hesitate to reach out 📧 to me!', title = 'Hire', tooltip = 'For more information about current project availability please contact me.', group = '💝 Support', display = display.none)

//#endregion ===========================================================================================================