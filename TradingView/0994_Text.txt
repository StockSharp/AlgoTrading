// This Pine Script® code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © fikira

//@version=6

// @description library to format text in different fonts or cases.
library("Text")


_                                                                                                                                                                                                                                                                                                                                                                       ='
               𝓕𝓞𝓝𝓣𝓢
               ------
                                                                                                                                                                                                                                                                                                                                                                         '

//@enum Contains fields with fonts for formatting text.
export enum Efont
    Above_Frown            = "Above Frown"
    Above_Smiley           = "Above Smiley"
    Blocks                 = "Blocks"
    Blocks_2               = "Blocks 2"
    Blocks_3               = "Blocks 3"
    Bold_Strong            = "Bold Strong"
    Circled                = "Circled"
    Circled_2              = "Circled 2"
    Criss_Cross            = "Criss-Cross"
    Curly_1                = "Curly 1"
    Curly_2                = "Curly 2"
    Curly_3                = "Curly 3"
    Diamonds               = "Diamonds"
    Double_Struck          = "Double-Struck"
    Fraktur                = "Fraktur"
    Fraktur_Bold           = "Fraktur Bold"
    Full_Width             = "Full Width"
    Greek                  = "Greek"
    Hebrew                 = "Hebrew"
    Japanese               = "Japanese"
    Lefthanded             = "Lefthanded"
    Rounded                = "Rounded"
    Runes                  = "Runes"
    Sans                   = "Sans"
    Sans_Bold              = "Sans Bold"
    Sans_Bold_Italic       = "Sans Bold Italic"
    Sans_Italic            = "Sans Italic"
    Sans_Serif             = "Sans-Serif"
    Sans_Serif_Bold        = "Sans-Serif Bold"
    Sans_Serif_Bold_Italic = "Sans-Serif Bold Italic"
    Sans_Serif_Italic      = "Sans-Serif Italic"
    Script                 = "Script"
    Script_Bold            = "Script Bold"
    Script_Italic          = "Script Italic"
    Slim                   = "Slim"
    Subscript              = "Subscript"
    Superscript            = "Superscript"
    Monospace              = "Monospace"
    Under_Seagull          = "Under Seagull"
    Under_Asterisk         = "Under Asterisk"
    Unicode_ID             = "Unicode ID"
    Upside_Latin           = "Upside Latin"
    Wiggly                 = "Wiggly"


// @function  toFont   : Transforms text into the selected font
// @param    `fromText`: initial text
// @param    `case`    : desired font
// @returns  `fromText` transformed to desired `font`
export method toFont(string fromText, string font) =>
    // abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789
    var Pine = array.from(
      'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'
     ,'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'
     ,'0','1','2','3','4','5','6','7','8','9'
     )
    var aFont = array.new<string>()
    var mp    = map.new<string, string>()
    var fill  = true
    if fill // only do this once per runtime
        aFont := switch font
            'Above Frown'            => array.from('𝖺̑̇̈','𝖻̑̇̈','𝖼̑̇̈','𝖽̑̇̈','𝖾̑̇̈','𝖿̑̇̈','𝗀̑̇̈','𝗁̑̇̈','𝗂̑̇̈','𝗃̑̇̈','𝗄̑̇̈','𝗅̑̇̈','𝗆̑̇̈','𝗇̑̇̈','𝗈̑̇̈','𝗉̑̇̈','𝗊̑̇̈','𝗋̑̇̈','𝗌̑̇̈','𝗍̑̇̈','𝗎̑̇̈','𝗏̑̇̈','𝗐̑̇̈','𝗑̑̇̈','𝗒̑̇̈','𝗓̑̇̈','𝖠̑̇̈','𝖡̑̇̈','𝖢̑̇̈','𝖣̑̇̈','𝖤̑̇̈','𝖥̑̇̈','𝖦̑̇̈','𝖧̑̇̈','𝖨̑̇̈','𝖩̑̇̈','𝖪̑̇̈','𝖫̑̇̈','𝖬̑̇̈','𝖭̑̇̈','𝖮̑̇̈','𝖯̑̇̈','𝖰̑̇̈','𝖱̑̇̈','𝖲̑̇̈','𝖳̑̇̈','𝖴̑̇̈','𝖵̑̇̈','𝖶̑̇̈','𝖷̑̇̈','𝖸̑̇̈','𝖹̑̇̈','𝟢̑̇̈','𝟣̑̇̈','𝟤̑̇̈','𝟥̑̇̈','𝟦̑̇̈','𝟧̑̇̈','𝟨̑̇̈','𝟩̑̇̈','𝟪̑̇̈','𝟫̑̇̈')
            'Above Smiley'           => array.from('𝖺̐̈','𝖻̐̈','𝖼̐̈','𝖽̐̈','𝖾̐̈','𝖿̐̈','𝗀̐̈','𝗁̐̈','𝗂̐̈','𝗃̐̈','𝗄̐̈','𝗅̐̈','𝗆̐̈','𝗇̐̈','𝗈̐̈','𝗉̐̈','𝗊̐̈','𝗋̐̈','𝗌̐̈','𝗍̐̈','𝗎̐̈','𝗏̐̈','𝗐̐̈','𝗑̐̈','𝗒̐̈','𝗓̐̈','𝖠̐̈','𝖡̐̈','𝖢̐̈','𝖣̐̈','𝖤̐̈','𝖥̐̈','𝖦̐̈','𝖧̐̈','𝖨̐̈','𝖩̐̈','𝖪̐̈','𝖫̐̈','𝖬̐̈','𝖭̐̈','𝖮̐̈','𝖯̐̈','𝖰̐̈','𝖱̐̈','𝖲̐̈','𝖳̐̈','𝖴̐̈','𝖵̐̈','𝖶̐̈','𝖷̐̈','𝖸̐̈','𝖹̐̈','𝟢̐̈','𝟣̐̈','𝟤̐̈','𝟥̐̈','𝟦̐̈','𝟧̐̈','𝟨̐̈','𝟩̐̈','𝟪̐̈','𝟫̐̈')
            'Blocks'                 => array.from('🅰','🅱','🅲','🅳','🅴','🅵','🅶','🅷','🅸','🅹','🅺','🅻','🅼','🅽','🅾','🅿','🆀','🆁','🆂','🆃','🆄','🆅','🆆','🆇','🆈','🆉','🅰','🅱','🅲','🅳','🅴','🅵','🅶','🅷','🅸','🅹','🅺','🅻','🅼','🅽','🅾','🅿','🆀','🆁','🆂','🆃','🆄','🆅','🆆','🆇','🆈','🆉','𝟢','𝟣','𝟤','𝟥','𝟦','𝟧','𝟨','𝟩','𝟪','𝟫')
            'Blocks 2'               => array.from('🄰','🄱','🄲','🄳','🄴','🄵','🄶','🄷','🄸','🄹','🄺','🄻','🄼','🄽','🄾','🄿','🅀','🅁','🅂','🅃','🅄','🅅','🅆','🅇','🅈','🅉','🄰','🄱','🄲','🄳','🄴','🄵','🄶','🄷','🄸','🄹','🄺','🄻','🄼','🄽','🄾','🄿','🅀','🅁','🅂','🅃','🅄','🅅','🅆','🅇','🅈','🅉','0','1','2','3','4','5','6','7','8','9')
            'Blocks 3'               => array.from(' 🇦',' 🇧','  🇨','  🇩','  🇪','  🇫','  🇬','  🇭','  🇮','  🇯','  🇰','  🇱','  🇲','  🇳','  🇴','  🇵','  🇶','  🇷','  🇸','  🇹','  🇺','  🇻','  🇼','  🇽','  🇾','  🇿','  🇦','  🇧','  🇨','  🇩','  🇪','  🇫','  🇬','  🇭','  🇮','  🇯','  🇰','  🇱','  🇲','  🇳','  🇴','  🇵','  🇶','  🇷','  🇸','  🇹','  🇺','  🇻','  🇼','  🇽','  🇾','  🇿',' 0️⃣','1️⃣','2️⃣','3️⃣','4️⃣','5️⃣','6️⃣','7️⃣','8️⃣','9️⃣')
            'Bold Strong'            => array.from('α','Ⴆ','ƈ','ԃ','ҽ','ϝ','ɠ','ԋ','ι','ʝ','ƙ','ʅ','ɱ','ɳ','σ','ρ','ϙ','ɾ','ʂ','ƚ','υ','ʋ','ɯ','𝐱','ყ','ȥ','𝐀','𝐁','𝐂','𝐃','𝐄','𝐅','𝐆','𝐇','𝐈','𝐉','𝐊','𝐋','𝐌','𝐍','𝐎','𝐏','𝐐','𝐑','𝐒','𝐓','𝐔','𝐕','𝐖','𝐗','𝐘','𝐙','𝟎','𝟏','𝟐','𝟑','𝟒','𝟓','𝟔','𝟕','𝟖','𝟗')
            'Circled'                => array.from('🅐','🅑','🅒','🅓','🅔','🅕','🅖','🅗','🅘','🅙','🅚','🅛','🅜','🅝','🅞','🅟','🅠','🅡','🅢','🅣','🅤','🅥','🅦','🅧','🅨','🅩','🅐','🅑','🅒','🅓','🅔','🅕','🅖','🅗','🅘','🅙','🅚','🅛','🅜','🅝','🅞','🅟','🅠','🅡','🅢','🅣','🅤','🅥','🅦','🅧','🅨','🅩','⓿','❶','❷','❸','❹','❺','❻','❼','❽','❾')
            'Circled 2'              => array.from('ⓐ','ⓑ','ⓒ','ⓓ','ⓔ','ⓕ','ⓖ','ⓗ','ⓘ','ⓙ','ⓚ','ⓛ','ⓜ','ⓝ','ⓞ','ⓟ','ⓠ','ⓡ','ⓢ','ⓣ','ⓤ','ⓥ','ⓦ','ⓧ','ⓨ','ⓩ','Ⓐ','Ⓑ','Ⓒ','Ⓓ','Ⓔ','Ⓕ','Ⓖ','Ⓗ','Ⓘ','Ⓙ','Ⓚ','Ⓛ','Ⓜ','Ⓝ','Ⓞ','Ⓟ','Ⓠ','Ⓡ','Ⓢ','Ⓣ','Ⓤ','Ⓥ','Ⓦ','Ⓧ','Ⓨ','Ⓩ','⓪','①','②','③','④','⑤','⑥','⑦','⑧','⑨')
            'Criss-Cross'            => array.from('₳','฿','₵','Đ','Ɇ','₣','₲','Ⱨ','ł','J','₭','Ⱡ','₥','₦','Ø','₱','Q','Ɽ','₴','₮','Ʉ','V','₩','Ӿ','Ɏ','Ⱬ','₳','฿','₵','Đ','Ɇ','₣','₲','Ⱨ','ł','J','₭','Ⱡ','₥','₦','Ø','₱','Q','Ɽ','₴','₮','Ʉ','V','₩','Ӿ','Ɏ','Ⱬ','0','1','2','3','4','5','6','7','8','9')
            'Curly 1'                => array.from('α','в','¢','∂','є','ƒ','ﻭ','н','ι','נ','к','ℓ','м','η','σ','ρ','۹','я','ѕ','т','υ','ν','ω','χ','у','չ','α','в','¢','∂','є','ƒ','ﻭ','н','ι','נ','к','ℓ','м','η','σ','ρ','۹','я','ѕ','т','υ','ν','ω','χ','у','չ','0','1','2','3','4','5','6','7','8','9')
            'Curly 2'                => array.from('ค','๒','ς','๔','є','Ŧ','ﻮ','ђ','เ','ן','к','ɭ','๓','ภ','๏','ק','ợ','г','ร','Շ','ย','ש','ฬ','א','ץ','չ','ค','๒','ς','๔','є','Ŧ','ﻮ','ђ','เ','ן','к','ɭ','๓','ภ','๏','ק','ợ','г','ร','Շ','ย','ש','ฬ','א','ץ','չ','0','1','2','3','4','5','6','7','8','9')
            'Curly 3'                => array.from('ᕔ','ᗹ','ᙅ','ᗫ','ꗛ','ꘘ','Ǥ','ዛ','Ĭ','Ĵ','Ҝ','Ը','ᙏ','ᙁ','ꗞ','ᖘ','Ҩ','Ɍ','ꕷ','Ꞇ','ꚶ','ᕓ','ᙡ','𐠷','Ꮍ','Ɀ','ᕔ','ᗹ','ᙅ','ᗫ','ꗛ','ꘘ','Ǥ','ዛ','Ĭ','Ĵ','Ҝ','Ը','ᙏ','ᙁ','ꗞ','ᖘ','Ҩ','Ɍ','ꕷ','Ꞇ','ꚶ','ᕓ','ᙡ','𐠷','Ꮍ','Ɀ','θ','ꛨ','𑋲','Ѯ','Ч','Ҕ','Ҩ','𑁭','8','૭')
            'Diamonds'               => array.from('𝖺⃟','𝖻⃟','𝖼⃟','𝖽⃟','𝖾⃟','𝖿⃟','𝗀⃟','𝗁⃟','𝗂⃟','𝗃⃟','𝗄⃟','𝗅⃟','𝗆⃟','𝗇⃟','𝗈⃟','𝗉⃟','𝗊⃟','𝗋⃟','𝗌⃟','𝗍⃟','𝗎⃟','𝗏⃟','𝗐⃟','𝗑⃟','𝗒⃟','𝗓⃟','𝖠⃟','𝖡⃟','𝖢⃟','𝖣⃟','𝖤⃟','𝖥⃟','𝖦⃟','𝖧⃟','𝖨⃟','𝖩⃟','𝖪⃟','𝖫⃟','𝖬⃟','𝖭⃟','𝖮⃟','𝖯⃟','𝖰⃟','𝖱⃟','𝖲⃟','𝖳⃟','𝖴⃟','𝖵⃟','𝖶⃟','𝖷⃟','𝖸⃟','𝖹⃟','𝟢⃟','𝟣⃟','𝟤⃟','𝟥⃟','𝟦⃟','𝟧⃟','𝟨⃟','𝟩⃟','𝟪⃟','𝟫⃟')
            'Double-Struck'          => array.from('𝕒','𝕓','𝕔','𝕕','𝕖','𝕗','𝕘','𝕙','𝕚','𝕛','𝕜','𝕝','𝕞','𝕟','𝕠','𝕡','𝕢','𝕣','𝕤','𝕥','𝕦','𝕧','𝕨','𝕩','𝕪','𝕫','𝔸','𝔹','ℂ','𝔻','𝔼','𝔽','𝔾','ℍ','𝕀','𝕁','𝕂','𝕃','𝕄','ℕ','𝕆','ℙ','ℚ','ℝ','𝕊','𝕋','𝕌','𝕍','𝕎','𝕏','𝕐','ℤ','𝟘','𝟙','𝟚','𝟛','𝟜','𝟝','𝟞','𝟟','𝟠','𝟡')
            'Fraktur'                => array.from('𝔞','𝔟','𝔠','𝔡','𝔢','𝔣','𝔤','𝔥','𝔦','𝔧','𝔨','𝔩','𝔪','𝔫','𝔬','𝔭','𝔮','𝔯','𝔰','𝔱','𝔲','𝔳','𝔴','𝔵','𝔶','𝔷','𝔄','𝔅','ℭ','𝔇','𝔈','𝔉','𝔊','ℌ','ℑ','𝔍','𝔎','𝔏','𝔐','𝔑','𝔒','𝔓','𝔔','ℜ','𝔖','𝔗','𝔘','𝔙','𝔚','𝔛','𝔜','ℨ','𝟢','𝟣','𝟤','𝟥','𝟦','𝟧','𝟨','𝟩','𝟪','𝟫')
            'Fraktur Bold'           => array.from('𝖆','𝖇','𝖈','𝖉','𝖊','𝖋','𝖌','𝖍','𝖎','𝖏','𝖐','𝖑','𝖒','𝖓','𝖔','𝖕','𝖖','𝖗','𝖘','𝖙','𝖚','𝖛','𝖜','𝖝','𝖞','𝖟','𝕬','𝕭','𝕮','𝕯','𝕰','𝕱','𝕲','𝕳','𝕴','𝕵','𝕶','𝕷','𝕸','𝕹','𝕺','𝕻','𝕼','𝕽','𝕾','𝕿','𝖀','𝖁','𝖂','𝖃','𝖄','𝖅','𝟎','𝟏','𝟐','𝟑','𝟒','𝟓','𝟔','𝟕','𝟖','𝟗') //== 'Old English'
            'Full Width'             => array.from('ａ','ｂ','ｃ','ｄ','ｅ','ｆ','ｇ','ｈ','ｉ','ｊ','ｋ','ｌ','ｍ','ｎ','ｏ','ｐ','ｑ','ｒ','ｓ','ｔ','ｕ','ｖ','ｗ','ｘ','ｙ','ｚ','Ａ','Ｂ','Ｃ','Ｄ','Ｅ','Ｆ','Ｇ','Ｈ','Ｉ','Ｊ','Ｋ','Ｌ','Ｍ','Ｎ','Ｏ','Ｐ','Ｑ','Ｒ','Ｓ','Ｔ','Ｕ','Ｖ','Ｗ','Ｘ','Ｙ','Ｚ','０','１','２','３','４','５','６','７','８','９')
            'Greek'                  => array.from('𝜶','𝜷','𝝇','𝜹','𝜺','𝒇','𝒈','𝝀','𝒊','𝒋','𝜿','𝜾','𝒎','𝜼','𝜽','𝝆','𝝋','𝜸','𝒔','𝝉','𝝁','𝝂','𝝕','𝝌','𝝍','𝒛','𝜟','𝜝','𝑪','𝑫','𝜮','𝑭','𝑮','𝜢','𝜤','𝑱','𝜥','𝑳','𝜴','𝜫','𝜣','𝜬','𝜱','𝜞','𝑺','𝜯','𝑼','𝜵','𝑾','𝜲','𝜳','𝜡','𝟎','𝟏','𝟐','𝟑','𝟒','𝟓','𝟔','𝟕','𝟖','𝟗')
            'Hebrew'                 => array.from('ค','๒','ς','๔','є','Ŧ','ﻮ','ђ','เ','ן','к','ɭ','๓','ภ','๏','ק','ợ','г','ร','Շ','ย','ש','ฬ','א','ץ','չ','ค','๒','ς','๔','є','Ŧ','ﻮ','ђ','เ','ן','к','ɭ','๓','ภ','๏','ק','ợ','г','ร','Շ','ย','ש','ฬ','א','ץ','չ','0','1','2','3','4','5','6','7','8','9')
            'Japanese'               => array.from('卂','乃','匚','ᗪ','乇','千','Ꮆ','卄','丨','ﾌ','Ҝ','ㄥ','爪','几','ㄖ','卩','Ɋ','尺','丂','ㄒ','ㄩ','ᐯ','山','乂','ㄚ','乙','卂','乃','匚','ᗪ','乇','千','Ꮆ','卄','丨','ﾌ','Ҝ','ㄥ','爪','几','ㄖ','卩','Ɋ','尺','丂','ㄒ','ㄩ','ᐯ','山','乂','ㄚ','乙','0','1','2','3','4','5','6','7','8','9')
            'Lefthanded'             => array.from('α','ɓ','૮','∂','ε','ƒ','ɠ','ɦ','เ','ʝ','ҡ','ℓ','ɱ','ɳ','σ','ρ','φ','૨','ร','ƭ','µ','ѵ','ω','א','ყ','ƶ','α','ɓ','૮','∂','ε','ƒ','ɠ','ɦ','เ','ʝ','ҡ','ℓ','ɱ','ɳ','σ','ρ','φ','૨','ร','ƭ','µ','ѵ','ω','א','ყ','ƶ','0','1','2','3','4','5','6','7','8','9')
            'Rounded'                => array.from('ᗩ','ᗷ','ᑕ','ᗪ','E','ᖴ','G','ᕼ','I','ᒍ','K','ᒪ','ᗰ','ᑎ','O','ᑭ','ᑫ','ᖇ','ᔕ','T','ᑌ','ᐯ','ᗯ','᙭','Y','ᘔ','ᗩ','ᗷ','ᑕ','ᗪ','E','ᖴ','G','ᕼ','I','ᒍ','K','ᒪ','ᗰ','ᑎ','O','ᑭ','ᑫ','ᖇ','ᔕ','T','ᑌ','ᐯ','ᗯ','᙭','Y','ᘔ','0','1','2','3','4','5','6','7','8','9')
            'Runes'                  => array.from('𐌀','𐌁','𐌂','𐌃','𐌄','𐌅','Ᏽ','𐋅','𐌉','Ꮦ','𐌊','𐌋','𐌌','𐌍','Ꝋ','𐌓','𐌒','𐌐','𐌔','𐌕','𐌵','ᕓ','Ꮤ','𐋄','𐌙','Ɀ','𐌀','𐌁','𐌂','𐌃','𐌄','𐌅','Ᏽ','𐋅','𐌉','Ꮦ','𐌊','𐌋','𐌌','𐌍','Ꝋ','𐌓','𐌒','𐌐','𐌔','𐌕','𐌵','ᕓ','Ꮤ','𐋄','𐌙','Ɀ','ꝋ','ᛑ','ᘖ','ᙣ','ᔦ','ᔕ','ᑳ','ᒣ','ზ','ᖗ')
            'Sans'                   => array.from('𝖺','𝖻','𝖼','𝖽','𝖾','𝖿','𝗀','𝗁','𝗂','𝗃','𝗄','𝗅','𝗆','𝗇','𝗈','𝗉','𝗊','𝗋','𝗌','𝗍','𝗎','𝗏','𝗐','𝗑','𝗒','𝗓','𝖠','𝖡','𝖢','𝖣','𝖤','𝖥','𝖦','𝖧','𝖨','𝖩','𝖪','𝖫','𝖬','𝖭','𝖮','𝖯','𝖰','𝖱','𝖲','𝖳','𝖴','𝖵','𝖶','𝖷','𝖸','𝖹','𝟢','𝟣','𝟤','𝟥','𝟦','𝟧','𝟨','𝟩','𝟪','𝟫')
            'Sans Bold'              => array.from('𝗮','𝗯','𝗰','𝗱','𝗲','𝗳','𝗴','𝗵','𝗶','𝗷','𝗸','𝗹','𝗺','𝗻','𝗼','𝗽','𝗾','𝗿','𝘀','𝘁','𝘂','𝘃','𝘄','𝘅','𝘆','𝘇','𝗔','𝗕','𝗖','𝗗','𝗘','𝗙','𝗚','𝗛','𝗜','𝗝','𝗞','𝗟','𝗠','𝗡','𝗢','𝗣','𝗤','𝗥','𝗦','𝗧','𝗨','𝗩','𝗪','𝗫','𝗬','𝗭','𝟬','𝟭','𝟮','𝟯','𝟰','𝟱','𝟲','𝟳','𝟴','𝟵')
            'Sans Bold Italic'       => array.from('𝙖','𝙗','𝙘','𝙙','𝙚','𝙛','𝙜','𝙝','𝙞','𝙟','𝙠','𝙡','𝙢','𝙣','𝙤','𝙥','𝙦','𝙧','𝙨','𝙩','𝙪','𝙫','𝙬','𝙭','𝙮','𝙯','𝘼','𝘽','𝘾','𝘿','𝙀','𝙁','𝙂','𝙃','𝙄','𝙅','𝙆','𝙇','𝙈','𝙉','𝙊','𝙋','𝙌','𝙍','𝙎','𝙏','𝙐','𝙑','𝙒','𝙓','𝙔','𝙕','𝟬','𝟭','𝟮','𝟯','𝟰','𝟱','𝟲','𝟳','𝟴','𝟵')
            'Sans Italic'            => array.from('𝘢','𝘣','𝘤','𝘥','𝘦','𝘧','𝘨','𝘩','𝘪','𝘫','𝘬','𝘭','𝘮','𝘯','𝘰','𝘱','𝘲','𝘳','𝘴','𝘵','𝘶','𝘷','𝘸','𝘹','𝘺','𝘻','𝘈','𝘉','𝘊','𝘋','𝘌','𝘍','𝘎','𝘏','𝘐','𝘑','𝘒','𝘓','𝘔','𝘕','𝘖','𝘗','𝘘','𝘙','𝘚','𝘛','𝘜','𝘝','𝘞','𝘟','𝘠','𝘡','𝟢','𝟣','𝟤','𝟥','𝟦','𝟧','𝟨','𝟩','𝟪','𝟫')
            'Sans-Serif'             => array.from('𝚊','𝚋','𝚌','𝚍','𝚎','𝚏','𝚐','𝚑','𝚒','𝚓','𝚔','𝚕','𝚖','𝚗','𝚘','𝚙','𝚚','𝚛','𝚜','𝚝','𝚞','𝚟','𝚠','𝚡','𝚢','𝚣','𝙰','𝙱','𝙲','𝙳','𝙴','𝙵','𝙶','𝙷','𝙸','𝙹','𝙺','𝙻','𝙼','𝙽','𝙾','𝙿','𝚀','𝚁','𝚂','𝚃','𝚄','𝚅','𝚆','𝚇','𝚈','𝚉','𝟶','𝟷','𝟸','𝟹','𝟺','𝟻','𝟼','𝟽','𝟾','𝟿')
            'Sans-Serif Bold'        => array.from('𝐚','𝐛','𝐜','𝐝','𝐞','𝐟','𝐠','𝐡','𝐢','𝐣','𝐤','𝐥','𝐦','𝐧','𝐨','𝐩','𝐪','𝐫','𝐬','𝐭','𝐮','𝐯','𝐰','𝐱','𝐲','𝐳','𝐀','𝐁','𝐂','𝐃','𝐄','𝐅','𝐆','𝐇','𝐈','𝐉','𝐊','𝐋','𝐌','𝐍','𝐎','𝐏','𝐐','𝐑','𝐒','𝐓','𝐔','𝐕','𝐖','𝐗','𝐘','𝐙','𝟎','𝟏','𝟐','𝟑','𝟒','𝟓','𝟔','𝟕','𝟖','𝟗')
            'Sans-Serif Bold Italic' => array.from('𝒂','𝒃','𝒄','𝒅','𝒆','𝒇','𝒈','𝒉','𝒊','𝒋','𝒌','𝒍','𝒎','𝒏','𝒐','𝒑','𝒒','𝒓','𝒔','𝒕','𝒖','𝒗','𝒘','𝒙','𝒚','𝒛','𝑨','𝑩','𝑪','𝑫','𝑬','𝑭','𝑮','𝑯','𝑰','𝑱','𝑲','𝑳','𝑴','𝑵','𝑶','𝑷','𝑸','𝑹','𝑺','𝑻','𝑼','𝑽','𝑾','𝑿','𝒀','𝒁','𝟎','𝟏','𝟐','𝟑','𝟒','𝟓','𝟔','𝟕','𝟖','𝟗')
            'Sans-Serif Italic'      => array.from('𝘢','𝘣','𝘤','𝘥','𝘦','𝘧','𝘨','𝘩','𝘪','𝘫','𝘬','𝘭','𝘮','𝘯','𝘰','𝘱','𝘲','𝘳','𝘴','𝘵','𝘶','𝘷','𝘸','𝘹','𝘺','𝘻','𝘈','𝘉','𝘊','𝘋','𝘌','𝘍','𝘎','𝘏','𝘐','𝘑','𝘒','𝘓','𝘔','𝘕','𝘖','𝘗','𝘘','𝘙','𝘚','𝘛','𝘜','𝘝','𝘞','𝘟','𝘠','𝘡','𝟶','𝟷','𝟸','𝟹','𝟺','𝟻','𝟼','𝟽','𝟾','𝟿')
            'Script'                 => array.from('𝒶','𝒷','𝒸','𝒹','ℯ','𝒻','ℊ','𝒽','𝒾','𝒿','𝓀','𝓁','𝓂','𝓃','ℴ','𝓅','𝓆','𝓇','𝓈','𝓉','𝓊','𝓋','𝓌','𝓍','𝓎','𝓏','𝒜','ℬ','𝒞','𝒟','ℰ','ℱ','𝒢','ℋ','ℐ','𝒥','𝒦','ℒ','ℳ','𝒩','𝒪','𝒫','𝒬','ℛ','𝒮','𝒯','𝒰','𝒱','𝒲','𝒳','𝒴','𝒵','𝟢','𝟣','𝟤','𝟥','𝟦','𝟧','𝟨','𝟩','𝟪','𝟫')
            'Script Bold'            => array.from('𝓪','𝓫','𝓬','𝓭','𝓮','𝓯','𝓰','𝓱','𝓲','𝓳','𝓴','𝓵','𝓶','𝓷','𝓸','𝓹','𝓺','𝓻','𝓼','𝓽','𝓾','𝓿','𝔀','𝔁','𝔂','𝔃','𝓐','𝓑','𝓒','𝓓','𝓔','𝓕','𝓖','𝓗','𝓘','𝓙','𝓚','𝓛','𝓜','𝓝','𝓞','𝓟','𝓠','𝓡','𝓢','𝓣','𝓤','𝓥','𝓦','𝓧','𝓨','𝓩','𝟎','𝟏','𝟐','𝟑','𝟒','𝟓','𝟔','𝟕','𝟖','𝟗')
            'Script Italic'          => array.from('𝒶','𝒷','𝒸','𝒹','𝑒','𝒻','𝑔','𝒽','𝒾','𝒿','𝓀','𝓁','𝓂','𝓃','𝑜','𝓅','𝓆','𝓇','𝓈','𝓉','𝓊','𝓋','𝓌','𝓍','𝓎','𝓏','𝒜','𝐵','𝒞','𝒟','𝐸','𝐹','𝒢','𝐻','𝐼','𝒥','𝒦','𝐿','𝑀','𝒩','𝒪','𝒫','𝒬','𝑅','𝒮','𝒯','𝒰','𝒱','𝒲','𝒳','𝒴','𝒵','𝟎','𝟏','𝟐','𝟑','𝟒','𝟓','𝟔','𝟕','𝟖','𝟗')
            'Slim'                   => array.from('ᗩ','ᗷ','ᑢ','ᕲ','ᘿ','ᖴ','ᘜ','ᕼ','ᓰ','ᒚ','k','ᒪ','ᘻ','ᘉ','ᓍ','ᕵ','ᕴ','ᖇ','S','ᖶ','ᑘ','ᐺ','ᘺ','᙭','ᖻ','ᗱ','ᗩ','ᗷ','ᑢ','ᕲ','ᘿ','ᖴ','ᘜ','ᕼ','ᓰ','ᒚ','K','ᒪ','ᘻ','ᘉ','ᓍ','ᕵ','ᕴ','ᖇ','S','ᖶ','ᑘ','ᐺ','ᘺ','᙭','ᖻ','ᗱ','0','1','2','3','4','5','6','7','8','9')
            'Subscript'              => array.from('ₐ','b','c','d','ₑ','f','g','ₕ','ᵢ','ⱼ','ₖ','ₗ','ₘ','ₙ','ₒ','ₚ','q','ᵣ','ₛ','ₜ','ᵤ','ᵥ','w','ₓ','y','z','ₐ','B','C','D','ₑ','F','G','ₕ','ᵢ','ⱼ','ₖ','ₗ','ₘ','ₙ','ₒ','ₚ','Q','ᵣ','ₛ','ₜ','ᵤ','ᵥ','W','ₓ','Y','Z','₀','₁','₂','₃','₄','₅','₆','₇','₈','₉')
            'Superscript'            => array.from('ᵃ','ᵇ','ᶜ','ᵈ','ᵉ','ᶠ','ᵍ','ʰ','ⁱ','ʲ','ᵏ','ˡ','ᵐ','ⁿ','ᵒ','ᵖ','q','ʳ','ˢ','ᵗ','ᵘ','ᵛ','ʷ','ˣ','ʸ','ᶻ','ᴬ','ᴮ','ᶜ','ᴰ','ᴱ','ᶠ','ᴳ','ᴴ','ᴵ','ᴶ','ᴷ','ᴸ','ᴹ','ᴺ','ᴼ','ᴾ','Q','ᴿ','ˢ','ᵀ','ᵁ','ⱽ','ᵂ','ˣ','ʸ','ᶻ','⁰','¹','²','³','⁴','⁵','⁶','⁷','⁸','⁹')
            'Monospace'              => array.from('𝚊','𝚋','𝚌','𝚍','𝚎','𝚏','𝚐','𝚑','𝚒','𝚓','𝚔','𝚕','𝚖','𝚗','𝚘','𝚙','𝚚','𝚛','𝚜','𝚝','𝚞','𝚟','𝚠','𝚡','𝚢','𝚣','𝙰','𝙱','𝙲','𝙳','𝙴','𝙵','𝙶','𝙷','𝙸','𝙹','𝙺','𝙻','𝙼','𝙽','𝙾','𝙿','𝚀','𝚁','𝚂','𝚃','𝚄','𝚅','𝚆','𝚇','𝚈','𝚉','𝟶','𝟷','𝟸','𝟹','𝟺','𝟻','𝟼','𝟽','𝟾','𝟿')
            'Under Seagull'          => array.from('𝖺̼','𝖻̼','𝖼̼','𝖽̼','𝖾̼','𝖿̼','𝗀̼','𝗁̼','𝗂̼','𝗃̼','𝗄̼','𝗅̼','𝗆̼','𝗇̼','𝗈̼','𝗉̼','𝗊̼','𝗋̼','𝗌̼','𝗍̼','𝗎̼','𝗏̼','𝗐̼','𝗑̼','𝗒̼','𝗓̼','𝖠̼','𝖡̼','𝖢̼','𝖣̼','𝖤̼','𝖥̼','𝖦̼','𝖧̼','𝖨̼','𝖩̼','𝖪̼','𝖫̼','𝖬̼','𝖭̼','𝖮̼','𝖯̼','𝖰̼','𝖱̼','𝖲̼','𝖳̼','𝖴̼','𝖵̼','𝖶̼','𝖷̼','𝖸̼','𝖹̼','𝟢̼','𝟣̼','𝟤̼','𝟥̼','𝟦̼','𝟧̼','𝟨̼','𝟩̼','𝟪̼','𝟫̼')
            'Under Asterisk'         => array.from('𝖺͙','𝖻͙','𝖼͙','𝖽͙','𝖾͙','𝖿͙','𝗀͙','𝗁͙','𝗂͙','𝗃͙','𝗄͙','𝗅͙','𝗆͙','𝗇͙','𝗈͙','𝗉͙','𝗊͙','𝗋͙','𝗌͙','𝗍͙','𝗎͙','𝗏͙','𝗐͙','𝗑͙','𝗒͙','𝗓͙','𝖠͙','𝖡͙','𝖢͙','𝖣͙','𝖤͙','𝖥͙','𝖦͙','𝖧͙','𝖨͙','𝖩͙','𝖪͙','𝖫͙','𝖬͙','𝖭͙','𝖮͙','𝖯͙','𝖰͙','𝖱͙','𝖲͙','𝖳͙','𝖴͙','𝖵͙','𝖶͙','𝖷͙','𝖸͙','𝖹͙','𝟢͙','𝟣͙','𝟤͙','𝟥͙','𝟦͙','𝟧͙','𝟨͙','𝟩͙','𝟪͙','𝟫͙')
            'Unicode ID'             => array.from('97','98','99','100','101','102','103','104','105','106','107','108','109','110','111','112','113','114','115','116','117','118','119','120','121','122','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90','48','49','50','51','52','53','54','55','56','57')
            'Upside Latin'           => array.from('ɐ','q','ɔ','p','ǝ','ɟ','ƃ','ɥ','ı','ɾ','ʞ','ן ','ɯ','u','o','d','b','ɹ','s','ʇ','n','ʌ','ʍ','x','ʎ','z','∀','ᗺ','Ɔ','ᗡ','Ǝ','Ⅎ','⅁','H','I','ſ','ꓘ','˥','W','N','O','ტ','Ԁ','ᴚ','S','⊥','∩','Λ','X','M','⅄','Z','𝟢','⇂','ᄅ','Ɛ','Ⴙ','Ｓ','9','Լ','8','6')
            'Wiggly'                 => array.from('ค','๖','¢','໓','ē','f','ງ','h','i','ว','k','l','๓','ຖ','໐','p','๑','r','Ş','t','น','ง','ຟ','x','ฯ','ຊ','ค','๖','¢','໓','ē','f','ງ','h','i','ว','k','l','๓','ຖ','໐','p','๑','r','Ş','t','น','ง','ຟ','x','ฯ','ຊ','0','1','2','3','4','5','6','7','8','9')
            => Pine

        for i = 0 to Pine.size() -1
            mp.put(Pine.get(i), aFont.get(i))
        fill := false // stops repeating unnecessary mapping.
    word = ''
    arrText = str.split(fromText, '')
    for w in arrText
        word += mp.contains(w) ? mp.get(w) : w
        if font == "Diamonds"
            word += '   '
        if font == "Unicode ID"
            word += '|'
    if font == "Upside Latin"
        arrText := str.split(word, '')
        arrText .  reverse()
        word    := arrText.join('')
    word


_                                                                                                                                                                                                                                                                                                                                                                        ='
               ⒸⒶⓈⒺⓈ
               --------
                                                                                                                                                                                                                                                                                                                                                                         '

//@enum Contains fields with cases for formatting text.
//@field snake  -> snake_case
//@field SNAKE  -> UPPER SNAKE_CASE
//@field kebab  -> kebab-case
//@field camel  -> camelCase
//@field pascal -> PascalCase
export enum Ecase
    snake  = 'snake_case'
    SNAKE  = 'SNAKE_CASE'
    kebab  = 'kebab-case'
    camel  = 'camelCase'
    pascal = 'PascalCase'


// @function  toCase   : formats text to snake_case, UPPER SNAKE_CASE, kebab-case, camelCase or PascalCase
// @param    `fromText`: initial text
// @param    `case`    : desired case (snake_case, UPPER SNAKE_CASE, kebab-case, camelCase or PascalCase)
// @returns  `fromText` formatted to desired `case`
export method toCase(string fromText, string case) =>
    output = fromText
    if str.length(fromText) > 0
        output := switch case
            'snake_case' => str.lower(str.replace_all(fromText, ' ', '_')) //all lowercase + change spaces to "_"
            'SNAKE_CASE' => str.upper(str.replace_all(fromText, ' ', '_')) //all UPPERcase + change spaces to "_"
            'kebab-case' => str.lower(str.replace_all(fromText, ' ', '-')) //all lowercase + change spaces to "-"
            'camelCase'  =>
                split    =  str.split(fromText, ' ')
                sz = split.size()
                //first word -> in lowercase
                w = str.lower(split.first())
                if sz > 1
                    for i = 1 to sz -1
                        str = split.get(i)
                        //first letter in UPPERcase
                        w += str.upper(str.substring(str, 0, 1))
                        //the rest in lowercase
                        if str.length(str) > 0
                            w += str.lower(str.substring(str, 1))
                w
            'PascalCase' =>
                split = str.split(fromText, ' ')
                sz = split.size()
                w = ''
                if sz > 0
                    for i = 0 to sz -1
                        str = split.get(i)
                        //first letter in UPPERcase
                        w += str.upper(str.substring(str, 0, 1))
                        //the rest in lowercase
                        if str.length(str) > 0
                            w += str.lower(str.substring(str, 1))
                w
            => fromText


_                                                                                                                                                                                                                                                                                                                                                                        ='
               Sort
               ----
                                                                                                                                                                                                                                                                                                                                                                         '

// strings are sorted based on Unicode Decimal numbers
// https://en.wikipedia.org/wiki/List_of_Unicode_characters
// 1    49
// A    65
// S    83
// _    95
// b    98
// o    111
// p    112
// s    115


// @function  sort     : sorts an array of strings, ascending/descending and by Unicode Decimal numbers or not.
// @param    `strings` : array of strings to be sorted
// @param    `order`   : ascending/descending
// @param    `sortByUnicodeDecimalNumbers` : true/false; default = false
// @returns   Sorted array of strings
export method sort(array<string>strings, string order = "asc", bool sortByUnicodeDecimalNumbers = false) =>
    output = array.new<string>()
    if sortByUnicodeDecimalNumbers
        strings.sort(order == 'asc' ? order.ascending : order.descending)
        output := strings
        output
    else
        //join `strings` -> make lower -> split to array -> sort.indices()
        indices = str.split(str.lower(strings.join('|')), '|').sort_indices()
        for i = 0 to strings.size()-1
            output.push(strings.get(indices.get(i)))
        if order != 'asc'
            output.reverse()
        output


_                                                                                                                                                                                                                                                                                                                                                                        ='
               Examples
               --------
                                                                                                                                                                                                                                                                                                                                                                         '

// Examples:
words = array.from("Aword", "beyond", "Space", "salt", "pepper", "swing", "someThing", "otherThing", "12345", "_firstWord")
txt   = input.string("Test test 123")
font  = input.enum(Efont.Double_Struck)
size  = input.int(33)

// library usage:
//import fikira/Text/1 as t
//
// var table tab = table.new(position.top_center, 1, 50, color(na))
// if barstate.islast
//     tab.cell(0, 0, t.toFont("This text is written in 'Blocks' font", "Blocks"), text_size=size, text_color=chart.fg_color)
//     tab.cell(0, 1, t.toFont("This text is written in 'Fraktur' font", "Fraktur"), text_size=size, text_color=chart.fg_color)
//     tab.cell(0, 2, t.toFont(str.format("This text is written in {0}{1}{2} font", "'", str.tostring(font), "'"), str.tostring(font)), text_size=size, text_color=chart.fg_color) //Double-Struck

var table tab = table.new(position.top_center, 1, 50, color(na), force_overlay=true)
if barstate.islast
    tab.cell(0, 0, toFont("This text is written in 'Blocks' font"                                           , "Blocks"          ), text_size=size, text_color=#ff9800)
    tab.cell(0, 1, toFont("This text is written in 'Fraktur' font"                                          , "Fraktur"         ), text_size=size, text_color=#2196f3)
    tab.cell(0, 2, toFont("This text is written in 'Runes' font"                                            , "Runes"           ), text_size=size, text_color=chart.fg_color)
    tab.cell(0, 3, toFont("This text is written in 'Script Bold' font"                                      , "Script Bold"     ), text_size=size, text_color=#e040fb)
    tab.cell(0, 4, toFont("This text is written in 'Wiggly' font"                                           , "Wiggly"          ), text_size=size, text_color=#4caf50)
    tab.cell(0, 5, toFont(str.format("This text is written in {0}{1}{2} font", "'", str.tostring(font), "'"), str.tostring(font)), text_size=size, text_color=chart.fg_color) //Double-Struck
    tab.cell(0, 6, toCase("This text is written in 'snake_case'"                                            , "snake_case"      ), text_size=size, text_color=#1ec0bd)
    tab.cell(0, 7, toCase("This text is written in "                                                        , "camelCase"       ) + "'camelCase'", text_size=size, text_color=#1ec0bd)
    tab.cell(0, 8, "Text array, sorted by Unicode Decimal Numbers -> " + str.tostring(words.sort('asc', true ))                  , text_size=size, text_color=#ffeb3b)
    tab.cell(0, 9, "Text array, sorted by alphabetical order -> "      + str.tostring(words.sort('asc', false))                  , text_size=size, text_color=#ffeb3b)

    txt := toCase(txt, "camelCase" )
    tab.cell(0,10, toFont(txt                                                                            , "Upside Latin"       ), text_size=size, text_color=#ff5252)
    tab.cell(0,11, toFont("klm" , "Superscript") + "/"
                 + toFont("klm ", "Subscript"  )
                 + toFont(" 123", "Subscript"  ) + "\\"
                 + toFont("123" , "Superscript")                                                                                 , text_size=size, text_color=#83ee31)