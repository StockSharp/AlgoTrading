//@version=5

strategy("Fourier Smoothed Hybrid Volume Spread Analysis","FSHVSA Strategy [Algo Alert]", default_qty_type = "percent_of_equity",  default_qty_value=100)
import Celje_2300/aprox/1

aproximation = input.bool(title = 'Double Fourier', tooltip="Improved Fourier Transform of Open&Close" ,defval = true, group = "Source")
smoothed_volume = input.bool(title = 'Smoothed Volume', tooltip="Vomume is dynamically EMA smoothed over last X days." ,defval = true, group = "Source")

maxEmaLength=input.int(12,title = 'Smoothed Volume Length', tooltip="Smooth Volume over last X days." , group = "Source")
v= smoothed_volume ? volume/aprox.smooth(aprox.FFT(volume),src = volume[1], maxEmaLength = maxEmaLength) : volume/ volume[1]

lenth=input.int(10,title = 'Volume*Source Smoothing', tooltip="Ema of Source*Volume of last X days." , group = "Calculations")
malenth=input.int(20,title = 'Smoothed Volume Length', tooltip="Ema of Close*Volume - Open*Volume of last X days." , group = "Calculations")



src = aproximation ? (aprox.DTF32(close)) : close
mac = ta.ema(src,lenth) //mac = aprox.smooth(volume,src = src,minEmaLength = lenth, maxEmaLength2 = 12) //maxEmaLength2 = input(12)
vmac=mac*v


src_0 =  aproximation ? (aprox.DTF32(open)) : open
mao = ta.ema(src_0,lenth) //mao = aprox.smooth(volume,src = src_0,minEmaLength = lenth, maxEmaLength2 = 12)//maxEmaLength2 = input(12)
vmao=mao*v


vd=vmac-vmao
plot(vd, color = vd<0?color.red:color.green, style = plot.style_columns)


vdma= ta.ema(vd,malenth)
plot(vdma, color=color.rgb(0, 0, 0, 52), linewidth=2, style = plot.style_area)
plot(vdma, color=vdma>0?color.rgb(23, 235, 4, 81):color.rgb(133, 4, 4, 75), linewidth=2, style = plot.style_area)
hline(0)


close_all = input.bool(false,"Enable Close all", tooltip=" Position is always 1 or -1 if false, and 1, 0 or -1 if true. 0 Is falling above 0 or rising bellow 0")
longCondition= vdma > 0  and vd > 0
shortCondition = vdma < 0  and vd <0

var pos = 0
var long = 0

if longCondition
    pos := 1
    long := 1
    strategy.entry("enter long", strategy.long)

if shortCondition
    pos := -1
    long := -1
    strategy.entry("enter short", strategy.short)


if not longCondition and not shortCondition and close_all
    pos := 0
    strategy.close_all()

plotchar(longCondition and long[1]==-1 ? -math.max(vd[1],vd[2],vd[3],vd[4],vd[5],vd[6],vd[7],vd[8],vd[9],vd[10],vd[11],vd[12],vd[13],vd[14],vd[15],vd[16],vd[17],vd[18],vd[19],mac/100) : na, char = "▲", color = color.rgb(0, 255, 187,40), location = location.absolute, size = size.tiny, display=display.pane)
plotchar(shortCondition  and long[1]==1 ? -math.min(vd[1],vd[2],vd[3],vd[4],vd[5],vd[6],vd[7],vd[8],vd[9],vd[10],vd[11],vd[12],vd[13],vd[14],vd[15],vd[16],vd[17],vd[18],vd[19],-mac/100)  : na, char = "▼", color = color.rgb(255, 17, 0, 40), location = location.absolute, size = size.tiny, display=display.pane)

plot(close, title="ClosePrice", display=display.status_line)
plot(open, title="OpenPrice", display=display.status_line)
plot(pos, color = longCondition ? color.rgb(9, 232, 173, 50) : shortCondition ? color.rgb(255, 17, 0, 50) : color.rgb(100, 100, 100), title="position", display=display.status_line)