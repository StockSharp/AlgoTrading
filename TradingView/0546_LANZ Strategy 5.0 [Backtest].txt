//@version=6
strategy(title="LANZ Strategy 5.0 [Backtest]", overlay=true, default_qty_type=strategy.percent_of_equity, default_qty_value=100, pyramiding=1000)

// === INPUTS ===
groupLimitaciones = "🚩 Daily Trade Limit"
maxTrades = input.int(99, "Maximum Trades per Day", minval=1, maxval=99, group=groupLimitaciones,
     tooltip="Use 99 if you want to take ALL available trades in the day.")

groupFilter = "🔍 Distance Filter"
minDistancePips = input.float(25.0, title="Minimum Distance Between Entries (Pips)", minval=0.1, group=groupFilter)

groupEMA = "📈 Exponential Moving Average (EMA)"
emaPeriod = input.int(200, title="EMA Period", minval=1, group=groupEMA)

groupRisk = "🎯 Risk Parameters"
slPips = input.float(40, title="Stop Loss (Pips)", minval=0.1, group=groupRisk)
tpPips = input.float(120, title="Take Profit (Pips)", minval=0.1, group=groupRisk)

groupClose = "🔚 Operational Time (NY)"
startHour = input.int(19, title="Start Hour", minval=0, maxval=23, group=groupClose)
startMinute = input.int(0, title="Start Minute", minval=0, maxval=59, group=groupClose)
manualCloseHour = input.int(15, title="End Hour", minval=0, maxval=23, group=groupClose)
manualCloseMinute = input.int(0, title="End Minute", minval=0, maxval=59, group=groupClose)

groupMode = "⚙️ Operation Mode"
enableBuy = input.bool(true, "✅ Enable Buy Signals", group=groupMode)
enableSell = input.bool(false, "✅ Enable Sell Signals", group=groupMode)

// === CALCULATIONS ===
pipSize = syminfo.mintick * 10
ema = ta.ema(close, emaPeriod)

// === TRACK LAST ENTRY ===
var float lastEntryPrice = na
distanceOk = na(lastEntryPrice) or math.abs(close - lastEntryPrice) >= (minDistancePips * pipSize)

// === DAILY OPERATIONS ACCOUNTANT ===
var int dailyCounter = 0
var int lastDayTimestamp = na
todayNY = timestamp("America/New_York", year, month, dayofmonth, 0, 0)

if na(lastDayTimestamp) or todayNY != lastDayTimestamp
    dailyCounter := 0
    lastDayTimestamp := todayNY

// === OPERATING HOURS ===
nyHour = hour(time, "America/New_York")
nyMinute = minute(time, "America/New_York")

isSameDayRange = manualCloseHour > startHour or (manualCloseHour == startHour and manualCloseMinute > startMinute)

isWithinOperationalHours = isSameDayRange ? (nyHour > startHour or (nyHour == startHour and nyMinute >= startMinute)) and (nyHour < manualCloseHour or (nyHour == manualCloseHour and nyMinute <= manualCloseMinute)) : (nyHour > startHour or (nyHour == startHour and nyMinute >= startMinute)) or (nyHour < manualCloseHour or (nyHour == manualCloseHour and nyMinute <= manualCloseMinute))

// === BUY/SELL SIGNAL ===
isAboveEMA = close > ema
isBelowEMA = close < ema
bullish1 = close > open
bullish2 = close[1] > open[1]
bullish3 = close[2] > open[2]
bearish1 = close < open
bearish2 = close[1] < open[1]
bearish3 = close[2] < open[2]

buySignal = enableBuy and isAboveEMA and bullish1 and bullish2 and bullish3
sellSignal = enableSell and isBelowEMA and bearish1 and bearish2 and bearish3

// === FILTER: Trading Limit and Operating Hours + Distance ===
canOpen = dailyCounter < maxTrades and isWithinOperationalHours and distanceOk

// === RUN MULTIPLE ENTRIES ===
if buySignal and canOpen
    float entry = close
    float sl = entry - slPips * pipSize
    float tp = entry + tpPips * pipSize
    string id = "Buy_" + str.tostring(bar_index) + "_" + str.tostring(timenow)
    strategy.order(id, strategy.long, qty=1)
    strategy.exit("Exit_" + id, from_entry=id, stop=sl, limit=tp)
    dailyCounter += 1
    lastEntryPrice := entry

if sellSignal and canOpen
    float entry = close
    float sl = entry + slPips * pipSize
    float tp = entry - tpPips * pipSize
    string id = "Sell_" + str.tostring(bar_index) + "_" + str.tostring(timenow)
    strategy.order(id, strategy.short, qty=1)
    strategy.exit("Exit_" + id, from_entry=id, stop=sl, limit=tp)
    dailyCounter += 1
    lastEntryPrice := entry

// === CONFIGURABLE MANUAL CLOSURE NY TIME ===
isCloseTime = (nyHour == manualCloseHour and nyMinute == manualCloseMinute)
if isCloseTime
    strategy.close_all(comment="Manual Close" + str.tostring(manualCloseHour) + ":" + str.tostring(manualCloseMinute, "00"))
    lastEntryPrice := na  // Reset filter after manual close

// === RESET FILTER AFTER SL or TP ===
tradeClosed = strategy.opentrades[1] > 0 and strategy.opentrades == 0
if tradeClosed
    lastEntryPrice := na

// === PLOT SIGNALS ===
plotshape(buySignal and canOpen, title="Backtest Buy Signal", location=location.bottom, color=color.rgb(255, 129, 129), style=shape.triangleup, size=size.tiny)