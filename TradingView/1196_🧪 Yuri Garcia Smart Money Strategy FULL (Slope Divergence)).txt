//@version=6
strategy("🧪 Yuri Garcia Smart Money Strategy FULL (Slope Divergence))", overlay=true,
  default_qty_type=strategy.percent_of_equity, default_qty_value=2)

// === 🗂️ DESCRIPTION ===
// 📈 Yuri Garcia’s Smart Money Strategy FULL combines:
// 🔹 Volume Cluster Zones (automated strong buyer/seller areas)
// 🔹 HTF (4H) Zones for institutional support/resistance
// 🔹 Wick Pullback Filter: ensures price reacts and confirms the zone
// 🔹 Order Flow CVD Confirmation: detects who’s stronger, buyers or sellers
// 🔹 Slope-Based CVD Divergence: checks for hidden reversals when price & CVD disagree
// 🔹 Dynamic ATR-based Stop Loss & Take Profit: adapts to real volatility
//
// 📊 Each trade must align:
// ✅ Price inside a Volume Cluster Zone
// ✅ Within a strong HTF Zone (4H trend context)
// ✅ Wick pullback confirms smart money push/pull
// ✅ CVD confirms strength
// ✅ Optional: Slope Divergence confirms hidden reversal (toggle on/off)
//
// 🏆 Ideal for day trading BTC, Gold, Indices, or Forex on multiple timeframes.
// 🎯 Risk:Reward adaptive, calculated automatically.
// 🔔 Alerts are included for each entry condition.// === INPUTS ===
atrLen      = input.int(14, "ATR Length")
atrMult     = input.float(2.0, "Stop Mult (xATR)")
rrr         = input.float(2.0, "RRR")
volLookback = input.int(50, "Volume Zone Lookback")
zoneBuff    = input.float(0.002, "Zone Buffer (%)")
tradeDirection = input.string("Both", title="Trade Direction", options=["Both", "Buy Only", "Sell Only"])

// === LOGIC FLAGS ===
canBuy  = tradeDirection == "Both" or tradeDirection == "Buy Only"
canSell = tradeDirection == "Both" or tradeDirection == "Sell Only"

atr = ta.atr(atrLen)

// === HTF ZONE (4H)
htfHigh = request.security(syminfo.tickerid, "240", ta.highest(high, 20))
htfLow  = request.security(syminfo.tickerid, "240", ta.lowest(low, 20))
htfTop  = htfHigh * 1.002
htfBot  = htfLow * 0.998
plot(htfTop, title="HTF Top", color=color.fuchsia, linewidth=1)
plot(htfBot, title="HTF Bot", color=color.fuchsia, linewidth=1)
fill(plot(htfTop), plot(htfBot), color=color.new(color.fuchsia, 85), title="HTF Fill")
inHTFZone = close <= htfTop and close >= htfBot
plotshape(inHTFZone, title="In HTF Zone", location=location.top, style=shape.xcross, color=color.blue, size=size.tiny)

// === CUMULATIVE DELTA
upVol = close > open ? volume : 0
downVol = close < open ? volume : 0
delta = upVol - downVol
var float cumDelta = na
cumDelta := nz(cumDelta[1]) + delta
plot(cumDelta, title="Cumulative Delta", color=color.blue)

deltaConfShort = cumDelta < cumDelta[1]
deltaConfLong  = cumDelta > cumDelta[1]
plotshape(deltaConfShort or deltaConfLong, location=location.belowbar, color=color.red, style=shape.square, size=size.tiny, title="Delta Confirm")

// === VOLUME ZONES
var float[] vols = array.new_float()
var float[] mids = array.new_float()
var float[] zoneTops = array.new_float()
var float[] zoneBots = array.new_float()

if bar_index > volLookback
    array.clear(vols)
    array.clear(mids)
    for i = 0 to volLookback - 1
        array.push(vols, volume[i])
        array.push(mids, (high[i] + low[i]) / 2)
    sorted = array.copy(vols)
    array.sort(sorted, order.descending)
    array.clear(zoneTops)
    array.clear(zoneBots)
    for j = 0 to 2
        v = array.get(sorted, j)
        idx = array.indexof(vols, v)
        mid = array.get(mids, idx)
        array.push(zoneTops, mid * (1 + zoneBuff))
        array.push(zoneBots, mid * (1 - zoneBuff))

// === PLOT ZONES
zone1Top = array.size(zoneTops) > 0 ? array.get(zoneTops, 0) : na
zone1Bot = array.size(zoneBots) > 0 ? array.get(zoneBots, 0) : na
zone2Top = array.size(zoneTops) > 1 ? array.get(zoneTops, 1) : na
zone2Bot = array.size(zoneBots) > 1 ? array.get(zoneBots, 1) : na
zone3Top = array.size(zoneTops) > 2 ? array.get(zoneTops, 2) : na
zone3Bot = array.size(zoneBots) > 2 ? array.get(zoneBots, 2) : na

p1T = plot(zone1Top, title="Zone Top 1", color=color.new(color.orange, 90))
p1B = plot(zone1Bot, title="Zone Bot 1", color=color.new(color.orange, 90))
fill(p1T, p1B, color=color.new(color.orange, 85))

p2T = plot(zone2Top, title="Zone Top 2", color=color.new(color.orange, 90))
p2B = plot(zone2Bot, title="Zone Bot 2", color=color.new(color.orange, 90))
fill(p2T, p2B, color=color.new(color.orange, 85))

p3T = plot(zone3Top, title="Zone Top 3", color=color.new(color.orange, 90))
p3B = plot(zone3Bot, title="Zone Bot 3", color=color.new(color.orange, 90))
fill(p3T, p3B, color=color.new(color.orange, 85))

inZoneShort = (high <= zone1Top and high >= zone1Bot) or (high <= zone2Top and high >= zone2Bot) or (high <= zone3Top and high >= zone3Bot)
inZoneLong  = (low >= zone1Bot and low <= zone1Top) or (low >= zone2Bot and low <= zone2Top) or (low >= zone3Bot and low <= zone3Top)
plotshape(inZoneShort or inZoneLong, location=location.top, color=color.yellow, style=shape.xcross, size=size.tiny, title="In Volume Zone")

// === WICK PULLBACK (FIXED)
isBull = close > open
isBear = close < open
body = math.abs(close - open)
pullShort = isBear and isBull[1] and high >= close + body / 2
pullLong  = isBull and isBear[1] and low <= open - body / 2
plotshape(pullShort or pullLong, location=location.bottom, color=color.orange, style=shape.circle, size=size.tiny, title="Wick Pullback")

// === FINAL ENTRY CONDITIONS
condShort = inZoneShort and pullShort and deltaConfShort and inHTFZone
condLong  = inZoneLong and pullLong and deltaConfLong and inHTFZone

if condShort and canSell
    strategy.entry("SHORT", strategy.short)
    strategy.exit("TP/SL SHORT", from_entry="SHORT", stop=close + atr * atrMult, limit=close - atr * atrMult * rrr)

if condLong and canBuy
    strategy.entry("LONG", strategy.long)
    strategy.exit("TP/SL LONG", from_entry="LONG", stop=close - atr * atrMult, limit=close + atr * atrMult * rrr)

// === ENTRY MARKERS
plotshape(condShort and canSell, title="Short Entry", location=location.abovebar, color=color.red, style=shape.triangledown, size=size.tiny)
plotshape(condLong and canBuy,  title="Long Entry",  location=location.belowbar, color=color.green, style=shape.triangleup,   size=size.tiny)

// === JSON TEMPLATE WEBHOOK ALERTS ===
webhookLongMessage  = '{ "event": "BUY", "symbol": "{{ticker}}", "entry": "{{close}}", "tp": "{{close|plus:%.2f}}", "sl": "{{close|min:%.2f}}", "rrr": "2.0" }'
webhookShortMessage = '{ "event": "SELL", "symbol": "{{ticker}}", "entry": "{{close}}", "tp": "{{close|min:%.2f}}", "sl": "{{close|plus:%.2f}}", "rrr": "2.0" }'

// === ALERT CONDITIONS
alertcondition(condLong and canBuy, title="Webhook – Long Entry", message=webhookLongMessage)
alertcondition(condShort and canSell, title="Webhook – Short Entry", message=webhookShortMessage)

// === ALERT STRINGS
longMessage  = "🟢 BUY {{ticker}} @ {{close}} | SL: {{close - (atr * atrMult)}} | TP: {{close + (atr * atrMult * rrr)}}"
shortMessage = "🔴 SELL {{ticker}} @ {{close}} | SL: {{close + (atr * atrMult)}} | TP: {{close - (atr * atrMult * rrr)}}"

// === ALERT CONDITIONS
alertcondition(condLong and canBuy, title="Long Entry Alert", message=longMessage)
alertcondition(condShort and canSell, title="Short Entry Alert", message=shortMessage)