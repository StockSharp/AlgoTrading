//@version=6
strategy("LANZ Strategy 2.0 [Backtest]", overlay=true, default_qty_type=strategy.cash, default_qty_value=100)

// === INPUTS ===
accountSizeUSD   = input.int(100000000, title="Account Size (USD)", minval=1)
riskPercent      = input.float(1.0, title="Risk (%)", minval=0.1, maxval=100)
slProtectionMode = input.string(title="SL Protection Mode", defval="Full Coverage", options=["First Swing", "Second Swing", "Full Coverage"])
fullCoveragePips = input.int(12, title="Full Coverage Pips", minval=1)
minBosBreakPips  = input.float(0.5, title="Minimum Break of Structure (Pips)", minval=0.1, step=0.1)
rrMultiplier     = input.float(5.5, title="TP Risk Reward (RR)", minval=0.5, step=0.1)

// === GLOBAL ===
pipSize = syminfo.mintick * 10
minBosBreakDist = minBosBreakPips * pipSize

// === STRUCTURE & TREND ===
var float prevHigh = na
var float prevLow = na
var float lastSwingHigh = na
var float lastSwingLow = na
var float olderSwingHigh = na
var float olderSwingLow = na
var int trendDir = na

hh = high[2] > high[3] and high[3] > high[4]
ll = low[2] < low[3] and low[3] < low[4]

if hh
    olderSwingHigh := prevHigh
    prevHigh := lastSwingHigh
    lastSwingHigh := high[2]
if ll
    olderSwingLow := prevLow
    prevLow := lastSwingLow
    lastSwingLow := low[2]

if not na(prevHigh) and not na(lastSwingHigh) and not na(prevLow) and not na(lastSwingLow)
    isBullish = lastSwingHigh > prevHigh and lastSwingLow > prevLow
    isBearish = lastSwingHigh < prevHigh and lastSwingLow < prevLow
    trendDir := isBullish ? 1 : isBearish ? -1 : trendDir

// === BREAK OF STRUCTURE ===
var float bosLevel = na
var int bosDir = na

newBosUp   = not na(lastSwingHigh) and close > (lastSwingHigh + minBosBreakDist)
newBosDown = not na(lastSwingLow)  and close < (lastSwingLow - minBosBreakDist)

if newBosUp
    bosLevel := lastSwingHigh
    bosDir := 1
else if newBosDown
    bosLevel := lastSwingLow
    bosDir := -1

// === BOS AND TREND RECORD ===
var int lastBosDir = na
var int lastTrendDir = na

if not na(bosDir)
    lastBosDir := bosDir
if not na(trendDir)
    lastTrendDir := trendDir

// === NY TIME FILTER ===
isAnalysisBar = (hour(time, "America/New_York") == 2 and minute(time, "America/New_York") == 0)

// === ENTRY LOGIC ===
enterLong   = isAnalysisBar and lastBosDir == 1 and lastTrendDir == 1
enterShort  = isAnalysisBar and lastBosDir == -1 and lastTrendDir == -1
enterFallbackLong  = isAnalysisBar and lastBosDir == 1 and lastTrendDir != 1
enterFallbackShort = isAnalysisBar and lastBosDir == -1 and lastTrendDir != -1

// === PRICE & SL/TP ===
entryPrice = close
fallbackSL_Long  = entryPrice - (5 * pipSize)
fallbackSL_Short = entryPrice + (5 * pipSize)

slBase_Long = switch slProtectionMode
    "First Swing"    => na(lastSwingLow)  ? fallbackSL_Long  : lastSwingLow
    "Second Swing"   => na(prevLow)       ? fallbackSL_Long  : prevLow
    "Full Coverage"  => (na(olderSwingLow) or na(prevLow) or na(lastSwingLow)) ? fallbackSL_Long : math.min(olderSwingLow, prevLow, lastSwingLow) - (fullCoveragePips * pipSize)

slBase_Short = switch slProtectionMode
    "First Swing"    => na(lastSwingHigh) ? fallbackSL_Short : lastSwingHigh
    "Second Swing"   => na(prevHigh)      ? fallbackSL_Short : prevHigh
    "Full Coverage"  => (na(olderSwingHigh) or na(prevHigh) or na(lastSwingHigh)) ? fallbackSL_Short : math.max(olderSwingHigh, prevHigh, lastSwingHigh) + (fullCoveragePips * pipSize)

slPrice_Long  = (entryPrice - slBase_Long)  < (10 * pipSize) ? entryPrice - (10 * pipSize) : slBase_Long
slPrice_Short = (slBase_Short - entryPrice) < (10 * pipSize) ? entryPrice + (10 * pipSize) : slBase_Short

// === TP BASED ON RR MULTIPLIER ===
tpPrice_Long  = entryPrice + rrMultiplier * (entryPrice - slPrice_Long)
tpPrice_Short = entryPrice - rrMultiplier * (slPrice_Short - entryPrice)

// === RISK MANAGEMENT ===
slPips_Long  = math.abs(entryPrice - slPrice_Long) / pipSize
slPips_Short = math.abs(entryPrice - slPrice_Short) / pipSize

riskUSD      = accountSizeUSD * (riskPercent / 100)
lotSize_Long = (riskUSD / (slPips_Long * 10))
lotSize_Short= (riskUSD / (slPips_Short * 10))

// === ACTIVE TRADE CONTROL ===
alreadyInTrade = strategy.opentrades > 0
enterLong   := enterLong and not alreadyInTrade
enterShort  := enterShort and not alreadyInTrade
enterFallbackLong  := enterFallbackLong and not alreadyInTrade
enterFallbackShort := enterFallbackShort and not alreadyInTrade

// === ORDER EXECUTION ===
if enterLong
    strategy.entry("BUY", strategy.long, qty=lotSize_Long, limit=entryPrice)
    strategy.exit("TP/SL BUY", from_entry="BUY", stop=slPrice_Long, limit=tpPrice_Long)

if enterShort
    strategy.entry("SELL", strategy.short, qty=lotSize_Short, limit=entryPrice)
    strategy.exit("TP/SL SELL", from_entry="SELL", stop=slPrice_Short, limit=tpPrice_Short)

if enterFallbackLong
    strategy.entry("BUY_FB", strategy.long, qty=lotSize_Long, limit=entryPrice)
    strategy.exit("TP/SL BUY_FB", from_entry="BUY_FB", stop=slPrice_Long, limit=tpPrice_Long)

if enterFallbackShort
    strategy.entry("SELL_FB", strategy.short, qty=lotSize_Short, limit=entryPrice)
    strategy.exit("TP/SL SELL_FB", from_entry="SELL_FB", stop=slPrice_Short, limit=tpPrice_Short)

// === MANUAL CLOSE AT 11:45 NY ===
manualClose = (hour(time, "America/New_York") == 11 and minute(time, "America/New_York") == 45)
if strategy.opentrades > 0 and manualClose
    strategy.close_all(comment="Manual Close 11:45 NY")