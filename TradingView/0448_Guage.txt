// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© faiyaz7283
//@version=5

// @description A library for creatring and displaying gauges.
library("Gauge", overlay=true)

// ::Imports:: {
import faiyaz7283/tools/15 as tools
import faiyaz7283/printer/10 as prnt
import faiyaz7283/multidata/12 as mltd
// }

// Functions {

gradientCl(float num, min, max, upColor, downColor, neutralColor) =>
    avg = math.avg(max, min)
    bottomValue = num > avg ? avg : min
    topValue = num > avg ? max : avg
    bottomColor = num > avg ? neutralColor : downColor
    topColor = num > avg ? upColor : neutralColor
    num == avg ? neutralColor : color.from_gradient(num, bottomValue, topValue, bottomColor, topColor)

// Define `gaugeParams` - A an object for defining gauge paramters.
// num            (float)     The number parameter that is used for measuring.
// min            (float)     The minimum value parameter, which equals to 100% on the gauge's minimum scale.
// max            (float)     The maximum value parameter, which equals to 100% on the gauge's maximum scale.
// size            (int)       The size of scale from 0 to 100%. The size represents the total split (per side). For example, size 10 would mean 0-100% split into 10 slots for both min and max scale. (`10` is used if no argument is supplied).
// title        (string)    The title parameter for the gauge. (`na` is used if no argument is supplied).
// minLabel     (string)    The minimum label parameter for the gauge. (`Low` is used if no argument is supplied).
// maxLabel     (string)    The maximum label parameter for the gauge. (`High` is used if no argument is supplied).
// offColor     (color)     The off color parameter for the gauge. Off color represents the inactive part of the gauge. (`#0098E736` is used if no argument is supplied).
// upColor      (color)     The up color parameter for the gauge. Up color represents the color when gauge reaches max 100%. (`#00FF00` is used if no argument is supplied).
// downColor    (color)     The down color parameter for the gauge. Down color represents the color when gauge reaches min 100%. (`#FF0000` is used if no argument is supplied).
// neutralColor (color)     The neutral color parameter for the gauge. Neutral color represents the color when gauge hits 0%, number falling in between min and max value. (`#FFF9C4` is used if no argument is supplied).
// titleColor   (color)     The title color parameter for the gauge. (`#E1E1E1` is used if no argument is supplied).
// titleBgColor (color)     The title background color parameter for the gauge. (`#1E283273` is used if no argument is supplied).
// labelColor   (color)     The label color parameter for the gauge. Labels are set on each end of the scale, one for min value and one for max value. (`#E14600` is used if no argument is supplied).
// titleAlign   (string)    The title alignment paramter. (`text.align_center` is used if no argument is supplied).
// horizontal   (bool)      The gauge orientation parameter. Use true for horizontal, and false for vertical orientation. (`false` is used if no argument is supplied).
export type gaugeParams
    float num
    float min
    float max
    int size = 10
    string title = na
    string minLabel = 'Low'
    string maxLabel = 'High'
    color offColor = #0098E736
    color upColor = #00FF00
    color downColor = #FF0000
    color neutralColor = #FFF9C4
    color titleColor = #E1E1E1
    color titleBgColor = #1E283273
    color labelColor = #E14600
    string titleAlign = text.align_center
    string keyAlign = text.align_right
    string titleSize = size.auto
    string keySize = size.auto
    string labelSize = size.auto
    bool horizontal = false

// @function            A gauge to measure a number (ex. price) moving between two provided values, maximum (ex. all time high) and minimum (ex. all time low).
// @param this          (_printer) A _printer UDT object.
// @param params        (gaugeParams) A gaugeParams UDT object. This object holds all essential paramters to build the gauge.
// @returns             (_printer) Returns the _printer UDT object.
export method gauge(prnt._printer this, gaugeParams params) =>
    horz = params.horizontal
    totalSlots = (params.size*2)+1
    perSlot = float(100)/params.size
    midSlot = params.size
    mid = math.avg(params.max, params.min)
    increaseSize = (mid-params.min)/params.size
    priceHigher = params.num > mid
    priceLower = params.num < mid
    idx = int((priceHigher ? params.num - mid : params.num - params.min) / increaseSize)
    barColors = array.new<color>(totalSlots)
    kvs = array.new<mltd.kv>(totalSlots)
    onColor = gradientCl(params.num, params.min, params.max, params.upColor, params.downColor, params.neutralColor)

    for i=0 to totalSlots - 1
        string prctNum = na
        color barColor = params.offColor

        if i < midSlot
            prctNum := str.format(' {0,number,#.##}%', 100 - (i*perSlot))
            if horz and priceLower
                barColor := params.num != params.min and i <= idx ? params.offColor : onColor
            else if not horz and priceHigher
                barColor := params.num != params.max and i < math.abs(idx-params.size) ? params.offColor : onColor
        else if i == midSlot
            prctNum := '0%'
            barColor := onColor
        else if i > midSlot
            prctNum := str.format('{0,number,#.##}%', (i-params.size) * perSlot)
            if horz and priceHigher
                barColor := params.num == params.max or i <= idx + params.size ? onColor : params.offColor
            else if not horz and priceLower
                barColor := params.num == params.min or (i+1)-params.size <= math.abs(idx-params.size) ? onColor : params.offColor
        barColors.set(i, barColor)
        kvs.set(i, mltd.kv(prctNum, ''))
    barColors.unshift(na)
    kvs.unshift(mltd.kv(' ', horz ? params.minLabel : params.maxLabel))
    barColors.push(na)
    kvs.push(mltd.kv('. ', horz ? params.maxLabel : params.minLabel))
    d2dData  = mltd.data2d(kvs)
    dv = map.new<string, prnt.dvs>()
    dv.put('val', barColors.dvs())
    styles = map.new<string, prnt.cellStyle>()
    keyStyle = prnt.cellStyle.new(textHalign=params.keyAlign, textSize=params.keySize)
    keyStyle.dynamicColor := prnt.dynamicColor.new(offsetItem='bg', offsetColor=#00000000)
    valStyle = prnt.cellStyle.new(horizontal=horz, textColor=params.labelColor, textSize=params.labelSize)
    valStyle.dynamicColor := prnt.dynamicColor.new(offsetItem='text')
    styles.put('key', keyStyle)
    styles.put('val', valStyle)
    ts = prnt.titleStyle.new(top=true, textHalign=params.titleAlign, textColor=params.titleColor, textSize=params.titleSize, bgColor=params.titleBgColor)
    this.print(d2dData, title=params.title, titleStyle=ts, dynamicValues=dv, styles=styles, dynamicKey=true)
    this

// }

// // Test {
// if barstate.islast

//     horz = false
//     tbs = prnt.tableStyle.new(bgColor=na, frameColor=na, borderColor=na, borderWidth=2)
//     params1 = gaugeParams.new(num=tools._rndmFloat(100, 1000), min=100, max=1000, size=10, title='Gauge 1', horizontal=horz)
//     params2 = gaugeParams.new(num=tools._rndmFloat(100, 1000), min=100, max=1000, size=10, title='Gauge 2', horizontal=horz)
//     params3 = gaugeParams.new(num=tools._rndmFloat(100, 1000), min=100, max=1000, size=10, title='Gauge 3', horizontal=horz)
//     params4 = gaugeParams.new(num=tools._rndmFloat(100, 1000), min=100, max=1000, size=5, title='Gauge 4', horizontal=true)

//     // Initialize the printer
//     printer1 = prnt.printer(stack=horz, loc=position.middle_center, tableStyle=tbs, gutterStyle=prnt.gutterStyle.new(true, 1, 1))
//     printer1.gauge(params1).gauge(params2).gauge(params3).gauge(params4)
// // }