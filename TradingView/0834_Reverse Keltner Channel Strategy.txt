// Reverse Keltner Channel Strategy with ADX Filter
// @fenyesk
// Description: Enters long when price crosses lower Keltner channel from below
//              and exits when price crosses upper Keltner channel.
//              Stop loss is at half distance between upper and lower channels.
//              Short positions use the same logic but in reverse.
//              ADX is used to filter entries based on trend strength.

//@version=5
strategy("Reverse Keltner Channel Strategy with ADX", overlay=true, default_qty_type=strategy.percent_of_equity, default_qty_value=100)

// Input parameters
length = input.int(20, "Keltner EMA Length", minval=1)
mult = input.float(2.0, "ATR Multiplier", minval=0.1, step=0.1)
atrLength = input.int(10, "ATR Length", minval=1)
stopLossFactor = input.float(0.5, "Stop Loss Factor", minval=0.1, maxval=1.0, step=0.1,
     tooltip="Fraction of channel width for stop loss placement")

// ADX Parameters
adxLength = input.int(14, "ADX Length", minval=1)
adxThreshold = input.int(25, "ADX Threshold", minval=1, maxval=100,
     tooltip="ADX value that differentiates between strong and weak trends")
useAdxFilter = input.bool(true, "Use ADX Filter",
     tooltip="Enable to filter trades based on ADX trend strength")
weakTrendOnly = input.bool(true, "Enter Only in Weak Trends",
     tooltip="If true, only enter trades when ADX is below threshold (weak trend). If false, only enter when ADX is above threshold (strong trend)")

// Calculate Keltner Channels
ema = ta.ema(close, length)
atr = ta.atr(atrLength)
upperChannel = ema + mult * atr
lowerChannel = ema - mult * atr
midChannel = ema

// Calculate ADX
[diplus, diminus, adx] = ta.dmi(adxLength, adxLength)

// Calculate price crossings
crossedAboveLower = ta.crossover(close, lowerChannel)
crossedAboveUpper = ta.crossover(close, upperChannel)
crossedBelowUpper = ta.crossunder(close, upperChannel)
crossedBelowLower = ta.crossunder(close, lowerChannel)

// Channel width for stop loss calculation
channelWidth = upperChannel - lowerChannel
halfChannelWidth = channelWidth * stopLossFactor

// Plot channels
plot(upperChannel, "Upper Channel", color=color.rgb(255, 0, 0, 70), linewidth=2)
plot(midChannel, "Middle Channel", color=color.rgb(0, 0, 255, 70), linewidth=1)
plot(lowerChannel, "Lower Channel", color=color.rgb(255, 0, 0, 70), linewidth=2)

// Plot ADX on separate pane
plot(adx, "ADX", color=color.rgb(255, 128, 0), linewidth=2)
hline(adxThreshold, "ADX Threshold", color=color.rgb(255, 128, 0, 50), linestyle=hline.style_dashed)

// Check if ADX filter allows entry
adxFilterPassed = not useAdxFilter or
     (weakTrendOnly and adx < adxThreshold) or
     (not weakTrendOnly and adx >= adxThreshold)

// Strategy logic
// Long position
if (crossedAboveLower and adxFilterPassed)
    stopLossPrice = close - halfChannelWidth
    strategy.entry("Long", strategy.long)
    strategy.exit("Long Exit", "Long", limit=upperChannel, stop=stopLossPrice)

// Short position
if (crossedBelowUpper and adxFilterPassed)
    stopLossPrice = close + halfChannelWidth
    strategy.entry("Short", strategy.short)
    strategy.exit("Short Exit", "Short", limit=lowerChannel, stop=stopLossPrice)

// Visualize signals
longSignalColor = adxFilterPassed ? color.green : color.gray
shortSignalColor = adxFilterPassed ? color.red : color.gray

plotshape(crossedAboveLower, "Long Signal", shape.triangleup, location.belowbar, longSignalColor, size=size.small)
plotshape(crossedBelowUpper, "Short Signal", shape.triangledown, location.abovebar, shortSignalColor, size=size.small)

// Visualize trend strength
trendText = adx >= adxThreshold ? "Strong Trend" : "Weak Trend"
label.new(bar_index, high, "ADX: " + str.tostring(adx, "#.##") + "\n" + trendText,
     yloc=yloc.price, style=label.style_label_down,
     color=adx >= adxThreshold ? color.rgb(255, 128, 0, 80) : color.rgb(128, 128, 255, 80),
     textcolor=color.white, size=size.tiny)