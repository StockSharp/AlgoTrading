//@version=6
strategy("Smart Fib Strategy", overlay=true, margin_long=100, margin_short=100, default_qty_type=strategy.fixed, default_qty_value=2000, initial_capital=10000)

// ============================================================================
// SETTINGS
// ============================================================================

// Display Settings
show_table = input.bool(true, title="Show Stats Table", group="Display Settings")
show_entry_line = input.bool(true, title="Show Entry Line", group="Display Settings")
show_exit_bands = input.bool(true, title="Show Exit Bands", group="Display Settings")

// Strategy Settings
strategy_type = input.string("Buy & Sell", title="Strategy Type", options=["Buy & Sell", "Long Only", "Short Only"], group="Strategy Settings")
exit_method = input.string("Low Risk", title="Exit Method", options=["Low Risk", "High Risk"], tooltip="Low Risk: Use first Fib band for exit. High Risk: Use second Fib band for exit", group="Strategy Settings")
min_trades = input.int(100, title="Minimum Trades to Consider for Best SMA", minval=1, group="Strategy Settings")

// SMA Settings (For Entry)
fixed_sma_length = input.int(50, title="Fixed SMA Length (if not using optimal)", minval=1, group="SMA Settings")
use_optimal_sma = input.bool(true, title="Use Optimal SMA", tooltip="If true, will use the best performing SMA based on historical data", group="SMA Settings")

// Fibonacci Settings (For Exit)
lenSMA = input.int(8, title="# Bars for Fib SMA", minval=1, group="Fibonacci Settings")
lenATR = input.int(6, title="# Bars for Fib ATR", minval=1, group="Fibonacci Settings")
smooth = input.bool(true, title="Smooth Fibonacci Bands", group="Fibonacci Settings")
smoothLen = input.int(3, title="Smoothing Length", minval=1, group="Fibonacci Settings", tooltip="Length for moving average when smoothing is enabled")

// Fibonacci factor inputs
firstFactor = input.float(1.618, title="Factor Fib Band 1", group="Fibonacci Factors")
secondFactor = input.float(2.618, title="Factor Fib Band 2", group="Fibonacci Factors")
thirdFactor = input.float(4.236, title="Factor Fib Band 3", group="Fibonacci Factors")

// Line appearance settings
entryLineColor = input.color(color.blue, title="Entry Line Color", group="Line Appearance")
entryLineWidth = input.int(2, title="Entry Line Width", minval=1, maxval=5, group="Line Appearance")

fib1Color = input.color(color.white, title="Fib Band 1 Color", group="Line Appearance")
fib1Width = input.int(1, title="Fib Band 1 Width", minval=1, maxval=5, group="Line Appearance")

fib2UpperColor = input.color(color.green, title="Fib Band 2 Upper Color", group="Line Appearance")
fib2LowerColor = input.color(color.red, title="Fib Band 2 Lower Color", group="Line Appearance")
fib2Width = input.int(1, title="Fib Band 2 Width", minval=1, maxval=5, group="Line Appearance")

lineTransparency = input.int(0, title="Line Transparency", minval=0, maxval=100, group="Line Appearance")

// ============================================================================
// OPTIMAL SMA CALCULATION (From Best SMA Finder)
// ============================================================================

f_robustness(pf, trades, win_rate, min_trades) =>
    trades >= min_trades and not na(pf) and pf >= 0 and not na(win_rate) ? pf * math.log(trades) * math.sqrt(win_rate) : -1e10

backtest(ma_len) =>
    xMA = ta.sma(close, ma_len)
    var float entry_price_long = na
    var float entry_price_short = na
    var int total_trades = 0
    var int winning_trades = 0
    var float total_profit = 0.0
    var float total_loss = 0.0

    long_condition = ta.crossover(close, xMA)
    short_condition = ta.crossunder(close, xMA)

    float trade_profit = na

    if strategy_type == 'Buy & Sell'
        if long_condition and na(entry_price_long) and na(entry_price_short)
            entry_price_long := close
            total_trades := total_trades + 1
            total_trades
        else
            if short_condition and not na(entry_price_long)
                trade_profit := close - entry_price_long
                if trade_profit > 0
                    total_profit := total_profit + trade_profit
                    winning_trades := winning_trades + 1
                    winning_trades
                else
                    total_loss := total_loss - trade_profit
                    total_loss
                entry_price_long := na
                entry_price_short := close
                total_trades := total_trades + 1
                total_trades
            else
                if short_condition and na(entry_price_short) and na(entry_price_long)
                    entry_price_short := close
                    total_trades := total_trades + 1
                    total_trades
                else
                    if long_condition and not na(entry_price_short)
                        trade_profit := entry_price_short - close
                        if trade_profit > 0
                            total_profit := total_profit + trade_profit
                            winning_trades := winning_trades + 1
                            winning_trades
                        else
                            total_loss := total_loss - trade_profit
                            total_loss
                        entry_price_short := na
                        entry_price_long := close
                        total_trades := total_trades + 1
                        total_trades

    else
        if long_condition and na(entry_price_long)
            entry_price_long := close
            total_trades := total_trades + 1
            total_trades
        else if short_condition and not na(entry_price_long)
            trade_profit := close - entry_price_long
            if trade_profit > 0
                total_profit := total_profit + trade_profit
                winning_trades := winning_trades + 1
                winning_trades
            else
                total_loss := total_loss - trade_profit
                total_loss
            entry_price_long := na
            entry_price_long

    float profit_factor = total_loss > 0 ? total_profit / total_loss : total_profit > 0 ? 10000.0 : 0
    float win_rate = total_trades > 0 ? winning_trades / total_trades : 0.0
    float robustness = f_robustness(profit_factor, total_trades, win_rate, min_trades)

    [total_trades, profit_factor, win_rate, robustness]

// Test various SMA lengths
[tt10, pf10, wr10, r10] = backtest(10)
[tt20, pf20, wr20, r20] = backtest(20)
[tt30, pf30, wr30, r30] = backtest(30)
[tt40, pf40, wr40, r40] = backtest(40)
[tt50, pf50, wr50, r50] = backtest(50)
[tt60, pf60, wr60, r60] = backtest(60)
[tt70, pf70, wr70, r70] = backtest(70)
[tt80, pf80, wr80, r80] = backtest(80)
[tt90, pf90, wr90, r90] = backtest(90)
[tt100, pf100, wr100, r100] = backtest(100)
[tt150, pf150, wr150, r150] = backtest(150)
[tt200, pf200, wr200, r200] = backtest(200)

// Find best SMA
var float best_score = -1e10
var int best_len = na
var int best_trades = na
var float best_pf = na
var float best_wr = na

// Update best SMA if better score found
if not na(r10) and r10 > best_score
    best_score := r10
    best_len := 10
    best_trades := tt10
    best_pf := pf10
    best_wr := wr10

if not na(r20) and r20 > best_score
    best_score := r20
    best_len := 20
    best_trades := tt20
    best_pf := pf20
    best_wr := wr20

if not na(r30) and r30 > best_score
    best_score := r30
    best_len := 30
    best_trades := tt30
    best_pf := pf30
    best_wr := wr30

if not na(r40) and r40 > best_score
    best_score := r40
    best_len := 40
    best_trades := tt40
    best_pf := pf40
    best_wr := wr40

if not na(r50) and r50 > best_score
    best_score := r50
    best_len := 50
    best_trades := tt50
    best_pf := pf50
    best_wr := wr50

if not na(r60) and r60 > best_score
    best_score := r60
    best_len := 60
    best_trades := tt60
    best_pf := pf60
    best_wr := wr60

if not na(r70) and r70 > best_score
    best_score := r70
    best_len := 70
    best_trades := tt70
    best_pf := pf70
    best_wr := wr70

if not na(r80) and r80 > best_score
    best_score := r80
    best_len := 80
    best_trades := tt80
    best_pf := pf80
    best_wr := wr80

if not na(r90) and r90 > best_score
    best_score := r90
    best_len := 90
    best_trades := tt90
    best_pf := pf90
    best_wr := wr90

if not na(r100) and r100 > best_score
    best_score := r100
    best_len := 100
    best_trades := tt100
    best_pf := pf100
    best_wr := wr100

if not na(r150) and r150 > best_score
    best_score := r150
    best_len := 150
    best_trades := tt150
    best_pf := pf150
    best_wr := wr150

if not na(r200) and r200 > best_score
    best_score := r200
    best_len := 200
    best_trades := tt200
    best_pf := pf200
    best_wr := wr200

// Default to fixed length if optimal not found or not selected
sma_length = use_optimal_sma and not na(best_len) ? best_len : fixed_sma_length

// ============================================================================
// INDICATOR CALCULATIONS
// ============================================================================

// Entry line - Blue SMA center line from Best SMA Finder
entryLine = ta.sma(close, sma_length)

// Fibonacci bands calculation (from Smooth Fibonacci Bands script)
vAtr = ta.atr(lenATR)
vSma = ta.sma(close, lenSMA)

// Middle line
middleLine = vSma

// Calculate Fibonacci bands
fib1Upper = vSma + vAtr * firstFactor
fib1Lower = vSma - vAtr * firstFactor
fib2Upper = vSma + vAtr * secondFactor
fib2Lower = vSma - vAtr * secondFactor
fib3Upper = vSma + vAtr * thirdFactor
fib3Lower = vSma - vAtr * thirdFactor

// Apply smoothing if enabled
if smooth
    middleLine := ta.sma(middleLine, smoothLen)
    fib1Upper := ta.sma(fib1Upper, smoothLen)
    fib1Lower := ta.sma(fib1Lower, smoothLen)
    fib2Upper := ta.sma(fib2Upper, smoothLen)
    fib2Lower := ta.sma(fib2Lower, smoothLen)
    fib3Upper := ta.sma(fib3Upper, smoothLen)
    fib3Lower := ta.sma(fib3Lower, smoothLen)

// ============================================================================
// STRATEGY EXECUTION
// ============================================================================

// Entry conditions
longCondition = ta.crossover(close, entryLine)
shortCondition = ta.crossunder(close, entryLine)

// Exit levels based on risk preference
longExitLevel = exit_method == "Low Risk" ? fib1Upper : fib2Upper
shortExitLevel = exit_method == "Low Risk" ? fib1Lower : fib2Lower

// Entry and exit execution
if strategy_type != "Short Only" and longCondition
    strategy.entry("Long", strategy.long)

if strategy_type != "Long Only" and shortCondition
    strategy.entry("Short", strategy.short)

// Exit conditions
strategy.exit("Exit Long", "Long", limit=longExitLevel)
strategy.exit("Exit Short", "Short", limit=shortExitLevel)

// ============================================================================
// VISUALIZATION
// ============================================================================

// Plot entry line
plot(show_entry_line ? entryLine : na, color=color.new(entryLineColor, lineTransparency), linewidth=entryLineWidth, title="Entry Line (Optimal SMA)")

// Plot exit bands if enabled
plot(show_exit_bands ? fib1Upper : na, title="Fib Band 1 Upper", color=color.new(fib1Color, lineTransparency), linewidth=fib1Width)
plot(show_exit_bands ? fib1Lower : na, title="Fib Band 1 Lower", color=color.new(fib1Color, lineTransparency), linewidth=fib1Width)

plot(show_exit_bands ? fib2Upper : na, title="Fib Band 2 Upper", color=color.new(fib2UpperColor, lineTransparency), linewidth=fib2Width)
plot(show_exit_bands ? fib2Lower : na, title="Fib Band 2 Lower", color=color.new(fib2LowerColor, lineTransparency), linewidth=fib2Width)

// ============================================================================
// STATISTICS TABLE
// ============================================================================

if show_table
    var table stats_table = table.new(position=position.top_right, columns=2, rows=7, bgcolor=color.new(color.black, 85), border_width=1)

    if barstate.islast
        // SMA info
        sma_desc = use_optimal_sma ? "Optimal SMA Length" : "Fixed SMA Length"
        sma_value = str.tostring(sma_length)

        // Strategy info
        exitInfo = exit_method == "Low Risk" ? "First Fib Band (" + str.tostring(firstFactor) + ")" : "Second Fib Band (" + str.tostring(secondFactor) + ")"

        // Strategy performance
        netProfit = strategy.netprofit
        percentProfit = (strategy.netprofit / strategy.initial_capital) * 100
        totalTrades = strategy.closedtrades
        winRate = strategy.wintrades / math.max(strategy.closedtrades, 1) * 100

        // Update table cells
        table.cell(stats_table, 0, 0, "Strategy", text_color=color.white)
        table.cell(stats_table, 1, 0, strategy_type + " / " + exit_method, text_color=color.white)

        table.cell(stats_table, 0, 1, sma_desc, text_color=color.white)
        table.cell(stats_table, 1, 1, sma_value, text_color=color.white)

        table.cell(stats_table, 0, 2, "Exit Method", text_color=color.white)
        table.cell(stats_table, 1, 2, exitInfo, text_color=color.white)

        table.cell(stats_table, 0, 3, "Net Profit", text_color=color.white)
        table.cell(stats_table, 1, 3, "$" + str.tostring(netProfit, "#.##"), text_color=netProfit >= 0 ? color.green : color.red)

        table.cell(stats_table, 0, 4, "Return (%)", text_color=color.white)
        table.cell(stats_table, 1, 4, str.tostring(percentProfit, "#.##") + "%", text_color=percentProfit >= 0 ? color.green : color.red)

        table.cell(stats_table, 0, 5, "Total Trades", text_color=color.white)
        table.cell(stats_table, 1, 5, str.tostring(totalTrades), text_color=color.white)

        table.cell(stats_table, 0, 6, "Win Rate (%)", text_color=color.white)
        table.cell(stats_table, 1, 6, str.tostring(winRate, "#.#") + "%", text_color=color.white)