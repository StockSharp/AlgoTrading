//@version=5
//════════════════════════════════════════════════════
//  Post-Earnings Drift · v7-refactor
//  - Comments + tooltips
//  - Dynamic 45-day hold period
//    @Author      exlux
//════════════════════════════════════════════════════

//////////////////// 0 · STRATEGY /////////////////////
strategy(title             = "Aftershock Playbook: Stock Earnings Drift Engine",
         overlay           = true,
         default_qty_type  = strategy.percent_of_equity,
         default_qty_value = 100, margin_long=0, margin_short=0)

//////////////////// 1 · USER INPUTS //////////////////
//— Surprise thresholds
thPos = input.float( 0.0 , title = "Positive surprise ≥ (%)",
                     tooltip = "Minimum EPS surprise (in %) required for a bullish drift entry.")
thNeg = input.float(0.0 , title = "Negative surprise ≤ (%)",
                     tooltip = "Maximum (negative) EPS surprise (in %) required for a bearish drift entry.")

//— ATR stop-loss
atrMult = input.float(2.0 , title = "ATR stop ×",
                      tooltip = "Protective stop = ATR × this multiplier (only active for shorts in this version).")
atrLen  = input.int  (14  , title = "ATR length",
                      tooltip = "Look-back length for ATR calculation.")

//— Behaviour toggles
reverseTrade = input.bool(false, title = "Reverse signals?",
                          tooltip = "Flip long/short polarity (useful for quick mean-reversion testing).")
time_exit    = input.bool(false, title = "Time Risk Management",
                          tooltip = "If enabled, a hard exit triggers after 45 calendar days in the trade.")

//////////////////// 2 · CONSTANTS ////////////////////
HOLD_DAYS  = input(200, title="Bar to Hold")
barSeconds = timeframe.in_seconds(timeframe.period)    // Bar duration in seconds
holdBars   = HOLD_DAYS//int(math.round(HOLD_DAYS * 24 * 60 * 60 / barSeconds))
// e.g. on a 15-min chart: 3 888 000 s ÷ 900 s ≈ 4 320 bars

showTable  = true                                      // Diagnostics table toggle

//////////////////// 3 · EARNINGS DATA ////////////////
epsAct = request.earnings(syminfo.tickerid, earnings.actual,
                          gaps = barmerge.gaps_on,
                          lookahead = barmerge.lookahead_off)
epsEst = request.earnings(syminfo.tickerid, earnings.estimate,
                          gaps = barmerge.gaps_on,
                          lookahead = barmerge.lookahead_off)

isER    = not na(epsAct) and na(epsAct[1])             // True only on the release bar
surpPct = (epsAct - epsEst) / epsEst * 100             // EPS surprise in %

//////////////////// 4 · STATE VARS ///////////////////
var bool waitNextER      = false   // Raised after a losing exit
var bool reenteredFlag   = false   // Blocks multiple auto-re-entries
var float lastEquity     = strategy.equity
var int   lastDir        = 0       // +1 long · −1 short · 0 none
var bool  reenterNext    = false   // Queued after each winning exit
var bool  skipPnL        = false   // Ignore PnL if trade was force-closed

string longIdConst  = reverseTrade ? "short" : "long"
string shortIdConst = reverseTrade ? "long"  : "short"

//////////////////// 5 · HOUSE-KEEPING ///////////////
if isER
    waitNextER    := false
    reenteredFlag := false

// Flatten any open trade immediately before a new earnings bar
if isER and strategy.position_size != 0
    strategy.close_all(comment = "Reset for new ER")
    skipPnL := true

//////////////////// 6 · ENTRY ENGINE ////////////////
bool longCond  = isER and surpPct >= thPos and not waitNextER
bool shortCond = isER and surpPct <= thNeg and not waitNextER

dirLong  = reverseTrade ? strategy.short : strategy.long
dirShort = reverseTrade ? strategy.long  : strategy.short

if longCond
    strategy.entry(longIdConst , dirLong)
    lastDir        :=  1
    lastEquity     := strategy.equity
    reenteredFlag  := false

if shortCond
    strategy.entry(shortIdConst, dirShort)
    lastDir        := -1
    lastEquity     := strategy.equity
    reenteredFlag  := false

//////////////////// 7 · ATR STOP (SHORT ONLY) ///////
atr = ta.atr(atrLen)

// Long stop intentionally disabled (matches previous behaviour)
// if strategy.position_size > 0
//     strategy.exit("L-Stop", from_entry = longIdConst,
//                   stop = strategy.position_avg_price - atrMult * atr)

if strategy.position_size < 0
    strategy.exit("S-Stop", from_entry = shortIdConst,
                  stop = strategy.position_avg_price + atrMult * atr)

//////////////////// 8 · TIME STOP ///////////////////
if strategy.position_size != 0 and time_exit
    entBar = strategy.opentrades.entry_bar_index(strategy.opentrades - 1)
    if bar_index >= entBar + holdBars or isER
        strategy.close_all(comment = "Time exit")

//////////////////// 9 · WIN / LOSS HANDLER //////////
bool tradeClosed = strategy.closedtrades > 0 and
                   strategy.position_size == 0 and
                   strategy.position_size[1] != 0

if tradeClosed and not skipPnL
    reenteredFlag := false                           // Unlock auto-re-entry

    idx = strategy.closedtrades - 1
    pnl = strategy.closedtrades.profit(idx)

    if pnl > 0
        reenterNext := true                          // Queue a fresh re-entry
    else
        waitNextER  := true                          // Block until next earnings

    lastEquity := strategy.equity

if skipPnL
    skipPnL := false

//////////////////// 10 · ONE-BAR RE-ENTRY ///////////
if reenterNext and strategy.position_size == 0 and lastDir != 0
    string reId = lastDir == 1 ? longIdConst : shortIdConst
    dir        = lastDir == 1 ? strategy.long : strategy.short

    strategy.entry(reId, dir)

    lastEquity    := strategy.equity
    reenterNext   := false
    reenteredFlag := true                            // Prevent same-bar loop

//////////////////// 11 · DIAGNOSTICS TABLE //////////
if showTable
    var table t = table.new(position.top_right, 2, 3,                            frame_width = 1,                            bgcolor     = color.new(color.black, 85))

    float lastAct  = ta.valuewhen(isER, epsAct , 0)
    float lastEst  = ta.valuewhen(isER, epsEst , 0)
    float lastSurp = ta.valuewhen(isER, surpPct, 0)

    if close > 0
        table.cell(t, 0, 0, "EPS Actual")
        table.cell(t, 1, 0, str.tostring(lastAct , format.mintick),
                   text_color = lastAct >= 0 ? color.green : color.red)

        table.cell(t, 0, 1, "EPS Estimate")
        table.cell(t, 1, 1, str.tostring(lastEst , format.mintick),
                   text_color = lastEst >= 0 ? color.green : color.red)

        table.cell(t, 0, 2, "Surprise %")
        table.cell(t, 1, 2, str.tostring(lastSurp, "#.##"),
                   text_color = lastSurp >= 0 ? color.green : color.red)

//////////////////// 12 · VISUAL MARKER //////////////
plotshape(isER, style = shape.triangledown, location = location.top,
          color = color.yellow, size = size.tiny, title = "Earnings bar")