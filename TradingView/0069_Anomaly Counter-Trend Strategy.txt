//@version=6
strategy(title="Anomaly Counter-Trend Strategy",
         shorttitle="ACTS",
         overlay=true,
         initial_capital=10000,
         default_qty_type=strategy.percent_of_equity, // Trade size as a percentage of equity
         default_qty_value=1,                         // Default to 1% of equity per trade
         commission_type=strategy.commission.percent, // Commission as a percentage of trade value
         commission_value=0.05,                       // 0.05% commission per trade
         slippage=2,                                  // 2 ticks of slippage
         process_orders_on_close=true,                // Process orders on bar close for more immediate fills
         margin_long=100,                             // Pine v6 default: 100% margin for long
         margin_short=100)                            // Pine v6 default: 100% margin for short

// Inputs for Anomaly Detection
//-----------------------------------------------------------------------------
var GRP_ANOMALY = "Anomaly Detection Parameters"
inpPercentageThreshold = input.float(1, title="Percentage Threshold (%)", minval=0.01, step=0.01, group=GRP_ANOMALY, tooltip="Minimum percentage change (e.g., 2 for 2%) over the lookback period to detect an anomaly. Positive value used for both up/down moves.")
inpLookbackMinutes = input.int(30, title="Lookback Period (Minutes)", minval=1, group=GRP_ANOMALY, tooltip="The period in minutes to look back for calculating the price change. E.g., for a 15-minute period, enter 15.")

// Inputs for Risk Management
//-----------------------------------------------------------------------------
var GRP_RISK = "Risk Management"
inpStopLossTicks = input.int(100, title="Stop Loss (Ticks)", minval=1, group=GRP_RISK, tooltip="Stop-loss distance from entry price in ticks. Adjust based on instrument volatility.")
inpTakeProfitTicks = input.int(200, title="Take Profit (Ticks)", minval=1, group=GRP_RISK, tooltip="Take-profit distance from entry price in ticks. Adjust based on instrument volatility.")

// Inputs for Visual Settings
//-----------------------------------------------------------------------------
var GRP_VISUAL = "Visual Settings"
inpPlotShapes = input.bool(true, title="Plot Trade Signal Shapes", group=GRP_VISUAL, tooltip="If true, plots shapes (triangles) on the chart for buy/sell signals.")
inpBgColor = input.bool(true, title="Highlight Anomaly Background", group=GRP_VISUAL, tooltip="If true, changes the chart background color during detected anomaly periods.")

// Fetch Historical Price Data
//-----------------------------------------------------------------------------
// Fetch the closing price from 'inpLookbackMinutes' ago using 1-minute data for precision.
// The index is inpLookbackMinutes - 1 because array/series indexing is 0-based.
// e.g., for 15 minutes ago, we need the 14th previous 1-minute bar's close.
// A check for inpLookbackMinutes > 0 is included to prevent negative index if input is 0 or 1.
priceNMinutesAgo = request.security(syminfo.tickerid, "1", close[inpLookbackMinutes > 0? inpLookbackMinutes - 1 : 0], gaps=barmerge.gaps_off, lookahead=barmerge.lookahead_off)

// Calculate Percentage Change
//-----------------------------------------------------------------------------
percentageChange = 0.0 // Initialize with a default value
if not na(priceNMinutesAgo) and priceNMinutesAgo!= 0.0
    // Standard percentage change formula: ((current - past) / past) * 100
    percentageChange := ((close - priceNMinutesAgo) / priceNMinutesAgo) * 100.0

// Define Anomaly Conditions
//-----------------------------------------------------------------------------
// A price rise anomaly occurs if the positive percentage change meets or exceeds the threshold.
isPriceRiseAnomaly = percentageChange >= inpPercentageThreshold and inpPercentageThreshold > 0

// A price fall anomaly occurs if the negative percentage change meets or exceeds the (negative) threshold.
isPriceFallAnomaly = percentageChange <= -inpPercentageThreshold and inpPercentageThreshold > 0

// Define Trade Conditions
//-----------------------------------------------------------------------------
// Sell (short) if a price rise anomaly occurs and we are not already short (i.e., flat or long).
// This allows for position reversal if currently long.
sellCondition = isPriceRiseAnomaly and strategy.position_size >= 0

// Buy (long) if a price fall anomaly occurs and we are not already long (i.e., flat or short).
// This allows for position reversal if currently short.
buyCondition = isPriceFallAnomaly and strategy.position_size <= 0

// Execute Trades
//-----------------------------------------------------------------------------
// Entry for Sell (Short)
if sellCondition
    strategy.entry("SellAnomaly", strategy.short, comment="Sell on Rise Anomaly")

// Entry for Buy (Long)
if buyCondition
    strategy.entry("BuyAnomaly", strategy.long, comment="Buy on Fall Anomaly")

// Risk Management: Stop Loss and Take Profit
//-----------------------------------------------------------------------------
// Apply stop-loss and take-profit if in a long position
if strategy.position_size > 0
    strategy.exit(id="Exit Long", from_entry="BuyAnomaly", loss=inpStopLossTicks, profit=inpTakeProfitTicks, comment_profit="TP Long", comment_loss="SL Long")

// Apply stop-loss and take-profit if in a short position
if strategy.position_size < 0
    strategy.exit(id="Exit Short", from_entry="SellAnomaly", loss=inpStopLossTicks, profit=inpTakeProfitTicks, comment_profit="TP Short", comment_loss="SL Short")

// Visual Indicators
//-----------------------------------------------------------------------------
// Plot shapes for buy/sell signals if enabled

plotshape(series=buyCondition, title="Buy Signal", location=location.belowbar, color=color.new(color.green, 0), style=shape.triangleup, size=size.normal, text="BUY")
plotshape(series=sellCondition, title="Sell Signal", location=location.abovebar, color=color.new(color.red, 0), style=shape.triangledown, size=size.normal, text="SELL")

// Change background color during anomaly periods if enabled
anomalyDetectedColor = isPriceRiseAnomaly? color.new(color.red, 85) : isPriceFallAnomaly? color.new(color.green, 85) : na
bgcolor(anomalyDetectedColor, title="Anomaly Period Highlight")