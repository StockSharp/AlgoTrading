// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© thequantscience

//@version=5
strategy(
     title = 'Hulk Grid Algorithm V2 - The Quant Science',
     overlay = true,
     default_qty_type = strategy.cash,
     pyramiding = 100,
     calc_on_every_tick = true,
     currency = currency.USD,
     initial_capital = 10000,
     commission_type = strategy.commission.percent,
     commission_value = 0.10,
     slippage = 5,
     process_orders_on_close = true,
     close_entries_rule = "ANY"
     )

mid_start = input.price(defval = 0, title = "Mid Price", group = "GRID CONFIGURATION", confirm = true)
stop_loss = input.float(defval = 2.00, step = 0.10, title = "Stop Loss", group = "GRID CONFIGURATION", confirm = true)
take_profit = input.float(defval = 2.00, step = 0.10, title = "Take Profit", group = "GRID CONFIGURATION", confirm = true)
size_grid = input.float(defval = 200.00, step = 1.00, title = "Grid Step ($)", group = "GRID CONFIGURATION", confirm = true)

var float grid_1  = 0
var float grid_2  = 0
var float grid_3  = 0
var float grid_4  = 0
var float grid_5  = 0
var float grid_6  = 0
var float grid_7  = 0
var float grid_8  = 0
var float grid_9  = 0
var float grid_10 = 0

var float factor = 0

if (strategy.opentrades==0)

    factor := size_grid
    grid_1  := (mid_start)
    grid_2  := (mid_start + (factor * 1))
    grid_3  := (mid_start + (factor * 2))
    grid_4  := (mid_start + (factor * 3))
    grid_5  := (mid_start + (factor * 4))
    grid_6  := (mid_start - (factor * 1))
    grid_7  := (mid_start - (factor * 2))
    grid_8  := (mid_start - (factor * 3))
    grid_9  := (mid_start - (factor * 4))
    grid_10 := (mid_start - (factor * 5))

destroyall = grid_10 - (grid_10 * stop_loss / 100)
des_function = ta.crossunder(close, destroyall)
takeprofitlevel = grid_5 + (grid_5 * take_profit / 100)

var float lots = 0

initial_capital = strategy.initial_capital * 0.50 / 100

lots := initial_capital

if (strategy.opentrades==0)

    strategy.entry(id = "O #1",  direction = strategy.long, qty = lots * 1 / grid_10,limit = grid_10)
    strategy.entry(id = "O #2",  direction = strategy.long, qty = lots * 2 / grid_9, limit = grid_9)
    strategy.entry(id = "O #3",  direction = strategy.long, qty = lots * 3 / grid_8, limit = grid_8)
    strategy.entry(id = "O #4",  direction = strategy.long, qty = lots * 4 / grid_7, limit = grid_7)
    strategy.entry(id = "O #5",  direction = strategy.long, qty = lots * 5 / grid_6, limit = grid_6)
    strategy.entry(id = "O #6",  direction = strategy.long, qty = lots * 6 / grid_1, limit = grid_1)
    strategy.entry(id = "O #7",  direction = strategy.long, qty = lots * 7 / grid_2, limit = grid_2)
    strategy.entry(id = "O #8",  direction = strategy.long, qty = lots * 8 / grid_3, limit = grid_3)
    strategy.entry(id = "O #9",  direction = strategy.long, qty = lots * 9 / grid_4, limit = grid_4)
    strategy.entry(id = "O #10", direction = strategy.long, qty = lots * 10 / grid_5,limit = grid_5)

    if (close < grid_10)
        strategy.cancel("O #1")
        strategy.cancel("O #2")
        strategy.cancel("O #3")
        strategy.cancel("O #4")
        strategy.cancel("O #5")
        strategy.cancel("O #6")
        strategy.cancel("O #7")
        strategy.cancel("O #8")
        strategy.cancel("O #9")
        strategy.cancel("O #10")

    if (close < mid_start)
        strategy.cancel("O #1")
        strategy.cancel("O #2")
        strategy.cancel("O #3")
        strategy.cancel("O #4")
        strategy.cancel("O #5")
        strategy.cancel("O #6")
        strategy.cancel("O #7")
        strategy.cancel("O #8")
        strategy.cancel("O #9")
        strategy.cancel("O #10")

if (ta.crossunder(close, destroyall))
    strategy.close_all("Stop Loss")

    strategy.cancel("O #1")
    strategy.cancel("O #2")
    strategy.cancel("O #3")
    strategy.cancel("O #4")
    strategy.cancel("O #5")
    strategy.cancel("O #6")
    strategy.cancel("O #7")
    strategy.cancel("O #8")
    strategy.cancel("O #9")
    strategy.cancel("O #10")

if (ta.crossover(close, takeprofitlevel))
    strategy.close_all("Take Profit")

    strategy.cancel("O #1")
    strategy.cancel("O #2")
    strategy.cancel("O #3")
    strategy.cancel("O #4")
    strategy.cancel("O #5")
    strategy.cancel("O #6")
    strategy.cancel("O #7")
    strategy.cancel("O #8")
    strategy.cancel("O #9")
    strategy.cancel("O #10")

fill(plot(grid_1, color = color.new(#00ff84, 55)),
     plot(grid_2, color = color.new(#00ff84, 55)),
         color = color.new(#00ff84, 55))
fill(plot(grid_2, color = color.new(#00ff84, 70)),
     plot(grid_3, color = color.new(#00ff84, 70)),
         color = color.new(#00ff84, 70))
fill(plot(grid_3, color = color.new(#00ff84, 80)),
     plot(grid_4, color = color.new(#00ff84, 80)),
         color = color.new(#00ff84, 80))
fill(plot(grid_4, color = color.new(color.rgb(0, 255, 132), 95)),
     plot(grid_5, color = color.new(color.rgb(0, 255, 132), 95)),
         color = color.new(color.rgb(0, 255, 132), 95))
fill(plot(grid_1, color = color.new(#00ff84, 45)),
     plot(grid_6, color = color.new(#00ff84, 45)),
         color = color.new(#00ff84, 45))
fill(plot(grid_6, color = color.new(#00ff84, 55)),
     plot(grid_7, color = color.new(#00ff84, 55)),
         color = color.new(#00ff84, 55))
fill(plot(grid_7, color = color.new(#00ff84, 70)),
     plot(grid_8, color = color.new(#00ff84, 70)),
         color = color.new(#00ff84, 70))
fill(plot(grid_8, color = color.new(#00ff84, 80)),
     plot(grid_9, color = color.new(#00ff84, 80)),
         color = color.new(#00ff84, 80))
fill(plot(grid_9, color = color.new(color.rgb(0, 255, 132), 95)),
     plot(grid_10, color = color.new(color.rgb(0, 255, 132), 95)),
         color = color.new(color.rgb(0, 255, 132), 95))