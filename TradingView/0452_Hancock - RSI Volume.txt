// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© ahancock

color_transp = color.new(color.white, 100)

//@version=4
study("Hancock - RSI Volume", overlay = false, max_bars_back = 5000)

values = input(close, title = "Source")

resolution = input("15", title = "Volume - Resolution", type = input.resolution)
use_wicks = input(true, title = "Volume - Weighted Wicks", type = input.bool)

rsi_length = input(14, title = "RSI - Length", minval = 1)
rsi_ob = input(80, title = "RSI - Overbought", minval = 0, maxval = 100)
rsi_os = input(20, title = "RSI - Overbought", minval = 0, maxval = 100)
rsi_threshold = input(0.1, title = "RSI - Threshold", type = input.float, minval = 0, maxval = 0.5, step = 0.05)

get_volume_up_wicks() =>

    up    = 0.0

    is_up   = close > open
    is_down = close < open

    if (is_up)

        wick_top = high - close
        wick_bot = open - low
        body     = close - open

        diff = volume / ((wick_top * 2) + body + (wick_bot * 2))

        up   := diff * (wick_top + body + wick_bot)

    if (is_down)

        wick_top = high - open
        wick_bot = close - low
        body     = open - close

        diff = volume / ((wick_top * 2) + body + (wick_bot * 2))

        up   := diff * (wick_top + wick_bot)

    up

get_volume_dn_wicks() =>

    down  = 0.0

    is_up   = close > open
    is_down = close < open

    if (is_up)

        wick_top = high - close
        wick_bot = open - low
        body     = close - open

        diff = volume / ((wick_top * 2) + body + (wick_bot * 2))

        down := diff * (wick_top + wick_bot)

    if (is_down)

        wick_top = high - open
        wick_bot = close - low
        body     = open - close

        diff = volume / ((wick_top * 2) + body + (wick_bot * 2))

        down := diff * (wick_top + body + wick_bot)

    down

get_volume_up(w) => w ? get_volume_up_wicks() : open <= close ? volume : 0

get_volume_dn(w) => w ? get_volume_dn_wicks() : open > close ? volume : 0

get_elapsed_time() =>
    min(security(syminfo.tickerid, timeframe.period, time - time[1]), security(syminfo.tickerid, timeframe.period, timenow - time)) / (60 * 1000)

get_minutes() =>
    m =
         timeframe.isseconds ? timeframe.multiplier / 60 :
         timeframe.isintraday ? timeframe.multiplier :
         timeframe.isdaily ? timeframe.multiplier * 1440 :
         timeframe.isweekly ? timeframe.multiplier * 10080 :
         timeframe.ismonthly ? timeframe.multiplier * 42800 :
         na

get_minutes_resolution(r) =>
    security(syminfo.tickerid, r, get_minutes())

get_index(ht, lt) =>

    divisor = ht / lt
    elapsed_previous = security(syminfo.tickerid, timeframe.period, time - time[1])
    elapsed_current =  security(syminfo.tickerid, timeframe.period, timenow - time)
    elapsed_max = divisor

    min(elapsed_max, elapsed_previous, elapsed_current)

ht = get_minutes_resolution(timeframe.period)
lt = get_minutes_resolution(resolution)

sum_volume(v, ht, lt) =>
    index = get_index(ht, lt)

    sum = cum(v)
    sum - sum[nz(index, 1)]

get_volume(ht, lt) =>

    up = security(
         syminfo.tickerid,
         resolution,
         sum_volume(get_volume_up(use_wicks), ht, lt))

    dn = security(
         syminfo.tickerid,
         resolution,
         sum_volume(get_volume_dn(use_wicks), ht, lt))

    [up, dn , up + dn]

get_rma(values, length) =>
    _rma = 0.0, _rma := (values + (min(length, bar_index) - 1) * nz(_rma[1])) / min(length, bar_index)

get_rsi(v, u, d, l) =>
    e = abs(v - v[1])
    up   = get_rma(v > v[1] ? e * u : 0, l)
    down = get_rma(v < v[1] ? e * d : 0, l)

    r = 100 * (up / (up + down))

[vol_up, vol_dn, vol_total] = get_volume(ht, lt)

rsi = get_rsi(values, vol_up, vol_dn, rsi_length)

rsi_threshold_top = 50 + 50 * rsi_threshold
rsi_threshold_bot = 50 - 50 * rsi_threshold

trend_none = 0
trend_dn = -1
trend_up = 1

rsi_trend  = trend_none
rsi_trend :=
     rsi > rsi_threshold_top ? trend_up :
     rsi > rsi_threshold_bot and rsi_trend[1] > 0 ? trend_up :
     rsi < rsi_threshold_bot ? trend_dn :
     rsi < rsi_threshold_top and rsi_trend[1] < 0 ? trend_dn :
     trend_none[1]

trend_color =
     rsi_trend == trend_up ? color.green :
     rsi_trend == trend_dn ? color.red :
     color.silver

hline(50)

plot_ob = hline(rsi_ob)
plot_os = hline(rsi_os)

fill(plot_ob, plot_os, color.white)

plot_center = plot(50, color = color_transp)
plot_rsi = plot(rsi, color = trend_color, style = plot.style_linebr)

fill(plot_center, plot_rsi, trend_color)

plot_rsi_top = plot(rsi_threshold_top, color = color_transp)
plot_rsi_bot = plot(rsi_threshold_bot, color = color_transp)

fill(plot_rsi_top, plot_rsi_bot, color.white)