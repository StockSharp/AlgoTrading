//@version=6
//@fenyesk
strategy('Multi-Timeframe Parabolic SAR Strategy Version 2.0', overlay = true, shorttitle = 'Multi-TF SAR Strategy v2.0', pyramiding = 0, default_qty_type = strategy.percent_of_equity, default_qty_value = 100, initial_capital = 10000, currency = currency.USD, commission_type = strategy.commission.percent, commission_value = 0.1)

// Input Parameters
// SAR Settings
start = input.float(0.02, title = 'Start', step = 0.001)
increment = input.float(0.02, title = 'Increment', step = 0.001)
maximum = input.float(0.2, title = 'Maximum', step = 0.01)

// Timeframes
higherTF = input.timeframe('D', title = 'Higher Timeframe') // Default to Daily
lowerTF = input.timeframe('', title = 'Lower Timeframe (Current if empty)') // Defaults to current chart timeframe

// Enable/Disable Higher/Lower TF
useHigherTF = input.bool(true, title = 'Use Higher Timeframe')
useLowerTF = input.bool(false, title = 'Use Lower Timeframe (Optional)') // Added option to use lower TF

// Strategy Settings
longConditionSource = input.string('Higher TF SAR', 'Long Entry Condition Source', options = ['Higher TF SAR', 'Current TF SAR', 'Both']) // Added option to use both timeframes
shortConditionSource = input.string('Higher TF SAR', 'Short Entry Condition Source', options = ['Higher TF SAR', 'Current TF SAR', 'Both']) // Added option to use both timeframes
useStopLoss = input.bool(true, title = 'Use Stop Loss')
stopLossPercent = input.float(1.0, title = 'Stop Loss Percent', step = 0.1, minval = 0.1) / 100
useTrailingStop = input.bool(false, title = 'Use Trailing Stop')
trailingStopPercent = input.float(0.5, title = 'Trailing Stop Offset Percent', step = 0.1, minval = 0.1) / 100
useTakeProfit = input.bool(false, title = 'Use Take Profit')
takeProfitPercent = input.float(2.0, title = 'Take Profit Percent', step = 0.1, minval = 0.1) / 100

// Dashboard Settings
showDashboard = input.bool(true, title = 'Show Dashboard', group = 'Dashboard')
dashboardPosition = input.string('Top Right', title = 'Dashboard Position', options = ['Top Left', 'Top Right', 'Bottom Left', 'Bottom Right'], group = 'Dashboard')
dashboardSize = input.string('Normal', title = 'Dashboard Size', options = ['Small', 'Normal', 'Large'], group = 'Dashboard')
showExtendedStats = input.bool(true, title = 'Show Extended Statistics', group = 'Dashboard')

// --- Calculate SAR ---
// Current Timeframe SAR
currentSAR = ta.sar(start, increment, maximum)

// Higher Timeframe SAR
higherSAR = request.security(syminfo.tickerid, higherTF, ta.sar(start, increment, maximum), lookahead = barmerge.lookahead_on)

// Lower Timeframe SAR (Optional)
lowerSAR = useLowerTF ? request.security(syminfo.tickerid, lowerTF, ta.sar(start, increment, maximum), lookahead = barmerge.lookahead_on) : na

// --- Determine Entry Conditions ---
// Long Entry Condition
longEntryCondition = switch longConditionSource
    'Higher TF SAR' => close > higherSAR and (not useLowerTF or useLowerTF and close > lowerSAR)
    'Current TF SAR' => close > currentSAR and (not useLowerTF or useLowerTF and close > lowerSAR)
    'Both' => close > higherSAR and close > currentSAR and (not useLowerTF or useLowerTF and close > lowerSAR)
    => false // Default case (should not happen)

// Short Entry Condition
shortEntryCondition = switch shortConditionSource
    'Higher TF SAR' => close < higherSAR and (not useLowerTF or useLowerTF and close < lowerSAR)
    'Current TF SAR' => close < currentSAR and (not useLowerTF or useLowerTF and close < lowerSAR)
    'Both' => close < higherSAR and close < currentSAR and (not useLowerTF or useLowerTF and close < lowerSAR)
    => false // Default case

// --- Stop Loss, Trailing Stop, and Take Profit ---

var float stopLossPrice = na
var float takeProfitPrice = na
var float trailingStop = na

if strategy.position_size > 0
    if useStopLoss
        stopLossPrice := strategy.position_avg_price * (1 - stopLossPercent)
        stopLossPrice
    if useTakeProfit
        takeProfitPrice := strategy.position_avg_price * (1 + takeProfitPercent)
        takeProfitPrice
    if useTrailingStop
        trailingStop := math.max(trailingStop, close * (1 - trailingStopPercent))
        stopLossPrice := math.max(stopLossPrice, trailingStop) // Update stop loss with trailing stop
        stopLossPrice

if strategy.position_size < 0
    if useStopLoss
        stopLossPrice := strategy.position_avg_price * (1 + stopLossPercent)
        stopLossPrice
    if useTakeProfit
        takeProfitPrice := strategy.position_avg_price * (1 - takeProfitPercent)
        takeProfitPrice
    if useTrailingStop
        trailingStop := math.min(trailingStop, close * (1 + trailingStopPercent))
        stopLossPrice := math.min(stopLossPrice, trailingStop) // Update stop loss with trailing stop
        stopLossPrice

// --- Enhanced Statistics Tracking ---
var int totalTrades = 0
var int winningTrades = 0
var int losingTrades = 0
var float totalProfit = 0.0
var float totalLoss = 0.0
var float largestWin = 0.0
var float largestLoss = 0.0
var int consecutiveWins = 0
var int consecutiveLosses = 0
var int maxConsecutiveWins = 0
var int maxConsecutiveLosses = 0
var float equityPeak = 0.0
var float maxDrawdown = 0.0
var int longTrades = 0
var int shortTrades = 0
var int longWins = 0
var int shortWins = 0
var float avgWin = 0.0
var float avgLoss = 0.0
var float profitFactor = 0.0

// Track trade results
if strategy.closedtrades > totalTrades
    tradeResult = strategy.closedtrades.profit(strategy.closedtrades - 1)
    totalTrades := strategy.closedtrades

    // Track long/short trades
    if strategy.closedtrades.size(strategy.closedtrades - 1) > 0
        longTrades := longTrades + 1
        if tradeResult > 0
            longWins := longWins + 1
    else
        shortTrades := shortTrades + 1
        if tradeResult > 0
            shortWins := shortWins + 1

    if tradeResult > 0
        winningTrades := winningTrades + 1
        totalProfit := totalProfit + tradeResult
        largestWin := math.max(largestWin, tradeResult)
        consecutiveWins := consecutiveWins + 1
        consecutiveLosses := 0
        maxConsecutiveWins := math.max(maxConsecutiveWins, consecutiveWins)
    else
        losingTrades := losingTrades + 1
        totalLoss := totalLoss + math.abs(tradeResult)
        largestLoss := math.max(largestLoss, math.abs(tradeResult))
        consecutiveLosses := consecutiveLosses + 1
        consecutiveWins := 0
        maxConsecutiveLosses := math.max(maxConsecutiveLosses, consecutiveLosses)

// Calculate metrics
currentEquity = strategy.equity
equityPeak := math.max(equityPeak, currentEquity)
currentDrawdown = equityPeak > 0 ? (equityPeak - currentEquity) / equityPeak * 100 : 0
maxDrawdown := math.max(maxDrawdown, currentDrawdown)

winRate = totalTrades > 0 ? winningTrades / totalTrades * 100 : 0
lossRate = totalTrades > 0 ? losingTrades / totalTrades * 100 : 0
avgWin := winningTrades > 0 ? totalProfit / winningTrades : 0
avgLoss := losingTrades > 0 ? totalLoss / losingTrades : 0
profitFactor := totalLoss > 0 ? totalProfit / totalLoss : 0
longWinRate = longTrades > 0 ? longWins / longTrades * 100 : 0
shortWinRate = shortTrades > 0 ? shortWins / shortTrades * 100 : 0

// Risk metrics
sharpeRatio = strategy.netprofit > 0 and totalTrades > 10 ? strategy.netprofit / (maxDrawdown > 0 ? maxDrawdown : 1) : 0
expectancy = totalTrades > 0 ? (avgWin * winRate / 100) - (avgLoss * lossRate / 100) : 0

// --- Strategy Logic ---

if longEntryCondition
    if strategy.position_size < 0
        strategy.close('Short') // Close any existing short positions
    strategy.entry('Long', strategy.long)
    stopLossPrice := na
    takeProfitPrice := na
    trailingStop := na
    trailingStop

if shortEntryCondition
    if strategy.position_size > 0
        strategy.close('Long') // Close any existing long positions
    strategy.entry('Short', strategy.short)
    stopLossPrice := na
    takeProfitPrice := na
    trailingStop := na
    trailingStop

// --- Exit Conditions (Stop Loss, Take Profit) ---

if strategy.position_size > 0
    if useStopLoss and close <= stopLossPrice
        strategy.close('Long', comment = 'Stop Loss')
    if useTakeProfit and close >= takeProfitPrice
        strategy.close('Long', comment = 'Take Profit')

if strategy.position_size < 0
    if useStopLoss and close >= stopLossPrice
        strategy.close('Short', comment = 'Stop Loss')
    if useTakeProfit and close <= takeProfitPrice
        strategy.close('Short', comment = 'Take Profit')

// --- Dashboard ---
if showDashboard
    // Position settings
    tablePosition = switch dashboardPosition
        'Top Left' => position.top_left
        'Top Right' => position.top_right
        'Bottom Left' => position.bottom_left
        'Bottom Right' => position.bottom_right
        => position.top_right

    tableSize = switch dashboardSize
        'Small' => size.small
        'Normal' => size.normal
        'Large' => size.large
        => size.normal

    // Create dashboard table
    var table dashboardTable = table.new(tablePosition, 4, showExtendedStats ? 18 : 12, bgcolor = color.new(color.white, 85), border_width = 2, border_color = color.gray)

    // Header
    table.cell(dashboardTable, 0, 0, "ðŸ“Š STRATEGY DASHBOARD", text_color = color.white, bgcolor = color.new(color.blue, 20), text_size = tableSize)
    table.merge_cells(dashboardTable, 0, 0, 3, 0)

    // Account Info
    table.cell(dashboardTable, 0, 1, "ðŸ’° ACCOUNT", text_color = color.white, bgcolor = color.new(color.green, 40), text_size = tableSize)
    table.merge_cells(dashboardTable, 0, 1, 1, 1)
    table.cell(dashboardTable, 2, 1, "ðŸ“ˆ PERFORMANCE", text_color = color.white, bgcolor = color.new(color.blue, 40), text_size = tableSize)
    table.merge_cells(dashboardTable, 2, 1, 3, 1)

    // Account metrics
    table.cell(dashboardTable, 0, 2, "Net P&L:", text_color = color.black, text_size = tableSize)
    table.cell(dashboardTable, 1, 2, str.tostring(strategy.netprofit, "#,###.##"), text_color = strategy.netprofit >= 0 ? color.green : color.red, text_size = tableSize)

    table.cell(dashboardTable, 0, 3, "Equity:", text_color = color.black, text_size = tableSize)
    table.cell(dashboardTable, 1, 3, str.tostring(strategy.equity, "#,###.##"), text_color = color.black, text_size = tableSize)

    table.cell(dashboardTable, 0, 4, "Open P&L:", text_color = color.black, text_size = tableSize)
    table.cell(dashboardTable, 1, 4, str.tostring(strategy.openprofit, "#,###.##"), text_color = strategy.openprofit >= 0 ? color.green : color.red, text_size = tableSize)

    table.cell(dashboardTable, 0, 5, "Position:", text_color = color.black, text_size = tableSize)
    positionText = strategy.position_size > 0 ? "LONG" : strategy.position_size < 0 ? "SHORT" : "FLAT"
    positionColor = strategy.position_size > 0 ? color.green : strategy.position_size < 0 ? color.red : color.gray
    table.cell(dashboardTable, 1, 5, positionText, text_color = positionColor, text_size = tableSize)

    // Performance metrics
    table.cell(dashboardTable, 2, 2, "Total Trades:", text_color = color.black, text_size = tableSize)
    table.cell(dashboardTable, 3, 2, str.tostring(totalTrades), text_color = color.black, text_size = tableSize)

    table.cell(dashboardTable, 2, 3, "Win Rate:", text_color = color.black, text_size = tableSize)
    table.cell(dashboardTable, 3, 3, str.tostring(winRate, "#.##") + "%", text_color = winRate >= 50 ? color.green : color.red, text_size = tableSize)

    table.cell(dashboardTable, 2, 4, "Profit Factor:", text_color = color.black, text_size = tableSize)
    table.cell(dashboardTable, 3, 4, str.tostring(profitFactor, "#.##"), text_color = profitFactor >= 1 ? color.green : color.red, text_size = tableSize)

    table.cell(dashboardTable, 2, 5, "Max DD:", text_color = color.black, text_size = tableSize)
    table.cell(dashboardTable, 3, 5, str.tostring(maxDrawdown, "#.##") + "%", text_color = color.red, text_size = tableSize)

    if showExtendedStats
        // Extended statistics
        table.cell(dashboardTable, 0, 6, "ðŸŽ¯ TRADE ANALYSIS", text_color = color.white, bgcolor = color.new(color.purple, 40), text_size = tableSize)
        table.merge_cells(dashboardTable, 0, 6, 1, 6)
        table.cell(dashboardTable, 2, 6, "ðŸ“Š RISK METRICS", text_color = color.white, bgcolor = color.new(color.orange, 40), text_size = tableSize)
        table.merge_cells(dashboardTable, 2, 6, 3, 6)

        table.cell(dashboardTable, 0, 7, "Avg Win:", text_color = color.black, text_size = tableSize)
        table.cell(dashboardTable, 1, 7, str.tostring(avgWin, "#,###.##"), text_color = color.green, text_size = tableSize)

        table.cell(dashboardTable, 0, 8, "Avg Loss:", text_color = color.black, text_size = tableSize)
        table.cell(dashboardTable, 1, 8, str.tostring(avgLoss, "#,###.##"), text_color = color.red, text_size = tableSize)

        table.cell(dashboardTable, 0, 9, "Largest Win:", text_color = color.black, text_size = tableSize)
        table.cell(dashboardTable, 1, 9, str.tostring(largestWin, "#,###.##"), text_color = color.green, text_size = tableSize)

        table.cell(dashboardTable, 0, 10, "Largest Loss:", text_color = color.black, text_size = tableSize)
        table.cell(dashboardTable, 1, 10, str.tostring(largestLoss, "#,###.##"), text_color = color.red, text_size = tableSize)

        table.cell(dashboardTable, 0, 11, "Long Trades:", text_color = color.black, text_size = tableSize)
        table.cell(dashboardTable, 1, 11, str.tostring(longTrades) + " (" + str.tostring(longWinRate, "#.#") + "%)", text_color = color.black, text_size = tableSize)

        // Risk metrics
        table.cell(dashboardTable, 2, 7, "Expectancy:", text_color = color.black, text_size = tableSize)
        table.cell(dashboardTable, 3, 7, str.tostring(expectancy, "#,###.##"), text_color = expectancy >= 0 ? color.green : color.red, text_size = tableSize)

        table.cell(dashboardTable, 2, 8, "Sharpe Ratio:", text_color = color.black, text_size = tableSize)
        table.cell(dashboardTable, 3, 8, str.tostring(sharpeRatio, "#.##"), text_color = sharpeRatio >= 1 ? color.green : color.red, text_size = tableSize)

        table.cell(dashboardTable, 2, 9, "Max Cons. Wins:", text_color = color.black, text_size = tableSize)
        table.cell(dashboardTable, 3, 9, str.tostring(maxConsecutiveWins), text_color = color.green, text_size = tableSize)

        table.cell(dashboardTable, 2, 10, "Max Cons. Loss:", text_color = color.black, text_size = tableSize)
        table.cell(dashboardTable, 3, 10, str.tostring(maxConsecutiveLosses), text_color = color.red, text_size = tableSize)

        table.cell(dashboardTable, 2, 11, "Short Trades:", text_color = color.black, text_size = tableSize)
        table.cell(dashboardTable, 3, 11, str.tostring(shortTrades) + " (" + str.tostring(shortWinRate, "#.#") + "%)", text_color = color.black, text_size = tableSize)

        // Current status
        table.cell(dashboardTable, 0, 12, "ðŸ“ˆ CURRENT STATUS", text_color = color.white, bgcolor = color.new(color.navy, 40), text_size = tableSize)
        table.merge_cells(dashboardTable, 0, 12, 3, 12)

        table.cell(dashboardTable, 0, 13, "Current DD:", text_color = color.black, text_size = tableSize)
        table.cell(dashboardTable, 1, 13, str.tostring(currentDrawdown, "#.##") + "%", text_color = currentDrawdown > 5 ? color.red : color.orange, text_size = tableSize)

        table.cell(dashboardTable, 2, 13, "Cons. W/L:", text_color = color.black, text_size = tableSize)
        consText = consecutiveWins > 0 ? str.tostring(consecutiveWins) + "W" : str.tostring(consecutiveLosses) + "L"
        consColor = consecutiveWins > 0 ? color.green : color.red
        table.cell(dashboardTable, 3, 13, consText, text_color = consColor, text_size = tableSize)

        // SAR Status
        table.cell(dashboardTable, 0, 14, "ðŸŽ¯ SAR STATUS", text_color = color.white, bgcolor = color.new(color.teal, 40), text_size = tableSize)
        table.merge_cells(dashboardTable, 0, 14, 3, 14)

        table.cell(dashboardTable, 0, 15, "Current SAR:", text_color = color.black, text_size = tableSize)
        currentSARText = close > currentSAR ? "BULLISH" : "BEARISH"
        currentSARColor = close > currentSAR ? color.green : color.red
        table.cell(dashboardTable, 1, 15, currentSARText, text_color = currentSARColor, text_size = tableSize)

        table.cell(dashboardTable, 2, 15, "Higher TF SAR:", text_color = color.black, text_size = tableSize)
        higherSARText = close > higherSAR ? "BULLISH" : "BEARISH"
        higherSARColor = close > higherSAR ? color.green : color.red
        table.cell(dashboardTable, 3, 15, higherSARText, text_color = higherSARColor, text_size = tableSize)

        // Signal Status
        table.cell(dashboardTable, 0, 16, "Signal Status:", text_color = color.black, text_size = tableSize)
        signalText = longEntryCondition ? "LONG SIGNAL" : shortEntryCondition ? "SHORT SIGNAL" : "NO SIGNAL"
        signalColor = longEntryCondition ? color.green : shortEntryCondition ? color.red : color.gray
        table.cell(dashboardTable, 1, 16, signalText, text_color = signalColor, text_size = tableSize)

        table.cell(dashboardTable, 2, 16, "Price vs SAR:", text_color = color.black, text_size = tableSize)
        priceSARDiff = (close - currentSAR) / currentSAR * 100
        table.cell(dashboardTable, 3, 16, str.tostring(priceSARDiff, "#.##") + "%", text_color = priceSARDiff >= 0 ? color.green : color.red, text_size = tableSize)

        // Footer
        table.cell(dashboardTable, 0, 17, "Last Updated: " + str.format_time(timenow, "yyyy-MM-dd HH:mm"), text_color = color.gray, text_size = size.tiny)
        table.merge_cells(dashboardTable, 0, 17, 3, 17)

// --- Plotting ---

plot(currentSAR, color = color.blue, style = plot.style_circles, title = 'Current TF SAR')
plot(useHigherTF ? higherSAR : na, color = color.orange, style = plot.style_cross, title = 'Higher TF SAR', linewidth = 2)
plot(useLowerTF ? lowerSAR : na, color = color.purple, style = plot.style_circles, title = 'Lower TF SAR')
plot(strategy.position_size != 0 ? stopLossPrice : na, color = color.red, style = plot.style_linebr, title = 'Stop Loss')
plot(strategy.position_size != 0 ? takeProfitPrice : na, color = color.green, style = plot.style_linebr, title = 'Take Profit')
plot(strategy.position_size != 0 ? trailingStop : na, color = color.fuchsia, style = plot.style_linebr, title = 'Trailing Stop')

// Plot equity curve as a separate pane
equityPlot = plot(strategy.equity, color = color.blue, linewidth = 2, title = "Equity Curve")
plot(equityPeak, color = color.green, style = plot.style_line, title = "Equity Peak")

// Background colors for position
bgcolor(strategy.position_size > 0 ? color.new(color.green, 95) : strategy.position_size < 0 ? color.new(color.red, 95) : na, title = "Position Background")

// --- Alerts ---
alertcondition(longEntryCondition, title = 'Long Entry', message = 'Long Entry Signal - Multi TF SAR Strategy')
alertcondition(shortEntryCondition, title = 'Short Entry', message = 'Short Entry Signal - Multi TF SAR Strategy')
alertcondition(strategy.position_size > 0 and close <= stopLossPrice, title = 'Long Stop Loss Hit', message = 'Long Stop Loss Hit - Multi TF SAR Strategy')
alertcondition(strategy.position_size < 0 and close >= stopLossPrice, title = 'Short Stop Loss Hit', message = 'Short Stop Loss Hit - Multi TF SAR Strategy')
alertcondition(strategy.position_size > 0 and close >= takeProfitPrice, title = 'Long Take Profit Hit', message = 'Long Take Profit Hit - Multi TF SAR Strategy')
alertcondition(strategy.position_size < 0 and close <= takeProfitPrice, title = 'Short Take Profit Hit', message = 'Short Take Profit Hit - Multi TF SAR Strategy')

// Additional alerts for dashboard metrics
alertcondition(winRate < 40 and totalTrades > 10, title = 'Low Win Rate Alert', message = 'Win Rate Below 40% - Consider Strategy Review')
alertcondition(currentDrawdown > 10, title = 'High Drawdown Alert', message = 'Current Drawdown Above 10% - Risk Management Alert')
alertcondition(profitFactor < 1 and totalTrades > 20, title = 'Low Profit Factor Alert', message = 'Profit Factor Below 1.0 - Strategy Performance Warning')