//@version=5
strategy("Tomas Ratio Strategy with Multi-Timeframe Analysis", overlay=false, pyramiding = 100, default_qty_type = strategy.fixed, default_qty_value = 100, initial_capital = 100, currency = currency.USDT, risk_free_rate = 7)

// Input parameters
length = input.int(720, title="Monthly Weight Length (bars)", minval=1)
deviation_length = input.int(168, title="Weekly Deviation Length (bars)", minval=1)
x_points_target = input.int(100, title="Points Target for Entry", minval=1)
Standard_Deviaton = input.bool(true, title= "Standard deviation increment")
Plot_visibility = input.bool(false, title= "Show calculation lines?")

// Calculate weekly standard deviation
deviation = ta.stdev(hlc3, deviation_length, true)
move = math.abs(hlc3 - hlc3[1])
Move_strength = Standard_Deviaton ? 1 + (move / deviation) : 1

// Define positive and negative deviations
absolute_change = (hlc3 > hlc3[1] ? 1 : -1) * Move_strength * Move_strength
gains_weight = hlc3 > hlc3[1] ? 1 * Move_strength * Move_strength : 0
loses_weight = hlc3 < hlc3[1] ? 1 * Move_strength * Move_strength : 0
gains = hlc3 > hlc3[1] ? 1  : 0
loses = hlc3 < hlc3[1] ? 1  : 0

// Adjust weights by weekly deviation
weighted_gains = (math.sum(gains, deviation_length) / deviation_length)
weighted_losses = (math.sum(loses, deviation_length) / deviation_length)

// Calculate the average positive and negative deviations
daily_positive = (math.sum(gains_weight, length) / 7)
daily_negative = (math.sum(loses_weight, length) / 7)
average_gain = daily_positive * weighted_gains
average_loss = daily_negative * weighted_losses

// Signal line
Signal_line = average_gain - average_loss

// Initialize points and open trade count
var float buy_signal_points = 0
var float buy_points = 0
var float close_points = 0
var int max_trades_open = 0

// Calculate buy signal points
if Signal_line > Signal_line[1] and buy_points > close_points
    buy_signal_points += Signal_line

if buy_signal_points <= -100
    buy_signal_points := -100
// Calculate buy points (sum of last 24 bars)
buy_points := math.sum(Signal_line > Signal_line[1] ? Signal_line : 0, 24)
// Calculate close points using Signal Line 100 SMA
ma_100 = ta.sma(Signal_line, 100)
close_points := math.sum(Signal_line < ma_100 ? math.max(Signal_line, 5) : 0, 24)
// Enter trade if conditions met
if buy_signal_points >= x_points_target and strategy.opentrades < math.round(buy_points / 100 / (x_points_target / 100)) and close > ta.ema(close, 720)
    strategy.entry("Long", strategy.long)
    buy_signal_points := 0



// Close trade if close points crossover buy points
if close_points > buy_points
    strategy.close("Long")

// Plot the lines
plot(average_gain, color=color.green, title="Bullish Line", linewidth=2, display = Plot_visibility ? display.all : display.none)
plot(average_loss, color=color.red, title="Bearish Line", linewidth=2, display = Plot_visibility ? display.all : display.none)
plot(weighted_gains * 100, color=#21f333, title="Bullish Weight", linewidth=2, display = Plot_visibility ? display.all : display.none)
plot(weighted_losses * 100, color=#f32121, title="Bearish Weight", linewidth=2, display = Plot_visibility ? display.all : display.none)
plot(Signal_line, color=color.blue, title="Signal Line", linewidth=2)
plot(ta.sma(Signal_line, 100))

// Plot buy and close points
plot(buy_signal_points, color=color.new(color.green, 50), title="Buy Signal Points", linewidth=2)
plot(buy_points, color=color.new(color.purple, 50), title="Buy Points (24 bars)", linewidth=2)
plot(close_points, color=color.new(color.red, 50), title="Close Points", linewidth=2)

// Highlight a reference line at 0
hline(0, title="Zero Line", color=color.gray)
hline(x_points_target, title="Points Target", color=color.gray, linestyle=hline.style_dotted)