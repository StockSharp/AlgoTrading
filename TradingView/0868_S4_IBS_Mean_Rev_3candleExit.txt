// ¬© TradingAlpha
//@version=6
strategy("S4_IBS_Mean_Rev_3candleExit", overlay=true, initial_capital=10000, default_qty_type=strategy.percent_of_equity, default_qty_value=100)

// === Backtest Date Range Inputs ===
StartTime = input.time(defval=timestamp('01 Jan 2024 05:00 +0000'), title='Start Time')
EndTime = input.time(defval=timestamp('31 Dec 2024 00:00 +0000'), title='End Time')
InDateRange = time >= StartTime and time <= EndTime

// === Internal Bar Strength (IBS) ===
highPrev = high[1]
lowPrev = low[1]
closePrev = close[1]
ibs = (closePrev - lowPrev) / (highPrev - lowPrev)

// === Entry Condition ===
longCondition = ibs <= 0.25

// === Track entry price and bar count ===
var float entryPrice = na
var int barsSinceEntry = 0
inTrade = strategy.position_size > 0

// === Trigger flags for plotting ===
var bool showEntry = false
var bool showExit = false

// === Entry Logic (only during 2024) ===
if (InDateRange and longCondition and not inTrade)
    strategy.entry("Long", strategy.long)
    entryPrice := na
    barsSinceEntry := 0
    showEntry := true
else
    showEntry := false

// === Count bars since entry ===
if (inTrade)
    if (na(entryPrice))
        entryPrice := strategy.opentrades.entry_price(0)
        barsSinceEntry := 1
    else
        barsSinceEntry += 1

// === Exit Logic (force close after year end) ===
profit = close > entryPrice
lossTooLong = barsSinceEntry >= 3 and close < entryPrice
normalExit = InDateRange and inTrade and (profit or lossTooLong)

// Force exit if time has passed EndTime and trade is still open
forceExit = not InDateRange and inTrade and time > EndTime

exitCondition = normalExit or forceExit

if (exitCondition)
    strategy.close("Long")
    entryPrice := na
    barsSinceEntry := 0
    showExit := true
else
    showExit := false


// === Plot IBS ===
plot(ibs, title="IBS", color=color.purple, linewidth=2)
hline(0.25, "Entry Threshold", color=color.gray)

// === Entry/Exit Markers ===
plotshape(showEntry, title="Entry", location=location.belowbar, color=color.green, style=shape.triangleup, size=size.small)
plotshape(showExit, title="Exit", location=location.abovebar, color=color.red, style=shape.triangledown, size=size.small)

// === Performance Metrics === //
var float grossProfit = 0.0
var float grossLoss = 0.0
var float lastNetProfit = 0.0
var float bestTrade = na
var float worstTrade = na

if (strategy.closedtrades > 0 and strategy.netprofit != lastNetProfit)
    tradeProfit = strategy.netprofit - lastNetProfit
    lastNetProfit := strategy.netprofit

    if tradeProfit > 0
        grossProfit += tradeProfit
    else
        grossLoss += tradeProfit

    bestTrade := na(bestTrade) or tradeProfit > bestTrade ? tradeProfit : bestTrade
    worstTrade := na(worstTrade) or tradeProfit < worstTrade ? tradeProfit : worstTrade

profitFactor = grossLoss != 0 ? math.abs(grossProfit / grossLoss) : na

totalTrades = strategy.closedtrades
totalPnL = strategy.netprofit
maxDrawdown = strategy.max_drawdown
profitableTrades = strategy.wintrades
profitablePercent = totalTrades > 0 ? (profitableTrades / totalTrades) * 100 : na

// === Table Display === //
var table perfTable = table.new(position.top_right, 2, 8, border_width=1)

if barstate.islastconfirmedhistory
    table.cell(perfTable, 0, 0, "üìä Total Trades", text_color=color.white)
    table.cell(perfTable, 1, 0, str.tostring(totalTrades), text_color=color.white)

    table.cell(perfTable, 0, 1, "‚úÖ % Profitable", text_color=color.white)
    table.cell(perfTable, 1, 1, str.tostring(profitablePercent, "#.##") + "%", text_color=profitablePercent >= 50 ? color.lime : color.red)

    table.cell(perfTable, 0, 2, "üí∞ Total P&L", text_color=color.white)
    table.cell(perfTable, 1, 2, "$" + str.tostring(totalPnL, "#.##"), text_color=totalPnL > 0 ? color.lime : color.red)

    table.cell(perfTable, 0, 3, "‚öñÔ∏è Profit Factor", text_color=color.white)
    table.cell(perfTable, 1, 3, str.tostring(profitFactor, "#.##"), text_color=profitFactor > 1 ? color.lime : color.red)

    table.cell(perfTable, 0, 4, "üèÅ Max Drawdown", text_color=color.white)
    table.cell(perfTable, 1, 4, "$" + str.tostring(maxDrawdown, "#.##"), text_color=color.white)

    table.cell(perfTable, 0, 5, "üåü Best Trade", text_color=color.white)
    table.cell(perfTable, 1, 5, "$" + str.tostring(bestTrade, "#.##"), text_color=color.lime)

    table.cell(perfTable, 0, 6, "‚ö†Ô∏è Worst Trade", text_color=color.white)
    table.cell(perfTable, 1, 6, "$" + str.tostring(worstTrade, "#.##"), text_color=color.red)