//@version=6
strategy("EMA and Dow Theory Strategies", overlay=true, initial_capital = 1660, commission_type=strategy.commission.percent, commission_value=0.055, margin_long = 0.001, margin_short = 0.001, precision = 4)

// =====================
// 入力
// =====================
// 現在の銘柄および参照インデックスのEMA
lenFast                         = input.int(47, "Fast EMA", group = " ───────────────[ SETTINGS ]")
lenSlow                         = input.int(50, "Slow EMA", group = " ───────────────[ SETTINGS ]")
idxlenFast                      = input.int(47, "Index Fast EMA", group = " ───────────────[ SETTINGS ]")
idxlenSlow                      = input.int(50, "Index Slow EMA", group = " ───────────────[ SETTINGS ]")

// 利確および損切りの閾値
StopLoss                      = input.float(-5,"損切り", step=0.5, group = " ───────────────[ TAKE PROFIT / STOP LOSS ]")
ScaleOut_Perc_onChangeColor     = input.float(65., "スケール調整の割合", group = " ───────────────[ TAKE PROFIT / STOP LOSS ]")

// =====================
// ユーザー設定：テーブルの位置
// =====================
ShowTradePnL                     = input.bool(true, "直近トレードの損益ラベルを表示しますか？", group=" ───────────────[ STATS DISPLAY ]")
tablePositionInput               = input.string("Bottom Right", title="統計テーブルの位置", options=["Top Left", "Top Right", "Bottom Left", "Bottom Right"], group=" ───────────────[ STATS DISPLAY ]")

// =====================
// 計算処理
// =====================
// 現在の銘柄および参照インデックスのEMA計算
this_ema1 = ta.ema(close, lenFast)
this_ema2 = ta.ema(close, lenSlow)

oth_price = request.security("CRYPTOCAP:OTHERS.D", timeframe.period, close, lookahead = barmerge.lookahead_off)
oth_ema1 = ta.ema(oth_price, idxlenFast)
oth_ema2 = ta.ema(oth_price, idxlenSlow)

var float Equity_AtStartTrade = na
var float TruePnL = na
TruePnL := na(Equity_AtStartTrade) ? na : ((strategy.equity / Equity_AtStartTrade) - 1.0) * 100.0
// =====================
// エントリー条件
// =====================

// === 変数の初期化（最上部に配置） ===
var int rsiExitCount = 0
var bool waitForColorChange = false

goLong  = (this_ema1 >= this_ema2 and oth_ema1 < oth_ema2) or (this_ema1 > this_ema2)
goShort = (this_ema1 < this_ema2 and oth_ema1 > oth_ema2) or (this_ema1 < this_ema2)

// 相関状態に基づいて色を割り当てる
color_This = this_ema1 >= this_ema2 and oth_ema1 >= oth_ema2 ? color.lime : this_ema1 >= this_ema2 and oth_ema1 < oth_ema2 ?  color.teal : this_ema1 < this_ema2 and oth_ema1 > oth_ema2 ? color.maroon :  color.red

// 📌 スイング検出期間の設定
length = input.int(6, minval=1, title="スイング検出期間")
// ==============================
// 🔍 スイング判定（現時間足）
// ==============================
isSwingHigh = high[length] == ta.highest(high, length * 2 + 1)
isSwingLow  = low[length] == ta.lowest(low, length * 2 + 1)

swingHighPrice = isSwingHigh ? high[length] : na
swingLowPrice  = isSwingLow  ? low[length]  : na

var float lastSwingHigh = na
var float lastSwingLow = na
lastSwingHigh := na(swingHighPrice) ? lastSwingHigh : swingHighPrice
lastSwingLow  := na(swingLowPrice)  ? lastSwingLow  : swingLowPrice

// ==============================
// 📊 トレンド判定（現時間足）
// ==============================
var int trend = 0  // 1 = 上昇, -1 = 下降, 0 = 未定
if not na(lastSwingHigh) and close > lastSwingHigh and trend != 1
    trend := 1
if not na(lastSwingLow) and close < lastSwingLow and trend != -1
    trend := -1

// ==============================
// 🖍 スイングライン描画
// ==============================
plot(trend == -1 ? lastSwingHigh : na, title="スイングハイ", color=color.red, linewidth=1)
plot(trend == 1 ? lastSwingLow  : na, title="スイングロー", color=color.green, linewidth=1)

// ==============================
// 🎨 グラデーションゾーン描画
// ==============================
barPrice = close

// スイングハイ → 赤グラデーション
swingHigh_base = trend == -1 ? lastSwingHigh : na
swingHigh_s1 = trend == -1 ? swingHigh_base - (swingHigh_base - barPrice) * 0.2 : na
swingHigh_s2 = trend == -1 ? swingHigh_base - (swingHigh_base - barPrice) * 0.4 : na
swingHigh_s3 = trend == -1 ? swingHigh_base - (swingHigh_base - barPrice) * 0.6 : na
swingHigh_s4 = trend == -1 ? swingHigh_base - (swingHigh_base - barPrice) * 0.8 : na
swingHigh_end = trend == -1 ? barPrice : na

swingHigh_p0 = plot(swingHigh_base, display=display.none)
swingHigh_p1 = plot(swingHigh_s1, display=display.none)
swingHigh_p2 = plot(swingHigh_s2, display=display.none)
swingHigh_p3 = plot(swingHigh_s3, display=display.none)
swingHigh_p4 = plot(swingHigh_s4, display=display.none)
swingHigh_p5 = plot(swingHigh_end,  display=display.none)

fill(swingHigh_p0, swingHigh_p1, color=color.new(color.red, 20))
fill(swingHigh_p1, swingHigh_p2, color=color.new(color.red, 40))
fill(swingHigh_p2, swingHigh_p3, color=color.new(color.red, 60))
fill(swingHigh_p3, swingHigh_p4, color=color.new(color.red, 80))
fill(swingHigh_p4, swingHigh_p5, color=color.new(color.red, 90))

// スイングロー → 緑グラデーション
swingLow_base = trend == 1 ? lastSwingLow : na
swingLow_s1 = trend == 1 ? swingLow_base + (barPrice - swingLow_base) * 0.2 : na
swingLow_s2 = trend == 1 ? swingLow_base + (barPrice - swingLow_base) * 0.4 : na
swingLow_s3 = trend == 1 ? swingLow_base + (barPrice - swingLow_base) * 0.6 : na
swingLow_s4 = trend == 1 ? swingLow_base + (barPrice - swingLow_base) * 0.8 : na
swingLow_end = trend == 1 ? barPrice : na

swingLow_p0 = plot(swingLow_base, display=display.none)
swingLow_p1 = plot(swingLow_s1, display=display.none)
swingLow_p2 = plot(swingLow_s2, display=display.none)
swingLow_p3 = plot(swingLow_s3, display=display.none)
swingLow_p4 = plot(swingLow_s4, display=display.none)
swingLow_p5 = plot(swingLow_end,  display=display.none)

fill(swingLow_p0, swingLow_p1, color=color.new(color.green, 20))
fill(swingLow_p1, swingLow_p2, color=color.new(color.green, 40))
fill(swingLow_p2, swingLow_p3, color=color.new(color.green, 60))
fill(swingLow_p3, swingLow_p4, color=color.new(color.green, 80))
fill(swingLow_p4, swingLow_p5, color=color.new(color.green, 90))

//上位足引きます

// ==============================
// 🕒 上位足スイングとトレンド判定
// ==============================
tf = timeframe.period
htf = tf == "1" ? "5" : tf == "3" ? "5" : tf == "5" ? "15" : tf == "15" ? "30" : tf == "30" ? "60" : tf == "60" ? "240" : tf == "240" ? "D" : tf == "D" ? "W" : tf == "W" ? "M" : tf == "M" ? "12M" : ""

htfSwingHigh = request.security(syminfo.tickerid, "240", ta.pivothigh(high, length, length) )
htfSwingLow  = request.security(syminfo.tickerid, "240", ta.pivotlow(low, length, length) )

var float lastHTFSwingHigh = na
var float lastHTFSwingLow  = na
lastHTFSwingHigh := na(htfSwingHigh) ? lastHTFSwingHigh : htfSwingHigh
lastHTFSwingLow  := na(htfSwingLow)  ? lastHTFSwingLow  : htfSwingLow

htfClose = request.security(syminfo.tickerid, "240", close)
var int htfTrend = 0
if not na(lastHTFSwingHigh) and htfClose > lastHTFSwingHigh and htfTrend != 1
    htfTrend := 1
if not na(lastHTFSwingLow) and htfClose < lastHTFSwingLow and htfTrend != -1
    htfTrend := -1

plot(htfTrend == -1 ? lastHTFSwingHigh : na, title="上位足スイングハイ", color=color.fuchsia, linewidth=2)
plot(htfTrend == 1 ? lastHTFSwingLow  : na, title="上位足スイングロー", color=color.aqua, linewidth=2)
//上位足引きます

// =====================
// イグジット条件
// =====================

// リアルタイムの損益を追跡し、動的なイグジットを実行する
var PnL = 0.
LastTriggeredPrice = strategy.opentrades.entry_price(strategy.opentrades - 1)
if strategy.position_size > 0.0 and LastTriggeredPrice != 0.0
    PnL := ((close - LastTriggeredPrice) / LastTriggeredPrice) * 100.0
else if strategy.position_size < 0.0 and LastTriggeredPrice != 0.0
    PnL := ((LastTriggeredPrice - close) / LastTriggeredPrice) * 100.0

// 動的な部分利確ロジック、カスタム損切りおよび利確設定
var TruePnLToDisplay = PnL
var DontGo = ""

if (PnL < StopLoss) and math.abs(strategy.position_size) != 0.0
    if strategy.position_size > 0. and not goShort
        DontGo := "LONG"
        strategy.close("Long","STOPLOSS Long")
        alert('{"Symbol":"' + syminfo.ticker + '","Side":"Buy","Price":' + str.tostring(close) + ',"Exit":true,"HalfExit":false, "Vertion":"3"}', alert.freq_once_per_bar)
        rsiExitCount += 1
    if strategy.position_size < 0. and not goLong
        DontGo := "SHORT"
        strategy.close("Short","STOPLOSS Short")
        alert('{"Symbol":"' + syminfo.ticker + '","Side":"Sell","Price":' + str.tostring(close) + ',"Exit":true,"HalfExit":false, "Vertion":"3"}', alert.freq_once_per_bar)
        rsiExitCount += 1


// === 色切り替えでエントリー再許可 ===
if waitForColorChange and color_This != color_This[1]
    waitForColorChange := false
    rsiExitCount := 0

// RSI設定
rsiLength = input.int(14, title="RSI期間")
rsiOverbought = input.int(70, title="過熱水準")
rsiOversold = input.int(30, title="売られすぎ水準")

// RSIの計算
rsi = ta.rsi(close, rsiLength)

// === エントリー条件に制限を追加 ===

canEnter = not waitForColorChange or rsiExitCount < 2


// トレンド条件が改善したときに「DontGo」をリセットする
if DontGo == "LONG" and (color_This[1] == color.lime or color_This[1] == color.teal) and color_This != color.maroon
    DontGo := ""
if DontGo == "SHORT" and (color_This[1] == color.red or color_This[1] == color.maroon) and color_This != color.teal
    DontGo := ""

// ポジションごとの重複スケールアウトを防止するフラグ
var Scaled = false

// トレンドが弱まったがまだ利益があるときに部分利確を行う
if strategy.position_size > 0. and (color_This[1] == color.lime and color_This != color.lime) and PnL > 0.1 and not Scaled and not goShort
    strategy.close('Long', comment = "ScaleOut Long", qty_percent = 50)
    alert('{"Symbol":"' + syminfo.ticker + '","Side":"Buy","Price":' + str.tostring(close) + ',"Exit":true,"HalfExit":true, "Vertion":"3"}', alert.freq_once_per_bar)
    Scaled := true

if strategy.position_size < 0. and (color_This[1] == color.red and color_This != color.red) and PnL > 0.1 and not Scaled and not goLong
    strategy.close('Short', comment = "ScaleOut Short", qty_percent = 50)
    alert('{"Symbol":"' + syminfo.ticker + '","Side":"Sell","Price":' + str.tostring(close) + ',"Exit":true,"HalfExit":true, "Vertion":"3"}', alert.freq_once_per_bar)
    Scaled := true



// =======================
// エントリー / 反転
// =======================

if trend == 1 and strategy.position_size < 0
    strategy.close("Short","rsi70Signal")
    alert('{"Symbol":"' + syminfo.ticker + '","Side":"Sell","Price":' + str.tostring(close) + ',"Exit":true,"HalfExit":false, "Vertion":"3"}', alert.freq_once_per_bar)
    rsiExitCount += 1

if trend == -1 and strategy.position_size > 0
    strategy.close("Long","rsi70Signal")
    alert('{"Symbol":"' + syminfo.ticker + '","Side":"Buy","Price":' + str.tostring(close) + ',"Exit":true,"HalfExit":false, "Vertion":"3"}', alert.freq_once_per_bar)
    rsiExitCount += 1

// goLong / goShort にRSI条件を反映
allowLong  = goLong
allowShort = goShort

if strategy.position_size <= 0. and allowLong and DontGo != "LONG" and canEnter
        // もしショートを持っていたら先にクローズ
    if strategy.position_size < 0
        strategy.close("Short", comment = "Exit Short Before Long")
        alert('{"Symbol":"' + syminfo.ticker + '","Side":"Sell","Price":' + str.tostring(close) + ',"Exit":true,"HalfExit":false, "Vertion":"3"}', alert.freq_once_per_bar)

    if strategy.position_size == 0 and trend == 1  and rsi < rsiOverbought
        Equity_AtStartTrade := strategy.equity
        strategy.entry("Long", strategy.long)
        alert('{"Symbol":"' + syminfo.ticker + '","Side":"Buy","Price":' + str.tostring(close) + ',"Exit":false,"HalfExit":false, "Vertion":"3","Stop":'+str.tostring(0)+'}', alert.freq_once_per_bar_close)
        Scaled := false
        DontGo := ""
if strategy.position_size >= 0. and allowShort and DontGo != "SHORT" and canEnter
    // もしロングを持っていたら先にクローズ
    if strategy.position_size > 0
        strategy.close("Long", comment = "Exit Long Before Short")
        alert('{"Symbol":"' + syminfo.ticker + '","Side":"Buy","Price":' + str.tostring(close) + ',"Exit":true,"HalfExit":false, "Vertion":"3"}', alert.freq_once_per_bar)

    if strategy.position_size == 0 and trend == -1 and rsi > rsiOversold
        Equity_AtStartTrade := strategy.equity
        strategy.entry("Short", strategy.short)
        alert('{"Symbol":"' + syminfo.ticker + '","Side":"Sell","Price":' + str.tostring(close) + ',"Exit":false,"HalfExit":false, "Vertion":"3","Stop":'+str.tostring(0)+'}', alert.freq_once_per_bar_close)
        Scaled := false
        DontGo := ""


//
//-----<VISUALS>-----------------------------------------------------------------------------------------------<>

// =====================
// デバッグプロット
// =====================
// 現在の銘柄およびインデックス銘柄の資産価値やEMAなど、有用なデバッグ値をプロットする
plotchar(strategy.equity,"資産残高","",location.top,color=color.white)
plotchar(this_ema1,"this_ema1","",location.top,color=color.yellow)
plotchar(this_ema2,"this_ema2","",location.top,color=color.yellow)
plotchar(oth_ema1,"oth_ema1","",location.top,color=color.purple)
plotchar(oth_ema2,"oth_ema2","",location.top,color=color.purple)
colorPnL = PnL > 0.0? color.green : color.red
plotchar(PnL,"PnL","",location.top,color=colorPnL)
plotchar(TruePnL,"TruePnL","",location.top,color=color.aqua)

// =====================
// 直近トレードの損益プロット
// =====================
// チャート上に直近トレードの損益（％）を表示する視覚ラベル
//

rangeR = high - low
avgRangeR = ta.sma(rangeR, 20)
if strategy.closedtrades > 0
    lastTradeIndex = strategy.closedtrades - 1
    lastTradeProfit = strategy.closedtrades.profit_percent(lastTradeIndex)
    lastTradeEntryBar = strategy.closedtrades.exit_bar_index(lastTradeIndex)
    lastTradeDirection = strategy.closedtrades.size(lastTradeIndex)

    // 直近のトレードがこのバーで決済された場合
    if lastTradeEntryBar == bar_index
        tradeColor = TruePnLToDisplay > 0 ? color.green : color.red
        uscitaFinale = strategy.position_size == 0. or lastTradeDirection > 0.0 and strategy.position_size < 0. or lastTradeDirection < 0.0 and strategy.position_size > 0.
        _size = size.normal
        SO_PnL = TruePnLToDisplay * (ScaleOut_Perc_onChangeColor / 100.)
        Perc_PL = str.tostring(math.round(SO_PnL, 1)) + '%' + "\n(" + str.tostring(math.round(PnL[1],1)) + '%' + ")"
        text_color = color.black
        if uscitaFinale
            _size   := size.large
            Perc_PL := str.tostring(math.round(TruePnLToDisplay, 1)) + '%' + "\n(" + str.tostring(math.round(lastTradeProfit,1)) + '%' + ")"
            text_color := color.white
        TradePL_Y_pos = high+(avgRangeR*5)
        ProOPer = label.new(x = bar_index, y = TradePL_Y_pos, text = Perc_PL, color = tradeColor, textcolor = text_color, style = label.style_label_down, size = _size)
    else
        TruePnLToDisplay := TruePnL

// =====================
// 背景の色付け
// =====================
// エントリー価格と終値の間の背景を塗りつぶし、ポジションの視覚的な目安を表示する
lowestClose = ta.lowest(close, 10)
_css = strategy.position_size == 0.0 ? color.gray : strategy.position_size > 0.0 ? color.yellow : strategy.position_size < 0.0 ? color.purple :  na
plotBottom = LastTriggeredPrice
if strategy.position_size == 0.0
    _css := color.white
    plotBottom := lowestClose
_plot0 = plot(plotBottom, color=na)
_plot1 = plot(close, color=na)
fill(_plot0,_plot1,color.new(_css,70))

// EMAトレンドラインを強調表示する
plot(this_ema2,"This SlowEMA",color=color_This, linewidth = 2)
plot(this_ema1,"This SlowEMA",color=color_This, linewidth = 2)


//
// ============================================================================== 最終統計 ========

// === 最終統計（現在のトレードを含む） ===
totalTrades     = strategy.closedtrades + (strategy.opentrades > 0 ? 1 : 0)
winningTrades   = strategy.wintrades + (strategy.opentrades > 0 and strategy.openprofit > 0 ? 1 : 0)
losingTrades    = totalTrades - winningTrades
openProfit      = strategy.openprofit
netProfit       = strategy.netprofit + openProfit
netProfitPerc   = netProfit / strategy.initial_capital * 100
winRate         = totalTrades > 0 ? winningTrades / totalTrades * 100 : na
max_drawdown_percent = strategy.max_drawdown_percent

// 現在のトレードの損益（％）を計算する
thisTradePnl    = strategy.opentrades > 0 ? strategy.openprofit : 0
thisTradePerc   = strategy.opentrades > 0 and strategy.opentrades.entry_price(0) > 0 ?  thisTradePnl / (strategy.opentrades.entry_price(0) * math.abs(strategy.opentrades.size(0))) * 100 : 0

// 年間利回り（APR：年率換算リターン）を計算する
firstTradeTime  = strategy.closedtrades > 0 ? strategy.closedtrades.entry_time(0) : na
lastTradeTime   = timenow
daysRunning     = (lastTradeTime - firstTradeTime) / (1000 * 60 * 60 * 24)
daysRounded     = math.round(daysRunning)
apr             = daysRunning > 0 ? (math.pow((strategy.equity / strategy.initial_capital), (365 / daysRunning)) - 1) * 100 : na
Result           = str.tostring(math.round(strategy.equity / strategy.initial_capital,1)) + "x"
color_Result     = netProfit > 0 ? color.green : netProfit < 0 ? color.red : color.gray
icon_Result      = thisTradePnl > 0 ? "💚" : thisTradePnl < 0 ? "😡" :"📊"

// === ドローダウン（DD）、年間利回り（APR）、損益（PnL）に基づく色分け ===
ddColor = max_drawdown_percent <= 20  ? color.rgb(0, 255, 132)   :
          max_drawdown_percent <= 35  ? color.green  :
          max_drawdown_percent <= 50  ? color.white  :
          max_drawdown_percent <= 70  ? color.yellow :
          max_drawdown_percent <= 85  ? color.orange :
          max_drawdown_percent <= 99  ? color.red    : color.maroon

aprColor = apr > 500     ? color.rgb(0, 255, 132)   :
           apr > 100     ? color.green  :
           apr >= 0      ? color.white  :
           apr >= -20    ? color.yellow :
           apr >= -50    ? color.orange :
           apr >= -90    ? color.red    : color.maroon

thisTradeColor = thisTradePnl > 0 ? color.green : thisTradePnl < 0 ? color.red : color.gray
totalPnlColor  = netProfit > 0 ? color.green : netProfit < 0 ? color.red : color.gray
totalPnlPercColor = netProfitPerc > 0 ? color.green : netProfitPerc < 0 ? color.red : color.gray

apr_STR = str.tostring(apr, "#.##") + "%"
if apr > 100000
    apr_STR := "💰💰💰💰💰"