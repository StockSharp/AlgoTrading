// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © RicardoSantos

//@version=6

// @description Mathematical Constants
library(title='MathConstants')

//#region   reference:
//        https://github.com/mathnet/mathnet-numerics/blob/master/src/Numerics/Constants.cs
//        https://en.wikipedia.org/wiki/List_of_mathematical_constants
//      https://www.ibm.com/docs/en/db2/11.1.0?topic=system-double-data-type
//#endregion

// A collection of frequently used mathematical constants.

//#region   Mathematical Constants

// @variable Euler's Number. Limit of `(1 + 1/n)^n` as `n` approaches infinity; transcendental number approximately `2.718` or a angle of `156º`.
export const float E = 2.7182818284590452353602874713526624977572470937000

// @variable Base 2 logarithm of `e`, `log[2](e)`, approximately `1.442` or a angle of `83º`.
export const float Log2E = 1.4426950408889634073599246810018921374266459541530

// @variable Base 10 logarithm of `e`, `log[10](e)`, approximately `0.434` or a angle of `25º`.
export const float Log10E = 0.43429448190325182765112891891660508229439700580366

// @variable Natural logarithm of 2, `log[e](2)`, approximately 0.693 or a angle of `40º`. The natural logarithm of x is the power to which e would have to be raised to equal x.
export const float Ln2 = 0.69314718055994530941723212145817656807550013436026

// @variable Natural logarithm of 10, `log[e](10)`, approximately `2.302` or a angle of `132º`. The natural logarithm of x is the power to which e would have to be raised to equal x.
export const float Ln10 = 2.3025850929940456840179914546843642076011014886288

// @variable Natural logarithm of `π`, `log[e](pi)`, approximately `1.144` or a angle of `66º`. The natural logarithm of x is the power to which e would have to be raised to equal x.
export const float LnPi = 1.1447298858494001741434273513530587116472948129153

// @variable Natural logarithm of `2π/2`, `log[e](2*pi)/2`, approximately `0.918` or a angle of `53º`
export const float Ln2PiOver2 = 0.91893853320467274178032973640561763986139747363780

// @variable Reciprocal of `e`, `1/e`, approximately `0.367` or a angle of `21º`.
export const float InvE = 0.36787944117144232159552377016146086744581113103176

// @variable Square root of `e`, `sqrt(e)`, approximately `1.648` or a angle of `95º`.
export const float SqrtE = 1.6487212707001281468486507878141635716537761007101

// @variable Pythagoras Constant, `sqrt(2)`, approximately `1.414` or a angle of `81º`.
export const float Sqrt2 = 1.4142135623730950488016887242096980785696718753769

// @variable Theodorus Constant, `sqrt(3)`, approximately `1.732` or a angle of `99º`.
export const float Sqrt3 = 1.7320508075688772935274463415058723669428052538104

// @variable Square root of `1/2`, `sqrt(1/2)` = `1/sqrt(2)` = `sqrt(2)/2`, approximately `0.707` or a angle of `40º`.
export const float Sqrt1Over2 = 0.70710678118654752440084436210484903928483593768845

// @variable Half the square root of `3`, `sqrt(3)/2`, approximately `0.866` or a angle of `50º`.
export const float HalfSqrt3 = 0.86602540378443864676372317075293618347140262690520

// @variable The number `pi`, mathemathical constant representing the ratio of a circle's circumference to its diameter, approximately `3.141` or a angle of `180º`.
export const float Pi = 3.1415926535897932384626433832795028841971693993751

// @variable The number `Tau` is the ratio of a circle's circumference to its radius, `pi*2`, approximately `6.283` or a angle of `360º`.
export const float Pi2 = 6.2831853071795864769252867665590057683943387987502

// @variable The number `Tau` is the ratio of a circle's circumference to its radius, `pi*2`, approximately `6.283` or a angle of `360º`.
export const float Tau = 6.2831853071795864769252867665590057683943387987502

// @variable Half Pi, `pi/2`, approximately `1.570` or a angle of `90º`.
export const float PiOver2 = 1.5707963267948966192313216916397514420985846996876

// @variable Represents a angle of `270º` in radeans or `3/4` of a circle's circumference, `pi*3/2`, approximately `4.712`.
export const float Pi3Over2 = 4.71238898038468985769396507491925432629575409906266

// @variable Represents a angle of `45º` in radeans or `1/4` of a circles's circumference, `pi/4`, approximately `0.785`.
export const float PiOver4 = 0.78539816339744830961566084581987572104929234984378

// @variable Square root of Pi, `sqrt(pi)`, approximately `1.772` or a angle of`101º`.
export const float SqrtPi = 1.7724538509055160272981674833411451827975494561224

// @variable Square root of `Pi2`, `sqrt(2pi)`, approximately `2.506` or a angle of `144º`.
export const float Sqrt2Pi = 2.5066282746310005024157652848110452530069867406099

// @variable Square root of half Pi, `sqrt(pi/2)`, approximately `1.253` or a angle of `72º`.
export const float SqrtPiOver2 = 1.2533141373155002512078826424055226265034933703050

// @variable The number `sqrt(2*pi*e)`, approximately `4.132 or a angle of `237º`.
export const float Sqrt2PiE = 4.1327313541224929384693918842998526494455219169913

// @variable The number `log(sqrt(2*pi))`, approximately `0.918` or a angle of `52º`.
export const float LogSqrt2Pi = 0.91893853320467274178032973640561763986139747363778

// @variable The number `log(sqrt(2*pi*e))`, approximately `1.418` or a angle of `81º`.
export const float LogSqrt2PiE = 1.4189385332046727417803297364056176398613974736378

// @variable The number `log(2 * sqrt(e / pi))`, approximately `0.62` or a angle of `35º`.
export const float LogTwoSqrtEOverPi = 0.6207822376352452223455184457816472122518527279025978

// @variable Inverse of Pi, `1/pi`, approximately `0.318` or a angle of `18º`.
export const float InvPi = 0.31830988618379067153776752674502872406891929148091

// @variable Double the Inverse of Pi, `2/pi`, approximately `0.636` or a angle of `36º`.
export const float TwoInvPi = 0.63661977236758134307553505349005744813783858296182

// @variable Inverse of the Square of Pi, `1/sqrt(pi)`, approximately `0.564` or a angle of `32º`.
export const float InvSqrtPi = 0.56418958354775628694807945156077258584405062932899

// @variable The number `1/sqrt(2pi)`, approximately `0.398` or a angle of `23º`.
export const float InvSqrt2Pi = 0.39894228040143267793994605993438186847585863116492

// @variable The number `2/sqrt(pi)`, approximately `1.128` or a angle of `65º`.
export const float TwoInvSqrtPi = 1.1283791670955125738961589031215451716881012586580

// @variable The number `2 * sqrt(e / pi)`, approximately `1.86` or a angle of `107º`.
export const float TwoSqrtEOverPi = 1.8603827342052657173362492472666631120594218414085755

// @variable The cubic root of 2, approximately `1.26` or a angle of `72º`.
export const float Curt2 = 1.25992104989487316476

// @variable The cubic root of 3, approximately `1.44` or a angle of `83º`.
export const float Curt3 = 1.44224957030740838232

// @variable The number `(pi)/180`, factor to convert from Degree (deg) to Radians (rad), approximately `0.017` or a angle of `1º`.
export const float Degree = 0.017453292519943295769236907684886127134428718885417

// @variable The number `(pi)/200`, factor to convert from NewGrad (grad) to Radians (rad), approximately `0.015`.
export const float Grad = 0.015707963267948966192313216916397514420985846996876

// @variable The number `ln(10)/20`, factor to convert from Power Decibel (`dB`) to Neper (`Np`). Use this version when the Decibel represent a power gain but the compared values are not powers (e.g. amplitude, current, voltage), approximately `0.115` or a angle of `7º`.
export const float PowerDecibel = 0.11512925464970228420089957273421821038005507443144

// @variable The number `ln(10)/10`, factor to convert from Neutral Decibel (`dB`) to Neper (`Np`). Use this version when either both or neither of the Decibel and the compared values represent powers, approximately `0.23` or a angle of `23º`.
export const float NeutralDecibel = 0.23025850929940456840179914546843642076011014886288

// @variable The Catalan constant `Sum(k=0 -> inf){ (-1)^k/(2*k + 1)2 }`, approximately `0.915` or a angle of `52º`.
export const float Catalan = 0.9159655941772190150546035149323841107741493742816721342664981196217630197762547694794

// @variable The Euler-Mascheroni constant `lim(n -> inf){ Sum(k=1 -> n) { 1/k - log(n) } }`, approximately `0.577` or a angle of `33º`.
export const float EulerMascheroni = 0.5772156649015328606065120900824024310421593359399235988057672348849

// @variable The number `(1+sqrt(5))/2`, also known as the Golden Ratio, approximately `1.618` or a angle of `93º`.
export const float GoldenRatio = 1.6180339887498948482045868343656381177203091798057628621354486227052604628189024497072

// @variable The number `(1+sqrt(5))/2`, also known as the Golden Ratio, approximately `1.618` or a angle of `93º`.
export const float Phi = 1.6180339887498948482045868343656381177203091798057628621354486227052604628189024497072

// @variable Super Golden Ratio. In mathematics, the supergolden ratio is a geometrical proportion, given by the unique real solution of the equation `x3 = x2 + 1`, approximately `1.466` or a angle of `84º`.
export const float SuperGoldenRatio = 1.46557123187676802665

// @variable The number `sqrt(2)+1`, also known as the Silver ratio, approximately `2.414` or a angle of `138º`.
export const float SilverRatio = 2.41421356237309504880

// @variable The number Glaisher constant `e^(1/12 - Zeta(-1))`, approximately `1.282` or a angle of `73º`.
export const float Glaisher = 1.2824271291006226368753425688697917277676889273250011920637400217404063088588264611297

// @variable The Khinchin constant `prod(k=1 -> inf){1+1/(k*(k+2))^log(k,2)}`, approximately `2.685` or a angle of `154º`.
export const float Khinchin = 2.6854520010653064453097148354817956938203822939944629530511523455572188595371520028011

// @variable The Connective constant for the hexagonal lattice, approximately `1.85` or a angle of `105º`.
export const float Connective = 1.84775906502257351225

// @variable Kepler–Bouwkamp constant. In plane geometry, the Kepler–Bouwkamp constant (or polygon inscribing constant) is obtained as a limit of the following sequence. Take a circle of radius 1. Inscribe a regular triangle in this circle. Inscribe a circle in this triangle. Inscribe a square in it. Inscribe a circle, regular pentagon, circle, regular hexagon and so forth. The radius of the limiting circle is called the Kepler–Bouwkamp constant.
export const float  KeplerBouwkamp = 0.11494204485329620070

// @variable Walli's constant, approximately `2.09`.
export const float  Walli = 2.09455148154232659148

// @variable Lemniscate constant, approximately `2.62`.
export const float  Lemniscate = 2.62205755429211981046

// @variable Euler constant, approximately `0.58`.
export const float  Euler = 0.57721566490153286060

// @variable Erdos-Borwein constant, approximately `1.60`.
export const float  ErdosBorwein = 1.60669515241529176378

// @variable Omega constant, approximately `0.57`.
export const float  Omega = 0.56714329040978387299

// @variable Aperys constant, approximately `1.20`.
export const float  Aperys = 1.20205690315959428539

// @variable Laplace Limit, approximately `0.66`.
export const float  LaplaceLimit = 0.66274341934918158097

// @variable Soldner constant, approximately `1.45`.
export const float  Soldner = 1.45136923488338105028

// @variable Gauss constant, approximately `0.83`.
export const float  Gauss = 0.83462684167407318628

// @variable SecondHermite constant, approximately `1.15`.
export const float  SecondHermite = 1.15470053837925152901

// @variable Liouville's constant, approximately `0.11`.
export const float  Liouville = 0.110001000000000000000001

// @variable First Continued Fraction constant, approximately `0.69`.
export const float  FirstContinuedFraction = 0.69777465796400798201

// @variable Ramanujan's constant.
export const float  Ramanujan = 262537412640768743.999999999999250073

// @variable Glaisher Kinkelin constant, approximately `1.28`.
export const float  GlaisherKinkelin = 1.28242712910062263687

// @variable Dottie number, approximately `0.74`.
export const float  Dottie = 0.73908513321516064165

// @variable Meissel Mertens constant, approximately `0.26`.
export const float  MeisselMertens = 0.26149721284764278375

// @variable Universal Parabolic constant, approximately `2.29`.
export const float  UniversalParabolic = 2.29558714939263807403

// @variable Cahen's constant, approximately `0.64`.
export const float  Cahen = 0.64341054628833802618

// @variable Gelfond's constant, approximately `23.14`.
export const float  Gelfond = 23.1406926327792690057

// @variable Gelfond-Schneider constant, approximately `2.66`.
export const float  GelfondSchneider = 2.66514414269022518865

// @variable SecondFavard constant, approximately `1.23`.
export const float  SecondFavard = 1.23370055013616982735

// @variable Golden Angle constant, approximately `2.39`.
export const float  GoldenAngle = 2.39996322972865332223

// @variable Sierpiński's constant, approximately `2.58`.
export const float  Sierpinski = 2.58498175957925321706

// @variable Landau-Ramanujan constant, approximately `0.76`.
export const float  LandauRamanujan = 0.76422365358922066299

// @variable Nielsen-Ramanujan constant, approximately `0.82`.
export const float  NielsenRamanujan = 0.82246703342411321823

// @variable Gieseking constant, approximately `1.01`.
export const float  Gieseking = 1.01494160640965362502

// @variable Bernstein's constant, approximately `0.28`.
export const float  Bernstein = 0.28016949902386913303

// @variable Tribonacci constant, approximately `1.83`.
export const float  Tribonacci = 1.83928675521416113255

// @variable Brun's constant, approximately `0.57`.
export const float  Brun = 1.902160583104

// @variable Plastic Ratio, approximately `1.32`.
export const float  PlasticRatio = 1.32471795724474602596

// @variable Bloch's constant, approximately `0.43`.
export const float  BlochMin = 0.4332

// @variable Bloch's constant, approximately `0.47`.
export const float  BlochMax = 0.4719

// @variable Z Score for the 97.5 percentile point, approximately `1.96`.
export const float  ZScore975 = 1.95996398454005423552

// @variable Landau's constant, approximately `0.5`.
export const float  LandauMin = 0.5

// @variable Landau's constant, approximately `0.54`.
export const float  LandauMax = 0.54326

// @variable Landau's Third constant, approximately `0.5`.
export const float  LandauThirdMin = 0.5

// @variable Landau's Third constant, approximately `0.78`.
export const float  LandauThirdMax = 0.7853

// @variable Prouhet-Thue-Morse constant, approximately `0.41`.
export const float  ProuhetThueMorse = 0.41245403364010759778

// @variable Golomb-Dickman constant, approximately `0.62`.
export const float  GolombDickman = 0.62432998854355087099

// @variable Feller-Tornier constant, approximately `0.66`.
export const float  FellerTornier = 0.66131704946962233528

// @variable Salem constant, approximately `1.17`.
export const float  Salem = 1.17628081825991750654

// @variable Levy constant, approximately `1.18`.
export const float  Levy1 = 1.18656911041562545282

// @variable Levy constant, approximately `3.27`.
export const float  Levy2 = 3.27582291872181115978

// @variable Copeland-Erdos constant, approximately `0.23`.
export const float  CopelandErdos = 0.23571113171923293137

// @variable Mills constant, approximately `1.30`.
export const float  Mills = 1.30637788386308069046

// @variable Gompertz constant, approximately `0.59`.
export const float  Gompertz = 0.59634736232319407434

// @variable DeBruijn-Newman constant, approximately `0.0`.
export const float  DeBruijnNewmanMin = 0.0

// @variable DeBruijn-Newman constant, approximately `0.2`.
export const float  DeBruijnNewmanMax = 0.2

// @variable VanDerPauw constant, approximately `4.53`.
export const float  VanDerPauw = 4.53236014182719380962

// @variable Magic Angle constant, approximately `0.95`.
export const float  MagicAngle = 0.955316618124509278163

// @variable Artin's constant, approximately `0.37`.
export const float  Artin = 0.37395581361920228805

// @variable Porter's constant, approximately `1.46`.
export const float  Porter = 1.46707807943397547289

// @variable Lochs constant, approximately `0.97`.
export const float  Lochs = 0.97027011439203392574

// @variable DeVicci's Tesseract constant, approximately `1.00`.
export const float  DeVicciTesseract = 1.00743475688427937609

// @variable Lieb's Square Ice constant, approximately `1.53`.
export const float  LiebSquareIce = 1.53960071783900203869

// @variable Niven's constant, approximately `1.70`.
export const float  Niven = 1.70521114010536776428

// @variable Stephens constant, approximately `0.57`.
export const float  Stephens = 0.57595996889294543964

// @variable Regular Paperfolding sequence, approximately `0.85`.
export const float  RegularPaperfolding = 0.85073618820186726036

// @variable Reciprocal Fibonacci constant, approximately `3.35`.
export const float  ReciprocalFibonacci = 3.35988566624317755317

// @variable Chvatal-Sankoff constant, approximately `0.78`.
export const float  ChvatalSankoffMin = 0.788071

// @variable Chvatal-Sankoff constant, approximately `0.82`.
export const float  ChvatalSankoffMax = 0.826280

// @variable Feigenbaum constant, approximately `4.66`.
export const float  Feigenbaum =4.66920160910299067185

// @variable Chaitin constant, approximately `0.007`.
export const float  Chaitin =0.0078749969978123844

// @variable Robbins constant, approximately `0.66`.
export const float  Robbins = 0.66170718226717623515

// @variable Weierstrass constant, approximately `0.47`.
export const float  Weierstrass = 0.47494937998792065033

// @variable Fransen-Robinson constant, approximately `2.80`.
export const float  FransenRobinson = 2.80777024202851936522

// @variable Feigenbaum Alpha constant, approximately `2.50`.
export const float  FeigenbaumAlpha = 2.50290787509589282228

// @variable DuBois-Reymond Second constant, approximately `0.19`.
export const float  DuBoisReymondSecond = 0.19452804946532511361

// @variable Erdos-Tenenbaum-Ford constant, approximately `0.08`.
export const float  ErdosTenenbaumFord = 0.08607133205593420688

// @variable Conway's constant, approximately `1.30`.
export const float  Conway = 1.30357726903429639125

// @variable Hafner-Sarnak-McCurley constant, approximately `0.35`.
export const float  HafnerSarnakMcCurley = 0.35323637185499598454

// @variable Backhouse's constant, approximately `1.45`.
export const float  Backhouse = 1.45607494858268967139

// @variable Viswanath constant, approximately `1.13`.
export const float  Viswanath = 1.1319882487943

// @variable Komornik-Loreti constant, approximately `1.78`.
export const float  KomornikLoreti = 1.78723165018296593301

// @variable Embree-Trefethen constant, approximately `0.70`.
export const float  EmbreeTrefethen = 0.70258

// @variable Heath-Brown-Moroz constant, approximately `0.001`.
export const float  HeathBrownMoroz = 0.00131764115485317810

// @variable MRB constant, approximately `0.18`.
export const float  MRB = 0.18785964246206712024

// @variable Prime constant, approximately `0.41`.
export const float  Prime = 0.41468250985111166024

// @variable Somos Quadratic Recurrence constant, approximately `1.66`.
export const float  SomosQuadraticRecurrence = 1.66168794963359412129

// @variable Foias constant, approximately `1.18`.
export const float  Foias = 1.18745235112650105459

// @variable Taniguchi constant, approximately `0.67`.
export const float  Taniguchi = 0.67823449191739197803

//#endregion
//#region  Pine related constants.

// @variable Positive Infinity `+∞`, approximately `1.8e309`.
export const float Positive_Infinity = -math.log(0.0) // +1.7976931348623157e+309

// @variable Positive finite maxima, the last value before positive infinity `+∞`, approximately `1.8e308`.
export const float Positive_Finite_Maxima = +1.7976931348623157e+308 // Maximum finite positive binary64 value (just below +∞)

// @variable Positive value closest to 0, approximately `2.2e-308`.
export const float Positive_Tiniest_Value = +2.2250738585072014e-308 // Smallest positive binary64 value (nearest to +0.0)

// @variable Positive zero, `+0.0`.
export const float Positive_Zero = +0.0e0 // +0.0

// @variable Not A Number.
export const float Nan =  math.sqrt(-1) // na

// @variable Negative zero, `-0.0`.
export const float Negative_Zero =  math.sin(-math.pi) // -0.0e0

// @variable Negative value closest to 0, approximately `-2.2e-308`.
export const float Negative_Tiniest_Value = -2.2250738585072014e-308 // Smallest negative binary64 value (nearest to -0.0)

// @variable Negative finite maxima, the last value before negative infinity `-∞`, approximately `-1.8e+308`.
export const float Negative_Finite_Minima = -1.7976931348623157e+308 //  Minimum finite negative binary64 value (just above +∞)

// @variable Negative infinity `-∞`, approximately `-1.8e309`.
export const float Negative_Infinity =  math.log(0.0)           // -1.7976931348623157e+309

//#endregion

// -->
//
//
//
// <--