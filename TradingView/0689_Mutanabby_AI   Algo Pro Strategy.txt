//@version=5
strategy('Mutanabby_AI | Algo Pro Strategy', overlay=true, max_labels_count=500, default_qty_type=strategy.percent_of_equity, default_qty_value=100, initial_capital=10000, currency=currency.USD)

// Technical Configuration Parameters
candle_stability_index_param = input.float(0.5, 'Candle Stability Index', 0, 1, step=0.1, group='Technical', tooltip='Candle Stability Index measures the ratio between the body and the wicks of a candle. Higher - more stable.')
rsi_index_param = input.int(50, 'RSI Index', 0, 100, group='Technical', tooltip='RSI Index measures how overbought/oversold is the market. Higher - more overbought/oversold.')
candle_delta_length_param = input.int(5, 'Candle Delta Length', 3, group='Technical', tooltip='Candle Delta Length measures the period over how many candles the price increased/decreased. Higher - longer period.')
disable_repeating_signals_param = input.bool(false, 'Disable Repeating Signals', group='Technical', tooltip='Removes repeating signals. Useful for removing clusters of signals and general clarity')

// Strategy Position Management
use_qty_percent = input.bool(true, 'Use Percentage Position Sizing', group='Position Management')
qty_percent = input.float(100, 'Position Size (%)', minval=1, maxval=100, step=1, group='Position Management', tooltip='Percentage of equity to use per trade')
fixed_qty = input.float(1, 'Fixed Quantity', minval=0.01, step=0.01, group='Position Management', tooltip='Fixed quantity when not using percentage sizing')

// Stop Loss Configuration
enable_stop_loss = input.bool(true, 'Enable Stop Loss', group='Risk Management')
stop_loss_method = input.string('Entry Price Based', 'Stop Loss Method', options=['Entry Price Based', 'Lowest Low Based'], group='Risk Management')
entry_sl_percent = input.float(2.0, 'Entry Stop Loss (%)', minval=0.1, maxval=50, step=0.1, group='Risk Management', tooltip='Stop loss percentage from entry price')
lookback_period = input.int(10, 'Lookback Period', minval=1, maxval=100, group='Risk Management', tooltip='Number of bars to look back for lowest low stop loss')
sl_buffer_percent = input.float(0.5, 'Stop Loss Buffer (%)', minval=0, maxval=5, step=0.1, group='Risk Management', tooltip='Additional buffer below lowest low')

// Visual Color Scheme Selection
color_scheme = input.string('Classic', 'Color Scheme', options=['Classic', 'Ocean', 'Sunset', 'Neon', 'Forest', 'Royal', 'Fire', 'Custom'], group='Visual')

// Predefined Color Schemes Function
get_colors() =>
    var buy_color = color.white
    var sell_color = color.white

    if color_scheme == 'Classic'
        buy_color := color.rgb(29, 255, 40)
        sell_color := color.rgb(255, 0, 0)
    else if color_scheme == 'Ocean'
        buy_color := color.rgb(0, 191, 255)
        sell_color := color.rgb(255, 140, 0)
    else if color_scheme == 'Sunset'
        buy_color := color.rgb(255, 215, 0)
        sell_color := color.rgb(220, 20, 60)
    else if color_scheme == 'Neon'
        buy_color := color.rgb(57, 255, 20)
        sell_color := color.rgb(255, 20, 147)
    else if color_scheme == 'Forest'
        buy_color := color.rgb(34, 139, 34)
        sell_color := color.rgb(178, 34, 34)
    else if color_scheme == 'Royal'
        buy_color := color.rgb(138, 43, 226)
        sell_color := color.rgb(255, 165, 0)
    else if color_scheme == 'Fire'
        buy_color := color.rgb(0, 255, 255)
        sell_color := color.rgb(255, 69, 0)
    else
        buy_color := color.rgb(29, 255, 40)
        sell_color := color.rgb(255, 0, 0)

    [buy_color, sell_color]

[scheme_buy_color, scheme_sell_color] = get_colors()

// Custom Color Configuration
custom_buy_color = input(color.rgb(29, 255, 40), 'Custom Entry Color', inline='Custom', group='Visual')
custom_sell_color = input(color.rgb(255, 0, 0), 'Custom Exit Color', inline='Custom', group='Visual')

// Final Color Assignment
final_buy_color = color_scheme == 'Custom' ? custom_buy_color : scheme_buy_color
final_sell_color = color_scheme == 'Custom' ? custom_sell_color : scheme_sell_color

// Label Configuration
show_labels = input.bool(true, 'Show Entry/Exit Labels', group='Visual')
label_size = input.string('normal', 'Label Size', options=['huge', 'large', 'normal', 'small', 'tiny'], group='Visual')
label_style = input.string('text bubble', 'Label Style', ['text bubble', 'triangle', 'arrow'], group='Visual')
label_text_color = input(color.white, 'Label Text Color', group='Visual')

// Technical Analysis Calculations
stable_candle = math.abs(close - open) / ta.tr > candle_stability_index_param
rsi = ta.rsi(close, 14)

// Entry Signal Logic
bullish_engulfing = close[1] < open[1] and close > open and close > open[1]
rsi_below = rsi < rsi_index_param
decrease_over = close < close[candle_delta_length_param]

entry_signal = bullish_engulfing and stable_candle and rsi_below and decrease_over and barstate.isconfirmed

// Exit Signal Logic
bearish_engulfing = close[1] > open[1] and close < open and close < open[1]
rsi_above = rsi > 100 - rsi_index_param
increase_over = close > close[candle_delta_length_param]

exit_signal = bearish_engulfing and stable_candle and rsi_above and increase_over and barstate.isconfirmed

// Signal Filtering
var last_signal = ''

// Position Quantity Calculation
position_qty = use_qty_percent ? qty_percent : fixed_qty

// Stop Loss Variables
var float entry_price = na
var float stop_loss_price = na

// Stop Loss Calculation - Called on every bar for consistency
current_entry_sl = stop_loss_method == 'Entry Price Based' ?
     close * (1 - entry_sl_percent / 100) :
     ta.lowest(low, lookback_period) * (1 - sl_buffer_percent / 100)

// Strategy Execution Logic
if entry_signal and (disable_repeating_signals_param ? (last_signal != 'buy' ? true : na) : true)
    entry_price := close
    stop_loss_price := enable_stop_loss ? current_entry_sl : na

    if use_qty_percent
        strategy.entry("LONG", strategy.long)
    else
        strategy.entry("LONG", strategy.long, qty=position_qty)

    if show_labels
        if label_style == 'text bubble'
            label.new(bar_index, low, 'ENTER', color=final_buy_color, style=label.style_label_up, textcolor=label_text_color, size=label_size)
        else if label_style == 'triangle'
            label.new(bar_index, low, 'ENTER', yloc=yloc.belowbar, color=final_buy_color, style=label.style_triangleup, textcolor=color.rgb(0, 0, 0, 100), size=label_size)
        else if label_style == 'arrow'
            label.new(bar_index, low, 'ENTER', yloc=yloc.belowbar, color=final_buy_color, style=label.style_arrowup, textcolor=color.rgb(0, 0, 0, 100), size=label_size)

    last_signal := 'buy'

// Exit Conditions
if exit_signal and (disable_repeating_signals_param ? (last_signal != 'sell' ? true : na) : true)
    strategy.close("LONG")

    if show_labels
        if label_style == 'text bubble'
            label.new(bar_index, high, 'EXIT', color=final_sell_color, style=label.style_label_down, textcolor=label_text_color, size=label_size)
        else if label_style == 'triangle'
            label.new(bar_index, high, 'EXIT', yloc=yloc.abovebar, color=final_sell_color, style=label.style_triangledown, textcolor=color.rgb(0, 0, 0, 100), size=label_size)
        else if label_style == 'arrow'
            label.new(bar_index, high, 'EXIT', yloc=yloc.abovebar, color=final_sell_color, style=label.style_arrowdown, textcolor=color.rgb(0, 0, 0, 100), size=label_size)

    last_signal := 'sell'

// Stop Loss Execution
if enable_stop_loss and strategy.position_size > 0 and not na(stop_loss_price)
    if close <= stop_loss_price
        strategy.close("LONG", comment="Stop Loss")
        if show_labels
            label.new(bar_index, high, 'SL', color=color.orange, style=label.style_label_down, textcolor=color.white, size=label_size)

// Stop Loss Visualization
plot(enable_stop_loss and strategy.position_size > 0 and not na(stop_loss_price) ? stop_loss_price : na,
     color=color.red, style=plot.style_linebr, linewidth=2, title="Stop Loss Level")