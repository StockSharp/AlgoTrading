// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © ChartPrime & PineIndicators

//@version=6
strategy("Gradient Trend Filter STRATEGY [ChartPrime/PineIndicators]", overlay = true, initial_capital = 10000, commission_value = 0.01, slippage = 2, default_qty_type=strategy.percent_of_equity, default_qty_value=100)

// --------------------------------------------------------------------------------------------------------------------}
// 𝙐𝙎𝙀𝙍 𝙄𝙉𝙋𝙐𝙏𝙎
// --------------------------------------------------------------------------------------------------------------------{

string tradeDirection = input.string("Long Only", "Trade Direction", options=["Long Only", "Short Only", "Long & Short"],  group="For help go to PineIndicators.com")

float src     = input.source(close, "Source")
int   length  = input.int(25, "Length")
int   width   = input.int(2, "Line Width")

color color1  = input.color(#22c878, "", inline = "1", group = "color")
color color2  = input.color(#c8224e, "", inline = "1", group = "color")
int   transp  = input.int(80, "", inline = "1", group = "color")

showTable = input(true, "Show Performance Table")

// --------------------------------------------------------------------------------------------------------------------}
// 𝙄𝙉𝘿𝙄𝘾𝘼𝙏𝙊𝙍 𝘾𝘼𝙇𝘾𝙐𝙇𝘼𝙏𝙄𝙊𝙉𝙎
// --------------------------------------------------------------------------------------------------------------------{
// Noise filter function
noise_filter(src, length) =>
    alpha = 2 / (length + 1)
    nf_1 = 0.0
    nf_2 = 0.0
    nf_3 = 0.0

    nf_1 := (alpha * src) + ((1 - alpha) * nz(nf_1[1]))
    nf_2 := (alpha * nf_1) + ((1 - alpha) * nz(nf_2[1]))
    nf_3 := (alpha * nf_2) + ((1 - alpha) * nz(nf_3[1]))

    nf_3 // Final output with three-stage smoothing

// Bands function
bands(src)=>
    val = noise_filter(high-low, length)
    upper3 = src + val * 0.618*2.5
    upper2 = src + val * 0.382*2
    upper1 = src + val * 0.236*1.5
    lower1 = src - val * 0.236*1.5
    lower2 = src - val * 0.382*2
    lower3 = src - val * 0.618*2.5
    [upper3, upper2, upper1, lower1, lower2, lower3]

float base = noise_filter(src, length)
[upper3, upper2, upper1, lower1, lower2, lower3] = bands(base)
float diff = base - base[2]

// Signals
bool signal_up = ta.crossover(diff, 0) and barstate.isconfirmed
bool signal_dn = ta.crossunder(diff, 0) and barstate.isconfirmed

// --------------------------------------------------------------------------------------------------------------------}
// 𝙑𝙄𝙎𝙐𝘼𝙇𝙄𝙕𝘼𝙏𝙄𝙊𝙉
// --------------------------------------------------------------------------------------------------------------------{
color gradient_col = color.from_gradient(diff, ta.lowest(diff, 100), ta.highest(diff, 100), color2, color1)
color trend_color  = color.new(gradient_col, transp)

plot(base, "Filter", linewidth = width, color = diff >= 0 ? color1 : color2)

up3 = plot(upper3, display = display.none, editable = false)
up2 = plot(upper2, display = display.none, editable = false)
up1 = plot(upper1, display = display.none, editable = false)
lw1 = plot(lower1, display = display.none, editable = false)
lw2 = plot(lower2, display = display.none, editable = false)
lw3 = plot(lower3, display = display.none, editable = false)

fill(up3, lw3, trend_color)
fill(up2, lw2, trend_color)
fill(up1, lw1, trend_color)

plotshape(signal_up ? base[1] : na, "", shape.diamond, location.absolute, offset = -1, size = size.tiny, color = color.orange)
plotshape(signal_dn ? base[1] : na, "", shape.diamond, location.absolute, offset = -1, size = size.tiny, color = color.orange)
// --------------------------------------------------------------------------------------------------------------------}
// ENTRY & CLOSE CONDITIONS
// --------------------------------------------------------------------------------------------------------------------{
if (tradeDirection == "Long & Short" or tradeDirection == "Long Only") and signal_up
    strategy.entry("L", strategy.long)

if (tradeDirection == "Long & Short" or tradeDirection == "Short Only") and signal_dn
    strategy.entry("S", strategy.short)

if signal_dn and (tradeDirection == "Long & Short" or tradeDirection == "Long Only")
    strategy.close("L")

if signal_up and (tradeDirection == "Long & Short" or tradeDirection == "Short Only")
    strategy.close("S")
// --------------------------------------------------------------------------------------------------------------------}
// PERFORMANCE TABLE
// --------------------------------------------------------------------------------------------------------------------{
font_color  = color.white
prec        = 2

var float prev_equity = strategy.equity
float eq              = strategy.equity
float eq_prev         = nz(prev_equity, eq)
var float bar_pnl     = 0.0

bar_pnl := eq_prev == 0.0 ? 0.0 : eq / eq_prev - 1
prev_equity := eq  // für nächste Bar sichern

bool month_changed = month(time) != month(time[1])
bool year_changed  = year(time)  != year(time[1])

var float cur_month_pnl = 0.0
var float cur_year_pnl  = 0.0

if barstate.isfirst
    cur_month_pnl := bar_pnl
    cur_year_pnl  := bar_pnl
else
    if month_changed
        cur_month_pnl := bar_pnl
    else
        cur_month_pnl := (1 + cur_month_pnl) * (1 + bar_pnl) - 1

    if year_changed
        cur_year_pnl := bar_pnl
    else
        cur_year_pnl := (1 + cur_year_pnl) * (1 + bar_pnl) - 1

var month_pnl  = array.new_float()
var month_time = array.new_int()

var year_pnl  = array.new_float()
var year_time = array.new_int()

if month_changed and not barstate.isfirst
    float lastMonthFinal = cur_month_pnl[1]
    array.push(month_pnl,  lastMonthFinal)
    array.push(month_time, time[1])

if year_changed and not barstate.isfirst
    float lastYearFinal = cur_year_pnl[1]
    array.push(year_pnl,  lastYearFinal)
    array.push(year_time, time[1])

var table monthly_table = na

if showTable
    int final_years_count_raw = array.size(year_pnl)
    int final_year_time_count = array.size(year_time)
    int final_years_count = math.min(final_years_count_raw, final_year_time_count)

    int final_months_count_raw = array.size(month_pnl)
    int final_month_time_count = array.size(month_time)
    int final_months_count     = math.min(final_months_count_raw, final_month_time_count)

    int row_count = final_years_count + 1 + 1

    monthly_table := table.new(position.bottom_right, 14, row_count, border_width = 1)
    table.clear(monthly_table, 0, 0)

    table.cell(monthly_table, 0, 0, "in %",       bgcolor = color.new(#252630, 0), text_color = font_color)
    table.cell(monthly_table, 1, 0, "Jan",        bgcolor = #252630,               text_color = font_color)
    table.cell(monthly_table, 2, 0, "Feb",        bgcolor = #252630,               text_color = font_color)
    table.cell(monthly_table, 3, 0, "Mar",        bgcolor = #252630,               text_color = font_color)
    table.cell(monthly_table, 4, 0, "Apr",        bgcolor = #252630,               text_color = font_color)
    table.cell(monthly_table, 5, 0, "May",        bgcolor = #252630,               text_color = font_color)
    table.cell(monthly_table, 6, 0, "Jun",        bgcolor = #252630,               text_color = font_color)
    table.cell(monthly_table, 7, 0, "Jul",        bgcolor = #252630,               text_color = font_color)
    table.cell(monthly_table, 8, 0, "Aug",        bgcolor = #252630,               text_color = font_color)
    table.cell(monthly_table, 9, 0, "Sep",        bgcolor = #252630,               text_color = font_color)
    table.cell(monthly_table, 10,0, "Oct",        bgcolor = #252630,               text_color = font_color)
    table.cell(monthly_table, 11,0, "Nov",        bgcolor = #252630,               text_color = font_color)
    table.cell(monthly_table, 12,0, "Dec",        bgcolor = #252630,               text_color = font_color)
    table.cell(monthly_table, 13,0, "Year",       bgcolor = #3c3d49,               text_color = font_color)

    if final_years_count > 0
        for i = 0 to final_years_count - 1
            int savedTime = array.get(year_time, i)
            int yearVal   = year(savedTime)

            table.cell(monthly_table, 0, i+1, str.tostring(yearVal), bgcolor = #252630, text_color = font_color)

            float yPnl = array.get(year_pnl, i)
            color yColor = yPnl >= 0 ? color.new(#0097a7, 50) : color.new(#ff195f, 50)
            table.cell(monthly_table, 13, i+1, str.tostring(math.round(yPnl * 100, prec)), bgcolor = yColor, text_color = font_color)

    int row_current_year = final_years_count + 1

    if final_months_count > 0
        for m = 0 to final_months_count - 1
            int   mTime  = array.get(month_time, m)
            float mPnL   = array.get(month_pnl,  m)
            int   mYear  = year(mTime)
            int   mMonth = month(mTime)

            int rowIdx = na
            if final_years_count > 0
                for y_i = 0 to final_years_count - 1
                    int yTime = array.get(year_time, y_i)
                    if year(yTime) == mYear
                        rowIdx := y_i + 1
                        break

            if na(rowIdx) and (mYear == year(time))
                rowIdx := row_current_year

            if not na(rowIdx)
                color mColor = mPnL >= 0 ? color.new(#0097a7, 70) : color.new(#ff195f, 70)
                table.cell(monthly_table, mMonth, rowIdx, str.tostring(math.round(mPnL * 100, prec)), bgcolor = mColor, text_color = font_color)

    table.cell(monthly_table, 0, row_current_year, str.tostring(year(time)), bgcolor = color.new(#3c3d49, 0), text_color = font_color)

    int curMonth = month(time)
    color moColor = cur_month_pnl >= 0 ? color.new(#0097a7, 70) : color.new(#ff195f, 70)
    table.cell(monthly_table, curMonth, row_current_year, str.tostring(math.round(cur_month_pnl * 100, prec)), bgcolor = moColor, text_color = font_color)

    color yrColor = cur_year_pnl >= 0 ? color.new(#0097a7, 50) : color.new(#ff195f, 50)
    table.cell(monthly_table, 13, row_current_year, str.tostring(math.round(cur_year_pnl * 100, prec)), bgcolor = yrColor, text_color = font_color)

if not showTable and not na(monthly_table)
    table.clear(monthly_table, 0, 0)
// --------------------------------------------------------------------------------------------------------------------}