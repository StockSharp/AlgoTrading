// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© easy-peasy-x

//@version=5
strategy(title="QQQ Strategy v2 ESL | easy-peasy-x ", shorttitle="QQQ Strategy v2 ESL", overlay=true, precision=2, initial_capital = 1000, default_qty_type=strategy.percent_of_equity, default_qty_value=100)

longing_allowed = input(false, "Longing allowed?", group="Basic Trade Settings")
shorting_allowed = input(false, "Shorting allowed?", group="Basic Trade Settings")


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//moving average functions


ma(source, length, type) =>
    type == 'SMA' ? ta.sma(source, length) : type == 'EMA' ? ta.ema(source, length) : type == 'SMMA (RMA)' ? ta.rma(source, length) : type == 'WMA' ? ta.wma(source, length) : type == 'VWMA' ? ta.vwma(source, length) : type == 'HMA' ? ta.hma(source, length) : na



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//trade_only_with_trend_long = input(false, "Trade Long Only With Trend MA", group="Trend Long MA Settings")
ma_source_long = input(close, title="Trend MA Source", group = "Trend Long MA Settings")
trend_ma_type_long = input.string("EMA", title="Trend MA Type", options=["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA", "HMA"], group = "Trend Long MA Settings")
trade_only_with_trend_ema_length_long = input(100, "Trend MA Length", group="Trend Long MA Settings")

trend_ema_long = ma(ma_source_long, trade_only_with_trend_ema_length_long, trend_ma_type_long) //ta.ema(close,trade_only_with_trend_ema_length)
show_trend_ema_long = input(false,"Show MA Long?", group="Trend Long MA Settings", inline = 'temp')
trend_ema_long_color = input(color.green, 'Color', group = "Trend Long MA Settings", inline = 'temp')
plot(show_trend_ema_long ? trend_ema_long : na, "Trend Long MA", color=trend_ema_long_color, linewidth = 1)




//trade_only_with_trend_short = input(false, "Trade Short Only With Trend MA", group="Trend Short MA Settings")
ma_source_short = input(close, title="Trend MA Source", group = "Trend Short MA Settings")
trend_ma_type_short = input.string("SMA", title="Trend MA Type", options=["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA", "HMA"], group = "Trend Short MA Settings")
trade_only_with_trend_ema_length_short = input(50, "Trend MA Length", group="Trend Short MA Settings")

trend_ema_short = ma(ma_source_short, trade_only_with_trend_ema_length_short, trend_ma_type_short) //ta.ema(close,trade_only_with_trend_ema_length)
show_trend_ema_short = input(false,"Show MA Short?", group="Trend Short MA Settings", inline = 'temp2')
trend_ema_short_color = input(color.red, 'Color', group = "Trend Short MA Settings", inline = 'temp2')
plot(show_trend_ema_short ? trend_ema_short : na, "Trend Short MA", color=color.red, linewidth = 1)



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Main MA settings
ma_source = input(close, title='Main MA Source', group="Main MA Settings")
ma_type = input.string('EMA', title='Main MA Type', options=['SMA', 'EMA', 'SMMA (RMA)', 'WMA', 'VWMA', 'HMA'], group="Main MA Settings")
ma_length = input.int(200, title="Main MA Length", group="Main MA Settings")
show_main_ma = input(true, title='Show Main MA?', group="Main MA Settings", inline = 'temp3')
main_ma_color = input(color.blue, 'Color', group = "Main MA Settings", inline = 'temp3')


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//main MA calculations
main_ma = ma(ma_source, ma_length, ma_type)

//plotting main MA
plot(show_main_ma ? main_ma : na, title="Extra MA", color=main_ma_color, linewidth = 1)












////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//triggers long
include_long_trigger_main_ma = input(true, "Include Main MA Trigger", group="Long Triggers", tooltip="This is long trigger for QQQ which places long order when the main MA is taken, with additional conditions." )
include_long_trigger_ursi = input(false, "Include Ultimate RSI Fast Trigger", group="Long Triggers", tooltip="This is long trigger for QQQ which uses ultimate RSI fast and RSI filter as additional filter.")
include_long_trigger_ursi2 = input(false, "Include Ultimate RSI Slow Trigger", group="Long Triggers", tooltip="This is long trigger for QQQ which uses ultimate RSI slow and RSI filter as additional filter.")
include_long_trigger_ursi3 = input(true, "Include Ultimate RSI Fast & Slow Trigger", group="Long Triggers", tooltip="This is long trigger for QQQ which uses ultimate RSI both fast & slow & filter. Buys the dips when vslow rises")
include_long_trigger_ursi5 = input(false, "Include Ultimate RSI Fast & Slow Trigger 2", group="Long Triggers", tooltip="This is long trigger for QQQ which uses ultimate RSI both fast & slow & filter. Buys the breakouts when vslow rises")

include_long_trigger_ursi4 = input(true, "Include Ultimate RSI Filter Trigger", group="Long Triggers", tooltip="This is a long trigger for QQQ which uses ultimate RSI filter. Longs when vslow goes above signal.")
include_long_trigger_ao = input(true, "Include Awesome Oscillator Trigger", group="Long Triggers", tooltip="This is a long trigger for QQQ which uses Awesome Oscillator above zero for long entry.")
include_long_trigger_stdev = input(true, title="Include Stdev Fast Trigger", group="Long Triggers", tooltip="This is a long trigger for QQQ which places long order when Stdev Fast is above Stdev Fast Signal.")
include_long_trigger_stdev2 = input(true, title="Include Stdev Slow Trigger", group="Long Triggers", tooltip="This is a long trigger for QQQ which places long order when Stdev Slow is above Stdev Slow Signal.")

//triggers short
include_short_trigger_main_ma = input(false, "Include Main MA Trigger", group="Short Triggers", tooltip="This is short trigger for QQQ which places short order when the main MA is broken, with additional conditions.")
include_short_trigger_ursi = input(false, "Include Ultimate RSI Fast Trigger", group="Short Triggers", tooltip="This is short trigger for QQQ which uses ultimate RSI fast and RSI filter as additional filter.")
include_short_trigger_ursi2 = input(false, "Include Ultimate RSI Slow Trigger", group="Short Triggers", tooltip="This is short trigger for QQQ which uses ultimate RSI slow and RSI filter as additional filter.")
include_short_trigger_ursi3 = input(false, "Include Ultimate RSI Fast & Slow Trigger", group="Short Triggers", tooltip="This is short trigger for QQQ which uses ultimate RSI both fast & slow & filter. Shorts the pops when vslow drops")
include_short_trigger_ursi5 = input(false, "Include Ultimate RSI Fast & Slow Trigger 2", group="Short Triggers", tooltip="This is short trigger for QQQ which uses ultimate RSI both fast & slow & filter. Shorts the pops when vslow drops")

include_short_trigger_ursi4 = input(true, "Include Ultimate RSI Filter Trigger", group="Short Triggers", tooltip="This is a short trigger for QQQ which uses ultimate RSI filter. Fades when vslow drops below signal.")
include_short_trigger_ao = input(true, "Include Awesome Oscillator Trigger", group="Short Triggers", tooltip="This is a short trigger for QQQ which uses Awesome Oscillator below zero for short entry.")
include_short_trigger_stdev = input(false, title="Include Stdev Fast Trigger", group="Short Triggers", tooltip="This is a short trigger for QQQ which places short order when Stdev Fast is below Stdev Fast Signal.")
include_short_trigger_stdev2 = input(false, title="Include Stdev Slow Trigger", group="Short Triggers", tooltip="This is a short trigger for QQQ which places short order when Stdev Slow is below Stdev Slow Signal.")
//placeholder = input(false,"Placeholder", group="Short Triggers", tooltip='Just a placeholder')

include_extra_short_trigger_ema50 = input(true, "Include Extra Short EMA50 Trigger?", group="Short Triggers", tooltip="This is extra short trigger for QQQ which places short orders when EMA50 is broken, with additional conditions.")
include_extra_short_trigger_ema200 = input(true, "Include Extra Short EMA200 Trigger?", group="Short Triggers", tooltip="This is extra short trigger for QQQ which places short orders when EMA200 is broken, with additional conditions.")


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ultimate rsi functions and settings

//------------------------------------------------------------------------------
//Settings
//-----------------------------------------------------------------------------{
length_fast = input.int(7, title="U-RSI Length Fast", minval = 2, group = "RSI Settings")
length_slow = input.int(14, title="U-RSI Length Slow", minval = 2, group = "RSI Settings")
length_vslow = input.int(50, title="U-RSI Length Filter", minval=2, group="RSI Settings")

smoType1 = input.string('RMA', 'Method', options = ['EMA', 'SMA', 'RMA', 'TMA'], group = "RSI Settings")
src = input(close, 'Source', group = "RSI Settings")

//Signal Line
smooth = input.int(14, title="RSI Smoothing", minval = 1, group = "RSI Settings")
smoType2 = input.string('EMA', 'RSI Smoothing Method', options = ['EMA', 'SMA', 'RMA', 'TMA'], group = "RSI Settings")


ctrl_rsi_fast_upper_limit = input.int(75, minval=2, title="RSI Fast Upper Limit", group="RSI Limits", tooltip="RSI Fast Upper Limit means strategy won't short when the Fast RSI is ABOVE THIS LEVEL. This is a filter for shorting to avoid shorting bounces while they run.")
ctrl_rsi_fast_lower_limit = input.int(25, minval=2, title="RSI Fast Lower Limit", group="RSI Limits", tooltip="RSI Fast Lower Limit means strategy won't short when the Fast RSI is BELOW THIS LEVEL. This is a filter for shorting to avoid shorting in the hole.")

ctrl_rsi_slow_upper_limit = input.int(75, minval=2, title="RSI Slow Upper Limit", group="RSI Limits", tooltip="RSI Slow Upper Limit means strategy won't short when the Slow RSI is ABOVE THIS LEVEL. This is a filter for shorting to avoid shorting bounces while they run.")
ctrl_rsi_slow_lower_limit = input.int(25, minval=2, title="RSI Slow Lower Limit", group="RSI Limits", tooltip="RSI Slow Lower Limit means strategy won't short when the Slow RSI is BELOW THIS LEVEL. This is a filter for shorting to avoid shorting in the hole.")

ctrl_rsi_vslow_upper_limit = input.int(75, minval=2, title="RSI Filter Upper Limit", group="RSI Limits", tooltip="RSI Filter Upper Limit means strategy won't short when the RSI Filter is ABOVE THIS LEVEL. This is a filter for shorting to avoid shorting bull runs while they last.")
ctrl_rsi_vslow_lower_limit = input.int(25, minval=2, title="RSI Filter Lower Limit", group="RSI Limits", tooltip="RSI Filter Lower Limit means strategy won't short when the RSI Filter is BELOW THIS LEVEL. This is a filter for shorting to avoid shorting in the hole.")




//-----------------------------------------------------------------------------}
//Functions
//-----------------------------------------------------------------------------{
f_ma(x, len, maType)=>
    switch maType
        'EMA' => ta.ema(x, len)
        'SMA' => ta.sma(x, len)
        'RMA' => ta.rma(x, len)
        'TMA' => ta.sma(ta.sma(x, len), len)

//-----------------------------------------------------------------------------}
//Augmented RSI fast
//-----------------------------------------------------------------------------{
upper_fast = ta.highest(src, length_fast)
lower_fast = ta.lowest(src, length_fast)
r_fast = upper_fast - lower_fast

d_fast = src - src[1]
diff_fast = upper_fast > upper_fast[1] ? r_fast
  : lower_fast < lower_fast[1] ? -r_fast
  : d_fast

num_fast = f_ma(diff_fast, length_fast, smoType1)
den_fast = f_ma(math.abs(diff_fast), length_fast, smoType1)
arsi_fast = num_fast / den_fast * 50 + 50

signal_fast = f_ma(arsi_fast, smooth, smoType2)



//-----------------------------------------------------------------------------}
//Augmented RSI slow
//-----------------------------------------------------------------------------{
upper_slow = ta.highest(src, length_slow)
lower_slow = ta.lowest(src, length_slow)
r_slow = upper_slow - lower_slow

d_slow = src - src[1]
diff_slow = upper_slow > upper_slow[1] ? r_slow
  : lower_slow < lower_slow[1] ? -r_slow
  : d_slow

num_slow = f_ma(diff_slow, length_slow, smoType1)
den_slow = f_ma(math.abs(diff_slow), length_slow, smoType1)
arsi_slow = num_slow / den_slow * 50 + 50

signal_slow = f_ma(arsi_slow, smooth, smoType2)





//-----------------------------------------------------------------------------}
//Augmented RSI very slow
//-----------------------------------------------------------------------------{
upper_vslow = ta.highest(src, length_vslow)
lower_vslow = ta.lowest(src, length_vslow)
r_vslow = upper_vslow - lower_vslow

d_vslow = src - src[1]
diff_vslow = upper_vslow > upper_vslow[1] ? r_vslow
  : lower_vslow < lower_vslow[1] ? -r_vslow
  : d_vslow

num_vslow = f_ma(diff_vslow, length_vslow, smoType1)
den_vslow = f_ma(math.abs(diff_vslow), length_vslow, smoType1)
arsi_vslow = num_vslow / den_vslow * 50 + 50

signal_vslow = f_ma(arsi_vslow, smooth, smoType2)


//-----------------------------------------------------------------------------}






//-----------------------------------------------------------------------------}
//trade triggers
//-----------------------------------------------------------------------------{
//-----------------------------------------------------------------------------}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//ursi fast as trigger and ursi vslow as filter

//arsi_fast // Ultimate RSI Fast
//signal_fast // Signal Line Fast

//arsi_slow // Ultimate RSI Slow
//signal_slow //Signal Line Slow

ursi_long_condition_p1 = ta.crossover(arsi_fast, signal_fast) //when fast rsi rises above fast signal
ursi_long_condition_p2 = arsi_fast > ctrl_rsi_fast_lower_limit //don't long sell-offs while they last //20
ursi_long_condition_p3 = arsi_fast < ctrl_rsi_fast_upper_limit //don't long possible tops //80
ursi_long_condition_p4 = arsi_vslow < ctrl_rsi_vslow_upper_limit //filter with rsi vslow, don't long possible tops //

ursi_long_condition = (include_long_trigger_ursi ? (ursi_long_condition_p1 and ursi_long_condition_p2 and ursi_long_condition_p3 and ursi_long_condition_p4) : false)



ursi_short_condition_p1 = ta.crossunder(arsi_fast, signal_fast) //when fast rsi drops below fast signal
ursi_short_condition_p2 = arsi_fast < ctrl_rsi_fast_upper_limit //don't short bull runs
ursi_short_condition_p3 = arsi_fast > ctrl_rsi_fast_lower_limit //don't short in the hole
ursi_short_condition_p4 = arsi_vslow > ctrl_rsi_vslow_lower_limit //filter with rsi vslow, don't short in the hole

ursi_short_condition = (include_short_trigger_ursi ? (ursi_short_condition_p1 and ursi_short_condition_p2 and ursi_short_condition_p3 and ursi_short_condition_p4) : false)



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//ursi slow as trigger and ursi vslow as filter

ursi_long_condition2_p1 = ta.crossover(arsi_slow, signal_slow)
ursi_long_condition2_p2 = arsi_slow > ctrl_rsi_slow_lower_limit //don't long sell-offs while they last, wait for rsi slow to rise
ursi_long_condition2_p3 = arsi_slow < ctrl_rsi_slow_upper_limit //don't long possible tops, wait for rsi to drop
ursi_long_condition2_p4 = arsi_vslow < ctrl_rsi_vslow_upper_limit //don't long possible tops, wait for rsi to drop

ursi_long_condition2 = (include_long_trigger_ursi2 ? (ursi_long_condition2_p1 and ursi_long_condition2_p2 and ursi_long_condition2_p3 and ursi_long_condition2_p4) : false)



ursi_short_condition2_p1 = ta.crossunder(arsi_slow, signal_slow)
ursi_short_condition2_p2 = arsi_slow < ctrl_rsi_slow_upper_limit
ursi_short_condition2_p3 = arsi_slow > ctrl_rsi_slow_lower_limit
ursi_short_condition2_p4 = arsi_vslow > ctrl_rsi_vslow_lower_limit

ursi_short_condition2 = (include_short_trigger_ursi2 ? (ursi_short_condition2_p1 and ursi_short_condition2_p2 and ursi_short_condition2_p3 and ursi_short_condition2_p4) : false)





////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//ursi fast & slow with ursi vslow as filter

ursi_long_condition3_p1 = ta.crossover(arsi_fast, arsi_slow) //and arsi_fast[1] < arsi_slow[1] //and arsi_fast[2] < arsi_slow[2] //trigger when rsi fast going below rsi slow -> it means wait for a dip, wait three candles up.
ursi_long_condition3_p2 = true //arsi_slow < signal_slow //trigger when rsi slow stays below rsi slow signal
ursi_long_condition3_p3 = arsi_slow > ctrl_rsi_slow_lower_limit //trigger when rsi very slow above 20 -> it means don't long sell-offs
ursi_long_condition3_p4 = arsi_slow < ctrl_rsi_slow_upper_limit //trigger when rsi very slow below 80 -> it means don't long possible tops
ursi_long_condition3_p5 = arsi_vslow > ctrl_rsi_vslow_lower_limit

ursi_long_condition3 = (include_long_trigger_ursi3 ? (ursi_long_condition3_p1 and ursi_long_condition3_p2 and ursi_long_condition3_p3 and ursi_long_condition3_p4 and ursi_long_condition3_p5) : false)



ursi_short_condition3_p1 = ta.crossunder(arsi_fast, arsi_slow) //and arsi_fast[1] > arsi_slow[1] //and arsi_fast[2] > arsi_slow[2] //trigger when rsi fast going above rsi slow -> it means wait for a bounce up, wait three candles up.
ursi_short_condition3_p2 = true //arsi_slow > signal_slow //trigger when rsi slow stays above rsi slow signal
ursi_short_condition3_p3 = arsi_slow < ctrl_rsi_slow_lower_limit //trigger when rsi very slow below 80 -> it means don't short bull runs
ursi_short_condition3_p4 = arsi_slow > ctrl_rsi_slow_upper_limit //trigger when rsi very slow above 20 -> it means don't short in the hole
ursi_short_condition3_p5 = arsi_vslow < ctrl_rsi_vslow_upper_limit //arsi_vslow < signal_vslow

ursi_short_condition3 = (include_short_trigger_ursi3 ? (ursi_short_condition3_p1 and ursi_short_condition3_p2 and ursi_short_condition3_p3 and ursi_short_condition3_p4 and ursi_short_condition3_p5) : false)

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//ursi vslow

//ctrl_rsi_fast_upper_limit, ctrl_rsi_fast_lower_limit
//ctrl_rsi_slow_upper_limit, ctrl_rsi_slow_lower_limit
//ctrl_rsi_vslow_upper_limit, ctrl_rsi_vslow_lower_limit

ursi_long_condition4_p1 = ta.crossover(arsi_vslow, signal_vslow) //short when rsi drops below signal line
ursi_long_condition4_p2 = arsi_vslow > ctrl_rsi_vslow_lower_limit //don't long sell-offs, wait until rsi rises
ursi_long_condition4_p3 = arsi_vslow < ctrl_rsi_vslow_upper_limit //don't long possible tops

ursi_long_condition4 = (include_long_trigger_ursi4 ? (ursi_long_condition4_p1 and ursi_long_condition4_p2 and ursi_long_condition4_p3) : false)



ursi_short_condition4_p1 = ta.crossunder(arsi_vslow, signal_vslow) //short when rsi drops below signal line
ursi_short_condition4_p2 = arsi_vslow < ctrl_rsi_vslow_upper_limit //don't short bull runs, wait until rsi drops
ursi_short_condition4_p3 = arsi_vslow > ctrl_rsi_vslow_lower_limit //don't short in the hole

ursi_short_condition4 = (include_short_trigger_ursi4 ? (ursi_short_condition4_p1 and ursi_short_condition4_p2 and ursi_short_condition4_p3) : false)



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//include_long_trigger_ursi5, include_short_trigger_ursi5
ursi_long_condition5_p1 = ta.crossover(arsi_fast, arsi_slow)
ursi_long_condition5_p2 = arsi_fast > ctrl_rsi_fast_lower_limit
ursi_long_condition5_p3 = arsi_slow > ctrl_rsi_slow_lower_limit
ursi_long_condition5_p4 = arsi_vslow > ctrl_rsi_vslow_lower_limit
ursi_long_condition5_p5 = arsi_vslow < ctrl_rsi_vslow_upper_limit

ursi_long_condition5 = (include_long_trigger_ursi5 ? (ursi_long_condition5_p1 and ursi_long_condition5_p2 and ursi_long_condition5_p3 and ursi_long_condition5_p4 and ursi_long_condition5_p5) : false)

ursi_short_condition5_p1 = ta.crossunder(arsi_fast, arsi_slow)
ursi_short_condition5_p2 = arsi_fast < ctrl_rsi_fast_upper_limit
ursi_short_condition5_p3 = arsi_slow < ctrl_rsi_slow_upper_limit
ursi_short_condition5_p4 = arsi_vslow < ctrl_rsi_vslow_upper_limit
ursi_short_condition5_p5 = arsi_vslow > ctrl_rsi_vslow_lower_limit

ursi_short_condition5 = (include_short_trigger_ursi5 ? (ursi_short_condition5_p1 and ursi_short_condition5_p2 and ursi_short_condition5_p3 and ursi_short_condition5_p4 and ursi_short_condition5_p5) : false)
























//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//main_ma

//include_long_trigger_main_ma
main_ma_long_comndition_p1 = ta.crossover(close, main_ma)
main_ma_long_comndition_p2 = close > main_ma
main_ma_long_comndition_p3 = ta.change(main_ma,3) > 0

main_ma_long_condition = (include_long_trigger_main_ma ? (main_ma_long_comndition_p1 or main_ma_long_comndition_p2) and main_ma_long_comndition_p3 : false)


//include_short_trigger_main_ma
main_ma_short_comndition_p1 = ta.crossunder(close, main_ma) //false //ta.crossunder(close, main_ma) //close < main_ma //and close[1] < main_ma //
main_ma_short_comndition_p2 = close < main_ma   //ta.crossunder(ta.ema(close,100), ta.ema(close,200)) //ta.change(main_ma) < 0
main_ma_short_comndition_p3 = ta.change(main_ma,3) < 0

main_ma_short_condition = (include_short_trigger_main_ma ? (main_ma_short_comndition_p1 or main_ma_short_comndition_p2) and main_ma_short_comndition_p3 : false)

main_ma_short_exit_condition_p1 = close > ta.ema(close,200)
main_ma_short_exit_condition_p2 = close > main_ma

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

src_ma = close //hl2 works a bit better than close
ma50 = ta.ema(src_ma, 50)
ma200 = ta.ema(src_ma, 200)



ma50_short_condition = (include_extra_short_trigger_ema50 ? (      ta.crossunder(src_ma, ma50)     ) : false)
//ta.falling(ma50,5) //and open < ma50 //and close < ma50 and close[1] < ma50 and close[2] < ma50
ma200_short_condition = (include_extra_short_trigger_ema200 ? (     ta.crossunder(src_ma, ma200)     ) : false)
//ta.falling(ma200,5) //and open < ma200 //and close < ma200 and close[1] < ma200 and close[2] < ma200

//add trigger long on ema50 or ema200 reclaim.


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ao_len_fast = input.int(5, title="AO Length Fast", group="Awesome Oscillator Settings")
ao_len_slow = input.int(34, title="AO Length Slow", group="Awesome Oscillator Settings")

// ao
ma_fast = ta.ema(hl2, ao_len_fast)
ma_slow = ta.ema(hl2, ao_len_slow)
ao = ma_fast - ma_slow

ao_long_condition = include_long_trigger_ao ? ta.crossover(ao, 0) : false
ao_short_condition = include_short_trigger_ao ? ta.crossunder(ao, 0) : false
//placeholder ao


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
temp_stdev_length = input.int(20, title="Stdev Fast Length", group="Stdev Settings")
temp_stdev_length2 = input.int(200, title="Stdev Slow Length", group="Stdev Settings")
temp_stdev_signal_length = input.int(9, title="Stdev Fast Signal Length", group="Stdev Settings")
temp_stdev_signal_length2 = input.int(50, title="Stdev Slow Signal Length", group="Stdev Settings")

temp_stdev = math.sign(ta.change(ta.sma(close,temp_stdev_length))) * ta.stdev(close,temp_stdev_length)
temp_stdev_signal = ta.ema(temp_stdev,temp_stdev_signal_length)

temp_stdev2 = math.sign(ta.change(ta.sma(close,temp_stdev_length2))) * ta.stdev(close,temp_stdev_length2)
temp_stdev2_signal = ta.ema(temp_stdev2,temp_stdev_signal_length2)


temp_stdev_ma_fast = ta.ema(temp_stdev,10)
temp_stdev_ma_slow = ta.ema(temp_stdev,20)

temp_stdev_macd = temp_stdev_ma_fast - temp_stdev_ma_slow
temp_stdev_macd_signal = ta.ema(temp_stdev_macd,9)

//show_temp_stdev = input.bool(false, title="Show Stdev Fast",group="Stdev Settings")
//show_temp_stdev_signal = input.bool(false, title="Show Stdev Fast Signal",group="Stdev Settings")

//show_temp_stdev2 = input.bool(false, title="Show Stdev Slow", group="Stdev Settings")
//show_temp_stdev2_signal = input.bool(false, title="Show Stdev Slow Signal", group="Stdev Settings")

//show_temp_stdev_macd = input.bool(false, title="Show temp stdev macd",group="Temp Stdev Settings")
//show_temp_stdev_macd_signal = input.bool(false, title="Show temp stdev macd signal",group="Temp Stdev Settings")

//plot(show_temp_stdev ? temp_stdev : na, title="Stdev Fast", color=color.orange)
//plot(show_temp_stdev_signal ? temp_stdev_signal : na, title="Stdev Fast Signal", color=color.orange, style=plot.style_circles)

//plot(show_temp_stdev2 ? temp_stdev2 : na, title="Stdev Slow", color=color.red)
//plot(show_temp_stdev2_signal ? temp_stdev2_signal : na, title="Stdev Slow Signal", color=color.red, style=plot.style_circles)

//plot(show_temp_stdev_macd ? temp_stdev_macd : na, title="temp_stdev_macd", color=color.blue)
//plot(show_temp_stdev_macd_signal ? temp_stdev_macd_signal : na, title="temp_stdev_macd_signal", color=color.orange)
//plot(show_temp_stdev or show_temp_stdev_macd ? 0 : na, title="Zero line", color=color.gray)



stdev_long_condition = include_long_trigger_stdev ? ta.crossover(temp_stdev, temp_stdev_signal) : false
stdev_short_condition = include_short_trigger_stdev ? ta.crossunder(temp_stdev, temp_stdev_signal) : false

stdev2_long_condition = include_long_trigger_stdev2 ? ta.crossover(temp_stdev2, temp_stdev2_signal) : false
stdev2_short_condition = include_short_trigger_stdev2 ? ta.crossunder(temp_stdev2, temp_stdev2_signal) : false



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//trend_ema_long, trend_ema_short
//trade_long_with_trend_filter = input.bool(false, title="Trade Long With Trend Filter?", group="Trend Filter")
//trade_short_with_trend_filter = input.bool(false, title="Trade Short With Trend Filter?", group="Trend Filter")

//heikinashi_close = request.security(ticker.heikinashi(syminfo.tickerid), timeframe.period, close)
//heikinashi_high = request.security(ticker.heikinashi(syminfo.tickerid), timeframe.period, high)
//heikinashi_low = request.security(ticker.heikinashi(syminfo.tickerid), timeframe.period, low)

//heikinashi_drift = heikinashi_close - (heikinashi_high + heikinashi_low)/2
string trend_filter_type_long = input.string(title="Trend Filter Type Long", options=["MA Long", "Stdev","URSI Fast & Slow","URSI-Filter","None"], defval="None", group = "Trend Filter")
string trend_filter_type_short = input.string(title="Trend Filter Type Short", options=["MA Short", "Stdev","URSI Fast & Slow","URSI-Filter","None"], defval="None", group = "Trend Filter")

//experimental_stop_loss =
//    experimental_stop_loss_type == "%" ? experimental_stop_loss_percent :
//    (experimental_stop_loss_type == "MA" ? experimental_stop_loss_ma :
//    (experimental_stop_loss_type == "ATR" ? experimental_stop_loss_atr :
//    ( experimental_stop_loss_type == "%_trailing" ? esl_percent_proper : experimental_stop_loss_hl)))

get_trade_long_with_trend_filter(i) =>
    if trend_filter_type_long == "MA Long"
        trade_long_with_trend_filter = true
        trade_long_with_trend_filter
    else
        if trend_filter_type_long == "Stdev"
            trade_long_with_trend_filter = true
            trade_long_with_trend_filter
        else
            if trend_filter_type_long == "None"
                trade_long_with_trend_filter = false
                trade_long_with_trend_filter
            else
                if trend_filter_type_long == "URSI-Filter"
                    trade_long_with_trend_filter = true
                    trade_long_with_trend_filter
                else
                    if trend_filter_type_long == "URSI Fast & Slow"
                        trade_long_with_trend_filter = true
                        trade_long_with_trend_filter



get_trade_short_with_trend_filter(i) =>
    if trend_filter_type_long == "MA Long"
        trade_short_with_trend_filter = true
        trade_short_with_trend_filter
    else
        if trend_filter_type_long == "Stdev"
            trade_short_with_trend_filter = true
            trade_short_with_trend_filter
        else
            if trend_filter_type_long == "None"
                trade_short_with_trend_filter = false
                trade_short_with_trend_filter
            else
                if trend_filter_type_long == "URSI-Filter"
                    trade_short_with_trend_filter = true
                    trade_short_with_trend_filter
                else
                    if trend_filter_type_long == "URSI Fast & Slow"
                        trade_short_with_trend_filter = true
                        trade_short_with_trend_filter







getTrendFilterLong(i) =>
    if trend_filter_type_long == "MA Long"
        trend_filter_long_condition = close > trend_ema_long ? true : false
        trend_filter_long_condition
    else
        if trend_filter_type_long == "Stdev"
            trend_filter_long_condition = temp_stdev > temp_stdev_signal ? true : false
            trend_filter_long_condition
        else
            if trend_filter_type_long == "None"
                trend_filter_long_condition = true
                trend_filter_long_condition
            else
                if trend_filter_type_long == "URSI-Filter"
                    trend_filter_long_condition = ta.crossover(arsi_vslow, signal_vslow) ? true : false
                    trend_filter_long_condition
                else
                    if trend_filter_type_long == "URSI Fast & Slow"
                        trend_filter_long_condition = ta.crossover(arsi_fast, arsi_slow) ? true : false
                        trend_filter_long_condition



getTrendFilterLongTakeProfit(i) =>
    if trend_filter_type_long == "MA Long"
        trend_filter_long_take_profit_condition = close < trend_ema_long ? true : false
        trend_filter_long_take_profit_condition
    else
        if trend_filter_type_long == "Stdev"
            trend_filter_long_take_profit_condition = temp_stdev < temp_stdev_signal ? true : false
            trend_filter_long_take_profit_condition
        else
            if trend_filter_type_long == "None"
                trend_filter_long_take_profit_condition = false
                trend_filter_long_take_profit_condition
            else
                if trend_filter_type_long == "URSI-Filter"
                    trend_filter_long_take_profit_condition = ta.crossunder(arsi_vslow, signal_vslow) ? true : false
                    trend_filter_long_take_profit_condition
                else
                    if trend_filter_type_long == "URSI Fast & Slow"
                        trend_filter_long_take_profit_condition = ta.crossunder(arsi_fast, arsi_slow) ? true : false
                        trend_filter_long_take_profit_condition



getTrendFilterShort(i) =>
    if trend_filter_type_short == "MA Short"
        trend_filter_short_condition = close < trend_ema_short ? true : false
        trend_filter_short_condition
    else
        if trend_filter_type_short == "Stdev"
            trend_filter_short_condition = temp_stdev < temp_stdev_signal ? true : false
            trend_filter_short_condition
        else
            if trend_filter_type_short == "None"
                trend_filter_short_condition = true
                trend_filter_short_condition
            else
                if trend_filter_type_short == "URSI-Filter"
                    trend_filter_short_condition = ta.crossunder(arsi_vslow, signal_vslow) ? true : false
                    trend_filter_short_condition
                else
                    if trend_filter_type_long == "URSI Fast & Slow"
                        trend_filter_short_condition = ta.crossunder(arsi_fast, arsi_slow) ? true : false
                        trend_filter_short_condition



getTrendFilterShortTakeProfit(i) =>
    if trend_filter_type_short == "MA Short"
        trend_filter_short_take_profit_condition = close > trend_ema_short ? true : false
        trend_filter_short_take_profit_condition
    else
        if trend_filter_type_short == "Stdev"
            trend_filter_short_take_profit_condition = temp_stdev > temp_stdev_signal ? true : false
            trend_filter_short_take_profit_condition
        else
            if trend_filter_type_short == "None"
                trend_filter_short_take_profit_condition = false
                trend_filter_short_take_profit_condition
            else
                if trend_filter_type_short == "URSI-Filter"
                    trend_filter_short_take_profit_condition = ta.crossover(arsi_vslow, signal_vslow) ? true : false
                    trend_filter_short_take_profit_condition
                else
                    if trend_filter_type_long == "URSI Fast & Slow"
                        trend_filter_short_take_profit_condition = ta.crossover(arsi_fast, arsi_slow) ? true : false
                        trend_filter_short_take_profit_condition



//trend_filter_long_condition = ta.crossover(temp_stdev, temp_stdev_signal) ? true : false //so-so: ta.change(total_score_ma_signal) > 0 //heikinashi_close > heikinashi_high[1] //and temp_stdev >= 0
//trend_filter_short_condition = ta.crossunder(temp_stdev, temp_stdev_signal) ? true : false //ta.change(total_score_ma_signal) < 0 //heikinashi_close < heikinashi_high[1] //and temp_stdev <= 0

//trend_filter_long_take_profit_condition = temp_stdev <= temp_stdev_signal ? true : false
//trend_filter_short_take_profit_condition = temp_stdev >= temp_stdev_signal ? true : false
trade_long_with_trend_filter = get_trade_long_with_trend_filter(1)
trade_short_with_trend_filter = get_trade_short_with_trend_filter(1)

trend_filter_long_condition = getTrendFilterLong(1)
trend_filter_short_condition = getTrendFilterShort(1)

trend_filter_long_take_profit_condition = getTrendFilterShortTakeProfit(1)
trend_filter_short_take_profit_condition = getTrendFilterShortTakeProfit(1)


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//long/short conditions code


long_condition_raw  = longing_allowed  ? barstate.isconfirmed and (main_ma_long_condition or ursi_long_condition or ursi_long_condition2 or ursi_long_condition3 or ursi_long_condition4 or ursi_long_condition5 or ao_long_condition or stdev_long_condition or stdev2_long_condition) : false
short_condition_raw = shorting_allowed ? barstate.isconfirmed and (main_ma_short_condition or ursi_short_condition or ursi_short_condition2 or ursi_short_condition3 or ursi_short_condition4 or ursi_short_condition5 or ao_short_condition or stdev_short_condition or stdev2_short_condition or ma50_short_condition or ma200_short_condition) : false



long_condition_with_trend = barstate.isconfirmed and longing_allowed and trend_filter_long_condition and (long_condition_raw) //ta.change(trend_ema) > 0 and
short_condition_with_trend = barstate.isconfirmed and shorting_allowed and trend_filter_short_condition and (short_condition_raw) //ta.change(trend_ema) < 0 and


//trade_long_with_trend_filter,
long_condition = trade_long_with_trend_filter == true ? long_condition_with_trend : long_condition_raw

short_condition = trade_short_with_trend_filter == true ? short_condition_with_trend : short_condition_raw


take_profit_long_condition = trend_filter_long_take_profit_condition
take_profit_short_condition = trend_filter_short_take_profit_condition //main_ma_short_exit_condition_p2 //main_ma_short_exit_condition_p1 or




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//STOP LOSS SETTINGS

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

string experimental_stop_loss_type = input.string(title="Stop Loss Type", options=["ATR", "MA","High/Low","%_trailing"], defval="%_trailing", group = "Experimental Stop Loss Settings")

experimental_stop_loss_ATR_length = input.int(14,"Experimental Stop Loss ATR Length", group = "Experimental Stop Loss Settings", tooltip="For ATR-based stop loss type.")
experimental_stop_loss_ATR_multiplier = input.float(2.0,"Experimental Stop Loss ATR Multiplier", group = "Experimental Stop Loss Settings", tooltip="For ATR-based stop loss type.")
experimental_stop_loss_length = input(100,"Experimental MA Stop Loss Length", group = "Experimental Stop Loss Settings", tooltip="For moving average stop loss type.")
//experimental_stop_loss_percent_ctrl_long = input.float(6.6,"Experimental Stop Loss % Long", group = "Experimental Stop Loss Settings")
//experimental_stop_loss_percent_ctrl_short = input.float(2.5,"Experimental Stop Loss % Short", group = "Experimental Stop Loss Settings")
experimental_stop_loss_percent_ctrl = input.float(1.5,"Experimental Stop Loss % Default", group = "Experimental Stop Loss Settings", tooltip="For %_trailing stop loss type.")

experimental_stop_loss_long_lookback_period = input(10, "Experimental Stop Loss Long Lookback", group = "Experimental Stop Loss Settings", tooltip="For High/Low Stop Loss type.")
experimental_stop_loss_short_lookback_period = input(10, "Experimental Stop Loss Short Lookback", group = "Experimental Stop Loss Settings", tooltip="For High/Low Stop Loss type.")


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Experimental Stop Loss (ELS) "%_trailing"

//var_inTradeLong = strategy.position_size > 0
//var_inTradeShort = strategy.position_size < 0

//experimental_stop_loss_percent_ctrl = var_inTradeLong ? experimental_stop_loss_percent_ctrl_long : (var_inTradeShort ? experimental_stop_loss_percent_ctrl_long : experimental_stop_loss_percent_ctrl_default)

esl_percent_proper_long_raw = close*(100.0 - experimental_stop_loss_percent_ctrl)/100.0
esl_percent_proper_short_raw = close*(100.0 + experimental_stop_loss_percent_ctrl)/100.0

esl_percent_proper_long_raw_prev = nz(esl_percent_proper_long_raw[1])
esl_percent_proper_short_raw_prev = nz(esl_percent_proper_short_raw[1])

esl_percent_proper_long_raw := esl_percent_proper_long_raw > esl_percent_proper_long_raw_prev or close[1] < esl_percent_proper_long_raw_prev ? esl_percent_proper_long_raw : esl_percent_proper_long_raw_prev
esl_percent_proper_short_raw := esl_percent_proper_short_raw < esl_percent_proper_short_raw_prev or close[1] > esl_percent_proper_short_raw_prev ? esl_percent_proper_short_raw : esl_percent_proper_short_raw_prev

esl_percent_proper_long_out = math.max(esl_percent_proper_long_raw,esl_percent_proper_long_raw_prev)
esl_percent_proper_short_out = math.min(esl_percent_proper_short_raw,esl_percent_proper_short_raw_prev)

var float esl_percent_proper_raw = 0
esl_percent_proper_raw := strategy.position_size > 0 ? esl_percent_proper_long_out : (strategy.position_size < 0 ? esl_percent_proper_short_out : na)
esl_percent_proper = esl_percent_proper_raw
//esl_percent_proper
//"%_proper"


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//stop loss as high/low from x days


esl_long_hl_raw = ta.lowest(low,experimental_stop_loss_long_lookback_period)
esl_short_hl_raw = ta.highest(high,experimental_stop_loss_short_lookback_period)

esl_long_hl_raw_prev = nz(esl_long_hl_raw[1])
esl_short_hl_raw_prev = nz(esl_short_hl_raw[1])

esl_long_hl_raw := esl_long_hl_raw > esl_long_hl_raw_prev or close[1] < esl_long_hl_raw_prev ? esl_long_hl_raw : esl_long_hl_raw_prev
esl_short_hl_raw := esl_short_hl_raw < esl_short_hl_raw_prev or close[1] > esl_short_hl_raw_prev ? esl_short_hl_raw : esl_short_hl_raw_prev

esl_hl_long_out = math.max(esl_long_hl_raw,esl_long_hl_raw_prev)
esl_hl_short_out = math.min(esl_short_hl_raw,esl_short_hl_raw_prev)

var float esl_hl_raw = 0
esl_hl_raw := strategy.position_size > 0 ? esl_hl_long_out : (strategy.position_size < 0 ? esl_hl_short_out : na)
experimental_stop_loss_hl = esl_hl_raw


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//stop loss as percent
var float experimental_stop_loss_long_percent_raw = 0
var float experimental_stop_loss_short_percent_raw = 0

experimental_stop_loss_long_percent_raw := ta.highest(close*(100.0 - experimental_stop_loss_percent_ctrl)/100.0, experimental_stop_loss_long_lookback_period)
experimental_stop_loss_short_percent_raw := ta.lowest(close*(100.0 + experimental_stop_loss_percent_ctrl)/100.0, experimental_stop_loss_short_lookback_period)

var float experimental_stop_loss_long_percent = 0
var float experimental_stop_loss_short_percent = 0
experimental_stop_loss_long_percent :=   (math.max(experimental_stop_loss_long_percent_raw, experimental_stop_loss_long_percent_raw[1])) //math.max(experimental_stop_loss_long_percent_raw, experimental_stop_loss_long_percent_raw[1])
experimental_stop_loss_short_percent :=  (math.min(experimental_stop_loss_short_percent_raw, experimental_stop_loss_short_percent_raw[1]))//math.min(experimental_stop_loss_short_percent_raw,experimental_stop_loss_short_percent_raw[1])
//long: math.max(experimental_stop_loss_long_percent_raw,experimental_stop_loss_long_percent_raw[1])
//short: math.min(experimental_stop_loss_short_percent_raw, experimental_stop_loss_short_percent_raw[1])


var float experimental_stop_loss_percent_raw = 0
experimental_stop_loss_percent_raw := strategy.position_size > 0 ? experimental_stop_loss_long_percent : (strategy.position_size < 0 ? experimental_stop_loss_short_percent : na)
experimental_stop_loss_percent = experimental_stop_loss_percent_raw  //math.max(experimental_stop_loss_percent_raw,experimental_stop_loss_percent_raw[1])

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//stop loss as ma
esl_ma_long = (ta.highest(ta.ema(close,experimental_stop_loss_length), experimental_stop_loss_long_lookback_period))
esl_ma_short = (ta.lowest(close + (close - ta.ema(close,experimental_stop_loss_length)), experimental_stop_loss_short_lookback_period))

esl_ma_long_prev = nz(esl_ma_long[1])
esl_ma_short_prev = nz(esl_ma_short[1])

esl_ma_long := esl_ma_long > esl_ma_long_prev or close[1] < esl_ma_long_prev ? esl_ma_long : esl_ma_long_prev
esl_ma_short := esl_ma_short < esl_ma_short_prev or close[1] > esl_ma_short_prev ? esl_ma_short : esl_ma_short_prev

esl_ma_long_out = math.max(esl_ma_long,esl_ma_long_prev)
esl_ma_short_out = math.min(esl_ma_short,esl_ma_short_prev)

experimental_stop_loss_ma = strategy.position_size > 0 ? esl_ma_long_out : (strategy.position_size < 0 ? esl_ma_short_out : na)

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//stop loss as atr

esl_atr_long = close - experimental_stop_loss_ATR_multiplier*ta.atr(experimental_stop_loss_ATR_length) //high
esl_atr_short = close + experimental_stop_loss_ATR_multiplier*ta.atr(experimental_stop_loss_ATR_length) //low

esl_atr_long_prev = nz(esl_atr_long[1])
esl_atr_short_prev = nz(esl_atr_short[1])

esl_atr_long := esl_atr_long > esl_atr_long_prev or close[1] < esl_atr_long_prev ? esl_atr_long : esl_atr_long_prev
esl_atr_short := esl_atr_short < esl_atr_short_prev or close[1] > esl_atr_short_prev ? esl_atr_short : esl_atr_short_prev

esl_atr_long_out = math.max(esl_atr_long,esl_atr_long_prev)
esl_atr_short_out = math.min(esl_atr_short,esl_atr_short_prev)


experimental_stop_loss_atr = strategy.position_size > 0 ? esl_atr_long_out : (strategy.position_size < 0 ? esl_atr_short_out : na)


//experimental_stop_loss_atr_period = input.int(14, title="ESL ATR Period", minval=1, maxval=200, group = "ESL ATR Settings")
//experimental_stop_loss_atr_multiplier = input.float(2.5, title="ESL ATR Multiplier", minval=0.1, group = "ESL ATR Settings")
//show_experimental_stop_loss_atr = input(false, "Show ESL ATR?", group = "ESL ATR Settings")

//plot(show_experimental_stop_loss_atr ? experimental_stop_loss_long_atr : na, title='ESL Long', linewidth=1, color=#00FF00) //ta.highest(high - experimental_stop_loss_atr_multiplier * ta.atr(experimental_stop_loss_atr_period), experimental_stop_loss_atr_period)
//plot(show_experimental_stop_loss_atr ? experimental_stop_loss_short_atr : na, title='ESL Short', linewidth=1, color=#FF0000) //ta.lowest(low + experimental_stop_loss_atr_multiplier * ta.atr(experimental_stop_loss_atr_period), experimental_stop_loss_atr_period)


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//stop loss switch
//
//
experimental_stop_loss = experimental_stop_loss_type == "%" ? experimental_stop_loss_percent : (experimental_stop_loss_type == "MA" ? experimental_stop_loss_ma : (experimental_stop_loss_type == "ATR" ? experimental_stop_loss_atr : ( experimental_stop_loss_type == "%_trailing" ? esl_percent_proper : experimental_stop_loss_hl)))

//plotting
show_experimental_stop_loss = input(true, "Show Stop Loss Level?", group = "Experimental Stop Loss Settings")
plot(show_experimental_stop_loss ? experimental_stop_loss : na, title="Stop Loss Level", color=color.purple) // experimental_stop_loss //,style=plot.style_circles

//plot(experimental_stop_loss_long_hl, color=color.green)
//plot(experimental_stop_loss_short_hl, color=color.red)



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//strategy logic

take_profit_enabled = input.bool(false, title="Take profit enabled?", group="Strategy Order Settings", tooltip="Will trigger take profit orders to close positions once trade triggers flip from long to short or vice versa.")
hold_onto_trades_long = input.bool(false, title="Hold onto trades Long?", group="Strategy Order Settings", tooltip="Will hold onto trades despite triggers activating to take other trades. Needs to be stopped out to take another trade.")
hold_onto_trades_short = input.bool(false, title="Hold onto trades Short?", group="Strategy Order Settings", tooltip="Will hold onto trades despite triggers activating to take other trades. Needs to be stopped out to take another trade.")

//color_bars = input.bool(false, title="Color bars based on position?", group="Bar Color Settings", tooltip="Will color bars based on strategy position. Green for longs, red for shorts, blue for no position.")

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
var float buyPrice = 0 //intialise buyPrice, this will change when we enter a trade ; float = decimal number data type 0.0
var float sellPrice = 0

// In-Trade Conditions
inTradeLong = strategy.position_size > 0
inTradeShort = strategy.position_size < 0
notInTrade = strategy.position_size == 0
timePeriod = time >= timestamp(syminfo.timezone, 2017, 12, 12, 0, 0)
entryPrice = 0


if timePeriod and (long_condition) and (hold_onto_trades_long ? notInTrade : true)
    strategy.entry("Long", strategy.long, comment="L", alert_message = "Long Entry")
    buyPrice := na
    sellPrice := na

if timePeriod and (short_condition) and (hold_onto_trades_short ? notInTrade : true)
    strategy.entry("Short", strategy.short, comment="S", alert_message = "Short Entry")
    buyPrice := na //reset buyPrice
    sellPrice := na





if timePeriod and (long_condition[1]) and (hold_onto_trades_long ? notInTrade : true) // if buyCondition is true prev candle
    buyPrice := open // entry price = current bar opening price

if timePeriod and (short_condition[1]) and (hold_onto_trades_short ? notInTrade : true)
    sellPrice := open



stop_ctrl_long = experimental_stop_loss //trade_only_with_trend_long ? math.max(experimental_stop_loss, trend_ema_long) : experimental_stop_loss
stop_ctrl_short = experimental_stop_loss //trade_only_with_trend_short ? math.min(experimental_stop_loss, trend_ema_short) : experimental_stop_loss
//experimental_stop_loss // trailing_slv2  //experimental_stop_loss // trailPrice


if timePeriod and barstate.isconfirmed and (low < stop_ctrl_long)  //or long_stop_condition //low
    strategy.exit('exit', 'Long', stop=stop_ctrl_long, comment="L.stop")
    buyPrice := na //reset buyPrice
    sellPrice := na

if timePeriod and barstate.isconfirmed and (high > stop_ctrl_short)  //or short_stop_condition //high
    strategy.exit('exit', 'Short', stop=stop_ctrl_short, comment="S.stop")
    buyPrice := na //reset buyPrice
    sellPrice := na




if barstate.isconfirmed and take_profit_enabled and take_profit_long_condition
    strategy.close(id = 'Long', immediately = true, comment="L.tp")
    buyPrice := na //reset buyPrice
    sellPrice := na


if barstate.isconfirmed and take_profit_enabled and take_profit_short_condition
    strategy.close(id = 'Short', immediately = true, comment="S.tp")
    buyPrice := na //reset buyPrice
    sellPrice := na





//plot(strategy.equity, title="equity", color=color.red, linewidth=2, style=plot.style_areabr)
//plot(buyPrice, color=color.red)




/////////////////////////////////////////////////////////////////////////////////////////////////
//background coloring
/////////////////////////////////////////////////////////////////////////////////////////////////

bgcolor(inTradeLong ? color.green : inTradeShort ? color.red : notInTrade ? color.blue : na, transp=90) //net positioning, net long is green, net short is red

barcolor(inTradeLong ? color.green : inTradeShort ? color.red : notInTrade ? color.blue : na)

//plot(strategy.position_size != 0 and show_trailing_stop ? trailPrice : na, color=color.red,title="Trailing Stop")
//plot(vad, color=color.green)

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

var table statuswindow = table.new(position.top_right, 100, 100, border_width=2)

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Trend Status//////////////////////////////////////////////////////////////////
txt1 = 'ð¡            TREND             ð¡'
table.cell(statuswindow, 3, 0, text=txt1, bgcolor=color.new(#000000, 50), text_color=color.white, text_size=size.small)

//trend_ema_long, trend_ema_short
//ma50, ma200
//ma_50_price_above = close > ma50 ? true : false
//ma_50_price_below = close < ma50 ? true : false
//ma_50_slope_up = ta.change(ma50) > 0 ? true : false
//ma_50_slope_down = ta.change(ma50) < 0 ? true : false

trend_ema_long_price_above = close > trend_ema_long ? true : false
trend_ema_long_price_below = close < trend_ema_long ? true : false
trend_ema_long_slope_up = ta.change(trend_ema_long) > 0 ? true : false
trend_ema_long_slope_down = ta.change(trend_ema_long) < 0 ? true : false

if trend_ema_long_price_above
    table.cell(statuswindow, 3, 1, text=str.tostring("Price Above MA Long"), bgcolor=color.new(#00bcd4, 50), text_color=color.white, text_size=size.small)
if trend_ema_long_price_below
    table.cell(statuswindow, 3, 1, text=str.tostring("Price Below MA Long"), bgcolor=color.new(#e91e63, 50), text_color=color.white, text_size=size.small)
if trend_ema_long_slope_up ? 1 : na
    table.cell(statuswindow, 3, 2, text=str.tostring("MA Long Slope Up"), bgcolor=color.new(#00bcd4, 50), text_color=color.white, text_size=size.small)
if trend_ema_long_slope_up ? na : 1
    table.clear(statuswindow, 3, 2)
if trend_ema_long_slope_down ? 1 : na
    table.cell(statuswindow, 3, 3, text=str.tostring("MA Long Slope Down"), bgcolor=color.new(#e91e63, 50), text_color=color.white, text_size=size.small)
if trend_ema_long_slope_down ? na : 1
    table.clear(statuswindow, 3, 3)



//trend_ema_long, trend_ema_short
//ma_200_price_above = close > ma200 ? true : false
//ma_200_price_below = close < ma200 ? true : false
//ma_200_slope_up = ta.change(ma200) > 0 ? true : false
//ma_200_slope_down = ta.change(ma200) < 0 ? true : false

trend_ema_short_price_above = close > trend_ema_short ? true : false
trend_ema_short_price_below = close < trend_ema_short ? true : false
trend_ema_short_slope_up = ta.change(trend_ema_short) > 0 ? true : false
trend_ema_short_slope_down = ta.change(trend_ema_short) < 0 ? true : false

if trend_ema_short_price_above
    table.cell(statuswindow, 3, 4, text=str.tostring("Price Above MA Short"), bgcolor=color.new(#00bcd4, 50), text_color=color.white, text_size=size.small)
if trend_ema_short_price_below
    table.cell(statuswindow, 3, 4, text=str.tostring("Price Below MA Short"), bgcolor=color.new(#e91e63, 50), text_color=color.white, text_size=size.small)
if trend_ema_short_slope_up ? 1 : na
    table.cell(statuswindow, 3, 5, text=str.tostring("MA Short Slope Up"), bgcolor=color.new(#00bcd4, 50), text_color=color.white, text_size=size.small)
if trend_ema_short_slope_up ? na : 1
    table.clear(statuswindow, 3, 5)
if trend_ema_short_slope_down ? 1 : na
    table.cell(statuswindow, 3, 6, text=str.tostring("MA Short Slope Down"), bgcolor=color.new(#e91e63, 50), text_color=color.white, text_size=size.small)
if trend_ema_short_slope_down ? na : 1
    table.clear(statuswindow, 3, 6)




main_ma_price_above = close > main_ma ? true : false
main_ma_price_below = close < main_ma ? true : false
main_ma_slope_up = ta.change(main_ma) > 0 ? true : false
main_ma_slope_down = ta.change(main_ma) < 0 ? true : false

if main_ma_price_above
    table.cell(statuswindow, 3, 7, text=str.tostring("Price Above Main MA"), bgcolor=color.new(#00bcd4, 50), text_color=color.white, text_size=size.small)
if main_ma_price_below
    table.cell(statuswindow, 3, 7, text=str.tostring("Price Below Main MA"), bgcolor=color.new(#e91e63, 50), text_color=color.white, text_size=size.small)
if main_ma_slope_up ? 1 : na
    table.cell(statuswindow, 3, 8, text=str.tostring("Main MA Slope Up"), bgcolor=color.new(#00bcd4, 50), text_color=color.white, text_size=size.small)
if main_ma_slope_up ? na : 1
    table.clear(statuswindow, 3, 8)
if main_ma_slope_down ? 1 : na
    table.cell(statuswindow, 3, 9, text=str.tostring("Main MA Slope Down"), bgcolor=color.new(#e91e63, 50), text_color=color.white, text_size=size.small)
if main_ma_slope_down ? na : 1
    table.clear(statuswindow, 3, 9)



//ao
ao_rising = ta.change(ao) > 0 ? true : false
ao_falling = ta.change(ao) < 0 ? true : false
ao_above_0 = ao > 0 ? true : false
ao_below_0 = ao < 0 ? true : false

if ao_rising
    table.cell(statuswindow, 3, 10, text=str.tostring("AO Momentum Rising"), bgcolor=color.new(#00bcd4, 50), text_color=color.white, text_size=size.small)
if ao_falling
    table.cell(statuswindow, 3, 10, text=str.tostring("AO Momentum Falling"), bgcolor=color.new(#e91e63, 50), text_color=color.white, text_size=size.small)
if ao_above_0 ? 1 : na
    table.cell(statuswindow, 3, 11, text=str.tostring("AO Above 0"), bgcolor=color.new(#00bcd4, 50), text_color=color.white, text_size=size.small)
if ao_above_0 ? na : 1
    table.clear(statuswindow, 3, 11)
if ao_below_0 ? 1 : na
    table.cell(statuswindow, 3, 12, text=str.tostring("AO Below 0"), bgcolor=color.new(#e91e63, 50), text_color=color.white, text_size=size.small)
if ao_below_0 ? na : 1
    table.clear(statuswindow, 3, 12)





//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Ultimate RSI Status///////////////////////////////////////////////////////////////
txt2 = 'ð¡         ULTIMATE RSI         ð¡'
table.cell(statuswindow, 2, 0, text=txt2, bgcolor=color.new(#000000, 50), text_color=color.white, text_size=size.small)

//arsi_fast, signal_fast
//arsi_slow, signal_slow
//arsi_vslow, signal_vslow
ursi_fast_above_signal = arsi_fast > signal_fast ? true : false
ursi_fast_below_signal = arsi_fast < signal_fast ? true : false
ursi_fast_above_50 = arsi_fast > 50 ? true : false
ursi_fast_below_50 = arsi_fast < 50 ? true : false

if ursi_fast_above_signal
    table.cell(statuswindow, 2, 1, text=str.tostring("URSI Fast Rising"), bgcolor=color.new(#00bcd4, 50), text_color=color.white, text_size=size.small)
if ursi_fast_below_signal
    table.cell(statuswindow, 2, 1, text=str.tostring("URSI Fast Falling"), bgcolor=color.new(#e91e63, 50), text_color=color.white, text_size=size.small)
if ursi_fast_above_50 ? 1 : na
    table.cell(statuswindow, 2, 2, text=str.tostring("URSI Fast Above 50"), bgcolor=color.new(#00bcd4, 50), text_color=color.white, text_size=size.small)
if ursi_fast_above_50 ? na : 1
    table.clear(statuswindow, 2, 2)
if ursi_fast_below_50 ? 1 : na
    table.cell(statuswindow, 2, 3, text=str.tostring("URSI Fast Below 50"), bgcolor=color.new(#e91e63, 50), text_color=color.white, text_size=size.small)
if ursi_fast_below_50 ? na : 1
    table.clear(statuswindow, 2, 3)





ursi_slow_above_signal = arsi_slow > signal_slow ? true : false
ursi_slow_below_signal = arsi_slow < signal_slow ? true : false
ursi_slow_above_50 = arsi_slow > 50 ? true : false
ursi_slow_below_50 = arsi_slow < 50 ? true : false

if ursi_slow_above_signal
    table.cell(statuswindow, 2, 4, text=str.tostring("URSI Slow Rising"), bgcolor=color.new(#00bcd4, 50), text_color=color.white, text_size=size.small)
if ursi_slow_below_signal
    table.cell(statuswindow, 2, 4, text=str.tostring("URSI Slow Falling"), bgcolor=color.new(#e91e63, 50), text_color=color.white, text_size=size.small)
if ursi_slow_above_50 ? 1 : na
    table.cell(statuswindow, 2, 5, text=str.tostring("URSI Slow Above 50"), bgcolor=color.new(#00bcd4, 50), text_color=color.white, text_size=size.small)
if ursi_slow_above_50 ? na : 1
    table.clear(statuswindow, 2, 5)
if ursi_slow_below_50 ? 1 : na
    table.cell(statuswindow, 2, 6, text=str.tostring("URSI Slow Below 50"), bgcolor=color.new(#e91e63, 50), text_color=color.white, text_size=size.small)
if ursi_slow_below_50 ? na : 1
    table.clear(statuswindow, 2, 6)




ursi_vslow_above_signal = arsi_vslow > signal_vslow ? true : false
ursi_vslow_below_signal = arsi_vslow < signal_vslow ? true : false
ursi_vslow_above_50 = arsi_vslow > 50 ? true : false
ursi_vslow_below_50 = arsi_vslow < 50 ? true : false

if ursi_vslow_above_signal
    table.cell(statuswindow, 2, 7, text=str.tostring("URSI Filter Rising"), bgcolor=color.new(#00bcd4, 50), text_color=color.white, text_size=size.small)
if ursi_vslow_below_signal
    table.cell(statuswindow, 2, 7, text=str.tostring("URSI Filter Falling"), bgcolor=color.new(#e91e63, 50), text_color=color.white, text_size=size.small)
if ursi_vslow_above_50 ? 1 : na
    table.cell(statuswindow, 2, 8, text=str.tostring("URSI Filter Above 50"), bgcolor=color.new(#00bcd4, 50), text_color=color.white, text_size=size.small)
if ursi_vslow_above_50 ? na : 1
    table.clear(statuswindow, 2, 8)
if ursi_vslow_below_50 ? 1 : na
    table.cell(statuswindow, 2, 9, text=str.tostring("URSI Filter Below 50"), bgcolor=color.new(#e91e63, 50), text_color=color.white, text_size=size.small)
if ursi_vslow_below_50 ? na : 1
    table.clear(statuswindow, 2, 9)




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Stdev Status/////////////////////////////////////////////////////////////////
txt3 = 'ð¡         STDEV         ð¡'
table.cell(statuswindow, 1, 0, text=txt3, bgcolor=color.new(#000000, 50), text_color=color.white, text_size=size.small)

//temp_stdev, temp_stdev_signal
//temp_stdev2, temp_stdev2_signal

temp_stdev_above_signal = temp_stdev > temp_stdev_signal ? true : false
temp_stdev_below_signal = temp_stdev < temp_stdev_signal ? true : false
temp_stdev_above_0 = temp_stdev > 0 ? true : false
temp_stdev_below_0 = temp_stdev < 0 ? true : false

if temp_stdev_above_signal
    table.cell(statuswindow, 1, 1, text=str.tostring("Stdev Fast Rising"), bgcolor=color.new(#00bcd4, 50), text_color=color.white, text_size=size.small)
if temp_stdev_below_signal
    table.cell(statuswindow, 1, 1, text=str.tostring("Stdev Fast Falling"), bgcolor=color.new(#e91e63, 50), text_color=color.white, text_size=size.small)
if temp_stdev_above_0 ? 1 : na
    table.cell(statuswindow, 1, 2, text=str.tostring("Stdev Fast Above 0"), bgcolor=color.new(#00bcd4, 50), text_color=color.white, text_size=size.small)
if temp_stdev_above_0 ? na : 1
    table.clear(statuswindow, 1, 2)
if temp_stdev_below_0 ? 1 : na
    table.cell(statuswindow, 1, 3, text=str.tostring("Stdev Fast Below 0"), bgcolor=color.new(#e91e63, 50), text_color=color.white, text_size=size.small)
if temp_stdev_below_0 ? na : 1
    table.clear(statuswindow, 1, 3)




temp_stdev2_above_signal = temp_stdev2 > temp_stdev2_signal ? true : false
temp_stdev2_below_signal = temp_stdev2 < temp_stdev2_signal ? true : false
temp_stdev2_above_0 = temp_stdev2 > 0 ? true : false
temp_stdev2_below_0 = temp_stdev2 < 0 ? true : false

if temp_stdev2_above_signal
    table.cell(statuswindow, 1, 4, text=str.tostring("Stdev Slow Rising"), bgcolor=color.new(#00bcd4, 50), text_color=color.white, text_size=size.small)
if temp_stdev2_below_signal
    table.cell(statuswindow, 1, 4, text=str.tostring("Stdev Slow Falling"), bgcolor=color.new(#e91e63, 50), text_color=color.white, text_size=size.small)
if temp_stdev2_above_0 ? 1 : na
    table.cell(statuswindow, 1, 5, text=str.tostring("Stdev Slow Above 0"), bgcolor=color.new(#00bcd4, 50), text_color=color.white, text_size=size.small)
if temp_stdev2_above_0 ? na : 1
    table.clear(statuswindow, 1, 5)
if temp_stdev2_below_0 ? 1 : na
    table.cell(statuswindow, 1, 6, text=str.tostring("Stdev Slow Below 0"), bgcolor=color.new(#e91e63, 50), text_color=color.white, text_size=size.small)
if temp_stdev2_below_0 ? na : 1
    table.clear(statuswindow, 1, 6)



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Shorts Status/////////////////////////////////////////////////////////////////
txt4 = 'ð¡           SHORTS           ð¡'
table.cell(statuswindow, 0, 0, text=txt4, bgcolor=color.new(#000000, 50), text_color=color.white, text_size=size.small)

//ma50, ma200
ma_50_price_above = close > ma50 ? true : false
ma_50_price_below = close < ma50 ? true : false
ma_50_slope_up = ta.change(ma50) > 0 ? true : false
ma_50_slope_down = ta.change(ma50) < 0 ? true : false

if ma_50_price_above
    table.cell(statuswindow, 0, 1, text=str.tostring("Price Above EMA50"), bgcolor=color.new(#00bcd4, 50), text_color=color.white, text_size=size.small)
if ma_50_price_below
    table.cell(statuswindow, 0, 1, text=str.tostring("Price Below EMA50"), bgcolor=color.new(#e91e63, 50), text_color=color.white, text_size=size.small)
if ma_50_slope_up ? 1 : na
    table.cell(statuswindow, 0, 2, text=str.tostring("EMA50 Slope Up"), bgcolor=color.new(#00bcd4, 50), text_color=color.white, text_size=size.small)
if ma_50_slope_up ? na : 1
    table.clear(statuswindow, 0, 2)
if ma_50_slope_down ? 1 : na
    table.cell(statuswindow, 0, 3, text=str.tostring("EMA50 Slope Down"), bgcolor=color.new(#e91e63, 50), text_color=color.white, text_size=size.small)
if ma_50_slope_down ? na : 1
    table.clear(statuswindow, 0, 3)



ma_200_price_above = close > ma200 ? true : false
ma_200_price_below = close < ma200 ? true : false
ma_200_slope_up = ta.change(ma200) > 0 ? true : false
ma_200_slope_down = ta.change(ma200) < 0 ? true : false

if ma_200_price_above
    table.cell(statuswindow, 0, 4, text=str.tostring("Price Above EMA200"), bgcolor=color.new(#00bcd4, 50), text_color=color.white, text_size=size.small)
if ma_200_price_below
    table.cell(statuswindow, 0, 4, text=str.tostring("Price Below EMA200"), bgcolor=color.new(#e91e63, 50), text_color=color.white, text_size=size.small)
if ma_200_slope_up ? 1 : na
    table.cell(statuswindow, 0, 5, text=str.tostring("EMA200 Slope Up"), bgcolor=color.new(#00bcd4, 50), text_color=color.white, text_size=size.small)
if ma_200_slope_up ? na : 1
    table.clear(statuswindow, 0, 5)
if ma_200_slope_down ? 1 : na
    table.cell(statuswindow, 0, 6, text=str.tostring("EMA200 Slope Down"), bgcolor=color.new(#e91e63, 50), text_color=color.white, text_size=size.small)
if ma_200_slope_down ? na : 1
    table.clear(statuswindow, 0, 6)