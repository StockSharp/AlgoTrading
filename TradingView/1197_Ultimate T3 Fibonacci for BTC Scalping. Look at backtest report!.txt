//@version=5
strategy('Ultimate T3 Fibonacci Strategy by NHBprod', overlay=false, currency='USD', initial_capital=100, default_qty_type=strategy.cash, default_qty_value=100, commission_value=0.1)

MenuBacktesting = input(true, '============== Strategy Tester ===========')

positionType = input.string(defval='Long', title='  Order Type', options=['Long & Short', 'Long', 'Short'])

use_opposite = input(true, 'Use Opposite Signals to Close Trades')
usetrademanagement = input(true, 'Use Take Profit & Stop Loss')

//iteration       = input(defval=0,       title="  Iterations",          type=input.integer)
tp = input.float(defval=15.0, title='  Take Profit %') / 100
sl = input.float(defval=2.0, title='  Stop Loss %') / 100


customperiod = input(false, title='Use Custom Period')

y1 = input(defval=2020, title='  From Year')
mo1 = input(defval=0, title='  From Month')
d1 = input(defval=0, title='  From Day')
h1x = input(defval=0, title='  From Hour')
m1 = input(defval=0, title='  From Minute')
y2 = input(defval=2025, title='  To Year')
mo2 = input(defval=8, title='  To Month')
d2 = input(defval=1, title='  To Day')
h2 = input(defval=0, title='  To Hour')
m2 = input(defval=0, title='  To Minute')

t1 = timestamp(y1, mo1, d1, h1x, m1)
t2 = timestamp(y2, mo2, d2, h2, m2)




//--------------------------FUNCTION----------------------------
isInRange() =>
    ret = customperiod ? time >= t1 and time <= t2 : true
    ret



hull_ma(src, length) =>
    // Compute the Hull Moving Average
    return_1 = ta.wma(2 * ta.wma(src, length / 2) - ta.wma(src, length), math.round(math.sqrt(length)))
    return_1

ma_function(source, length, smoothing) =>
    smoothing == 'RMA' ? ta.rma(source, length) : smoothing == 'SMA' ? ta.sma(source, length) : smoothing == 'EMA' ? ta.ema(source, length) : smoothing == 'WMA' ? ta.wma(source, length) : smoothing == 'HMA' ? hull_ma(source, length) : na

t3_function(a1, length) =>
    // Comput the Tilson T3
    e1 = ta.ema((high + low + 2 * close) / 4, length)
    e2 = ta.ema(e1, length)
    e3 = ta.ema(e2, length)
    e4 = ta.ema(e3, length)
    e5 = ta.ema(e4, length)
    e6 = ta.ema(e5, length)
    c1 = -a1 * a1 * a1
    c2 = 3 * a1 * a1 + 3 * a1 * a1 * a1
    c3 = -6 * a1 * a1 - 3 * a1 - 3 * a1 * a1 * a1
    c4 = 1 + 3 * a1 + a1 * a1 * a1 + 3 * a1 * a1
    T3 = c1 * e6 + c2 * e5 + c3 * e4 + c4 * e3
    T3




//----------------------------------TILSON T3------------------------------------

useTILSONT3 = input(true, title='ðŸŸ¦ <========== Use TILSON T3 ===========')
TILSONT3_exit = input(defval=true, title='ðŸŸ¥ Use Sell Condition')

T3FiboLine = input(false, title='Show T3 Fibonacci Ratio Line?')
buy_signal_selector = input.string(title='  ignal Selector', defval='FibLine crossover T3', options=['Close > T3', 'FibLine crossover T3'])
t3_length = input(33, '  T3 Length')
t3_vf = input.float(defval=0.6, title='  Volume Factor', step=0.1)
t3_length_fibo = input(19, '  T3 Length fibo')
t3_vf_fibo = input(0.418, '  Volume Factor fibo')

T3 = t3_function(t3_vf, t3_length)
T32 = t3_function(t3_vf_fibo, t3_length_fibo)

col1 = T3 > T3[1]
col3 = T3 < T3[1]
t3_color = col1 ? color.green : col3 ? color.red : color.yellow
col12 = T32 > T32[1]
col32 = T32 < T32[1]
t3_color2 = col12 ? color.blue : col32 ? color.purple : color.yellow

t3signal = buy_signal_selector == 'FibLine crossover T3' ? ta.crossover(T32, T3) : close > T3
t3signal_sell = buy_signal_selector == 'FibLine crossover T3' ? ta.crossunder(T32, T3) : close < T3

tilson_signal = useTILSONT3 ? isInRange() and t3signal : true  //false
tilson_signal_sell = TILSONT3_exit ? isInRange() and t3signal_sell : true  //false


plot(T3, color=t3_color, linewidth=3, title='T3')
plot(T32, color=t3_color2, linewidth=3, title="T3 Fibo")
//----------------------------------Bars Back Ratio------------------------------------
useBARSBACK = false
barsBack_signal = false  // Temporary assignment until algo is completed.

//----------------------------------MASTER---------------------------------------------------------------------------------------------------------------------------------------------------------------------

select1 =  useTILSONT3   //or usePRICECHANGE) or useDMI or useMFI  or

master_signal =  tilson_signal and select1

select2 =  TILSONT3_exit

master_sell =  tilson_signal_sell  and select2


// //----------------------------------ALERT-------------------------------------


Longtake_level = strategy.position_avg_price * (1 + tp)
Longstop_level = strategy.position_avg_price * (1 - sl)

Shorttake_level = strategy.position_avg_price * (1 - tp)
Shortstop_level = strategy.position_avg_price * (1 + sl)


strategy.entry('Long', strategy.long, when=master_signal and positionType != 'Short')
strategy.close('Long', when=use_opposite and master_sell)

if usetrademanagement
    strategy.exit('Close Long', 'Long', limit=Longtake_level, stop=Longstop_level)

strategy.entry('Short', strategy.short, when=master_sell and positionType != 'Long')
strategy.close('Short', when=use_opposite and master_signal)

if usetrademanagement
    strategy.exit('Close Short', 'Short', limit=Shorttake_level, stop=Shortstop_level)