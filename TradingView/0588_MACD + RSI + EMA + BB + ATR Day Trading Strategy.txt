//@version=5
strategy("MACD + RSI + EMA + BB + ATR Day Trading Strategy",
         shorttitle="MREBA_DayTradeStrategy",
         overlay=true,
         initial_capital=50000,
         default_qty_type=strategy.percent_of_equity,
         default_qty_value=100,
         commission_type=strategy.commission.cash_per_contract,
         commission_value=0.005,
         slippage=2,
         max_bars_back=500)

// ============================================================================
// STRATEGY PARAMETERS AND INPUTS
// ============================================================================

// Risk Management Inputs
risk_percent = input.float(1.5, "Risk Per Trade (%)", minval=0.1, maxval=5.0, step=0.1, group="Risk Management")
max_daily_loss = input.float(5.0, "Max Daily Loss (%)", minval=1.0, maxval=20.0, step=0.5, group="Risk Management")
max_positions = input.int(3, "Max Concurrent Positions", minval=1, maxval=5, group="Risk Management")
reward_ratio = input.float(2.0, "Risk:Reward Ratio", minval=1.0, maxval=5.0, step=0.1, group="Risk Management")

// Technical Indicator Inputs
macd_fast = input.int(12, "MACD Fast Length", minval=5, maxval=50, group="MACD Settings")
macd_slow = input.int(26, "MACD Slow Length", minval=10, maxval=100, group="MACD Settings")
macd_signal = input.int(9, "MACD Signal Length", minval=3, maxval=20, group="MACD Settings")

rsi_length = input.int(14, "RSI Length", minval=5, maxval=50, group="RSI Settings")
rsi_oversold = input.int(30, "RSI Oversold", minval=10, maxval=40, group="RSI Settings")
rsi_overbought = input.int(70, "RSI Overbought", minval=60, maxval=90, group="RSI Settings")

ema_fast = input.int(9, "Fast EMA", minval=5, maxval=20, group="EMA Settings")
ema_slow = input.int(21, "Slow EMA", minval=10, maxval=50, group="EMA Settings")

atr_length = input.int(14, "ATR Length", minval=5, maxval=30, group="ATR Settings")
atr_multiplier = input.float(2.0, "ATR Stop Multiplier", minval=1.0, maxval=5.0, step=0.1, group="ATR Settings")
trail_atr_mult = input.float(1.5, "Trailing Stop ATR Multiplier", minval=0.5, maxval=3.0, step=0.1, group="ATR Settings")

bb_length = input.int(20, "Bollinger Bands Length", minval=10, maxval=50, group="Bollinger Bands")
bb_mult = input.float(2.0, "Bollinger Bands Multiplier", minval=1.0, maxval=3.0, step=0.1, group="Bollinger Bands")

// Time Filter Inputs
trading_session = input.session("0930-1130", "Trading Session", group="Time Filters")
close_session = input.session("1530-1600", "Close All Positions", group="Time Filters")
avoid_lunch = input.bool(true, "Avoid Lunch Hour (11:30-13:30)", group="Time Filters")

// Volume Filter
min_volume_mult = input.float(1.2, "Minimum Volume Multiplier", minval=0.5, maxval=3.0, step=0.1, group="Volume Filter")

// ============================================================================
// TECHNICAL INDICATORS
// ============================================================================

// MACD
[macd_line, signal_line, macd_histogram] = ta.macd(close, macd_fast, macd_slow, macd_signal)

// RSI
rsi = ta.rsi(close, rsi_length)

// EMAs
ema_9 = ta.ema(close, ema_fast)
ema_21 = ta.ema(close, ema_slow)

// ATR
atr_value = ta.atr(atr_length)

// Bollinger Bands
[bb_upper, bb_middle, bb_lower] = ta.bb(close, bb_length, bb_mult)
bb_squeeze = (bb_upper - bb_lower) / bb_middle < 0.1

// VWAP
vwap = ta.vwap(hlc3)

// Volume Analysis
volume_sma = ta.sma(volume, 20)
high_volume = volume > volume_sma * min_volume_mult

// ============================================================================
// MULTI-TIMEFRAME ANALYSIS
// ============================================================================

// Higher timeframe trend (15-minute for 5-minute charts)
htf_timeframe = timeframe.multiplier <= 5 ? "15" : timeframe.multiplier <= 15 ? "1H" : "4H"
htf_ema_fast = request.security(syminfo.tickerid, htf_timeframe, ta.ema(close, ema_fast))
htf_ema_slow = request.security(syminfo.tickerid, htf_timeframe, ta.ema(close, ema_slow))
htf_trend_up = htf_ema_fast > htf_ema_slow
htf_trend_down = htf_ema_fast < htf_ema_slow

// ============================================================================
// TIME FILTERS
// ============================================================================

// Check if we're in trading session
in_trading_session = not na(time(timeframe.period, trading_session))
in_close_session = not na(time(timeframe.period, close_session))

// Avoid lunch hour
lunch_hour = avoid_lunch and (hour >= 11 and hour < 13 and minute >= 30)

// Overall time filter
time_filter = in_trading_session and not lunch_hour

// ============================================================================
// MARKET CONDITIONS AND FILTERS
// ============================================================================

// Volatility filter (only trade when ATR is above average)
atr_sma = ta.sma(atr_value, 20)
volatility_filter = atr_value > atr_sma * 0.8

// Trend filters
strong_uptrend = ema_9 > ema_21 and close > ema_9 and htf_trend_up
strong_downtrend = ema_9 < ema_21 and close < ema_9 and htf_trend_down

// ============================================================================
// ENTRY CONDITIONS
// ============================================================================

// Long Entry Conditions
macd_bullish = macd_line > signal_line and macd_line[1] <= signal_line[1]
rsi_not_overbought = rsi < rsi_overbought and rsi > 40
price_above_vwap = close > vwap
bullish_momentum = close > open and high > high[1]

long_condition = strong_uptrend and macd_bullish and rsi_not_overbought and
                 price_above_vwap and bullish_momentum and high_volume and
                 volatility_filter and time_filter

// Short Entry Conditions
macd_bearish = macd_line < signal_line and macd_line[1] >= signal_line[1]
rsi_not_oversold = rsi > rsi_oversold and rsi < 60
price_below_vwap = close < vwap
bearish_momentum = close < open and low < low[1]

short_condition = strong_downtrend and macd_bearish and rsi_not_oversold and
                  price_below_vwap and bearish_momentum and high_volume and
                  volatility_filter and time_filter

// ============================================================================
// POSITION SIZING AND RISK MANAGEMENT
// ============================================================================

// Calculate position size based on risk percentage
long_stop_price = close - (atr_value * atr_multiplier)
short_stop_price = close + (atr_value * atr_multiplier)

long_distance = close - long_stop_price
short_distance = short_stop_price - close

risk_amount = strategy.equity * (risk_percent / 100)
long_qty = risk_amount / long_distance
short_qty = risk_amount / short_distance

// Daily loss check
daily_loss_limit = strategy.equity * (max_daily_loss / 100)
daily_loss_exceeded = strategy.openprofit + strategy.netprofit < -daily_loss_limit

// Position count check
current_positions = strategy.opentrades
max_positions_reached = current_positions >= max_positions

// ============================================================================
// STRATEGY ENTRIES
// ============================================================================

if (long_condition and strategy.position_size == 0 and not daily_loss_exceeded and not max_positions_reached)
    long_target = close + (long_distance * reward_ratio)
    strategy.entry("Long", strategy.long, qty=long_qty)
    strategy.exit("Long Exit", "Long", stop=long_stop_price, limit=long_target)

if (short_condition and strategy.position_size == 0 and not daily_loss_exceeded and not max_positions_reached)
    short_target = close - (short_distance * reward_ratio)
    strategy.entry("Short", strategy.short, qty=short_qty)
    strategy.exit("Short Exit", "Short", stop=short_stop_price, limit=short_target)

// ============================================================================
// TRAILING STOPS
// ============================================================================

var float long_trail_stop = na
var float short_trail_stop = na

if (strategy.position_size > 0)
    trail_stop_level = close - (atr_value * trail_atr_mult)
    long_trail_stop := na(long_trail_stop) ? trail_stop_level : math.max(long_trail_stop, trail_stop_level)

if (strategy.position_size < 0)
    trail_stop_level = close + (atr_value * trail_atr_mult)
    short_trail_stop := na(short_trail_stop) ? trail_stop_level : math.min(short_trail_stop, trail_stop_level)

// Execute trailing stops
if (strategy.position_size > 0 and close <= long_trail_stop)
    strategy.close("Long", comment="Trail Stop")
    long_trail_stop := na

if (strategy.position_size < 0 and close >= short_trail_stop)
    strategy.close("Short", comment="Trail Stop")
    short_trail_stop := na

// ============================================================================
// TIME-BASED EXITS
// ============================================================================

// Close all positions at end of trading session
if (in_close_session and (strategy.position_size != 0))
    strategy.close_all(comment="End of Day")
    long_trail_stop := na
    short_trail_stop := na

// ============================================================================
// PLOTTING
// ============================================================================

// Plot EMAs
plot(ema_9, "EMA 9", color=color.blue, linewidth=2)
plot(ema_21, "EMA 21", color=color.red, linewidth=2)

// Plot VWAP
plot(vwap, "VWAP", color=color.purple, linewidth=1)

// Plot Bollinger Bands
plot(bb_upper, "BB Upper", color=color.gray)
plot(bb_lower, "BB Lower", color=color.gray)

// Plot trailing stops
plot(strategy.position_size > 0 ? long_trail_stop : na, "Long Trail Stop", color=color.red, style=plot.style_linebr)
plot(strategy.position_size < 0 ? short_trail_stop : na, "Short Trail Stop", color=color.green, style=plot.style_linebr)

// Plot entry signals
plotshape(long_condition, "Long Signal", shape.triangleup, location.belowbar, color.green, size=size.small)
plotshape(short_condition, "Short Signal", shape.triangledown, location.abovebar, color.red, size=size.small)

// Background color for trading session
bgcolor(time_filter ? color.new(color.blue, 95) : na, title="Trading Session")

// ============================================================================
// PERFORMANCE TRACKING
// ============================================================================

// Performance metrics table
if barstate.islast
    var table_id = table.new(position.top_right, 2, 6, bgcolor=color.white, border_width=1)
    table.cell(table_id, 0, 0, "Metric", text_color=color.black, bgcolor=color.gray)
    table.cell(table_id, 1, 0, "Value", text_color=color.black, bgcolor=color.gray)

    total_trades = strategy.closedtrades
    win_rate = total_trades > 0 ? (strategy.wintrades / total_trades) * 100 : 0
    profit_factor = strategy.grossprofit / math.max(strategy.grossloss, 1)

    table.cell(table_id, 0, 1, "Total Trades", text_color=color.black)
    table.cell(table_id, 1, 1, str.tostring(total_trades), text_color=color.black)

    table.cell(table_id, 0, 2, "Win Rate %", text_color=color.black)
    table.cell(table_id, 1, 2, str.tostring(win_rate, "#.##"), text_color=color.black)

    table.cell(table_id, 0, 3, "Profit Factor", text_color=color.black)
    table.cell(table_id, 1, 3, str.tostring(profit_factor, "#.##"), text_color=color.black)

    table.cell(table_id, 0, 4, "Net Profit %", text_color=color.black)
    table.cell(table_id, 1, 4, str.tostring((strategy.netprofit/strategy.initial_capital)*100, "#.##"), text_color=color.black)

    table.cell(table_id, 0, 5, "Max DD %", text_color=color.black)
    table.cell(table_id, 1, 5, str.tostring((strategy.max_drawdown/strategy.initial_capital)*100, "#.##"), text_color=color.black)