//@version=5
strategy("Three Candle Bullish Engulfing Strategy", overlay=true, default_qty_type=strategy.percent_of_equity, default_qty_value=100, initial_capital = 100000)

//strategy
iscandle_longonly = input.bool(false, "Swing long on bullish candle strategy", group = "Strategy")
iscandle_intraday = input.bool(false, "Intraday - Long and short candle strategy", group = "Strategy")
RSIbreakout = input.bool(false, "RSI Long breakout strategy", group = "Strategy")

// Parameters
trail_perc = input.float(1.5, "Trailing Stop Loss (%)", step=0.1)
emaLength = input.int(10, "EMA Length", minval=1)
//isintraday = input.bool(false,"Check on Intrday")
exitHour = input.int(15, "Exit Hour", minval=0, maxval=23, group="Exit Settings")  // Default 3 PM
exitMinute = input.int(15, "Exit Minute", minval=0, maxval=59, group="Exit Settings")  // Default 3:30 PM

// Price and EMA
ema = ta.ema(close, emaLength)

// bullish Candle Definitions
isBullish1 = close[2] > open[2] //and close[2] >= high[2] - (high[2] - low[2]) * 0.2
body1 = math.abs(close[2] - open[2])
body2 = math.abs(close[1] - open[1])
isDoji2 = body2 <= body1 * 0.5
high2 = high[1]
isEngulf3 = close > open and close > high2// and open < close[1]

// bearish Candle Definitions
isBearish1 = close[2] < open[2] //and close[2] >= high[2] - (high[2] - low[2]) * 0.2
bearbody1 = math.abs(close[2] - open[2])
bearbody2 = math.abs(close[1] - open[1])
isBearDoji2 = bearbody2 <= bearbody1 * 0.5
Low2 = low[1]
isBearEngulf3 = close < open and close < Low2// and open < close[1]


// Entry Condition
entryCondLong = isBullish1 and isDoji2 and isEngulf3
entryCondShort = isBearish1 and isBearDoji2 and isBearEngulf3
// Entry
if (entryCondLong and (iscandle_intraday or iscandle_longonly))
    strategy.entry("Buy", strategy.long)

if (entryCondShort and iscandle_intraday)
    strategy.entry("Short",strategy.short)
// Time-based exit condition
exitTimeCondition = (hour == exitHour) and (minute >= exitMinute)

// Exit Conditions
if (exitTimeCondition and iscandle_intraday)
    strategy.close("Buy", comment="Session End Exit")
    strategy.close("Short", comment="Session End Exit")

// Trailing Stop Loss
exitLongPrevCloseBreach = close < low[1]
if (exitLongPrevCloseBreach)
    strategy.close("Buy", comment="Exit Condition Met")

exitShortPrevCloseBreach = close > high[1]
if (exitShortPrevCloseBreach)
    strategy.close("Short", comment="Exit Condition Met")

//rsi buy strategy for 1hr
// 1. RSI 80+ on 1hr timeframe
// rsiLength = input(14, "RSI Length")
// rsi1h = request.security(syminfo.tickerid, "60", ta.rsi(close, rsiLength))
// rsiCondition = rsi1h >= 80

// // 2. Check bullish candle on 1hr
// bullishCandle = request.security(syminfo.tickerid, "60", close > open)

// // 3. Store candle close when conditions met
// var float triggerPrice = na
// if rsiCondition and bullishCandle
//     triggerPrice := close

// // 4. Enter long on price break
// enterLong = not na(triggerPrice) and close > triggerPrice
// if (enterLong and RSIbreakout)
//     strategy.entry("Long", strategy.long)

// // 5. Exit at 5% below entry price
// strategy.exit("Stop Loss", "Long", stop=strategy.position_avg_price * 0.95)

// // Visualizations
// plot(triggerPrice, color=color.blue, linewidth=2, title="Trigger Price")
// plot(strategy.position_avg_price * 0.95, color=color.red, title="Stop Loss")

// --- Inputs
rsiLength = input.int(14, "RSI Length",group="RSI breakout")
rsiLevel = input.int(80, "RSI Level", group="RSI breakout")
rsitf =input.int (60, "Timeframe in minutes", group="RSI breakout")
stopLossPerc = input.float(5, "Stop Loss %", step=0.1,group="RSI breakout")
RSI_intraday = input.bool(false, "Intrday position close - RSI Long breakout strategy", group = "RSI breakout")
extend_line = input.bool(true, "Keep my chart clean", group = "RSI breakout")


// --- 1hr RSI and bullish candle logic
tf = str.tostring(rsitf,"###")
rsi1h = request.security(syminfo.tickerid, tf, ta.rsi(ohlc4, rsiLength))
bullishCandle1h = request.security(syminfo.tickerid, tf, close > open)

// --- Track trigger price and its update
var float triggerPrice = na
var int triggerBar = na
var int barsSinceTrigger = na
newTrigger = rsi1h >= rsiLevel and bullishCandle1h

if newTrigger
    triggerPrice := close
    triggerBar := bar_index

// --- Entry: Only if not in position and price breaks above trigger
inPosition = strategy.position_size > 0
entryCondition = not inPosition and not na(triggerPrice) and close > triggerPrice
if entryCondition and RSIbreakout
    strategy.entry("Long", strategy.long)

// --- Stop loss calculation
stopLevel = triggerPrice * (1 - stopLossPerc / 100)

// --- Exit: If stop loss or triggerPrice is updated (i.e., triggerBar changes while in position)
triggerUpdated = inPosition and not na(triggerBar) and bar_index > triggerBar and newTrigger
exitCondition = (inPosition and close <= stopLevel) or triggerUpdated
if exitCondition and RSIbreakout
    strategy.close("Long")

if (exitTimeCondition and RSI_intraday)
    strategy.close("Long", comment="Session End Exit")
// --- Visuals

if not na(newTrigger)
    //lastTriggerPrice := close
    barsSinceTrigger := 0
else
    barsSinceTrigger += 1

plot((barsSinceTrigger<=20) ? triggerPrice : na, color=color.blue, linewidth=2, title="Trigger Price")
plot(inPosition ? stopLevel : na, color=color.red, title="Stop Loss")