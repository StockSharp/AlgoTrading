// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © RicardoSantos

//@version=4
study(title='Correlation Matrix Heatmap')

f_color_hsl(_hue, _saturation, _lightness, _transparency)=>//{
//  @function: returns HSL color.
//  @reference: https://stackoverflow.com/questions/36721830/convert-hsl-to-rgb-and-hex
    float _l1 = _lightness / 100.
    float _a = _saturation * min(_l1, 1. - _l1) / 100.
    float _rk = (0 + _hue / 30) % 12
    float _r =  255 * (_l1 - _a * max(min(_rk -3, 9 - _rk, 1), -1))
    float _gk = (8 + _hue / 30) % 12
    float _g =  255 * (_l1 - _a * max(min(_gk -3, 9 - _gk, 1), -1))
    float _bk = (4 + _hue / 30) % 12
    float _b =  255 * (_l1 - _a * max(min(_bk -3, 9 - _bk, 1), -1))
    color.rgb(_r, _g, _b, _transparency)
//}

string ticket00 = input(defval='EURUSD', type=input.symbol, title='', group='Tickets:', inline='T0')
string ticket01 = input(defval='GBPUSD', type=input.symbol, title='', group='Tickets:', inline='T0')
string ticket02 = input(defval='AUDUSD', type=input.symbol, title='', group='Tickets:', inline='T0')
string ticket03 = input(defval='NZDUSD', type=input.symbol, title='', group='Tickets:', inline='T1')
string ticket04 = input(defval='USDCHF', type=input.symbol, title='', group='Tickets:', inline='T1')
string ticket05 = input(defval='USDJPY', type=input.symbol, title='', group='Tickets:', inline='T1')
string ticket06 = input(defval='USDCAD', type=input.symbol, title='', group='Tickets:', inline='T2', tooltip='Tickets to compare.')

int length = input(title='Length:', defval=10, group='Series Configuration')
int smooth = input(title='Smooth:', defval=5, group='Series Configuration', inline='Source')
float src = sma(input(title='Source:', defval=close, group='Series Configuration', inline='Source'), smooth)
int i_variance_window = input(title='Variance Window:', defval=10, group='Series Configuration', tooltip='High variance means that there was a recent change in correlation')

string i_text_size = input(title='Text Size:', defval=size.small, options=[
     size.tiny, size.small, size.normal, size.large, size.huge, size.auto],
     group='Style:')
string i_position = input(title='Table Position:', defval=position.top_right, options=[
     position.top_left, position.top_center, position.top_right,
     position.middle_left, position.middle_center, position.middle_right,
     position.bottom_left, position.bottom_center, position.bottom_right
     ], group='Style:', tooltip='Table position.')

int i_color_title_hue = input(title='Title:', group='Color Profile', defval=200, minval=0, maxval=360)
int i_color_pos_hue = input(title='Positive:', group='Color Profile', defval=100, minval=0, maxval=360)
int i_color_neg_hue = input(title='Negative:', group='Color Profile', defval=0, minval=0, maxval=360)
int i_color_saturation = input(title='Saturation:', group='Color Profile', defval=30, minval=10, maxval=90)
int i_color_lightness = input(title='Lightness:', group='Color Profile', defval=70, minval=10, maxval=90)
int i_color_transparency = input(title='Transparency:', group='Color Profile', defval=0, minval=0, maxval=100)

color c_text_color = f_color_hsl(0, 0, 100 - i_color_lightness, i_color_transparency)
color c_bg_title = f_color_hsl(i_color_title_hue, i_color_saturation, i_color_lightness, i_color_transparency)//#cabfac
c_gradient(_value)=>//{
    _col = color.silver
    if _value > 0
        _col := f_color_hsl(i_color_pos_hue, _value, i_color_lightness, i_color_transparency)
    else if _value < 0
        _col := f_color_hsl(i_color_neg_hue, abs(_value), i_color_lightness, i_color_transparency)
    else
        _col := color.gray
    _col
//}

z = bar_index
a = security(ticket00, timeframe.period, src, barmerge.gaps_off, barmerge.lookahead_on)
b = security(ticket01, timeframe.period, src, barmerge.gaps_off, barmerge.lookahead_on)
c = security(ticket02, timeframe.period, src, barmerge.gaps_off, barmerge.lookahead_on)
d = security(ticket03, timeframe.period, src, barmerge.gaps_off, barmerge.lookahead_on)
e = security(ticket04, timeframe.period, src, barmerge.gaps_off, barmerge.lookahead_on)
f = security(ticket05, timeframe.period, src, barmerge.gaps_off, barmerge.lookahead_on)
g = security(ticket06, timeframe.period, src, barmerge.gaps_off, barmerge.lookahead_on)

float za = correlation(z, a, length), float ab = correlation(a, b, length), float bc = correlation(b, c, length)
float zb = correlation(z, b, length), float ac = correlation(a, c, length), float bd = correlation(b, d, length)
float zc = correlation(z, c, length), float ad = correlation(a, d, length), float be = correlation(b, e, length)
float zd = correlation(z, d, length), float ae = correlation(a, e, length), float bf = correlation(b, f, length)
float ze = correlation(z, e, length), float af = correlation(a, f, length), float bg = correlation(b, g, length)
float zf = correlation(z, f, length), float ag = correlation(a, g, length)
float zg = correlation(z, g, length)

float cd = correlation(c, d, length), float de = correlation(d, e, length), float ef = correlation(e, f, length), float fg = correlation(f, g, length)
float ce = correlation(c, e, length), float df = correlation(d, f, length), float eg = correlation(e, g, length)
float cf = correlation(c, f, length), float dg = correlation(d, g, length)
float cg = correlation(c, g, length)

// float d_za = variance(za, i_variance_window)

var T = table.new(
     position=i_position, columns=9, rows=9, bgcolor=c_bg_title,
     frame_color=color.gray, frame_width=2, border_color=color.gray, border_width=0)
f_table_set_titles()=>
    // X
    table.cell(table_id=T, column=0, row=0, text='', width=0, height=0, text_color=c_text_color, text_size=i_text_size, bgcolor=c_bg_title)
    // vertical
    table.cell(table_id=T, column=0, row=1, text='PBULL', width=0, height=0, text_color=c_text_color, text_size=i_text_size, bgcolor=c_bg_title)
    table.cell(table_id=T, column=0, row=2, text=ticket00, width=0, height=0, text_color=c_text_color, text_size=i_text_size, bgcolor=c_bg_title)
    table.cell(table_id=T, column=0, row=3, text=ticket01, width=0, height=0, text_color=c_text_color, text_size=i_text_size, bgcolor=c_bg_title)
    table.cell(table_id=T, column=0, row=4, text=ticket02, width=0, height=0, text_color=c_text_color, text_size=i_text_size, bgcolor=c_bg_title)
    table.cell(table_id=T, column=0, row=5, text=ticket03, width=0, height=0, text_color=c_text_color, text_size=i_text_size, bgcolor=c_bg_title)
    table.cell(table_id=T, column=0, row=6, text=ticket04, width=0, height=0, text_color=c_text_color, text_size=i_text_size, bgcolor=c_bg_title)
    table.cell(table_id=T, column=0, row=7, text=ticket05, width=0, height=0, text_color=c_text_color, text_size=i_text_size, bgcolor=c_bg_title)
    table.cell(table_id=T, column=0, row=8, text=ticket06, width=0, height=0, text_color=c_text_color, text_size=i_text_size, bgcolor=c_bg_title)
    // horizontal
    table.cell(table_id=T, column=1, row=0, text='PBULL', width=0, height=0, text_color=c_text_color, text_size=i_text_size, bgcolor=c_bg_title)
    table.cell(table_id=T, column=2, row=0, text=ticket00, width=0, height=0, text_color=c_text_color, text_size=i_text_size, bgcolor=c_bg_title)
    table.cell(table_id=T, column=3, row=0, text=ticket01, width=0, height=0, text_color=c_text_color, text_size=i_text_size, bgcolor=c_bg_title)
    table.cell(table_id=T, column=4, row=0, text=ticket02, width=0, height=0, text_color=c_text_color, text_size=i_text_size, bgcolor=c_bg_title)
    table.cell(table_id=T, column=5, row=0, text=ticket03, width=0, height=0, text_color=c_text_color, text_size=i_text_size, bgcolor=c_bg_title)
    table.cell(table_id=T, column=6, row=0, text=ticket04, width=0, height=0, text_color=c_text_color, text_size=i_text_size, bgcolor=c_bg_title)
    table.cell(table_id=T, column=7, row=0, text=ticket05, width=0, height=0, text_color=c_text_color, text_size=i_text_size, bgcolor=c_bg_title)
    table.cell(table_id=T, column=8, row=0, text=ticket06, width=0, height=0, text_color=c_text_color, text_size=i_text_size, bgcolor=c_bg_title)
f_table_set_titles()

f_table_set_row_values(_r, _0, _1, _2, _3, _4, _5, _6, _7)=>
    table.cell(table_id=T, column=1, row=_r, text=tostring(_0, '#.##%') + tostring(variance(_0, i_variance_window), ' σ#.##%'), width=0, height=0, text_color=c_text_color, text_size=i_text_size, bgcolor=c_gradient(100*_0))
    table.cell(table_id=T, column=2, row=_r, text=tostring(_1, '#.##%') + tostring(variance(_1, i_variance_window), ' σ#.##%'), width=0, height=0, text_color=c_text_color, text_size=i_text_size, bgcolor=c_gradient(100*_1))
    table.cell(table_id=T, column=3, row=_r, text=tostring(_2, '#.##%') + tostring(variance(_2, i_variance_window), ' σ#.##%'), width=0, height=0, text_color=c_text_color, text_size=i_text_size, bgcolor=c_gradient(100*_2))
    table.cell(table_id=T, column=4, row=_r, text=tostring(_3, '#.##%') + tostring(variance(_3, i_variance_window), ' σ#.##%'), width=0, height=0, text_color=c_text_color, text_size=i_text_size, bgcolor=c_gradient(100*_3))
    table.cell(table_id=T, column=5, row=_r, text=tostring(_4, '#.##%') + tostring(variance(_4, i_variance_window), ' σ#.##%'), width=0, height=0, text_color=c_text_color, text_size=i_text_size, bgcolor=c_gradient(100*_4))
    table.cell(table_id=T, column=6, row=_r, text=tostring(_5, '#.##%') + tostring(variance(_5, i_variance_window), ' σ#.##%'), width=0, height=0, text_color=c_text_color, text_size=i_text_size, bgcolor=c_gradient(100*_5))
    table.cell(table_id=T, column=7, row=_r, text=tostring(_6, '#.##%') + tostring(variance(_6, i_variance_window), ' σ#.##%'), width=0, height=0, text_color=c_text_color, text_size=i_text_size, bgcolor=c_gradient(100*_6))
    table.cell(table_id=T, column=8, row=_r, text=tostring(_7, '#.##%') + tostring(variance(_7, i_variance_window), ' σ#.##%'), width=0, height=0, text_color=c_text_color, text_size=i_text_size, bgcolor=c_gradient(100*_7))
f_table_set_row_values(1, 0., za, zb, zc, zd, ze, zf, zg)
f_table_set_row_values(2, za, 0., ab, ac, ad, ae, af, ag)
f_table_set_row_values(3, zb, ab, 0., bc, bd, be, bf, bg)
f_table_set_row_values(4, zc, ac, bc, 0., cd, ce, cf, cg)
f_table_set_row_values(5, zd, ad, bd, cd, 0., de, df, dg)
f_table_set_row_values(6, ze, ae, be, ce, de, 0., ef, eg)
f_table_set_row_values(7, zf, af, bf, cf, df, ef, 0., fg)
f_table_set_row_values(8, zg, ag, bg, cg, dg, eg, fg, 0.)