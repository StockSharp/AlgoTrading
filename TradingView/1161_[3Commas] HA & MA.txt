// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © 3Commas

//@version=6
strategy(title                        = "[3Commas] HA & MA"
       , overlay                      = true
       , pyramiding                   = 0
       , calc_on_order_fills          = true
       , calc_on_every_tick           = true
       , default_qty_type             = strategy.percent_of_equity
       , default_qty_value            = 1
       , initial_capital              = 10000
       , slippage                     = 5
       , commission_type              = strategy.commission.percent
       , commission_value             = 0.1
       , use_bar_magnifier            = true
       , fill_orders_on_standard_ohlc = true
     )


// ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――}
// 🟦 Inputs
// ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――{

_ma1      = input.int   (9    , title = "MA 1"   , display = display.none, tooltip = "Fast MA Length")
_ma2      = input.int   (18   , title = "MA 2"   , display = display.none, tooltip = "Slow MA Length")
_ma_type  = input.string('EMA', title = 'MA Calc', display = display.none, options=["SMA","EMA", "RMA","WMA"], tooltip = "MA's Calculations")

_tp_on    = input.bool (false,'TP Ratio 1:'   , inline = 'tp', display = display.none, tooltip = "This is the take profit ratio relative to the stop loss, where the trade will be closed in profit.")
_tp_ratio = input.float(4.0 , '', step = 0.25 , inline = 'tp', display = display.none)
_be_on    = input.bool (true ,'BE Ratio 1:'   , inline = 'be', display = display.none, tooltip = "This is the breakeven ratio relative to the stop loss, where the stop loss will be updated to breakeven or if the MA2 is greater than this level.")
_be_ratio = input.float(1.0 , '', step = 0.25 , inline = 'be', display = display.none)

var menu_buy      = "🟢 Long"
var menu_sel      = "🔴 Short"
var menu_buy_sell = "🟢 Long & 🔴 Short"

group_test      = '🟦 Strategy Tester'
_test_pos_type  = input.string(       title= 'Strategy      '    , group=group_test, inline = 'o' , defval  = menu_buy_sell, options=[menu_buy_sell, menu_buy, menu_sel], display = display.status_line, tooltip = 'Order Type direction in which trades are executed.')
_test_period    = input.bool  (false, title= 'Use Custom Test Period', group=group_test, inline = ''  , tooltip = 'When activated, it defines the Start and End period for the Strategy Tester.')
_test_start     = input.time  (       title= ' ↳ Test Start'         , group=group_test, defval = timestamp("02 Jan 2013 00:00:00"))
_test_end       = input.time  (       title= ' ↳ Test End'           , group=group_test, defval = timestamp("02 Dec 2030 00:00:00"))


// ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――}
// 🟦 Logic
// ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――{

HA(open_, high_, low_, close_) =>
    haclose  = 0.0
    haopen   = 0.0
    haclose := chart.is_heikinashi? close_ :math.avg(open_, high_, low_, close_)
    haopen  := chart.is_heikinashi? open_  :na(haopen[1]) ? (open_ + close_) / 2 : math.avg(haopen[1], haclose[1])
    hahigh   = chart.is_heikinashi? high_  :math.max(high_, haopen, haclose)
    halow    = chart.is_heikinashi? low_   :math.min(low_ , haopen, haclose)
    [haopen, hahigh, halow, haclose]

[ha_open,ha_high,ha_low,ha_close] = HA(open, high, low, close)


MAcal(src_, period_, type_)=>
    switch type_
        "SMA"        => ta.sma   (src_, period_)
        "EMA"        => ta.ema   (src_, period_)
        "RMA"        => ta.rma   (src_, period_)
        "WMA"        => ta.wma   (src_, period_)

ma1 = MAcal(ha_close, _ma1, _ma_type)
ma2 = MAcal(ha_close, _ma2, _ma_type)

ha_bull = ha_close > ha_open
ha_bear = ha_close < ha_open

plot(ma1, title = 'MA 1', color = color.blue, display = display.all-display.status_line)
plot(ma2, title = 'MA 2', color = color.red , display = display.all-display.status_line)

var dir = float(na)

buy = ha_bear[1] and ma1 > ma2 and ha_bull and ha_close > ma1 and close > open and barstate.isconfirmed and na(dir) and _test_pos_type != menu_sel
sel = ha_bull[1] and ma1 < ma2 and ha_bear and ha_close < ma1 and close < open and barstate.isconfirmed and na(dir) and _test_pos_type != menu_buy

plot(buy[1]?open:na, title="Buy" , color=#00D26A, style = plot.style_circles, linewidth = 3, display=display.pane)
plot(sel[1]?open:na, title="Sell", color=#F8312F, style = plot.style_circles, linewidth = 3, display=display.pane)

swing(condition_, track_low_) =>
    var float swing = na
    if condition_
        if track_low_
            swing := not condition_[1] ? low  : math.min(swing, low)
        else
            swing := not condition_[1] ? high : math.max(swing, high)
    swing

swing_bull = swing(ha_bear, track_low_ = true )
swing_bear = swing(ha_bull, track_low_ = false)

var en   = float(na)
var sl   = float(na)
var tp   = float(na)
var be   = float(na)
var even = false

dir := buy? 1 : sel?-1: dir

if buy[1]
    en:= open
    sl:= math.min(swing_bull[1],low[1])
    if _tp_on
        tp:=  + math.abs(open - sl) * _tp_ratio + open
    if _be_on
        be:= + math.abs(open - sl) * _be_ratio + open

if sel[1]
    en:= open
    sl:= math.max(swing_bear[1],high[1])
    if _tp_on
        tp:= - math.abs(open - sl) * _tp_ratio + open
    if _be_on
        be:= - math.abs(open - sl) * _be_ratio + open


if (dir[1] ==  1 and high>= be and low  > en and not buy) or (even and dir[1] ==  1)
    sl:= math.max(sl, ma2, en)
    even:= true

if (dir[1] == -1 and low <= be and high < en and not sel) or (even and dir[1] == -1)
    sl:= math.min(sl, ma2, en)
    even:= true

plot_sl = plot(en!=en[1]?na:sl, title = 'SL'   , color = color.new(color.red ,100), style = plot.style_linebr, display = display.all-display.status_line)
plot_en = plot(en!=en[1]?na:en, title = 'Entry', color = color.new(color.blue,50 ), style = plot.style_linebr, display = display.all-display.status_line)
plot_tp = plot(en!=en[1]?na:tp, title = 'TP'   , color = color.new(color.teal,100), style = plot.style_linebr, display = display.all-display.status_line)

fill(plot_tp, plot_en, tp, en, en!=en[1]?na:color.new(color.teal,80 ), en!=en[1]?na:color.new(color.teal,100), fillgaps = false, title = 'Trade Background')
fill(plot_en, plot_sl, en, sl, en!=en[1]?na:color.new(color.red ,100), en!=en[1]?na:color.new(color.red ,80 ), fillgaps = false, title = 'Trade Background')

buy_tp_exit = (dir[1] ==  1 and high>= tp and not buy) or (dir[1] ==  1 and low <= sl[1] and even)
buy_sl_exit = (dir[1] ==  1 and low <= sl and not buy and not even) and not buy_tp_exit
sel_tp_exit = (dir[1] == -1 and low <= tp and not sel) or (dir[1] == -1 and high>= sl[1] and even)
sel_sl_exit = (dir[1] == -1 and high>= sl and not sel and not even) and not sel_tp_exit

plot(buy[1] ?open:na, title="Buy" , color=#00D26A, style = plot.style_circles, linewidth = 3, display=display.pane)
plot(sel[1] ?open:na, title="Sell", color=#F8312F, style = plot.style_circles, linewidth = 3, display=display.pane)

plotshape(buy_tp_exit ?high:na, title="TP Buy" , style=shape.labeldown, location= location.absolute, color=color.new(color.gray,100), text="✅", textcolor=color.white, size= size.tiny, offset=0, editable=true, display=display.pane)
plotshape(buy_sl_exit ?low :na, title="SL Buy" , style=shape.labelup  , location= location.absolute, color=color.new(color.gray,100), text="⛔️", textcolor=color.white, size= size.tiny, offset=0, editable=true, display=display.pane)
plotshape(sel_tp_exit ?low :na, title="TP Sell", style=shape.labelup  , location= location.absolute, color=color.new(color.gray,100), text="✅", textcolor=color.white, size= size.tiny, offset=0, editable=true, display=display.pane)
plotshape(sel_sl_exit ?high:na, title="SL Sell", style=shape.labeldown, location= location.absolute, color=color.new(color.gray,100), text="⛔️", textcolor=color.white, size= size.tiny, offset=0, editable=true, display=display.pane)

// ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――}
// 🟦 Strategy Tester
// ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――{

test_in_range   =  _test_period? time >= _test_start and time <= _test_end : true

test_buy = test_in_range and buy
test_sel = test_in_range and sel
test_tp  = tp
test_sl  = sl

if test_buy and _test_pos_type != menu_sel
    strategy.entry ("Buy" , strategy.long)
if test_sel and _test_pos_type != menu_buy
    strategy.entry ("Sell", strategy.short)

strategy.exit("Exit Buy" , "Buy" , limit= test_tp, stop = test_sl)
strategy.exit("Exit Sell", "Sell", limit= test_tp, stop = test_sl)

if buy_tp_exit or buy_sl_exit or sel_tp_exit or sel_sl_exit
    en   := float(na)
    sl   := float(na)
    tp   := float(na)
    dir  := float(na)
    be   := float(na)
    even := false


// ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――}
// 🟦 3Commas Integration
// ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――{

var c3_tuto =  "Here you can enable the table to review the messages to be sent to the bot, as well as change the background color and text color."
              +'\n\n🤖 𝗛𝗼𝘄 𝘁𝗼 𝘂𝘀𝗲 𝗗𝗖𝗔 𝗕𝗼𝘁 𝗦𝗶𝗴𝗻𝗮𝗹𝘀'
              +'\n      ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯'
              +  '\n🔹Verify Messages: Ensure the message matches the one specified by the DCA Bot.'
              +'\n\n🔹Multi-Pair Configuration: For multi-pair setups, enable the option to add the symbol in the correct format.'
              +'\n\n🔹Signal Settings: Enable whether you want to receive long or short signals (Entry | TP | SL), copy and paste the the messages for the DCA Bots configured in 3Commas.'
              +'\n\n🔹Alert Setup:'
              +'\n\n- When creating an alert, set the condition to the indicator and choose "alert() function call only."'
              +'\n\n- Enter any desired Alert Name.'
              +'\n\n- Open the Notifications tab, enable Webhook URL, and paste the Webhook URL from 3Commas.'
              +'\n\n- For more details, refer to the 3Commas section: "How to use TradingView Custom Signals."'
              +"\n\n🔹Finalize Alerts: Click Create, you're done! Alerts will now be sent automatically in the correct format to 3Commas."


var c3_text_buy_entry = '{  "message_type": "bot",  "bot_id": 15743097,  "email_token": "b9ed9d7d-7777-42ed-a0a6-608f4ecedf82",  "delay_seconds": 0}'
var c3_text_sel_entry = '{  "message_type": "bot",  "bot_id": 15743017,  "email_token": "b9ed9d7d-7777-42ed-a0a6-608f4ecedf82",  "delay_seconds": 0}'
var c3_text_buy_exit  = '{  "action": "close_at_market_price",  "message_type": "bot",  "bot_id": 15743097,  "email_token": "b9ed9d7d-7777-42ed-a0a6-608f4ecedf82",  "delay_seconds": 0}'
var c3_text_sel_exit  = '{  "action": "close_at_market_price",  "message_type": "bot",  "bot_id": 15743017,  "email_token": "b9ed9d7d-7777-42ed-a0a6-608f4ecedf82",  "delay_seconds": 0}'

var emog  = '🟢'
var emor  = '🔴'
var emof  = '🏁'
var read = 'Check Messages, Please Read 👉'

group_c3            = '🟦 DCA Bot Signals'
_c3_tuto            = input.bool  (false            , title=  read               , group=group_c3, inline='h', display = display.none, tooltip = c3_tuto)
_c3_size            = input.string('Normal'         , title= ' ↳ Size'           , group=group_c3, inline='' , display = display.none, options=['Tiny','Small','Normal','Large','Huge'])
_c3_pos             = input.string('Bottom Center'  , title= ' ↳ Position'       , group=group_c3, inline='' , display = display.none, options=['Top Left','Top Center','Top Right','Middle Left','Middle Center','Middle Right','Bottom Left','Bottom Center','Bottom Right'])
_c3_col1            = input.color(#1F1F1F         , title= ' ↳ Colors    '     , group=group_c3, inline='c', display = display.none)
_c3_col2            = input.color(color.white     , title= ''                  , group=group_c3, inline='c', display = display.none)
_c3_buy_entry       = input.bool  (true             , title= emog+' Buy Entry  ' , group=group_c3, inline='b', display = display.none, tooltip= 'Enable this options to send Buy Entry, Take Profit (TP), and Stop Loss (SL) signals to 3Commas.')
_c3_buy_tp          = input.bool  (true             , title=      'TP'           , group=group_c3, inline='b', display = display.none)
_c3_buy_sl          = input.bool  (true             , title=      'SL'           , group=group_c3, inline='b', display = display.none)
_c3_text_buy_entry  = input.string(c3_text_buy_entry, title= ' ↳ Deal Entry'     , group=group_c3, inline= '', display = display.none, tooltip= 'Long DCA Bot: Copy and paste the message for the deal start signal of the DCA Bot you created in 3Commas.')
_c3_text_buy_exit   = input.string(c3_text_buy_exit , title= ' ↳ Deal Exit'      , group=group_c3, inline= '', display = display.none, tooltip= 'Long DCA Bot: Copy and paste the message to close order at Market Price of the DCA Bot you created in 3Commas.')
_c3_sel_entry       = input.bool  (true             , title= emor+' Sell Entry ' , group=group_c3, inline='s', display = display.none, tooltip= 'Enable this options to send Sell Entry, Take Profit (TP), and Stop Loss (SL) signals to 3Commas.')
_c3_sel_tp          = input.bool  (true             , title=      'TP'           , group=group_c3, inline='s', display = display.none)
_c3_sel_sl          = input.bool  (true             , title=      'SL'           , group=group_c3, inline='s', display = display.none)
_c3_text_sel_entry  = input.string(c3_text_sel_entry, title= ' ↳ Deal Entry'     , group=group_c3, inline= '', display = display.none, tooltip= 'Short DCA Bot: Copy and paste the message for the deal start signal of the DCA Bot you created in 3Commas.')
_c3_text_sel_exit   = input.string(c3_text_sel_exit , title= ' ↳ Deal Exit'      , group=group_c3, inline= '', display = display.none, tooltip= 'Short DCA Bot: Copy and paste the message to close order at Market Price of the DCA Bot you created in 3Commas.')
_c3_entry_bot_use   = input.bool  (false            , title= 'DCA Bot Multi-Pair', group=group_c3, inline= '', display = display.none, tooltip = 'You must activate it if you want to use the signals in a DCA Bot Multi-pair \n\nIn the text box you must enter (using the 3Commas format) the symbol in which you are creating the alert, you can check the format of each symbol when you create the bot.\n\nBefore creating the alert, verify that the message is the same as the one specified in the DCA bot, using the summary option.')
_c3_entry_bot_mult  = input.string('USDT_BTC'       , title= ' ↳ Symbol'         , group=group_c3, inline= '', display = display.none)

LabelSize (size_menu_)=>
    switch size_menu_
        'Auto'   => size.auto
        'Tiny'   => size.tiny
        'Small'  => size.small
        'Normal' => size.normal
        'Large'  => size.large
        'Huge'   => size.huge

TablePosition (pos_menu_)=>
    switch pos_menu_
        'Top Left'      => position.top_left
        'Top Center'    => position.top_center
        'Top Right'     => position.top_right
        'Middle Left'   => position.middle_left
        'Middle Center' => position.middle_center
        'Middle Right'  => position.middle_right
        'Bottom Left'   => position.bottom_left
        'Bottom Center' => position.bottom_center
        'Bottom Right'  => position.bottom_right

TrimPair(txt_, multipair_, pair_) =>
    trim  = txt_
    check =  str.contains(trim,'delay_seconds') and
             str.contains(trim,'email_token'  ) and
             str.contains(trim,'bot_id'       ) and
             str.contains(trim,'message_type' )
    if check
        del   = array.get(str.split(trim, '"delay_seconds": 0'), 1)
        trim := str.replace(trim, del, '', 0)
        pair  = ', "pair": '+ '"' + str.replace_all(pair_, ' ', '')+ '"'
        trim := trim + (multipair_? pair: '') + '}'
    trim

JsonFormat(json_)=>
    nice  = json_
    check =  str.contains(nice,'delay_seconds') and
             str.contains(nice,'email_token'  ) and
             str.contains(nice,'bot_id'       ) and
             str.contains(nice,'message_type' )
    if check
        nice := str.replace_all(nice, ' ', ''    )
        nice := str.replace_all(nice, ',', ',\n ')
        nice := str.replace_all(nice, '{', '{\n ')
        nice := str.replace_all(nice, '}', '\n}' )
        nice := str.replace_all(nice, ':', ': '  )
    nice

c3_en_buy =  _c3_buy_entry and buy
c3_ex_buy = (_c3_buy_tp and buy_tp_exit) or (_c3_buy_sl and buy_sl_exit)

c3_en_sel =  _c3_sel_entry and sel
c3_ex_sel = (_c3_sel_tp and sel_tp_exit) or (_c3_sel_sl and sel_sl_exit)

var c3_buy_dealstart   = JsonFormat(TrimPair(_c3_text_buy_entry, _c3_entry_bot_use, _c3_entry_bot_mult))
var c3_buy_closemarket = JsonFormat(TrimPair(_c3_text_buy_exit , _c3_entry_bot_use, _c3_entry_bot_mult))
var c3_sel_dealstart   = JsonFormat(TrimPair(_c3_text_sel_entry, _c3_entry_bot_use, _c3_entry_bot_mult))
var c3_sel_closemarket = JsonFormat(TrimPair(_c3_text_sel_exit , _c3_entry_bot_use, _c3_entry_bot_mult))

switch
    c3_en_buy => alert(c3_buy_dealstart  , alert.freq_once_per_bar)
    c3_ex_buy => alert(c3_buy_closemarket, alert.freq_once_per_bar)

switch
    c3_en_sel => alert(c3_sel_dealstart  , alert.freq_once_per_bar)
    c3_ex_sel => alert(c3_sel_closemarket, alert.freq_once_per_bar)

if barstate.isfirst and _c3_tuto
    var bg =  _c3_col1
    var tx =  _c3_col2
    var gr = color.green
    var re = color.red
    var hw = 'How to use 3Commas DCA Bot Signals 🤖'
    var ms = '🤖 DCA Bot Signals Messages '
    var ds = 'Deal start signal'
    var me = 'Close order at Market Price'
    var c3_table = table.new(TablePosition (_c3_pos), 6, 6, border_width=1, frame_width=1,border_color = color.new(color.black,0), frame_color = color.new(color.black,0))
    table.cell(c3_table, 1, 1, ms                  , text_color=tx, text_halign=text.align_center, text_size = LabelSize(_c3_size), bgcolor = bg)
    table.cell(c3_table, 1, 2, ds                  , text_color=tx, text_halign=text.align_center, text_size = LabelSize(_c3_size), bgcolor = bg, width=0)
    table.cell(c3_table, 1, 3, me                  , text_color=tx, text_halign=text.align_center, text_size = LabelSize(_c3_size), bgcolor = bg, width=0)
    table.cell(c3_table, 2, 1, 'Long Bot Messages' , text_color=gr, text_halign=text.align_center, text_size = LabelSize(_c3_size), bgcolor = bg)
    table.cell(c3_table, 2, 2, c3_buy_dealstart    , text_color=tx, text_halign=text.align_left  , text_size = LabelSize(_c3_size), bgcolor = bg, text_font_family= font.family_monospace)
    table.cell(c3_table, 2, 3, c3_buy_closemarket  , text_color=tx, text_halign=text.align_left  , text_size = LabelSize(_c3_size), bgcolor = bg, text_font_family= font.family_monospace)
    table.cell(c3_table, 3, 1, 'Short Bot Messages', text_color=re, text_halign=text.align_center, text_size = LabelSize(_c3_size), bgcolor = bg)
    table.cell(c3_table, 3, 2, c3_sel_dealstart    , text_color=tx, text_halign=text.align_left  , text_size = LabelSize(_c3_size), bgcolor = bg, text_font_family= font.family_monospace)
    table.cell(c3_table, 3, 3, c3_sel_closemarket  , text_color=tx, text_halign=text.align_left  , text_size = LabelSize(_c3_size), bgcolor = bg, text_font_family= font.family_monospace)

// ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――}
// 🟦 Alerts
// ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――{

// var alert_1 = '[3Commas] HA & MA\n\n'
// var alert_2 = '{{exchange}}:{{ticker}}\n\nChart:\nhttps://www.tradingview.com/chart?symbol={{exchange}}:{{ticker}}&interval={{interval}}'

// alertcondition(c3_en_buy, emog+'Buy'      , alert_1 + emog+'Buy '        + alert_2)
// alertcondition(c3_ex_buy, emof+'Buy Exit' , alert_1 + emof+'Buy Exit '   + alert_2)
// alertcondition(c3_en_sel, emor+'Sell'     , alert_1 + emor+'Sell '       + alert_2)
// alertcondition(c3_ex_sel, emof+'Sell Exit', alert_1 + emof+'Sell Exit '  + alert_2)

// ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――}