//@version=6
strategy('Mean Reversion V-F', overlay = true)

// bot webhook use this code on strategy alert - { "code": "{{strategy.order.comment}}", "qty": "{{strategy.order.contracts}}" }

buy = input("",title = "webhook for buy")
exitbuy = input("", title = "webhook for exit buy")


//input variables
STK = input.bool(defval = false, title = 'Use for Stocks- how many Stocks in units level')
PLotD = input.bool(defval = false, title = 'Plot Dynamic level')

deviation = input.float(title = 'Deviation Increment (%)', defval = 1.3, minval = 0.01, maxval = 100,step=0.1) / 100
deviation1 = input.float(title = 'Deviation Increment1 (%)', defval = 7.5, minval = 0.01, maxval = 100,step = 0.1) / 100
deviation2 = input.float(title = 'Deviation Increment2 (%)', defval = 13.3, minval = 0.01, maxval = 100,step = 0.1) / 100
deviation3 = input.float(title = 'Deviation Increment3 (%)', defval = 21.1, minval = 0.01, maxval = 100,step = 0.1) / 100
deviation4 = input.float(title = 'Deviation Increment4 (%)', defval = 33.7, minval = 0.01, maxval = 100,step=0.1) / 100
unitsLevel1 = input.float(title = 'Level 1 (units in cash)', defval = 50, maxval = 10000)
unitsLevel2 = input.float(title = 'Level 2 (units in cash)', defval = 100, maxval = 10000)
unitsLevel3 = input.float(title = 'Level 3 (units in cash)', defval = 200, maxval = 10000)
unitsLevel4 = input.float(title = 'Level 4 (units in cash)', defval = 400, maxval = 10000)
unitsLevel5 = input.float(title = 'Level 5 (units in cash)', defval = 600, maxval = 10000)

//moving average

string maType = input.string("WMA", "MA type", options = ["WMA", "SMA", "RMA", "EMA" , "HMA"])
int maLength = input.int(20, "MA length", minval = 2)

float ma = switch maType
    "EMA" => ta.ema(close, maLength)
    "SMA" => ta.sma(close, maLength)
    "RMA" => ta.rma(close, maLength)
    "WMA" => ta.wma(close, maLength)
    "HMA" => ta.hma(close, maLength)
    =>
        runtime.error("No matching MA type found.")
        float(na)

//plot(ma)





//banding calculations can be change
L1 = ma*(1 - deviation)
L2 = ma*(1 - deviation1)
L3 = ma*(1 - deviation2)
L4 = ma*(1 - deviation3)
L5 = ma*(1 - deviation4)

/////////// set static levels
//s1 = 0.00
//s1 := na(s1[1]) ? na : s1[1]

s2 = 0.00
s2 := na(s2[1]) ? na : s2[1]

s3 = 0.00
s3 := na(s3[1]) ? na : s3[1]

s4 = 0.00
s4 := na(s4[1]) ? na : s4[1]

s5 = 0.00
s5 := na(s5[1]) ? na : s5[1]


//// take Profit
take_profit1 = input.float(1.67, title = 'Target Take Profit (%)', step = 0.01, minval = 0.0) / 100

take_profit_level1 = strategy.position_avg_price * (1 + take_profit1)
plot(take_profit_level1, style = plot.style_linebr, linewidth = 2, color = color.green)
plot(strategy.position_avg_price, style = plot.style_linebr, linewidth = 2, color = color.black)

/// trailing take profit % or hull
takeProfitTrailingEnabled = input.bool(defval = false, title = 'Enable Trailing', tooltip = 'Enable or disable the trailing for take profit. WARNING! This feature will repaint. Make sure you use it with "Bar Magnifier" and "Deep Backtesting" for realistic backtest results')
trailingTakeProfitDistancePerc = input.float(defval = 1.0, title = '  Trailing Distance %', minval = 0.01, maxval = 100, step = 0.01, tooltip = 'The distance as a percentage of the take profit price to keep from the high price after the target is reached when trailing.') / 100

// LOGIC
longTrailingTakeProfitStepTicks = take_profit_level1 * trailingTakeProfitDistancePerc / syminfo.mintick
//////exit
if strategy.position_size > 0
    strategy.exit('B-ALL', limit = takeProfitTrailingEnabled ? na : take_profit_level1, comment = exitbuy, trail_price = takeProfitTrailingEnabled ? take_profit_level1 : na, trail_offset = takeProfitTrailingEnabled ? longTrailingTakeProfitStepTicks : na)


//mode
if  close < L1  and strategy.opentrades == 0
    strategy.order('B1', strategy.long, STK ? unitsLevel1 : unitsLevel1/close, comment = buy)
    s2 := L2
if close < s2  and strategy.opentrades == 1
    strategy.order('B2', strategy.long, STK ? unitsLevel2 : unitsLevel2/close, comment = buy)
    s3 := L3
if close < s3  and strategy.opentrades == 2
    strategy.order('B3', strategy.long, STK ? unitsLevel3 : unitsLevel3/close, comment = buy)
    s4 := L4
if close < s4  and strategy.opentrades == 3
    strategy.order('B4', strategy.long, STK ? unitsLevel4 : unitsLevel4/close, comment = buy)
    s5 := L5
if close < s5  and strategy.opentrades == 4
    strategy.order('B5', strategy.long, STK ? unitsLevel5 : unitsLevel5/close, comment = buy)


//plot dynamics level's
l_ma = plot(ma, color = color.new(color.red, 0), linewidth = 3) //moving average center line

l_b1 = plot(PLotD ? L1 : na , color = color.new(color.red, 0), linewidth = 1) //level b1
l_b2 = plot(PLotD ? L2 : na , color = color.new(color.black, 0), linewidth = 1) //level b2
l_b3 = plot(PLotD ? L3 : na , color = color.new(color.black, 0), linewidth = 1) //level b3
l_b4 = plot(PLotD ? L4 : na, color = color.new(color.black, 0), linewidth = 1) //level b4
l_b5 = plot(PLotD ? L5 : na , color = color.new(color.black, 0), linewidth = 1) //level b5


fill(l_ma, l_b1, color = color.new(color.gray, 50))
fill(l_b1, l_b2, color = color.new(color.orange, 90))
fill(l_b2, l_b3, color = color.new(color.orange, 70))
fill(l_b3, l_b4, color = color.new(color.orange, 50))
fill(l_b4, l_b5, color = color.new(color.orange, 30))

// plot statics level's
//st1 = plot(strategy.opentrades > 0 ? s1 : na, title = 'Long 1 SLayer', style = plot.style_linebr)
st2 = plot(strategy.opentrades > 0 ? s2 : na, title = 'Long 2 SLayer', style = plot.style_linebr)
st3 = plot(strategy.opentrades > 1 ? s3 : na, title = 'Long 3 SLayer', style = plot.style_linebr)
st4 = plot(strategy.opentrades > 2 ? s4 : na, title = 'Long 4 SLayer', style = plot.style_linebr)
st5 = plot(strategy.opentrades > 3 ? s5 : na, title = 'Long 5 SLayer', style = plot.style_linebr)
color bot = input.color(color.blue)
//fill(st1, st2, color.new(bot, 95))
fill(st2, st3, color.new(bot, 90))
fill(st3, st4, color.new(bot, 80))
fill(st4, st5, color.new(bot, 70))