// RezzoRedPriest – External Signals Strategy Tester v7‑fix‑2
//@version=6
strategy("External Signals Strategy Tester v8", overlay = true,
         default_qty_type = strategy.percent_of_equity, default_qty_value = 100)

// ═════════════ Date filter ═════════════════════════════════════════════════
startDate = input.time(timestamp("2024-11-01 00:00"), "Start Date", group="Date Range")
endDate   = input.time(timestamp("2025-03-31 23:59"), "End Date",   group="Date Range")
inDateRange = time >= startDate and time <= endDate

// ═════════════ External / Line‑cross signals ═══════════════════════════════
longSignal  = input.source(close, "Buy Signal")
shortSignal = input.source(close, "Sell Signal")

l_cross_enable = input.bool(false,"LONG LINE CROSS",  group="Long Line Cross")
l_cross_src    = input.source(hl2,"Line Source",      group="Long Line Cross")
l_cross_dir    = input.string("Below→Above","Dir",    options=["Below→Above","Above→Below"], group="Long Line Cross")

s_cross_enable = input.bool(false,"SHORT LINE CROSS", group="Short Line Cross")
s_cross_src    = input.source(hl2,"Line Source",      group="Short Line Cross")
s_cross_dir    = input.string("Above→Below","Dir",    options=["Below→Above","Above→Below"], group="Short Line Cross")

// ═════════════ Trade settings & %‑risk ═════════════════════════════════════
enableLong  = input.bool(true,"Enable Long",  group="Trade Settings")
enableShort = input.bool(true,"Enable Short", group="Trade Settings")
closeOnReverse  = input.bool(true,"Close on Opposite", group="Trade Settings")
reversePosition = input.bool(false,"Reverse on Opposite",group="Trade Settings")

useTP = input.bool(true,"Use % TP", group="Risk %")
takeProfitPerc = input.float(2.0,"TP %", step=0.1, group="Risk %")
useSL = input.bool(true,"Use % SL", group="Risk %")
stopLossPerc   = input.float(1.0,"SL %", step=0.1, group="Risk %")
useBE = input.bool(true,"Use % BE", group="Risk %")
breakevenPerc  = input.float(1.0,"BE %", step=0.1, group="Risk %")

// ═════════════ Fibonacci Bollinger Bands (visual & math) ═══════════════════
showFBB = input.bool(false,"FIBO LEVELS ENABLE",group="Fibo Bands")
fbb_length = input.int(200,"FBB Length", minval=1, group="Fibo Bands")
fbb_src    = input.source(hlc3,"FBB Source", group="Fibo Bands")
fbb_mult   = input.float(3.0,"FBB Mult", minval=0.001, group="Fibo Bands")
fbb_basis_type  = input.string("VWMA","FBB Basis",
                   options=["VWMA","HMA","SMA","EMA","DEMA","TEMA"],group="Fibo Bands")
fbb_view_mode   = input.string("Full","FBB View",
                   options=["Full","Cloud","Extremes"], group="Fibo Bands")
fbb_smooth_type = input.string("None","Smooth",
                   options=["None","SMA","EMA","DEMA","HMA"], group="Fibo Bands")
fbb_smooth_len  = input.int(50,"Smooth Len",minval=1, group="Fibo Bands")

fbb_dema(s,l)=>2*ta.ema(s,l)-ta.ema(ta.ema(s,l),l)
fbb_tema(s,l)=>3*(ta.ema(s,l)-ta.ema(ta.ema(s,l),l))+ta.ema(ta.ema(ta.ema(s,l),l),l)
raw_basis=switch fbb_basis_type
    "VWMA"=>ta.vwma(fbb_src,fbb_length)
    "HMA" =>ta.hma (fbb_src,fbb_length)
    "SMA" =>ta.sma (fbb_src,fbb_length)
    "EMA" =>ta.ema (fbb_src,fbb_length)
    "DEMA"=>fbb_dema(fbb_src,fbb_length)
    =>       fbb_tema(fbb_src,fbb_length)
basis=switch fbb_smooth_type
    "None"=>raw_basis
    "SMA" =>ta.sma (raw_basis,fbb_smooth_len)
    "EMA" =>ta.ema (raw_basis,fbb_smooth_len)
    "DEMA"=>fbb_dema(raw_basis,fbb_smooth_len)
    =>       ta.hma (raw_basis,fbb_smooth_len)

dev=fbb_mult*ta.atr(fbb_length)
past_dev=nz(dev[fbb_length],dev)
dyn=math.max(dev/math.max(past_dev,0.001),0.5)
band(c,up)=>up?basis+c*dev*dyn:basis-c*dev*dyn
u1=band(0.236,true), l1=band(0.236,false)
u2=band(0.382,true), l2=band(0.382,false)
u3=band(0.5 ,true), l3=band(0.5 ,false)
u4=band(0.618,true), l4=band(0.618,false)
u5=band(0.764,true), l5=band(0.764,false)
u6=band(1.0 ,true), l6=band(1.0 ,false)
plot(showFBB?basis:na,"Basis",color=color.fuchsia,linewidth=2)
plot(showFBB?u1:na,"u1"), plot(showFBB?u2:na,"u2"), plot(showFBB?u3:na,"u3")
plot(showFBB?u4:na,"u4"), plot(showFBB?u5:na,"u5"), plot(showFBB?u6:na,"u6")
plot(showFBB?l1:na,"l1"), plot(showFBB?l2:na,"l2"), plot(showFBB?l3:na,"l3")
plot(showFBB?l4:na,"l4"), plot(showFBB?l5:na,"l5"), plot(showFBB?l6:na,"l6")

// helper: explicit Upper / Lower + level → price
fbbPrice(level, side)=>
    bool upper = side=="Upper"
    switch level
        "Basis"=>basis
        "0.236"=>upper?u1:l1
        "0.382"=>upper?u2:l2
        "0.5"  =>upper?u3:l3
        "0.618"=>upper?u4:l4
        "0.764"=>upper?u5:l5
        =>         upper?u6:l6   // "1.0"
// helper 2: single‑string selector → price  (замена str.starts_with)
// ───────────────────────────────────────────────────────────────────────────
fbbPriceSel(sel)=>
    // первая буква = 'U' ? → Upper, иначе Lower
    bool   up  = str.substring(sel, 0, 1) == "U"
    string lvl = str.replace(str.replace(sel, "U-", ""), "L-", "")
    fbbPrice(lvl, up ? "Upper" : "Lower")


// ═══════════ LONG – SL + TP1‑TP3 inputs (side & level) ═════════════════════
l_sl_enable     = input.bool(false, "Enable LONG SL",  group="FBB LONG SL")
l_sl_sideSel    = input.string("Lower", "SL Side", options = ["Upper","Lower"], group="FBB LONG SL")
l_sl_level      = input.string("0.382", "SL Level",  options = ["Basis","0.236","0.382","0.5","0.618","0.764","1.0"], group = "FBB LONG SL")
l_sl_trail      = input.bool(false, "Trail SL",        group="FBB LONG SL")
l_sl_trailSide  = input.string("Lower", "Trail Side", options = ["Upper","Lower"], group="FBB LONG SL")
l_sl_trailLvl   = input.string("0.382", "Trail Level", options = ["Basis","0.236","0.382","0.5","0.618","0.764","1.0"], group = "FBB LONG SL")

l_tp1_enable    = input.bool(false, "Enable LONG TP1", group="FBB LONG TP1")
l_tp1_side      = input.string("Upper", "TP1 Side",                    options = ["Upper","Lower"],        group="FBB LONG TP1")
l_tp1_level     = input.string("0.618", "TP1 Level",                    options = ["Basis","0.236","0.382","0.5","0.618","0.764","1.0"],                    group = "FBB LONG TP1")
l_tp1_qty       = input.float(33, "TP1 % Qty", minval=1, maxval=100, group="FBB LONG TP1")
l_tp1_trail     = input.bool(false, "Trail TP1",       group="FBB LONG TP1")
l_tp1_trailSel  = input.string("U-0.618", "Trail Line",                    options = ["U-Basis","U-0.236","U-0.382","U-0.5","U-0.618","U-0.764","U-1.0",        "L-Basis","L-0.236","L-0.382","L-0.5","L-0.618","L-0.764","L-1.0"],                    group = "FBB LONG TP1")

l_tp2_enable    = input.bool(false, "Enable LONG TP2", group="FBB LONG TP2")
l_tp2_side      = input.string("Upper", "TP2 Side",                    options = ["Upper","Lower"],        group="FBB LONG TP2")
l_tp2_level     = input.string("0.764", "TP2 Level",                    options = ["Basis","0.236","0.382","0.5","0.618","0.764","1.0"],                    group = "FBB LONG TP2")
l_tp2_qty       = input.float(33, "TP2 % Qty", minval=1, maxval=100, group="FBB LONG TP2")
//l_tp2_trail     = input.bool(false, "Trail TP2",       group="FBB LONG TP2")
//l_tp2_trailSel  = input.string("U-0.764", "Trail Line",                    options = ["U-Basis","U-0.236","U-0.382","U-0.5","U-0.618","U-0.764","U-1.0",                               "L-Basis","L-0.236","L-0.382","L-0.5","L-0.618","L-0.764","L-1.0"],                    group = "FBB LONG TP2")

l_tp3_enable    = input.bool(false, "Enable LONG TP3", group="FBB LONG TP3")
l_tp3_side      = input.string("Upper", "TP3 Side",                    options = ["Upper","Lower"],        group="FBB LONG TP3")
l_tp3_level     = input.string("1.0", "TP3 Level",                    options = ["Basis","0.236","0.382","0.5","0.618","0.764","1.0"],                    group = "FBB LONG TP3")
l_tp3_qty       = input.float(34, "TP3 % Qty", minval=1, maxval=100, group="FBB LONG TP3")
//l_tp3_trail     = input.bool(false, "Trail TP3",       group="FBB LONG TP3")
//l_tp3_trailSel  = input.string("U-1.0", "Trail Line",                    options = ["U-Basis","U-0.236","U-0.382","U-0.5","U-0.618","U-0.764","U-1.0",                               "L-Basis","L-0.236","L-0.382","L-0.5","L-0.618","L-0.764","L-1.0"],                    group = "FBB LONG TP3")

// ═══════════ SHORT – SL + TP1‑TP3 inputs (side & level) ════════════════════
s_sl_enable     = input.bool(false, "Enable SHORT SL", group="FBB SHORT SL")
s_sl_sideSel    = input.string("Upper", "SL Side",                    options = ["Upper","Lower"],        group="FBB SHORT SL")
s_sl_level      = input.string("0.382", "SL Level",                    options = ["Basis","0.236","0.382","0.5","0.618","0.764","1.0"],                    group = "FBB SHORT SL")
s_sl_trail      = input.bool(false, "Trail SL",        group="FBB SHORT SL")
s_sl_trailSide  = input.string("Upper", "Trail Side",                    options = ["Upper","Lower"],        group="FBB SHORT SL")
s_sl_trailLvl   = input.string("0.382", "Trail Level",                    options = ["Basis","0.236","0.382","0.5","0.618","0.764","1.0"],                    group = "FBB SHORT SL")

s_tp1_enable    = input.bool(false, "Enable SHORT TP1", group="FBB SHORT TP1")
s_tp1_side      = input.string("Lower", "TP1 Side",                    options = ["Upper","Lower"],         group="FBB SHORT TP1")
s_tp1_level     = input.string("0.618", "TP1 Level",                    options = ["Basis","0.236","0.382","0.5","0.618","0.764","1.0"],                    group = "FBB SHORT TP1")
s_tp1_qty       = input.float(33, "TP1 % Qty", minval=1, maxval=100, group="FBB SHORT TP1")
s_tp1_trail     = input.bool(false, "Trail TP1",        group="FBB SHORT TP1")
s_tp1_trailSel  = input.string("L-0.618", "Trail Line",                    options = ["U-Basis","U-0.236","U-0.382","U-0.5","U-0.618","U-0.764","U-1.0",                               "L-Basis","L-0.236","L-0.382","L-0.5","L-0.618","L-0.764","L-1.0"],                    group = "FBB SHORT TP1")

s_tp2_enable    = input.bool(false, "Enable SHORT TP2", group="FBB SHORT TP2")
s_tp2_side      = input.string("Lower", "TP2 Side",                    options = ["Upper","Lower"],         group="FBB SHORT TP2")
s_tp2_level     = input.string("0.764", "TP2 Level",                    options = ["Basis","0.236","0.382","0.5","0.618","0.764","1.0"],                    group = "FBB SHORT TP2")
s_tp2_qty       = input.float(33, "TP2 % Qty", minval=1, maxval=100, group="FBB SHORT TP2")
//s_tp2_trail     = input.bool(false, "Trail TP2",        group="FBB SHORT TP2")
//s_tp2_trailSel  = input.string("L-0.764", "Trail Line",                    options = ["U-Basis","U-0.236","U-0.382","U-0.5","U-0.618","U-0.764","U-1.0",                               "L-Basis","L-0.236","L-0.382","L-0.5","L-0.618","L-0.764","L-1.0"],                    group = "FBB SHORT TP2")

s_tp3_enable    = input.bool(false, "Enable SHORT TP3", group="FBB SHORT TP3")
s_tp3_side      = input.string("Lower", "TP3 Side",                    options = ["Upper","Lower"],         group="FBB SHORT TP3")
s_tp3_level     = input.string("1.0", "TP3 Level",                    options = ["Basis","0.236","0.382","0.5","0.618","0.764","1.0"],                    group = "FBB SHORT TP3")
s_tp3_qty       = input.float(34, "TP3 % Qty", minval=1, maxval=100, group="FBB SHORT TP3")
//s_tp3_trail     = input.bool(false, "Trail TP3",        group="FBB SHORT TP3")
//s_tp3_trailSel  = input.string("L-1.0", "Trail Line",                    options = ["U-Basis","U-0.236","U-0.382","U-0.5","U-0.618","U-0.764","U-1.0",                               "L-Basis","L-0.236","L-0.382","L-0.5","L-0.618","L-0.764","L-1.0"],                    group = "FBB SHORT TP3")

// ═══════════ Runtime flags & price holders ═════════════════════════════════
var bool l_slActive=false, s_slActive=false
var bool l_tp1Active=false,l_tp2Active=false,l_tp3Active=false
var bool s_tp1Active=false,s_tp2Active=false,s_tp3Active=false

var float l_slPrice  = na
var float s_slPrice  = na
var float l_tp1Price = na
var float l_tp2Price = na
var float l_tp3Price = na
var float s_tp1Price = na
var float s_tp2Price = na
var float s_tp3Price = na

var float prevPos = 0.0
var int   prevClosed = 0

var int  barsInPos = 0        // сколько баров мы держим текущую позицию
var bool posJustOpened = false
var string curEntryID = ""

// ═════════ Entry conditions (signal OR line‑cross) ═════════════════════════
bool extLongSig  = ta.crossover(longSignal,0)
bool extShortSig = ta.crossover(shortSignal,0)

bool l_crossSig = l_cross_enable and ((l_cross_dir=="Below→Above"? ta.crossover(close,l_cross_src)
                                                                  : ta.crossunder(close,l_cross_src)))
bool s_crossSig = s_cross_enable and ((s_cross_dir=="Below→Above"? ta.crossover(close,s_cross_src)
                                                                  : ta.crossunder(close,s_cross_src)))

longCondition  = extLongSig  or l_crossSig
shortCondition = extShortSig or s_crossSig

// ═════════ Entry / reversal execution ══════════════════════════════════════
var bool reverseDone=false
reverseDone := false
if inDateRange
    if reversePosition and strategy.position_size<0 and longCondition and enableLong
        strategy.close("Short")
        strategy.entry("Long", strategy.long)
        reverseDone := true
    if reversePosition and strategy.position_size>0 and shortCondition and enableShort
        strategy.close("Long")
        strategy.entry("Short", strategy.short)
        reverseDone := true
    if not reversePosition and closeOnReverse
        if strategy.position_size>0 and shortCondition
            strategy.close("Long")
        if strategy.position_size<0 and longCondition
            strategy.close("Short")
    if strategy.position_size==0 and not reverseDone
        if enableLong  and longCondition
            strategy.entry("Long", strategy.long)
        if enableShort and shortCondition
            strategy.entry("Short", strategy.short)
// ═════════ Position management: activate module & set prices ═══════════════
if strategy.position_size == 0
    // ── сброс всех флагов и цен
    l_slActive  := false
    s_slActive  := false
    l_tp1Active := false
    l_tp2Active := false
    l_tp3Active := false
    s_tp1Active := false
    s_tp2Active := false
    s_tp3Active := false

    l_slPrice  := na
    s_slPrice  := na
    l_tp1Price := na
    l_tp2Price := na
    l_tp3Price := na
    s_tp1Price := na
    s_tp2Price := na
    s_tp3Price := na
    barsInPos := 0
    prevPos := 0.0

else  // ────────────────── позиция ОТКРЫТА ────────────────────────────────
    bool   isLong  = strategy.position_size > 0
    string entryID = isLong ? "Long" : "Short"

    // ── первая свеча после входа → активируем нужные блоки
    if prevPos == 0.0
        // — включаем нужные флаги —
        if isLong
            l_slActive  := l_sl_enable
            l_tp1Active := l_tp1_enable
            l_tp2Active := l_tp2_enable
            l_tp3Active := l_tp3_enable

            s_slActive  := false
            s_tp1Active := false
            s_tp2Active := false
            s_tp3Active := false
        else
            s_slActive  := s_sl_enable
            s_tp1Active := s_tp1_enable
            s_tp2Active := s_tp2_enable
            s_tp3Active := s_tp3_enable

            l_slActive  := false
            l_tp1Active := false
            l_tp2Active := false
            l_tp3Active := false

        // — фиксируем состояние на момент входа —
        prevClosed  := strategy.closedtrades   // "долгов" по старым трейдам нет
        barsInPos   := 1                       // позиция «молодая»
        curEntryID  := entryID                 // запоминаем ID для де‑активации
    else
        barsInPos += 1

    prevPos := strategy.position_size

    // ───── LONG module ─────────────────────────────────────────────────────
    if isLong
        // SL
        if l_slActive
            if na(l_slPrice)
                l_slPrice := fbbPrice(l_sl_level, l_sl_sideSel)
            if l_sl_trail
                l_slPrice := fbbPrice(l_sl_trailLvl, l_sl_trailSide)
            strategy.exit("SL", from_entry = entryID, stop = l_slPrice, qty_percent = 100)

        // TP1
        if l_tp1Active
            l_tp1Price := l_tp1_trail ? fbbPriceSel(l_tp1_trailSel) :
                         na(l_tp1Price) ? fbbPrice(l_tp1_level, l_tp1_side) : l_tp1Price
            strategy.exit("TP1", from_entry = entryID, limit = l_tp1Price,
                          qty_percent = math.min(l_tp1_qty,100))

        // TP2  (фиксированный)
        if l_tp2Active
            if na(l_tp2Price)                      // присваиваем лишь однажды
                l_tp2Price := fbbPrice(l_tp2_level, l_tp2_side)
            strategy.exit("TP2", from_entry = entryID, limit = l_tp2Price,
                          qty_percent = math.min(l_tp2_qty, 100))

        // TP3  (фиксированный)
        if l_tp3Active
            if na(l_tp3Price)                      // присваиваем лишь однажды
                l_tp3Price := fbbPrice(l_tp3_level, l_tp3_side)
            strategy.exit("TP3", from_entry = entryID, limit = l_tp3Price,
                          qty_percent = math.min(l_tp3_qty, 100))

    // ───── SHORT module ────────────────────────────────────────────────────
    if not isLong
        // SL
        if s_slActive
            if na(s_slPrice)
                s_slPrice := fbbPrice(s_sl_level, s_sl_sideSel)
            if s_sl_trail
                s_slPrice := fbbPrice(s_sl_trailLvl, s_sl_trailSide)
            strategy.exit("SL", from_entry = entryID, stop = s_slPrice, qty_percent = 100)

        // TP1
        if s_tp1Active
            s_tp1Price := s_tp1_trail ? fbbPriceSel(s_tp1_trailSel) :
                         na(s_tp1Price) ? fbbPrice(s_tp1_level, s_tp1_side) : s_tp1Price
            strategy.exit("TP1", from_entry = entryID, limit = s_tp1Price,
                          qty_percent = math.min(s_tp1_qty,100))

        // TP2  (фиксированный)
        if s_tp2Active
            if na(s_tp2Price)                      // присваиваем лишь однажды
                s_tp2Price := fbbPrice(s_tp2_level, s_tp2_side)
            strategy.exit("TP2", from_entry = entryID, limit = s_tp2Price,
                          qty_percent = math.min(s_tp2_qty, 100))

        // TP3  (фиксированный)
        if s_tp3Active
            if na(s_tp3Price)                      // присваиваем лишь однажды
                s_tp3Price := fbbPrice(s_tp3_level, s_tp3_side)
            strategy.exit("TP3", from_entry = entryID, limit = s_tp3Price,
                          qty_percent = math.min(s_tp3_qty, 100))
// ═════════ De‑activate flags after exit ════════════════════════════════════
int closedNow = strategy.closedtrades
if closedNow > prevClosed
    // проверяем, что закрылась именно ТЕКУЩАЯ позиция
    string exitEntryID = strategy.closedtrades.entry_id(closedNow - 1)
    if exitEntryID == curEntryID
        string lastID = strategy.closedtrades.exit_id(closedNow - 1)

        if lastID == "SL"
            l_slActive := false
            s_slActive := false
            l_tp1Active := false
            l_tp2Active := false
            l_tp3Active := false
            s_tp1Active := false
            s_tp2Active := false
            s_tp3Active := false

        if lastID == "TP1"
            l_tp1Active := false
            s_tp1Active := false

        if lastID == "TP2"
            l_tp2Active := false
            s_tp2Active := false

        if lastID == "TP3"
            l_tp3Active := false
            s_tp3Active := false

    prevClosed := closedNow

// ═════════ Classic %‑Risk block ════════════════════════════════════════════
if strategy.position_size!=0
    float entryPrice = strategy.position_avg_price
    float prc = (close-entryPrice)/entryPrice*100*(strategy.position_size<0?-1:1)
    if useTP and takeProfitPerc>0 and prc>=takeProfitPerc
        strategy.close_all(comment="TP%")
    if useSL and stopLossPerc>0 and prc<=-stopLossPerc
        strategy.close_all(comment="SL%")
    if useBE and breakevenPerc>0 and prc>=breakevenPerc
        strategy.exit(strategy.position_size>0?"BE Long":"BE Short",
                      from_entry=strategy.position_size>0?"Long":"Short",
                      stop=entryPrice)

// ═════════ Plot entry arrows ═══════════════════════════════════════════════
plotshape(longCondition  and inDateRange, title="Buy",  location=location.belowbar,
          color=color.green, style=shape.triangleup,   size=size.small)
plotshape(shortCondition and inDateRange, title="Sell", location=location.abovebar,
          color=color.red,   style=shape.triangledown, size=size.small)