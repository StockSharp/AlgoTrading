//@version=5
strategy("AyebaleJohnBob-Trading-Bot", overlay=true, default_qty_type=strategy.percent_of_equity, default_qty_value=10)

// === INPUTS === //
bullC   = input.color(defval = #14D990, title = "Bull Color", group = "Smart Money Concepts")
bearC   = input.color(defval = #F24968, title = "Bear Color", group = "Smart Money Concepts")
fvgcol  = input.color(defval = #F2B807, title = "FVG Color", group = "Fair Value Gaps")
atrMult = input.float(2, title="ATR Multiplier for Stop Loss", minval=1, maxval=5)
tpMultipliers = array.from(1.0, 1.5, 2.0, 2.5, 3.0)  // TP Multipliers

// === CALCULATIONS === //
atr    = ta.atr(14)  // ATR for stop-loss
pdHigh = ta.highest(high, 50)
pdLow  = ta.lowest(low, 50)

// === FAIR VALUE GAP (FVG) DETECTION === //
fvgUp = (low[2] > high[0])  // Bullish FVG
fvgDn = (high[2] < low[0])  // Bearish FVG

// Make FVG lines extremely faint by applying a high transparency (90 out of 100)
fvgUpZone = line.new(x1=bar_index[2], y1=low[2],  x2=bar_index, y2=low[2],  width=2, color=color.new(fvgcol, 90), extend=extend.right)
fvgDnZone = line.new(x1=bar_index[2], y1=high[2], x2=bar_index, y2=high[2], width=2, color=color.new(fvgcol, 90), extend=extend.right)

// === ENTRY LOGIC === //
buySignal  = ta.crossover(close, pdLow) or fvgUp
sellSignal = ta.crossunder(close, pdHigh) or fvgDn

// === STOP-LOSS & TAKE-PROFIT CALCULATIONS === //
longStopLoss  = close - atr * atrMult
shortStopLoss = close + atr * atrMult

// === TRADE ANYTIME (NO SESSION FILTER) === //
isAnySession = true // Always true for trading at any time

// === EXECUTE 5 BUY ORDERS === //
if buySignal and isAnySession
    for i = 0 to 4
        tpLevel = close + atr * tpMultipliers.get(i)
        strategy.entry("Long_" + str.tostring(i), strategy.long)
        strategy.exit("TP_Long_" + str.tostring(i), from_entry="Long_" + str.tostring(i), limit=tpLevel, stop=longStopLoss)

// === EXECUTE 5 SELL ORDERS === //
if sellSignal and isAnySession
    for i = 0 to 4
        tpLevel = close - atr * tpMultipliers.get(i)
        strategy.entry("Short_" + str.tostring(i), strategy.short)
        strategy.exit("TP_Short_" + str.tostring(i), from_entry="Short_" + str.tostring(i), limit=tpLevel, stop=shortStopLoss)

// === PLOT ENTRY SIGNALS === //
plotshape(series=buySignal  and isAnySession, location=location.belowbar, color=color.green, style=shape.labelup,   title="BUY SIGNAL")
plotshape(series=sellSignal and isAnySession, location=location.abovebar, color=color.red,   style=shape.labeldown, title="SELL SIGNAL")

// ────────────────────────────────────────────────
// === TABLE TO DISPLAY LATEST TRADE INFO === //

// Define some colors for different cell types
COL_ENTRY       = color.white   // White for Entry text
COL_TP          = #b9b9b3b4      // Bright yellow for TP text
COL_HEADER      = color.white
BG_DARK         = color.black

// We'll define separate colors for Stop Loss text vs. background
COL_STOP_TEXT   = color.white
COL_STOP_BG     = color.new(#FF0000, 0)      // Red background

// Create table with 9 columns (Side, Entry, TP1, TP2, TP3, TP4, TP5, StopLoss, Timer)
var table tradeTable = table.new(position.bottom_right, 2, 9, border_color=color.new(color.white, 0))

// On the first bar, set headers
if barstate.isfirst
    table.cell(tradeTable, 0, 0, "Side",     text_color=COL_HEADER, bgcolor=BG_DARK)
    table.cell(tradeTable, 0, 1, "Entry",    text_color=COL_HEADER, bgcolor=BG_DARK)
    table.cell(tradeTable, 0, 2, "TP1",      text_color=COL_HEADER, bgcolor=BG_DARK)
    table.cell(tradeTable, 0, 3, "TP2",      text_color=COL_HEADER, bgcolor=BG_DARK)
    table.cell(tradeTable, 0, 4, "TP3",      text_color=COL_HEADER, bgcolor=BG_DARK)
    table.cell(tradeTable, 0, 5, "TP4",      text_color=COL_HEADER, bgcolor=BG_DARK)
    table.cell(tradeTable, 0, 6, "TP5",      text_color=COL_HEADER, bgcolor=BG_DARK)
    table.cell(tradeTable, 0, 7, "StopLoss", text_color=COL_HEADER, bgcolor=BG_DARK)
    table.cell(tradeTable, 0, 8, "Timer",    text_color=COL_HEADER, bgcolor=BG_DARK)

// Function to update row 1 of the table with dynamic cell coloring for TP levels
f_updateTable(_side, _entry, _stop, _tpArray) =>
    // Set background color for Side cell based on trade type
    sideColor = _side == "BUY NOW" ? color.new(#006400, 0) : _side == "SELL NOW" ? color.new(#8B0000, 0) : BG_DARK
    // Column 0: Side
    table.cell(tradeTable, 1, 0, _side, text_color=COL_HEADER, bgcolor=sideColor)
    // Column 1: Entry (white text, green background)
    table.cell(tradeTable, 1, 1, str.tostring(_entry, format.mintick), text_color=COL_ENTRY, bgcolor=color.green)
    // Columns 2..6: TP cells with conditional background color
    for i = 0 to 4
        tpValue = array.get(_tpArray, i)
        tpBgColor = BG_DARK
        // For BUY trades, mark green if the current price has reached or exceeded the TP level
        if _side == "BUY NOW" and close >= tpValue
            tpBgColor := color.new(color.green, 0)
        // For SELL trades, mark green if the current price has fallen to or below the TP level
        else if _side == "SELL NOW" and close <= tpValue
            tpBgColor := color.new(color.green, 0)
        table.cell(tradeTable, 1, i + 2, str.tostring(tpValue, format.mintick), text_color=COL_TP, bgcolor=tpBgColor)
    // Column 7: Stop Loss (white text on red background)
    table.cell(tradeTable, 1, 7, str.tostring(_stop, format.mintick), text_color=COL_STOP_TEXT, bgcolor=COL_STOP_BG)

// --- Variables to track entry details --- //
var float entryPrice = na
var int   entryTime  = na  // Time (in ms) when the entry trigger started
var float progress = na
var float[] buyTps = array.new_float(5, 0.0)  // Declare buyTps array here

// --- Trade Trigger and Table Population --- //
if buySignal and isAnySession
    entryPrice := close
    entryTime  := time  // Set entry time (in ms)
    for i = 0 to 4
        array.set(buyTps, i, close + atr * tpMultipliers.get(i))
    // Update table with "BUY NOW" for long entries
    f_updateTable("BUY NOW", close, longStopLoss, buyTps)

if sellSignal and isAnySession
    entryPrice := close
    entryTime  := time  // Set entry time (in ms)
    var float[] sellTps = array.new_float(5, 0.0)
    for i = 0 to 4
        array.set(sellTps, i, close - atr * tpMultipliers.get(i))
    // Update table with "SELL NOW" for short entries
    f_updateTable("SELL NOW", close, shortStopLoss, sellTps)

// --- Timer Update --- //
// If an entry trigger exists, calculate elapsed minutes and update the Timer cell.
if not na(entryTime)
    timerMin = math.round((time - entryTime) / 60000)
    table.cell(tradeTable, 1, 8, str.tostring(timerMin) + " min", text_color=COL_HEADER, bgcolor=BG_DARK)

// --- Progress Bar --- //
var float progressBar = na
if not na(entryPrice)
    progress := (close - entryPrice) / entryPrice * 100
    progressBar := progress > 100 ? 100 : progress < 0 ? 0 : progress

// Plot the progress bar globally
plot(progressBar, title="Progress Bar", color=color.green, linewidth=2, style=plot.style_histogram)