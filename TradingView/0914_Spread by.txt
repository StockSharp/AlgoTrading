//@version=4
// by gorx1 & midtownsk8rguy
study('Spread by', overlay=true, max_bars_back=5000, resolution='', resolution_gaps=true)


pine_harmonic_mean(x, y) =>
    sum = 0.0
    for i = 0 to y - 1
        sum := sum + 1/x[i]
    y / sum

pine_geometric_mean(x, y) =>
    prod = 1.0
    for i = 0 to y - 1
        prod := prod * x[i]
    pow(prod, 1 / y)

pine_quadratic_mean(x, y) =>
    sum = 0.0
    for i = 0 to y - 1
        sum := sum + pow(x[i], 2)
    sqrt(sum / y)

pine_gstdev(x, y) =>
    geometric_mean = pine_geometric_mean(x, y)
    sum = 0.0
    for i = 0 to y - 1
        sum := sum + pow(log(x[i] / geometric_mean), 2)
    exp(sqrt(sum / y))

pine_hstdev(x, y) =>
    harmonic_mean  = pine_harmonic_mean(x, y)
    sum = 0.0
    for i = 0 to y - 1
        sum := sum + pow(pow(x[i], -1) - pow(harmonic_mean, -1), 2)
    pow(sqrt(sum / y), -1)

pine_avgdev(x, y, b) =>
    sum = 0.0
    for i = 0 to y - 1
        sum := sum + abs(x[i] - b)
    sum / y

pine_stdev(x, y, b) =>
    sum = 0.0
    for i = 0 to y - 1
        sum := sum + pow(x[i] - b, 2)
    sqrt(sum / y)

pine_mdev(x, y, b) =>
    pool = array.new_float()
    for i = 0 to y - 1
        array.push(pool, abs(x[i] - b))
    array.median(pool)

mode   = input('Median'           , 'Basis', options=['Mean', 'Median', 'Trimean', 'Midhinge', 'Midrange', 'RMS', 'Geometric mean', 'Harmonic mean'])
type   = input('Average Deviation',          options=['Standard Deviation', 'Average Deviation', 'Median Deviation', 'Midpoint', 'GStDev', 'HStDev'])
source = input(close,                  inline='1')
log    = input(false, 'Log transform', inline='1')
length = input(100  ,                  inline='2')
ad     = input(false, 'All data'     , inline='2')


src = log ? log(source)   : source
len = ad  ? bar_index + 1 : length

min   = lowest                 (src, len    )
p25   = percentile_nearest_rank(src, len, 25)
p50   = percentile_nearest_rank(src, len, 50)
p75   = percentile_nearest_rank(src, len, 75)
max   = highest                (src, len    )
range = max - min

basis = if mode == 'Mean'
    sma                (src, len)
else    if mode == 'Median'
    p50
else    if mode == 'Harmonic mean'
    pine_harmonic_mean (src, len)
else    if mode == 'Geometric mean'
    pine_geometric_mean(src, len)
else    if mode == 'Trimean'
    (p25 + p50 * 2 + p75) / 4
else    if mode == 'Midhinge'
    (p25 + p75) / 2
else    if mode == 'Midrange'
    (min + max) / 2
else    if mode == 'RMS'
    pine_quadratic_mean(src, len)

dev = if type == 'Standard Deviation'
    pine_stdev (src, len, basis)
else  if type == 'Average Deviation'
    pine_avgdev(src, len, basis)
else  if type == 'Median Deviation'
    pine_mdev(src, len, basis)
else  if type == 'Midpoint'
    range / 4
else  if type == 'GStDev'
    pine_gstdev(src, len)
else  if type == 'HStDev'
    pine_hstdev(src, len)

lower_dev1 = if type == 'GStDev'
    basis / dev
else         if type == 'HStDev'
    pow(pow(basis, -1) - pow(dev, -1), -1)
else
    basis - dev

upper_dev1 = if type == 'GStDev'
    basis * dev
else         if type == 'HStDev'
    pow(pow(basis, -1) + pow(dev, -1), -1)
else
    basis + dev

lower_dev2 = if type == 'GStDev'
    basis / dev / dev
else         if type == 'HStDev'
    pow(pow(basis, -1) - pow(dev, -1) - pow(dev, -1), -1)
else         if type == 'Midpoint'
    basis - dev
else
    basis - dev * 2

upper_dev2 = if type == 'GStDev'
    basis * dev * dev
else         if type == 'HStDev'
    pow(pow(basis, -1) + pow(dev, -1) + pow(dev, -1), -1)
else         if type == 'Midpoint'
    basis + dev
else
    basis + dev * 2

lower_dev3 = if type == 'GStDev'
    basis / dev / dev / dev
else         if type == 'HStDev'
    pow(pow(basis, -1) - pow(dev, -1) - pow(dev, -1) - pow(dev, -1), -1)
else         if type == 'Midpoint'
    basis - dev
else
    basis - dev * 3

upper_dev3 = if type == 'GStDev'
    basis * dev * dev * dev
else         if type == 'HStDev'
    pow(pow(basis, -1) + pow(dev, -1) + pow(dev, -1) + pow(dev, -1), -1)
else         if type == 'Midpoint'
    basis + dev
else
    basis + dev * 3


plot(log ? exp(lower_dev3) : lower_dev3, 'Lower dev 3', color.gray )
plot(log ? exp(lower_dev2) : lower_dev2, 'Lower dev 2'             )
plot(log ? exp(lower_dev1) : lower_dev1, 'Lower dev 1'             )
plot(log ? exp(basis     ) : basis     , 'Basis'     , color.purple)
plot(log ? exp(upper_dev1) : upper_dev1, 'Upper dev 1'             )
plot(log ? exp(upper_dev2) : upper_dev2, 'Upper dev 2'             )
plot(log ? exp(upper_dev3) : upper_dev3, 'Upper dev 3', color.gray )