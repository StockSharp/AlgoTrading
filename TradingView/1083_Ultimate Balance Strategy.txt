// Â© Julien_Eche

//@version=5
strategy("Ultimate Balance Strategy", overlay=false, default_qty_type=strategy.percent_of_equity, default_qty_value=10)

// Indicator Weights
weightROC = input.float(2, "Rate of Change (ROC) Weight", group="Weightings")
weightRSI = input.float(0.5, "Relative Strength Index (RSI) Weight", group="Weightings")
weightCCI = input.float(2, "Commodity Channel Index (CCI) Weight", group="Weightings")
weightWilliamsR = input.float(0.5, "Williams %R Weight", group="Weightings")
weightADX = input.float(0.5, "Average Directional Index (ADX) Weight", group="Weightings")

enableShort = input(false, "Enable Short Positions")

// Overbought/Oversold Levels
obLevel = input.float(0.75, "Overbought Level")
osLevel = input.float(0.25, "Oversold Level")

// MA Type
maType = input.string("SMA", "MA Type", options=["SMA", "EMA", "WMA", "DEMA"], group="MA")
maLength = input.int(9, "MA Length", minval=1)

// Calculating the indicators
rocValue = ta.change(close, 20)
rsiValue = ta.rsi(close, 14)
cciValue = (close - ta.sma(close, 20)) / (0.015 * ta.dev(close, 20))
williamsRValue = -100 * (ta.highest(high, 14) - close) / (ta.highest(high, 14) - ta.lowest(low, 14))

dirmov(len) =>
    up = ta.change(high)
    down = -ta.change(low)
    plusDM = na(up) ? na : (up > down and up > 0 ? up : 0)
    minusDM = na(down) ? na : (down > up and down > 0 ? down : 0)
    truerange = ta.rma(ta.tr, len)
    plus = fixnan(100 * ta.rma(plusDM, len) / truerange)
    minus = fixnan(100 * ta.rma(minusDM, len) / truerange)
    [plus, minus]

adx(dilen, adxlen) =>
    [plus, minus] = dirmov(dilen)
    sum = plus + minus
    adx = 100 * ta.rma(math.abs(plus - minus) / (sum == 0 ? 1 : sum), adxlen)

adxValue = adx(14, 14)

// Normalizing the values
normalize(value, min, max) =>
    (value - min) / (max - min)

normalizedROC = normalize(rocValue, ta.lowest(rocValue, 20), ta.highest(rocValue, 20))
normalizedRSI = normalize(rsiValue, 0, 100)
normalizedCCI = normalize(cciValue, ta.lowest(cciValue, 20), ta.highest(cciValue, 20))
normalizedWilliamsR = normalize(williamsRValue, ta.lowest(williamsRValue, 14), ta.highest(williamsRValue, 14))
normalizedADX = normalize(adxValue, 0, 50)

// Calculating the combined oscillator line
oscillatorLine = (normalizedROC * weightROC + normalizedRSI * weightRSI + normalizedCCI * weightCCI + normalizedWilliamsR * weightWilliamsR + normalizedADX * weightADX) / (weightROC + weightRSI + weightCCI + weightWilliamsR + weightADX)

// Moving Average
ma = ta.sma(oscillatorLine, maLength)





// Buy and sell conditions
buySignal = ta.crossover(ma, osLevel)
sellSignal = ta.crossunder(ma, obLevel)

// Enter long position
if buySignal
    strategy.entry("Buy", strategy.long)

// Exit long position
if sellSignal
    strategy.close("Buy")

// Enter short position if enabled
if enableShort and sellSignal
    strategy.entry("Sell", strategy.short)

// Exit short position if enabled
if enableShort and buySignal
    strategy.close("Sell")







//  Plotting
plot(oscillatorLine, title="Ultimate Balance Oscillator", color=color.rgb(41, 98, 255))
plot(ma, title="Moving Average", color=color.orange)

hline(obLevel, "Overbought", color=color.gray, linestyle=hline.style_dotted)
hline(osLevel, "Oversold", color=color.gray, linestyle=hline.style_dotted)