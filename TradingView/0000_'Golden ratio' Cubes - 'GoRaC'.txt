// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © fikira
//@version=4
study("'Golden ratio' Cubes", shorttitle="GoRaC", overlay=true, max_lines_count=500, max_labels_count=500)

extN = "extend none", extL = "extend left", extR = "extend right", extB = "extend both"

// inputs

i_hi    = input("high"                     , title = ""          , options=["high", "close/open"], inline="1"                    , group="Highest - Lowest - Resolution")
i_lo    = input("low"                      , title = ""          , options=["low" , "open/close"], inline="1"                    , group="Highest - Lowest - Resolution")
i_res   = input(""                         , title=""            , type=input.resolution         , inline="1"                    , group="Highest - Lowest - Resolution")
i_mir   = input(false                      , title="Mirror"                                      , inline="2"                                                           )
i_rev   = input(false                      , title="Reverse"                                     , inline="2"                                                           )

i_      = input(1     , minval=0           , title=""                                                                            , group="Bars back (0= Repaint)"       )

i_start = input( 0    , minval=0, maxval= 6, title="Start loop"  , tooltip="Sets the begin of the spiral (affects inner regions)", group="Golden Ratio Squares"         )
i_end   = input(12    , minval=1, maxval=16, title="End loop"    , tooltip="Sets the end of the spiral (affects outer regions)"  , group="Golden Ratio Squares"         )
i_extd1_= input(extN  ,                      title="extend lines", options=[extN, extL, extR, extB]                              , group="Golden Ratio Squares"         )

i_char  = input("⌾"   ,                      title=""            , options=[".","*","⊚","⌾","Ⓞ"]                                , group="Spiral char"                  )

c_top   = input(color.new(color.red   , 30), title="  "                                                                          , group="Line Colours"                 )
c_lef   = input(color.new(color.blue  , 30), title="    "                                        , inline="RL"                   , group="Line Colours"                 )
c_rig   = input(color.new(color.yellow, 30), title="  "                                          , inline="RL"                   , group="Line Colours"                 )
c_bot   = input(color.new(color.lime  , 30), title="  "                                                                          , group="Line Colours"                 )

i_extd1 = i_extd1_ == extN ? extend.none : i_extd1_ == extL ? extend.left  : i_extd1_ == extR ? extend.right : extend.both


// functions

f_timenow(x) => timenow + (time - time[1]) * x

a_angle = array.new_float() // https://www.mathcelebrity.com/anglebasic.php?entry=78&pl=cos
array.push(a_angle, 1.     ), array.push(a_angle, 0.99863), array.push(a_angle, 0.99452), array.push(a_angle, 0.98769)
array.push(a_angle, 0.97815), array.push(a_angle, 0.966  ), array.push(a_angle, 0.95106), array.push(a_angle, 0.93358)
array.push(a_angle, 0.91355), array.push(a_angle, 0.891  ), array.push(a_angle, 0.866  ), array.push(a_angle, 0.83867)
array.push(a_angle, 0.80902), array.push(a_angle, 0.77715), array.push(a_angle, 0.74314), array.push(a_angle, 0.70711)
array.push(a_angle, 0.66913), array.push(a_angle, 0.62932), array.push(a_angle, 0.58779), array.push(a_angle, 0.54464)
array.push(a_angle, 0.5    ), array.push(a_angle, 0.454  ), array.push(a_angle, 0.40674), array.push(a_angle, 0.35837)
array.push(a_angle, 0.30902), array.push(a_angle, 0.25882), array.push(a_angle, 0.20791), array.push(a_angle, 0.15643)
array.push(a_angle, 0.10453), array.push(a_angle, 0.05234), array.push(a_angle, 0.     )

f_label(x, _x, y, _y, j, dissX, dissY, color) =>
    for i = 0 to array.size(a_angle)-1
        label.new(x + _x*(round(dissX*array.get(a_angle, i) * j)), y + _y*(dissY* j*array.get(a_angle, array.size(a_angle)-1-i)), text=i_char, xloc=xloc.bar_time, style=label.style_none, textcolor=color, size=size.tiny)

f_line(x0, y0, x1, y1, x0_, y0_, x1_, y1_, color, ext) =>
    line.new(   x0 , y0 , x1 , y1,  xloc=xloc.bar_time, color=color, width=1, extend=ext)
    line.new(   x0_, y0_, x1_, y1_, xloc=xloc.bar_time, color=color, width=1, extend=extend.none)
    line.new(   x0_, y0_, x0 , y0 , xloc=xloc.bar_time, color=color, width=1, extend=extend.none)
    line.new(   x1_, y1_, x1 , y1 , xloc=xloc.bar_time, color=color, width=1, extend=extend.none)


// values

a_fib   = array.new_int(), n1 = 0, n2 = 1, n_ = 0
array.push(a_fib, n1), array.push(a_fib, n2)
for i   = 1 to i_end -1
    n_ := n1 + n2    , array.push(a_fib, n_)
    n1 := n2
    n2 := n_

hi      = i_hi == "high" ? high : max(open, close)
lo      = i_lo == "low"  ? low  : min(open, close)

highR   = security(syminfo.ticker, i_res, i_rev ? lo[i_] : hi[i_])
lowR    = security(syminfo.ticker, i_res, i_rev ? hi[i_] : lo[i_])
timeR   = security(syminfo.ticker, i_res,                time[i_])

dissY = 0.
dissX = 0

if barstate.islast
    dissY := highR-lowR
    dissX := timeR - timeR[1]

x0 = barstate.islast ? timeR : na, y0 = barstate.islast ? lowR  : na
x1 = barstate.islast ? timeR : na, y1 = barstate.islast ? lowR  : na
x0_= barstate.islast ? timeR : na, y0_= barstate.islast ? highR : na
x1_= barstate.islast ? timeR : na, y1_= barstate.islast ? highR : na

lbL= label.new(timeR, lowR , text="Ⓞ", xloc=xloc.bar_time, style=label.style_none, textcolor=color.white, size=size.tiny), label.delete(lbL[1])
lbH= label.new(timeR, highR, text="Ⓞ", xloc=xloc.bar_time, style=label.style_none, textcolor=color.white, size=size.tiny), label.delete(lbH[1])

i0 = array.get(a_fib, 0), i1 = array.get(a_fib, 1)
i2 = array.get(a_fib, 2), i3 = array.get(a_fib, 3), i4 = array.get(a_fib, 4)

for i = i_start to i_end -4 by 4

    i0 := array.get(a_fib, i)  , i1 := array.get(a_fib, i+1)
    i2 := array.get(a_fib, i+2), i3 := array.get(a_fib, i+3), i4 := array.get(a_fib, i+4)

    if i_mir == false
        x0_ := x1_                , x0  := x1                         , x1_ := x1_ + dissX * i1, x1  := x1  + dissX * i1
        y0_ := y0  + dissY * i1   , y0  := y0                         , y1_ := y1  + dissY * i1, y1  := y1
        f_line(x0, y0, x1, y1, x0_, y0_, x1_, y1_, c_bot, i_extd1    ), f_label(x0 , 1, y0_, -1, i1, dissX, dissY, c_bot)

        x0_ := x1_ - dissX * i2   , x0  := x1  - dissX * i2           , x1_ := x1_             , x1  := x1
        y0  := y0_                , y0_ := y0_ + dissY * i2           , y1  := y1_             , y1_ := y1_ + dissY * i2
        f_line(x0, y0, x1, y1, x0_, y0_, x1_, y1_, c_rig, i_extd1    ), f_label(x0 , 1, y0 ,  1, i2, dissX, dissY, c_rig)

        x1_ := x0_                , x1  := x0                         , x0_ := x0_ - dissX * i3, x0  := x0  - dissX * i3
        y0_ := y0_                , y1_ := y0_                        , y1  := y0_ - dissY * i3, y0  := y0_ - dissY * i3
        f_line(x0, y0, x1, y1, x0_, y0_, x1_, y1_, c_top, extend.none), f_label(x1 ,-1, y0 ,  1, i3, dissX, dissY, c_top)

        x0_ := x0_                , x0  := x0                         , x1_ := x0_ + dissX * i4 , x1  := x0  + dissX * i4
        y0_ := y0                 , y0  := y0  - dissY * i4           , y1_ := y1  , y1  := y1  - dissY * i4
        f_line(x0, y0, x1, y1, x0_, y0_, x1_, y1_, c_lef, extend.none), f_label(x1 ,-1, y0_, -1, i4, dissX, dissY, c_lef)

    if i_mir == true

        x1_ := x0_                , x1  := x0                         , x0_ := x0_ - dissX * i1, x0  := x0  - dissX * i1
        y0_ := y0_                , y1_ := y0_                        , y1  := y0_ - dissY * i1, y0  := y0_ - dissY * i1
        f_line(x0, y0, x1, y1, x0_, y0_, x1_, y1_, c_top, extend.none), f_label(x1 ,-1, y0 ,  1, i1, dissX, dissY, c_top)

        x0_ := x0_                , x0  := x0                         , x1_ := x0_ + dissX * i2 , x1  := x0  + dissX * i2
        y0_ := y0                 , y0  := y0  - dissY * i2           , y1_ := y1               , y1  := y1  - dissY * i2
        f_line(x0, y0, x1, y1, x0_, y0_, x1_, y1_, c_lef, extend.none), f_label(x1 ,-1, y0_, -1, i2, dissX, dissY, c_lef)

        x0_ := x1_                , x0  := x1                         , x1_ := x1_ + dissX * i3, x1  := x1  + dissX * i3
        y0_ := y0  + dissY * i3   , y0  := y0                         , y1_ := y1  + dissY * i3, y1  := y1
        f_line(x0, y0, x1, y1, x0_, y0_, x1_, y1_, c_bot, i_extd1    ), f_label(x0 , 1, y0_, -1, i3, dissX, dissY, c_bot)

        x0_ := x1_ - dissX * i4   , x0  := x1  - dissX * i4           , x1_ := x1_             , x1  := x1
        y0  := y0_                , y0_ := y0_ + dissY * i4           , y1  := y1_             , y1_ := y1_ + dissY * i4
        f_line(x0, y0, x1, y1, x0_, y0_, x1_, y1_, c_rig, i_extd1    ), f_label(x0 , 1, y0 ,  1, i4, dissX, dissY, c_rig)

//         label.new(x0 + (round(dissX*array.get(a_angle, 7) * i1)), y0_ - (dissY* i1*array.get(a_angle, array.size(a_angle)-1-7)),
//          text="x", xloc=xloc.bar_time, style=label.style_none, textcolor=color.white, size=size.tiny)
//         // array.get(a_angle, 5), array.get(a_angle, 7)

//         line.new(   x0 , y0 , x1 , y1,  xloc=xloc.bar_time, color=c_bot, width=1)
//         line.new(   x0_, y0_, x1_, y1_, xloc=xloc.bar_time, color=c_bot, width=1)
//         line.new(   x0_, y0_, x0 , y0 , xloc=xloc.bar_time, color=c_bot, width=1)
//         line.new(   x1_, y1_, x1 , y1 , xloc=xloc.bar_time, color=c_bot, width=1)

//         label.new(x0 + (round(dissX*0.      * i1)), y0_- (dissY* i1*1.     ),    text="o",     xloc=xloc.bar_time, style=label.style_none, textcolor=c_bot, size=size.tiny)
//         label.new(x0 + (round(dissX*0.10453 * i1)), y0_- (dissY* i1*0.99452),    text="o",     xloc=xloc.bar_time, style=label.style_none, textcolor=c_bot, size=size.tiny)
//         label.new(x0 + (round(dissX*0.20791 * i1)), y0_- (dissY* i1*0.97815),    text="o",     xloc=xloc.bar_time, style=label.style_none, textcolor=c_bot, size=size.tiny)
//         label.new(x0 + (round(dissX*0.30902 * i1)), y0_- (dissY* i1*0.95106),    text="o",     xloc=xloc.bar_time, style=label.style_none, textcolor=c_bot, size=size.tiny)
//         label.new(x0 + (round(dissX*0.40674 * i1)), y0_- (dissY* i1*0.91355),    text="o",     xloc=xloc.bar_time, style=label.style_none, textcolor=c_bot, size=size.tiny)
//         label.new(x0 + (round(dissX*0.5     * i1)), y0_- (dissY* i1*0.866  ),    text="o",     xloc=xloc.bar_time, style=label.style_none, textcolor=c_bot, size=size.tiny)
//         label.new(x0 + (round(dissX*0.58779 * i1)), y0_- (dissY* i1*0.80902),    text="o",     xloc=xloc.bar_time, style=label.style_none, textcolor=c_bot, size=size.tiny)
//         label.new(x0 + (round(dissX*0.66913 * i1)), y0_- (dissY* i1*0.74314),    text="o",     xloc=xloc.bar_time, style=label.style_none, textcolor=c_bot, size=size.tiny)
//         label.new(x0 + (round(dissX*0.74314 * i1)), y0_- (dissY* i1*0.66913),    text="o",     xloc=xloc.bar_time, style=label.style_none, textcolor=c_bot, size=size.tiny)
//         label.new(x0 + (round(dissX*0.80902 * i1)), y0_- (dissY* i1*0.58779),    text="o",     xloc=xloc.bar_time, style=label.style_none, textcolor=c_bot, size=size.tiny)
//         label.new(x0 + (round(dissX*0.866   * i1)), y0_- (dissY* i1*0.5    ),    text="o",     xloc=xloc.bar_time, style=label.style_none, textcolor=c_bot, size=size.tiny)
//         label.new(x0 + (round(dissX*0.91355 * i1)), y0_- (dissY* i1*0.40674),    text="o",     xloc=xloc.bar_time, style=label.style_none, textcolor=c_bot, size=size.tiny)
//         label.new(x0 + (round(dissX*0.95106 * i1)), y0_- (dissY* i1*0.30902),    text="o",     xloc=xloc.bar_time, style=label.style_none, textcolor=c_bot, size=size.tiny)
//         label.new(x0 + (round(dissX*0.97815 * i1)), y0_- (dissY* i1*0.20791),    text="o",     xloc=xloc.bar_time, style=label.style_none, textcolor=c_bot, size=size.tiny)
//         label.new(x0 + (round(dissX*0.99452 * i1)), y0_- (dissY* i1*0.10453),    text="o",     xloc=xloc.bar_time, style=label.style_none, textcolor=c_bot, size=size.tiny)
//         label.new(x0 + (round(dissX*1.      * i1)), y0_- (dissY* i1*0.     ),    text="o",     xloc=xloc.bar_time, style=label.style_none, textcolor=c_bot, size=size.tiny)