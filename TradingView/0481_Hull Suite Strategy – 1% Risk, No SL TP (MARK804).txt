//@version=6
strategy("Hull Suite Strategy â€“ 1% Risk, No SL/TP (v6)", overlay=true, pyramiding=1,
     default_qty_type=strategy.percent_of_equity, default_qty_value=1)

// Inputs
string modeSwitch = input.string(defval="Hma", title="Hull Variation", options=["Hma", "Ehma", "Thma"])
int length = input.int(defval=55, title="Hull Length")
bool colorBars = input.bool(defval=false, title="Color candles by trend?")

// Hull definitions
f_hma(float src, int len) =>
    ta.wma(2 * ta.wma(src, len / 2) - ta.wma(src, len), math.round(math.sqrt(len)))

f_ehma(float src, int len) =>
    ta.ema(2 * ta.ema(src, len / 2) - ta.ema(src, len), math.round(math.sqrt(len)))

f_thma(float src, int len) =>
    ta.wma(3 * ta.wma(src, len / 3) - ta.wma(src, len / 2) - ta.wma(src, len), len)

// Calculate hull
float hull = switch modeSwitch
    "Hma"  => f_hma(close, length)
    "Ehma" => f_ehma(close, length)
    "Thma" => f_thma(close, math.round(length / 2))

bool isBull = hull > hull[2]
bool isBear = hull < hull[2]

// Plot hull line
plot(hull, color = isBull ? color.green : color.red, linewidth=2)

// Format candle colors outside of blocks
color barCol = colorBars ? (isBull ? color.new(color.green, 80) : (isBear ? color.new(color.red, 80) : na)) : na
barcolor(barCol)

// Trade entries/exits
if isBull
    strategy.close("Short")
    strategy.entry("Long", strategy.long)
else if isBear
    strategy.close("Long")
    strategy.entry("Short", strategy.short)