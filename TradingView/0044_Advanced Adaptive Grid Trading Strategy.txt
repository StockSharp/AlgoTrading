//@version=5
strategy("Advanced Adaptive Grid Trading Strategy", overlay=true, default_qty_type=strategy.percent_of_equity, default_qty_value=10, calc_on_every_tick=true) // Added calc_on_every_tick

// ==================== Input paraméterek ====================
// (Az összes bemeneti paraméter változatlan marad)
timeframeOption = input.string("Current", "Időtáv", options=["Current", "1m", "5m", "15m", "30m", "1h", "4h", "1D", "1W"])
baseGridSize = input.float(1.0, "Alap Grid Méret %", minval=0.1)
maxPositions = input.int(5, "Maximum Pozíciók Száma", minval=1)
useVolatilityGrid = input.bool(true, "Volatilitás Alapú Grid Méret")
atrLength = input.int(14, "ATR Periódus", minval=1)
atrMultiplier = input.float(1.5, "ATR Szorzó", minval=0.1)
rsiLength = input.int(14, "RSI Periódus", minval=1)
rsiOverbought = input.int(70, "RSI Túlvett Szint", minval=50, maxval=100)
rsiOversold = input.int(30, "RSI Túladott Szint", minval=0, maxval=50)
shortMALength = input.int(20, "Rövid MA Periódus", minval=1)
longMALength = input.int(50, "Hosszú MA Periódus", minval=1)
superLongMALength = input.int(200, "Szuper Hosszú MA Periódus", minval=1)
macdFastLength = input.int(12, "MACD Gyors Periódus", minval=1)
macdSlowLength = input.int(26, "MACD Lassú Periódus", minval=1)
macdSignalLength = input.int(9, "MACD Jelzés Periódus", minval=1)
stopLossPercent = input.float(2.0, "Stop Loss %", minval=0.1)
takeProfitPercent = input.float(3.0, "Take Profit %", minval=0.1)
useTrailingStop = input.bool(true, "Trailing Stop Használata")
trailingStopPercent = input.float(1.0, "Trailing Stop %", minval=0.1)
maxLossPerDay = input.float(5.0, "Maximális Napi Veszteség %", minval=0.1)
timeBasedExit = input.bool(true, "Időalapú Kilépés")
maxHoldingPeriod = input.int(48, "Maximális Tartási Idő (órák)", minval=1)
useRiskBasedPosition = input.bool(true, "Kockázatalapú Pozícióméret")
riskPerTrade = input.float(1.0, "Kockázat/Kereskedés %", minval=0.1, maxval=100)
maxLeverage = input.float(3.0, "Maximális Tőkeáttétel", minval=1.0)


// ==================== Időtáv kezelés ====================
timeframe = timeframeOption == "Current" ? timeframe.period : timeframeOption

// ==================== Indikátorok számítása ====================
atr = ta.atr(atrLength)
normalizedAtr = atr / close * 100
shortMA = ta.sma(close, shortMALength)
longMA = ta.sma(close, longMALength)
superLongMA = ta.sma(close, superLongMALength)
rsi = ta.rsi(close, rsiLength)
[macdLine, signalLine, histLine] = ta.macd(close, macdFastLength, macdSlowLength, macdSignalLength)
momentum = ta.mom(close, 10)

// ==================== Trend meghatározása ====================
shortTermBullish = shortMA > longMA
longTermBullish = longMA > superLongMA
macdBullish = macdLine > signalLine and macdLine > 0
rsiBullish = rsi < rsiOversold
momentumBullish = momentum > 0
shortTermBearish = shortMA < longMA
longTermBearish = longMA < superLongMA
macdBearish = macdLine < signalLine and macdLine < 0
rsiBearish = rsi > rsiOverbought
momentumBearish = momentum < 0
bullishStrength = (shortTermBullish ? 20 : 0) + (longTermBullish ? 30 : 0) + (macdBullish ? 20 : 0) + (rsiBullish ? 15 : 0) + (momentumBullish ? 15 : 0)
bearishStrength = (shortTermBearish ? 20 : 0) + (longTermBearish ? 30 : 0) + (macdBearish ? 20 : 0) + (rsiBearish ? 15 : 0) + (momentumBearish ? 15 : 0)
strongBullish = bullishStrength >= 70
moderateBullish = bullishStrength >= 40 and bullishStrength < 70
strongBearish = bearishStrength >= 70
moderateBearish = bearishStrength >= 40 and bearishStrength < 70
sideways = bullishStrength < 40 and bearishStrength < 40

// ==================== Grid rendszer ====================
gridSize = useVolatilityGrid ? math.max(baseGridSize, normalizedAtr * atrMultiplier) : baseGridSize
gridLevels = array.new_float(0)
currentPrice = close

if strongBearish or moderateBearish
    for i = 1 to maxPositions
        array.push(gridLevels, currentPrice * (1 + (gridSize/100 * i)))
else if strongBullish or moderateBullish
    for i = 1 to maxPositions
        array.push(gridLevels, currentPrice * (1 - (gridSize/100 * i)))
else
    for i = 1 to maxPositions/2
        array.push(gridLevels, currentPrice * (1 + (gridSize/100 * i)))
    for i = 1 to maxPositions/2
        array.push(gridLevels, currentPrice * (1 - (gridSize/100 * i)))

// ==================== Pozíció menedzsment változók ====================
var float lastEntryPrice = 0.0
var int positionCount = 0
var bool inTrade = false
var float trailingStopLevel = 0.0
var int entryTime = 0
var float dailyPnL = 0.0
var int lastResetDay = 0
var float positionSize = 0.0

if dayofmonth != lastResetDay
    dailyPnL := 0.0
    lastResetDay := dayofmonth

if barstate.isfirst
    positionSize := 100.0 / maxPositions

// ==================== Pozícióméret számítása ====================
if useRiskBasedPosition
    float riskAmount = strategy.equity * (riskPerTrade / 100)
    float potentialLoss = close * (stopLossPercent / 100)
    float calculatedSize = riskAmount / potentialLoss
    float maxSize = strategy.equity * maxLeverage
    positionSize := math.min(calculatedSize, maxSize)

// ==================== Stop Loss és Take Profit számítása ====================
var float stopLossPrice = na
var float takeProfitPrice = na
if strategy.position_size != 0
    stopLossPrice := strategy.position_avg_price * (strategy.position_size > 0 ? (1 - stopLossPercent/100) : (1 + stopLossPercent/100))
    takeProfitPrice := strategy.position_avg_price * (strategy.position_size > 0 ? (1 + takeProfitPercent/100) : (1 - takeProfitPercent/100))


// ==================== Kereskedési logika (Jelzések) ====================
bool enterLong = false
bool enterShort = false
bool closeLong = false
bool closeShort = false
string entryComment = ""
string exitComment = ""


if dailyPnL <= -(strategy.equity * (maxLossPerDay/100))
    closeLong := strategy.position_size > 0
    closeShort := strategy.position_size < 0
    exitComment := "Max Daily Loss Reached"
    inTrade := false
    positionCount := 0

else
    if not inTrade
        if (strongBearish or moderateBearish) and rsi > 60
            for i = 0 to array.size(gridLevels) - 1
                level = array.get(gridLevels, i)
                if close <= level
                    enterShort := true
                    entryComment := "Grid Short Entry"
                    lastEntryPrice := close
                    entryTime := time
                    trailingStopLevel := close * (1 + trailingStopPercent/100)
                    break

        else if (strongBullish or moderateBullish) and rsi < 40
            for i = 0 to array.size(gridLevels) - 1
                level = array.get(gridLevels, i)
                if close >= level
                    enterLong := true
                    entryComment := "Grid Long Entry"
                    lastEntryPrice := close
                    entryTime := time
                    trailingStopLevel := close * (1 - trailingStopPercent/100)
                    break

        else if sideways
            if rsi > 70 and strategy.position_size >= 0
                for i = 0 to array.size(gridLevels) - 1
                    level = array.get(gridLevels, i)
                    if close <= level
                        enterShort := true
                        entryComment := "Sideways Short Entry"
                        lastEntryPrice := close
                        entryTime := time
                        trailingStopLevel := close * (1 + trailingStopPercent/100)
                        break

            else if rsi < 30 and strategy.position_size <= 0
                for i = 0 to array.size(gridLevels) - 1
                    level = array.get(gridLevels, i)
                    if close >= level
                        enterLong := true
                        entryComment := "Sideways Long Entry"
                        lastEntryPrice := close
                        entryTime := time
                        trailingStopLevel := close * (1 - trailingStopPercent/100)
                        break

    else
        if (strategy.position_size > 0 and close < stopLossPrice) or (strategy.position_size < 0 and close > stopLossPrice)
            closeLong := strategy.position_size > 0
            closeShort := strategy.position_size < 0
            exitComment := "Stop Loss"

        else if (strategy.position_size > 0 and close > takeProfitPrice) or (strategy.position_size < 0 and close < takeProfitPrice)
            closeLong := strategy.position_size > 0
            closeShort := strategy.position_size < 0
            exitComment := "Take Profit"

        else if useTrailingStop and ((strategy.position_size > 0 and close < trailingStopLevel) or (strategy.position_size < 0 and close > trailingStopLevel))
            closeLong := strategy.position_size > 0
            closeShort := strategy.position_size < 0
            exitComment := "Trailing Stop"

        else if timeBasedExit and (time - entryTime) >= (maxHoldingPeriod * 60 * 60 * 1000)
            closeLong := strategy.position_size > 0
            closeShort := strategy.position_size < 0
            exitComment := "Time-Based Exit"

        else if (strategy.position_size > 0 and (strongBearish or moderateBearish)) or (strategy.position_size < 0 and (strongBullish or moderateBullish))
            closeLong := strategy.position_size > 0
            closeShort := strategy.position_size < 0
            exitComment := "Trend Reversal Exit"

        if useTrailingStop
            if strategy.position_size > 0
                trailingLevel = close * (1 - trailingStopPercent/100)
                if trailingLevel > trailingStopLevel or na(trailingStopLevel)
                    trailingStopLevel := trailingLevel
            else if strategy.position_size < 0
                trailingLevel = close * (1 + trailingStopPercent/100)
                if trailingLevel < trailingStopLevel or na(trailingStopLevel)
                    trailingStopLevel := trailingLevel


// ==================== Order Execution (Top Level) ====================

if enterLong
    strategy.entry("Long_" + str.tostring(positionCount), strategy.long, qty=positionSize, comment=entryComment)
    positionCount += 1
    inTrade := true

if enterShort
    strategy.entry("Short_" + str.tostring(positionCount), strategy.short, qty=positionSize, comment=entryComment)
    positionCount += 1
    inTrade := true

if closeLong or closeShort
    strategy.close_all(comment=exitComment)
    exitPrice = strategy.position_avg_price
    inTrade := false
    positionCount := math.max(0, positionCount - 1)
    dailyPnL := dailyPnL + (strategy.position_size > 0 ? (exitPrice - lastEntryPrice) : (lastEntryPrice - exitPrice)) * math.abs(strategy.position_size)
    lastEntryPrice := 0.0


// ====================